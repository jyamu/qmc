<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>config.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/docs/</path>
    <filename>a00646</filename>
    <member kind="define">
      <type>#define</type>
      <name>QMCPLUSPLUS_VERSION_MAJOR</name>
      <anchorfile>a00646.html</anchorfile>
      <anchor>a4328dd3b85f41be2f6da5387060cff34</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>QMCPLUSPLUS_VERSION_MINOR</name>
      <anchorfile>a00646.html</anchorfile>
      <anchor>ad78605b39690d0ed73f2b730b767a16f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>QMCPLUSPLUS_VERSION_PATCH</name>
      <anchorfile>a00646.html</anchorfile>
      <anchor>a6248b6bad25086337fc18f172141ebb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>QMCPLUSPLUS_BRANCH</name>
      <anchorfile>a00646.html</anchorfile>
      <anchor>a04c8319654e3edd672cd55000abbb03c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>QMCPLUSPLUS_LAST_CHANGED_DATE</name>
      <anchorfile>a00646.html</anchorfile>
      <anchor>a8125c0aef8358079168b56f14efd7c5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>QMC_BUILD_LEVEL</name>
      <anchorfile>a00646.html</anchorfile>
      <anchor>a8004cb7f6260956df39b6c64131216f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENABLE_OPENMP</name>
      <anchorfile>a00646.html</anchorfile>
      <anchor>afbd965123c7137962cdc7571c17cbe20</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_LIBHDF5</name>
      <anchorfile>a00646.html</anchorfile>
      <anchor>a0d73f5cf130e137b29503da8332ddeb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_LIBBOOST</name>
      <anchorfile>a00646.html</anchorfile>
      <anchor>ab2a4c0ae60c4447771321c68b35ac965</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_LIBXML2</name>
      <anchorfile>a00646.html</anchorfile>
      <anchor>a8287c32e7f48ebf6054ca3ae09b56646</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_LIBFFTW</name>
      <anchorfile>a00646.html</anchorfile>
      <anchor>af4ebc837652563d85b10d98536ca1318</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>APP_PRECISION</name>
      <anchorfile>a00646.html</anchorfile>
      <anchor>a3a5b702d3ce3480dda180a64295f0af5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OHMMS_DIM</name>
      <anchorfile>a00646.html</anchorfile>
      <anchor>a8a82775773a2c0bd6f181579e7a8797e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OHMMS_INDEXTYPE</name>
      <anchorfile>a00646.html</anchorfile>
      <anchor>a6770ec35b934b26f6d83c1bea960f451</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OHMMS_PRECISION</name>
      <anchorfile>a00646.html</anchorfile>
      <anchor>a6c699f0614fe0f99e2a43a56b05af25b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OHMMS_ORTHO</name>
      <anchorfile>a00646.html</anchorfile>
      <anchor>aead2c3c0331dcbccc807004b7952d6dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>QMC_FASTWALKER</name>
      <anchorfile>a00646.html</anchorfile>
      <anchor>ad2efe8dda69f65fa68645084d628f61e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_STD_ROUND</name>
      <anchorfile>a00646.html</anchorfile>
      <anchor>af4e8b025157da88f9c4ea2454a92c5ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_FLOOR</name>
      <anchorfile>a00646.html</anchorfile>
      <anchor>ab452be2c7cc8652644e7782380300b8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_EINSPLINE</name>
      <anchorfile>a00646.html</anchorfile>
      <anchor>adbd15beacafff3b9e39ca70b6ff77314</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_POSIX_MEMALIGN</name>
      <anchorfile>a00646.html</anchorfile>
      <anchor>af67975c34ba72163273efe7cfb3afa0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_POW</name>
      <anchorfile>a00646.html</anchorfile>
      <anchor>a9d17c48138de7e59ce0ef00b33ed05cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_SQRT</name>
      <anchorfile>a00646.html</anchorfile>
      <anchor>a04f983617a16d562f9a6df2e34a6a41c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_DLFCN_H</name>
      <anchorfile>a00646.html</anchorfile>
      <anchor>a0ee1617ff2f6885ef384a3dd46f9b9d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_INTTYPES_H</name>
      <anchorfile>a00646.html</anchorfile>
      <anchor>ab90a030ff2790ebdc176660a6dd2a478</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_MEMORY_H</name>
      <anchorfile>a00646.html</anchorfile>
      <anchor>ae93a78f9d076138897af441c9f86f285</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_PMMINTRIN_H</name>
      <anchorfile>a00646.html</anchorfile>
      <anchor>af2d0e1515c632f7942db644d382060a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_EMMINTRIN_H</name>
      <anchorfile>a00646.html</anchorfile>
      <anchor>ae2eda1c73cfa5746a790ca68a6be0f7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_SYS_STAT_H</name>
      <anchorfile>a00646.html</anchorfile>
      <anchor>ace156430ba007d19b4348a950d0c692b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_SYS_TIME_H</name>
      <anchorfile>a00646.html</anchorfile>
      <anchor>a2aae46056558e9d6fef6380f9678ffe3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_SYS_TYPES_H</name>
      <anchorfile>a00646.html</anchorfile>
      <anchor>a69dc70bea5d1f8bd2be9740e974fa666</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_UNISTD_H</name>
      <anchorfile>a00646.html</anchorfile>
      <anchor>a219b06937831d0da94d801ab13987639</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_SSE</name>
      <anchorfile>a00646.html</anchorfile>
      <anchor>ae1009c604232a499433fddbc60782888</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_SSE2</name>
      <anchorfile>a00646.html</anchorfile>
      <anchor>a2cde8953a3c0685181e8fdf51d3bdaab</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_SSE3</name>
      <anchorfile>a00646.html</anchorfile>
      <anchor>a853bbc5127966feb7750ccf5d8c89ac1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_SSSE3</name>
      <anchorfile>a00646.html</anchorfile>
      <anchor>ac2929e721cddf17243908ac8dd584618</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PREFETCH_AHEAD</name>
      <anchorfile>a00646.html</anchorfile>
      <anchor>aa396fed9283ab865d51f42ec00b724d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>USE_PREFETCH</name>
      <anchorfile>a00646.html</anchorfile>
      <anchor>a2cdc107014702ad2c4272187260a5366</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CUDA_PRECISION</name>
      <anchorfile>a00646.html</anchorfile>
      <anchor>a044b6cb947d6437eca54c133aca0a4f7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>index.doc</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/docs/</path>
    <filename>a00647</filename>
  </compound>
  <compound kind="file">
    <name>Configuration.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/</path>
    <filename>a00648</filename>
    <class kind="struct">qmcplusplus::PtclAttribTraits</class>
    <class kind="struct">qmcplusplus::QMCTraits</class>
    <class kind="struct">qmcplusplus::PtclOnLatticeTraits</class>
    <namespace>qmcplusplus</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_MEMORY</name>
      <anchorfile>a00648.html</anchorfile>
      <anchor>ac4929ceee6b5344a28a5914c4aacbced</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_PSIBUFFER</name>
      <anchorfile>a00648.html</anchorfile>
      <anchor>abb46a842c5e83605eeeee10e3dc4758a</anchor>
      <arglist>(who, msg)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>app_log</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a57ca8957112e5eaab7ebd56d45284fa7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>app_error</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a95c113f5646f3663298652fdb475ab0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>app_warning</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a113049131d0e5867dd5e216298f6f1db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>app_debug</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a02f55a51b540584fd68e678e13acf5c9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>accumulators.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Estimators/</path>
    <filename>a00649</filename>
    <class kind="struct">accumulator_set</class>
    <member kind="function">
      <type>ACC::value_type</type>
      <name>mean</name>
      <anchorfile>a00649.html</anchorfile>
      <anchor>ac9462ae0ee1dce523a0e61b82d00b5c0</anchor>
      <arglist>(const ACC &amp;ac)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00649.html</anchorfile>
      <anchor>ad0a4cdf861aba4730f51a877cbe91aaa</anchor>
      <arglist>(std::ostream &amp;os, accumulator_set&lt; T &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AlternateReleasedNodeEnergyEstimator.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Estimators/</path>
    <filename>a00650</filename>
    <class kind="class">qmcplusplus::AlternateReleasedNodeEnergyEstimator</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>BlockHistogram.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Estimators/</path>
    <filename>a00651</filename>
    <class kind="struct">BlockHistogram</class>
  </compound>
  <compound kind="file">
    <name>CollectablesEstimator.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Estimators/</path>
    <filename>a00652</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>CollectablesEstimator.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Estimators/</path>
    <filename>a00653</filename>
    <class kind="class">qmcplusplus::CollectablesEstimator</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ComboPolymerEstimator.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Estimators/</path>
    <filename>a00654</filename>
    <class kind="struct">qmcplusplus::ComboPolymerEstimator</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>CompositeEstimators.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Estimators/</path>
    <filename>a00655</filename>
    <class kind="struct">qmcplusplus::CompositeEstimatorBase</class>
    <class kind="struct">qmcplusplus::CompositeEstimatorSet</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>CSEnergyEstimator.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Estimators/</path>
    <filename>a00656</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>CSEnergyEstimator.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Estimators/</path>
    <filename>a00657</filename>
    <class kind="struct">qmcplusplus::CSEnergyEstimator</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>CSPolymerEstimator.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Estimators/</path>
    <filename>a00658</filename>
    <class kind="struct">qmcplusplus::CSPolymerEstimator</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DMCEnergyEstimator.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Estimators/</path>
    <filename>a00659</filename>
    <class kind="struct">qmcplusplus::DMCEnergyEstimator</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>EstimatorManager.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Estimators/</path>
    <filename>a00660</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="enumvalue">
      <type>@</type>
      <name>COLLECT</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a7cc2e4244ca368f68e5746185eda6c4aaab0d73b507a86099007b619c09617a5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MANAGE</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a7cc2e4244ca368f68e5746185eda6c4aa4c014166e310fa15c06117ae35dd952e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RECORD</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a7cc2e4244ca368f68e5746185eda6c4aaf9589b3c93e562a81e57588bb6662337</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>POSTIRECV</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a7cc2e4244ca368f68e5746185eda6c4aa851c64afc6a3a2bdef83d18a8fcbe459</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>APPEND</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a7cc2e4244ca368f68e5746185eda6c4aaf38784ef4b08f294d4a78f62181729a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EstimatorManager.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Estimators/</path>
    <filename>a00661</filename>
    <class kind="class">qmcplusplus::EstimatorManager</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>FWEstimator.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Estimators/</path>
    <filename>a00662</filename>
    <class kind="class">qmcplusplus::ForwardWalkingEstimator</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>HFDHE2PolymerEstimator.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Estimators/</path>
    <filename>a00663</filename>
    <class kind="struct">qmcplusplus::HFDHE2PolymerEstimator</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>HFPolymerEstimator.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Estimators/</path>
    <filename>a00664</filename>
    <class kind="struct">qmcplusplus::HFPolymerEstimator</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>LocalEnergyEstimator.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Estimators/</path>
    <filename>a00665</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>LocalEnergyEstimator.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Estimators/</path>
    <filename>a00666</filename>
    <class kind="class">qmcplusplus::LocalEnergyEstimator</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>LocalEnergyEstimatorHDF.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Estimators/</path>
    <filename>a00667</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>LocalEnergyEstimatorHDF.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Estimators/</path>
    <filename>a00668</filename>
    <class kind="class">qmcplusplus::LocalEnergyEstimatorHDF</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>LocalEnergyOnlyEstimator.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Estimators/</path>
    <filename>a00669</filename>
    <class kind="struct">qmcplusplus::LocalEnergyOnlyEstimator</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>MJPolymerEstimator.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Estimators/</path>
    <filename>a00670</filename>
    <class kind="struct">qmcplusplus::MJPolymerEstimator</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>MultipleEnergyEstimator.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Estimators/</path>
    <filename>a00671</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>MultipleEnergyEstimator.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Estimators/</path>
    <filename>a00672</filename>
    <class kind="struct">qmcplusplus::MultipleEnergyEstimator</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>PolarizationEstimator.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Estimators/</path>
    <filename>a00673</filename>
    <class kind="class">qmcplusplus::PolarizationEstimator</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>PolymerEstimator.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Estimators/</path>
    <filename>a00674</filename>
    <class kind="struct">qmcplusplus::PolymerEstimator</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ReleasedNodeEnergyEstimator.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Estimators/</path>
    <filename>a00675</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ReleasedNodeEnergyEstimator.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Estimators/</path>
    <filename>a00676</filename>
    <class kind="class">qmcplusplus::ReleasedNodeEnergyEstimator</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ReptileCorrelation.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Estimators/ReptationEstimators/</path>
    <filename>a00677</filename>
    <class kind="struct">qmcplusplus::ReptileCorrelationEstimator</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ReptileEstimator.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Estimators/ReptationEstimators/</path>
    <filename>a00678</filename>
    <class kind="struct">qmcplusplus::ReptileEstimator</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ReptileStatistics.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Estimators/ReptationEstimators/</path>
    <filename>a00679</filename>
    <class kind="struct">qmcplusplus::ReptileStatistics</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>RMCLocalEnergyEstimator.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Estimators/</path>
    <filename>a00680</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>RMCLocalEnergyEstimator.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Estimators/</path>
    <filename>a00681</filename>
    <class kind="class">qmcplusplus::RMCLocalEnergyEstimator</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>RQMCMultipleEstimator.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Estimators/</path>
    <filename>a00682</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>RQMCMultipleEstimator.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Estimators/</path>
    <filename>a00683</filename>
    <class kind="struct">qmcplusplus::RQMCEstimator</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ScalarEstimatorBase.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Estimators/</path>
    <filename>a00684</filename>
    <class kind="struct">qmcplusplus::ScalarEstimatorBase</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>VectorEstimatorImpl.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Estimators/</path>
    <filename>a00685</filename>
    <class kind="struct">qmcplusplus::VectorEstimatorImpl</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; VectorEstimatorImpl&lt; double &gt; &gt;</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>WFMCOnlyEstimator.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Estimators/</path>
    <filename>a00686</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>WFMCOnlyEstimator.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Estimators/</path>
    <filename>a00687</filename>
    <class kind="class">qmcplusplus::WFMCOnlyEstimator</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>CrystalLattice.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Lattice/</path>
    <filename>a00688</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a8cc07e2462127b7e207c05f9820b3bae</anchor>
      <arglist>(const CrystalLattice&lt; T, D, ORTHO &gt; &amp;lhs, const CrystalLattice&lt; T, D, ORTHO &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a3a57a1c3b4573dd57bc3f8ed13a7cda1</anchor>
      <arglist>(const CrystalLattice&lt; T, D, ORTHO &gt; &amp;lhs, const CrystalLattice&lt; T, D, ORTHO &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>orthorombic</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>acc875fd6756445a82c6dd91096b061b2</anchor>
      <arglist>(const CrystalLattice&lt; T, D, ORTHO &gt; &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CrystalLattice.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Lattice/</path>
    <filename>a00689</filename>
    <class kind="struct">qmcplusplus::PosUnit</class>
    <class kind="struct">qmcplusplus::CrystalLattice</class>
    <namespace>qmcplusplus</namespace>
    <member kind="enumvalue">
      <type>@</type>
      <name>SUPERCELL_OPEN</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>abed82baf7f470b522273a3e37c24c600ab20c21b022f09c215b5a293be2fa922d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SUPERCELL_WIRE</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>abed82baf7f470b522273a3e37c24c600adc5186824ef2021836cb4c65b233568f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SUPERCELL_SLAB</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>abed82baf7f470b522273a3e37c24c600a1529147524ecd8ce3c7321acb3c6aea3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SUPERCELL_BULK</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>abed82baf7f470b522273a3e37c24c600a453eaaf80dd209c0adb6d97a733b087e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LatticeAnalyzer.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Lattice/</path>
    <filename>a00690</filename>
    <class kind="struct">qmcplusplus::LatticeAnalyzer</class>
    <class kind="struct">qmcplusplus::LatticeAnalyzer&lt; T, 3 &gt;</class>
    <class kind="struct">qmcplusplus::LatticeAnalyzer&lt; T, 2 &gt;</class>
    <class kind="struct">qmcplusplus::LatticeAnalyzer&lt; T, 1 &gt;</class>
    <namespace>qmcplusplus</namespace>
    <member kind="enumvalue">
      <type>@</type>
      <name>PPPG</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da9d64c74cdb1fe6451d4940f1e88f8e7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PPPS</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da46f22b56441f100b6297a5cb609178df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PPPO</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da081369ecaa71e96c7123222c99e8a605</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PPPX</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da6f7d7645d571be66def5cc2cf9083fd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PPNG</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da01504cf332772219e6c289e972ec8ce1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PPNS</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da6b554c138d3d21a70a9cc0a040de4ab9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PPNO</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035dadc2cfcf6b5b3550594e7b4fc41813350</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PPNX</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035dabcb1616a9acb249a80d9eb1edb617dc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>found_shorter_base</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a3ae1043bd07b8a72ce2c21a7083edf2d</anchor>
      <arglist>(TinyVector&lt; TinyVector&lt; T, 3 &gt;, 3 &gt; &amp;rb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>find_reduced_basis</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a2dd2ae1e8f613131a22624d1ba45a77d</anchor>
      <arglist>(TinyVector&lt; TinyVector&lt; T, 3 &gt;, 3 &gt; &amp;rb)</arglist>
    </member>
  <compound kind="struct">
    <name>qmcplusplus::LatticeAnalyzer</name>
    <filename>a00008.html</filename>
    <anchor>a01479</anchor>
    <templarg></templarg>
    <templarg>D</templarg>
  </compound>
  <compound kind="file">
    <name>LatticeOperations.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Lattice/</path>
    <filename>a00691</filename>
    <class kind="struct">qmcplusplus::DotProduct</class>
    <class kind="struct">qmcplusplus::DotProduct&lt; TinyVector&lt; T1, D &gt;, Tensor&lt; T2, D &gt;, false &gt;</class>
    <class kind="struct">qmcplusplus::DotProduct&lt; TinyVector&lt; T1, 3 &gt;, Tensor&lt; T2, 3 &gt;, false &gt;</class>
    <class kind="struct">qmcplusplus::DotProduct&lt; TinyVector&lt; T1, D &gt;, Tensor&lt; T2, D &gt;, true &gt;</class>
    <class kind="struct">qmcplusplus::DotProduct&lt; TinyVector&lt; T1, 3 &gt;, Tensor&lt; T2, 3 &gt;, true &gt;</class>
    <class kind="struct">qmcplusplus::CartesianNorm2</class>
    <class kind="struct">qmcplusplus::CartesianNorm2&lt; TinyVector&lt; T1, D &gt;, Tensor&lt; T2, D &gt;, false &gt;</class>
    <class kind="struct">qmcplusplus::CartesianNorm2&lt; TinyVector&lt; T1, 3 &gt;, Tensor&lt; T2, 3 &gt;, false &gt;</class>
    <class kind="struct">qmcplusplus::CartesianNorm2&lt; TinyVector&lt; T1, D &gt;, Tensor&lt; T2, D &gt;, true &gt;</class>
    <class kind="struct">qmcplusplus::CartesianNorm2&lt; TinyVector&lt; T1, 3 &gt;, Tensor&lt; T2, 3 &gt;, true &gt;</class>
    <class kind="struct">qmcplusplus::MinimumImageBConds</class>
    <class kind="struct">qmcplusplus::CheckBoxConds</class>
    <class kind="struct">qmcplusplus::CheckBoxConds&lt; T, 1 &gt;</class>
    <class kind="struct">qmcplusplus::CheckBoxConds&lt; T, 2 &gt;</class>
    <class kind="struct">qmcplusplus::CheckBoxConds&lt; T, 3 &gt;</class>
    <namespace>qmcplusplus</namespace>
  <compound kind="struct">
    <name>qmcplusplus::DotProduct</name>
    <filename>a00008.html</filename>
    <anchor>a01453</anchor>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>ORTHO</templarg>
  <compound kind="struct">
    <name>qmcplusplus::CartesianNorm2</name>
    <filename>a00008.html</filename>
    <anchor>a01432</anchor>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>ORTHO</templarg>
  </compound>
  <compound kind="file">
    <name>MakeCrystalLattice.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Lattice/</path>
    <filename>a00692</filename>
    <class kind="struct">qmcplusplus::makelattice</class>
    <class kind="struct">qmcplusplus::makelattice&lt; CrystalLattice&lt; T, D &gt; &gt;</class>
    <class kind="struct">qmcplusplus::makelattice&lt; CrystalLattice&lt; T, 1 &gt; &gt;</class>
    <class kind="struct">qmcplusplus::makelattice&lt; CrystalLattice&lt; T, 2 &gt; &gt;</class>
    <class kind="struct">qmcplusplus::makelattice&lt; CrystalLattice&lt; T, 3 &gt; &gt;</class>
    <namespace>qmcplusplus</namespace>
  <compound kind="struct">
    <name>qmcplusplus::makelattice</name>
    <filename>a00008.html</filename>
    <anchor>a01486</anchor>
    <templarg></templarg>
  </compound>
  <compound kind="file">
    <name>MultiGridParticleLayout.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Lattice/</path>
    <filename>a00367</filename>
    <class kind="struct">MakeMultiGrid</class>
    <class kind="class">MultiGridParticleLayout</class>
    <class kind="struct">MakeMultiGrid</class>
    <class kind="struct">MakeMultiGrid&lt; T, 3 &gt;</class>
  <compound kind="struct">
    <name>MakeMultiGrid</name>
    <filename>a00367.html</filename>
    <anchor>a01487</anchor>
    <templarg></templarg>
    <templarg>D</templarg>
  <compound kind="struct">
    <name>MakeMultiGrid</name>
    <filename>a00367.html</filename>
    <anchor>a01487</anchor>
    <templarg></templarg>
    <templarg>D</templarg>
  </compound>
  <compound kind="file">
    <name>ParticleBConds.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Lattice/</path>
    <filename>a00693</filename>
    <class kind="struct">qmcplusplus::PowerOfN</class>
    <class kind="struct">qmcplusplus::PowerOfN&lt; N, 0 &gt;</class>
    <class kind="struct">qmcplusplus::DTD_BConds</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ParticleBConds2D.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Lattice/</path>
    <filename>a00694</filename>
    <class kind="struct">qmcplusplus::DTD_BConds&lt; T, 2, SUPERCELL_BULK &gt;</class>
    <class kind="struct">qmcplusplus::DTD_BConds&lt; T, 2, PPPS &gt;</class>
    <class kind="struct">qmcplusplus::DTD_BConds&lt; T, 2, PPPO &gt;</class>
    <class kind="struct">qmcplusplus::DTD_BConds&lt; T, 2, SUPERCELL_WIRE &gt;</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ParticleBConds3D.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Lattice/</path>
    <filename>a00695</filename>
    <class kind="struct">qmcplusplus::DTD_BConds&lt; T, 3, PPPO &gt;</class>
    <class kind="struct">qmcplusplus::DTD_BConds&lt; T, 3, PPPS &gt;</class>
    <class kind="struct">qmcplusplus::DTD_BConds&lt; T, 3, PPPG &gt;</class>
    <class kind="struct">qmcplusplus::DTD_BConds&lt; T, 3, PPNG &gt;</class>
    <class kind="struct">qmcplusplus::DTD_BConds&lt; T, 3, PPNO &gt;</class>
    <class kind="struct">qmcplusplus::DTD_BConds&lt; T, 3, PPNS &gt;</class>
    <class kind="struct">qmcplusplus::DTD_BConds&lt; T, 3, SUPERCELL_WIRE &gt;</class>
    <class kind="struct">qmcplusplus::DTD_BConds&lt; T, 3, PPPX &gt;</class>
    <class kind="struct">qmcplusplus::DTD_BConds&lt; T, 3, PPNX &gt;</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>Region.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Lattice/</path>
    <filename>a00696</filename>
    <class kind="struct">Region</class>
    <member kind="define">
      <type>#define</type>
      <name>OHMMS_REGION_H</name>
      <anchorfile>a00696.html</anchorfile>
      <anchor>a77a2cc925cb321987647dccf18e9851d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RegMultiGrid.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Lattice/</path>
    <filename>a00697</filename>
    <class kind="class">RegMultiGrid</class>
  </compound>
  <compound kind="file">
    <name>Uniform3DGridLayout.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Lattice/</path>
    <filename>a00698</filename>
  </compound>
  <compound kind="file">
    <name>Uniform3DGridLayout.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Lattice/</path>
    <filename>a00699</filename>
    <class kind="class">qmcplusplus::Uniform3DGridLayout</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>UniformCartesianGrid.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Lattice/</path>
    <filename>a00700</filename>
    <class kind="struct">qmcplusplus::UniformCartesianGrid</class>
    <class kind="class">qmcplusplus::UniformCartesianGrid&lt; T, 3 &gt;</class>
    <class kind="class">qmcplusplus::UniformCartesianGrid&lt; T, 2 &gt;</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>UniformGridConnection.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Lattice/</path>
    <filename>a00619</filename>
    <class kind="struct">UniformGridConnection</class>
    <class kind="struct">UniformGridConnection&lt; T, 3 &gt;</class>
  <compound kind="struct">
    <name>UniformGridConnection</name>
    <filename>a00619.html</filename>
    <anchor>a01539</anchor>
    <templarg></templarg>
    <templarg>D</templarg>
  </compound>
  <compound kind="file">
    <name>UniformGridLayout.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Lattice/</path>
    <filename>a00701</filename>
    <class kind="struct">qmcplusplus::LRCutoffEvaluator</class>
    <class kind="struct">qmcplusplus::UniformGridLayout</class>
    <class kind="struct">qmcplusplus::LRCutoffEvaluator</class>
    <class kind="struct">qmcplusplus::LRCutoffEvaluator&lt; T, 2, ORTHO &gt;</class>
    <class kind="struct">qmcplusplus::LRCutoffEvaluator&lt; T, 1, ORTHO &gt;</class>
    <namespace>qmcplusplus</namespace>
  <compound kind="struct">
    <name>qmcplusplus::LRCutoffEvaluator</name>
    <filename>a00008.html</filename>
    <anchor>a01485</anchor>
    <templarg></templarg>
    <templarg>D</templarg>
    <templarg>ORTHO</templarg>
  <compound kind="struct">
    <name>qmcplusplus::LRCutoffEvaluator</name>
    <filename>a00008.html</filename>
    <anchor>a01485</anchor>
    <templarg></templarg>
    <templarg>D</templarg>
    <templarg>ORTHO</templarg>
  </compound>
  <compound kind="file">
    <name>BoostMpiAdaptor.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Message/</path>
    <filename>a00702</filename>
    <member kind="define">
      <type>#define</type>
      <name>QMCPP_ALLREDUCE</name>
      <anchorfile>a00702.html</anchorfile>
      <anchor>a92b8f301e3a3cf8ddf537f01a8192043</anchor>
      <arglist>(CppType, MPIType)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>QMCPP_ALLREDUCE_C</name>
      <anchorfile>a00702.html</anchorfile>
      <anchor>a04984d56bf3a4336185e56eb218ab3e2</anchor>
      <arglist>(Container, MPIType)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>QMCPP_GATHER</name>
      <anchorfile>a00702.html</anchorfile>
      <anchor>ae79eb9f8137cd0107f06fc76db4e2629</anchor>
      <arglist>(CONTAINER, CppType, MPIType)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>QMCPP_SCATTER</name>
      <anchorfile>a00702.html</anchorfile>
      <anchor>a646c56ebf14d58fbf810ebb5ee92a993</anchor>
      <arglist>(CONTAINER, CppType, MPIType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QMCPP_ALLREDUCE</name>
      <anchorfile>a00702.html</anchorfile>
      <anchor>af0fd5470bad7cbfee4f15f07d3cb9fea</anchor>
      <arglist>(double, MPI_DOUBLE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QMCPP_ALLREDUCE</name>
      <anchorfile>a00702.html</anchorfile>
      <anchor>aa4976d412504eb9d5f0a9a02b220c687</anchor>
      <arglist>(int, MPI_INT)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QMCPP_ALLREDUCE_C</name>
      <anchorfile>a00702.html</anchorfile>
      <anchor>a7966cdf8de4bdb4144726e56fb5a841b</anchor>
      <arglist>(vector&lt; double &gt;, MPI_DOUBLE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QMCPP_ALLREDUCE_C</name>
      <anchorfile>a00702.html</anchorfile>
      <anchor>a11587cb24ca2a291796e6f06920b1b35</anchor>
      <arglist>(vector&lt; int &gt;, MPI_INT)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QMCPP_ALLREDUCE_C</name>
      <anchorfile>a00702.html</anchorfile>
      <anchor>a7c3e40f05b14d539188a267d99f2cebb</anchor>
      <arglist>(qmcplusplus::Matrix&lt; double &gt;, MPI_DOUBLE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QMCPP_GATHER</name>
      <anchorfile>a00702.html</anchorfile>
      <anchor>ada8060827a8efb8c44c877c8854525b8</anchor>
      <arglist>(vector, uint32_t, MPI_UNSIGNED)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QMCPP_GATHER</name>
      <anchorfile>a00702.html</anchorfile>
      <anchor>a3ad6c7f5f8ea16bb2db09d4e3c18397c</anchor>
      <arglist>(vector, double, MPI_DOUBLE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QMCPP_GATHER</name>
      <anchorfile>a00702.html</anchorfile>
      <anchor>ad68bcc5844263f21a096d2612d1103a0</anchor>
      <arglist>(vector, int, MPI_INT)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QMCPP_SCATTER</name>
      <anchorfile>a00702.html</anchorfile>
      <anchor>a94068fbeaac6a29653c0e9de0546d011</anchor>
      <arglist>(vector, uint32_t, MPI_UNSIGNED)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CommOperators.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Message/</path>
    <filename>a00703</filename>
  </compound>
  <compound kind="file">
    <name>CommOperatorsMPI.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Message/</path>
    <filename>a00704</filename>
    <member kind="function">
      <type>void</type>
      <name>gsum</name>
      <anchorfile>a00704.html</anchorfile>
      <anchor>ad15a0a15c4418b9ac6e613a727988f70</anchor>
      <arglist>(T &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gsum</name>
      <anchorfile>a00704.html</anchorfile>
      <anchor>a14408684cfb404d39d1c6dc588887513</anchor>
      <arglist>(int &amp;g, int gid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gsum</name>
      <anchorfile>a00704.html</anchorfile>
      <anchor>a824e4a4105838db06e2e5fa533c32df0</anchor>
      <arglist>(qmcplusplus::TinyVector&lt; double, N &gt; &amp;g, int gid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gsum</name>
      <anchorfile>a00704.html</anchorfile>
      <anchor>a4a1cd2dd76bb233cc617d11481790dd9</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;g, int gid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gsum</name>
      <anchorfile>a00704.html</anchorfile>
      <anchor>aca75ad2fe408ad2c9123e779341aff32</anchor>
      <arglist>(double &amp;g, int gid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gsum</name>
      <anchorfile>a00704.html</anchorfile>
      <anchor>ad3857f643b8a43f87b54b77c50a267f5</anchor>
      <arglist>(qmcplusplus::TinyVector&lt; int, N &gt; &amp;g, int gid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gsum</name>
      <anchorfile>a00704.html</anchorfile>
      <anchor>af49733ba65aca4f8f56a47162a8be810</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;g, int gid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gsum</name>
      <anchorfile>a00704.html</anchorfile>
      <anchor>a94ed33be687ff4aec5850f0a22d607f6</anchor>
      <arglist>(qmcplusplus::Matrix&lt; double &gt; &amp;g, int gid)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CommOperatorsSingle.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Message/</path>
    <filename>a00705</filename>
    <member kind="function">
      <type>void</type>
      <name>gsum</name>
      <anchorfile>a00705.html</anchorfile>
      <anchor>ad15a0a15c4418b9ac6e613a727988f70</anchor>
      <arglist>(T &amp;, int)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Communicate.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Message/</path>
    <filename>a00706</filename>
  </compound>
  <compound kind="file">
    <name>Communicate.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Message/</path>
    <filename>a00707</filename>
    <class kind="struct">CommunicatorTraits</class>
    <class kind="class">Communicate</class>
    <namespace>OHMMS</namespace>
    <member kind="define">
      <type>#define</type>
      <name>APP_ABORT</name>
      <anchorfile>a00707.html</anchorfile>
      <anchor>a71bb84df77299701763e8073823f7146</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="variable">
      <type>Communicate *</type>
      <name>Controller</name>
      <anchorfile>a01415.html</anchorfile>
      <anchor>aeb1cd9e7f41ccfdab6ed7745ae292ae3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CommunicateGroup.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Message/</path>
    <filename>a00708</filename>
  </compound>
  <compound kind="file">
    <name>CommunicateGroup.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Message/</path>
    <filename>a00709</filename>
    <class kind="struct">CommunicateGroup</class>
  </compound>
  <compound kind="file">
    <name>CommUtilities.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Message/</path>
    <filename>a00710</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>void</type>
      <name>cancel</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a1f983ba85370eb639cf19b6c6f3a55c8</anchor>
      <arglist>(CT &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bcast</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ac564fdaa3884f73411bc030787655181</anchor>
      <arglist>(T &amp;a, Communicate *comm)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MPIObjectBase.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Message/</path>
    <filename>a00711</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>MPIObjectBase.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Message/</path>
    <filename>a00712</filename>
    <class kind="class">qmcplusplus::MPIObjectBase</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>OpenMP.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Message/</path>
    <filename>a00713</filename>
    <member kind="typedef">
      <type>int</type>
      <name>omp_int_t</name>
      <anchorfile>a00713.html</anchorfile>
      <anchor>a24fb6b63da610c1362eebdb172cd4902</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>omp_int_t</type>
      <name>omp_get_thread_num</name>
      <anchorfile>a00713.html</anchorfile>
      <anchor>a0133261b8160f90db1d51d3bb342c731</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>omp_int_t</type>
      <name>omp_get_max_threads</name>
      <anchorfile>a00713.html</anchorfile>
      <anchor>a7b6a62d53453a25c8d60dd3d5938500c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>omp_int_t</type>
      <name>omp_get_num_threads</name>
      <anchorfile>a00713.html</anchorfile>
      <anchor>aaecb80bc65d4c736dc90ba6a3c802c2c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TagMaker.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Message/</path>
    <filename>a00714</filename>
    <class kind="class">TagMaker</class>
  </compound>
  <compound kind="file">
    <name>Blasf.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00715</filename>
    <member kind="function">
      <type>double</type>
      <name>ddot</name>
      <anchorfile>a00715.html</anchorfile>
      <anchor>a6e29cbf70013944be3b7c3e8f3f1c13d</anchor>
      <arglist>(const int &amp;n, const double *dx, const int &amp;incx, const double *dy, const int &amp;incy)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>sdot</name>
      <anchorfile>a00715.html</anchorfile>
      <anchor>a7a79b424f08bc4c2c4862650cc8b0871</anchor>
      <arglist>(const int &amp;n, const float *dx, const int &amp;incx, const float *dy, const int &amp;incy)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>zdot</name>
      <anchorfile>a00715.html</anchorfile>
      <anchor>a784a66631da756f50f5084b32c2f0a02</anchor>
      <arglist>(const int &amp;n, const complex&lt; double &gt; *dx, const int &amp;incx, const complex&lt; double &gt; *dy, const int &amp;incy)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>zdotu</name>
      <anchorfile>a00715.html</anchorfile>
      <anchor>a30f73a50c18b55302d586e249042b4ef</anchor>
      <arglist>(const int &amp;n, const complex&lt; double &gt; *dx, const int &amp;incx, const complex&lt; double &gt; *dy, const int &amp;incy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>daxpy</name>
      <anchorfile>a00715.html</anchorfile>
      <anchor>a4ff3541dace982de1fc437ea1da08eac</anchor>
      <arglist>(const int &amp;n, const double &amp;da, const double *dx, const int &amp;incx, double *dy, const int &amp;incy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saxpy</name>
      <anchorfile>a00715.html</anchorfile>
      <anchor>a9b70d56b2382dbb83a49351044a5b3e1</anchor>
      <arglist>(const int &amp;n, const float &amp;da, const float *dx, const int &amp;incx, float *dy, const int &amp;incy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zaxpy</name>
      <anchorfile>a00715.html</anchorfile>
      <anchor>a1e50eedd53b01d92da18981d534baa02</anchor>
      <arglist>(const int &amp;n, const complex&lt; double &gt; &amp;da, const complex&lt; double &gt; *dx, const int &amp;incx, complex&lt; double &gt; *dy, const int &amp;incy)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dnrm2</name>
      <anchorfile>a00715.html</anchorfile>
      <anchor>aacd0ca2670164a46124f91756e1d9921</anchor>
      <arglist>(const int &amp;n, const double *dx, const int &amp;incx)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>snrm2</name>
      <anchorfile>a00715.html</anchorfile>
      <anchor>afa24886594ec19e7e25ffbf1fc2dda35</anchor>
      <arglist>(const int &amp;n, const float *dx, const int &amp;incx)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dznrm2</name>
      <anchorfile>a00715.html</anchorfile>
      <anchor>a379c7e06a6b24fb00ebf8f284af4a54c</anchor>
      <arglist>(const int &amp;n, const complex&lt; double &gt; *dx, const int &amp;incx)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dscal</name>
      <anchorfile>a00715.html</anchorfile>
      <anchor>ab347a0b32e2cc95773e96282dbddaa20</anchor>
      <arglist>(const int &amp;n, const double &amp;, double *x, const int &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dsymv</name>
      <anchorfile>a00715.html</anchorfile>
      <anchor>a8af0c54eea17274cff093406dd987aa1</anchor>
      <arglist>(const char &amp;uplo, const int &amp;n, const double &amp;alpha, const double &amp;a, const int &amp;lda, const double *x, const int &amp;incx, const double &amp;beta, double *y, const int &amp;incy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ssymv</name>
      <anchorfile>a00715.html</anchorfile>
      <anchor>ac966ebeb490f536b9dfc2934e80038f9</anchor>
      <arglist>(const char &amp;uplo, const int &amp;n, const float &amp;alpha, const float &amp;a, const int &amp;lda, const float *x, const int &amp;incx, const float &amp;beta, float *y, const int &amp;incy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zsymv</name>
      <anchorfile>a00715.html</anchorfile>
      <anchor>ade2aba8b4faaaf1a7eb43d316b4b5d38</anchor>
      <arglist>(const char &amp;uplo, const int &amp;n, const complex&lt; double &gt; &amp;alpha, complex&lt; double &gt; *a, const int &amp;lda, complex&lt; double &gt; *x, const int &amp;incx, const complex&lt; double &gt; &amp;beta, complex&lt; double &gt; *y, const int &amp;incy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>csymv</name>
      <anchorfile>a00715.html</anchorfile>
      <anchor>a529fc7055f9d1e44a0621b071351ddc9</anchor>
      <arglist>(const char &amp;uplo, const int &amp;n, const complex&lt; float &gt; &amp;alpha, complex&lt; float &gt; *a, const int &amp;lda, complex&lt; float &gt; *x, const int &amp;incx, const complex&lt; float &gt; &amp;beta, complex&lt; float &gt; *y, const int &amp;incy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zcopy</name>
      <anchorfile>a00715.html</anchorfile>
      <anchor>a020395ba1736ff0f69d374f837c5d591</anchor>
      <arglist>(const int &amp;n, const complex&lt; double &gt; *x, const int &amp;incx, complex&lt; double &gt; *y, const int &amp;incy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dcopy</name>
      <anchorfile>a00715.html</anchorfile>
      <anchor>afaaf7ff46845b3d6410c76b5c74b09ef</anchor>
      <arglist>(const int &amp;n, const double *, const int &amp;, double *, const int &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dsyr2k</name>
      <anchorfile>a00715.html</anchorfile>
      <anchor>a6c544ebc3076157e810d7b1214e6f038</anchor>
      <arglist>(const char &amp;, const char &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const int &amp;, const double *, const int &amp;, const double &amp;, double *, const int &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dsymm</name>
      <anchorfile>a00715.html</anchorfile>
      <anchor>a278577994ffc9c63edba607748d3deb3</anchor>
      <arglist>(const char &amp;, const char &amp;, const int &amp;, const int &amp;, const double &amp;, const double *A, const int &amp;lda, const double *B, const int &amp;ldb, const double &amp;beta, double *C, const int &amp;ldc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dgemm</name>
      <anchorfile>a00715.html</anchorfile>
      <anchor>a22e5a6efa0876f92f1a8e9841c644228</anchor>
      <arglist>(const char &amp;, const char &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const int &amp;, const double *, const int &amp;, const double &amp;, double *, const int &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zgemm</name>
      <anchorfile>a00715.html</anchorfile>
      <anchor>abe38e65696419bc871981a0b1a7a9e03</anchor>
      <arglist>(const char &amp;, const char &amp;, const int &amp;, const int &amp;, const int &amp;, const complex&lt; double &gt; &amp;, const complex&lt; double &gt; *, const int &amp;, const complex&lt; double &gt; *, const int &amp;, const complex&lt; double &gt; &amp;, complex&lt; double &gt; *, const int &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dgemv</name>
      <anchorfile>a00715.html</anchorfile>
      <anchor>a9c1e2b2c04e541680a79e5a3b439e2c9</anchor>
      <arglist>(const char &amp;trans, const int &amp;nr, const int &amp;nc, const double &amp;alpha, const double *amat, const int &amp;lda, const double *bv, const int &amp;incx, const double &amp;beta, double *cv, const int &amp;incy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zgemv</name>
      <anchorfile>a00715.html</anchorfile>
      <anchor>a018fad23a0c2246e44580afef14951f3</anchor>
      <arglist>(const char &amp;trans, const int &amp;nr, const int &amp;nc, const complex&lt; double &gt; &amp;alpha, const complex&lt; double &gt; *amat, const int &amp;lda, const complex&lt; double &gt; *bv, const int &amp;incx, const complex&lt; double &gt; &amp;beta, complex&lt; double &gt; *cv, const int &amp;incy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dsyrk</name>
      <anchorfile>a00715.html</anchorfile>
      <anchor>a8783c5794d7d99ce564795172b11ec64</anchor>
      <arglist>(const char &amp;, const char &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const int &amp;, const double &amp;, double *, const int &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dgetrf</name>
      <anchorfile>a00715.html</anchorfile>
      <anchor>a7b378f728e9e73d7414d799a518bedbb</anchor>
      <arglist>(const int &amp;n, const int &amp;m, double *a, const int &amp;n0, int *piv, int &amp;st)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sgetrf</name>
      <anchorfile>a00715.html</anchorfile>
      <anchor>addf36a2e512576bbccda80f2f21dc814</anchor>
      <arglist>(const int &amp;n, const int &amp;m, float *a, const int &amp;n0, int *piv, int &amp;st)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zgetrf</name>
      <anchorfile>a00715.html</anchorfile>
      <anchor>a1a3fb9e4dca7d756a85417156303fe40</anchor>
      <arglist>(const int &amp;n, const int &amp;m, complex&lt; double &gt; *a, const int &amp;n0, int *piv, int &amp;st)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dgetri</name>
      <anchorfile>a00715.html</anchorfile>
      <anchor>a23e0f422451ec3596419b781d34ba021</anchor>
      <arglist>(const int &amp;n, double *a, const int &amp;n0, int *piv, double *work, const int &amp;, int &amp;st)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sgetri</name>
      <anchorfile>a00715.html</anchorfile>
      <anchor>a81c9c9b5e4c438849cf8790e7f9ccb09</anchor>
      <arglist>(const int &amp;n, float *a, const int &amp;n0, int *piv, float *work, const int &amp;, int &amp;st)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zgetri</name>
      <anchorfile>a00715.html</anchorfile>
      <anchor>a259cca4ac57aa1a893cd4209a1794c45</anchor>
      <arglist>(const int &amp;n, complex&lt; double &gt; *a, const int &amp;n0, int *piv, complex&lt; double &gt; *work, const int &amp;, int &amp;st)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dgesvd</name>
      <anchorfile>a00715.html</anchorfile>
      <anchor>a79a9db0b758b5eca0def043568f0df4a</anchor>
      <arglist>(char *JOBU, char *JOBVT, int *M, int *N, double *A, int *LDA, double *S, double *U, int *LDU, double *VT, int *LDVT, double *work, int *LWORK, int *INFO)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dgeev</name>
      <anchorfile>a00715.html</anchorfile>
      <anchor>ad9c6a6d37ea1a50ec7c2a5f92c085df0</anchor>
      <arglist>(char *JOBVL, char *JOBVR, int *N, double *A, int *LDA, double *ALPHAR, double *ALPHAI, double *VL, int *LDVL, double *VR, int *LDVR, double *WORK, int *LWORK, int *INFO)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dggev</name>
      <anchorfile>a00715.html</anchorfile>
      <anchor>a615601d1ad78df25166727fd4fbd3c1b</anchor>
      <arglist>(char *JOBVL, char *JOBVR, int *N, double *A, int *LDA, double *B, int *LDB, double *ALPHAR, double *ALPHAI, double *BETA, double *VL, int *LDVL, double *VR, int *LDVR, double *WORK, int *LWORK, int *INFO)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dger</name>
      <anchorfile>a00715.html</anchorfile>
      <anchor>a3b9825252e8f38035196408d0f08d0b6</anchor>
      <arglist>(const int *m, const int *n, const double *alpha, const double *x, const int *incx, const double *y, const int *incy, double *a, const int *lda)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zgeru</name>
      <anchorfile>a00715.html</anchorfile>
      <anchor>a336661e03a9c4e8386f5630a4a33a39a</anchor>
      <arglist>(const int *m, const int *n, const complex&lt; double &gt; *alpha, const complex&lt; double &gt; *x, const int *incx, const complex&lt; double &gt; *y, const int *incy, complex&lt; double &gt; *a, const int *lda)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dgeqrf</name>
      <anchorfile>a00715.html</anchorfile>
      <anchor>a4349c92c1f313a9d52cdc2fd06bcf0bd</anchor>
      <arglist>(const int *M, const int *N, double *A, const int *LDA, double *TAU, double *WORK, const int *LWORK, int *INFO)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dormqr</name>
      <anchorfile>a00715.html</anchorfile>
      <anchor>af7bdf2cbec727a08637ac836cafc9c10</anchor>
      <arglist>(const char *SIDE, const char *TRANS, const int *M, const int *N, const int *K, const double *A, const int *LDA, const double *TAU, double *C, const int *LDC, double *WORK, int *LWORK, int *INFO)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dgghrd</name>
      <anchorfile>a00715.html</anchorfile>
      <anchor>ad46abde24705953c42e7858d8d9f21cd</anchor>
      <arglist>(const char *COMPQ, const char *COMPZ, const int *N, const int *ILO, const int *IHI, double *A, const int *LDA, double *B, const int *LDB, double *Q, const int *LDQ, double *Z, const int *LDZ, int *INFO)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dhgeqz</name>
      <anchorfile>a00715.html</anchorfile>
      <anchor>ac843219fbc591c428822e549bd868382</anchor>
      <arglist>(const char *JOB, const char *COMPQ, const char *COMPZ, const int *N, const int *ILO, const int *IHI, double *H, const int *LDH, double *T, const int *LDT, double *ALPHAR, double *ALPHAI, double *BETA, double *Q, const int *LDQ, double *Z, const int *LDZ, double *WORK, int *LWORK, int *INFO)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dtgexc</name>
      <anchorfile>a00715.html</anchorfile>
      <anchor>a73bdae01d908697e7a3b16c2271dce40</anchor>
      <arglist>(const bool *WANTQ, const bool *WANTZ, const int *N, double *A, const int *LDA, double *B, const int *LDB, double *Q, const int *LDQ, double *Z, const int *LDZ, int *IFST, int *ILST, double *WORK, int *LWORK, int *INFO)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dtgevc</name>
      <anchorfile>a00715.html</anchorfile>
      <anchor>ab67586c61bbf242dad02e14c692142d0</anchor>
      <arglist>(const char *SIDE, const char *HOWMNY, const bool *SELECT, const int *N, double *S, const int *LDS, double *P, const int *LDP, double *VL, const int *LDVL, double *VR, const int *LDVR, const int *MM, int *M, double *WORK, int *INFO)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BlockMatrixFunctions.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00716</filename>
    <class kind="struct">qmcplusplus::GEMV</class>
    <class kind="struct">qmcplusplus::GEMV&lt; T, 3 &gt;</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>BsplineOneDimSolvers.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00567</filename>
    <class kind="struct">SolvePeriodicInterp1D</class>
    <class kind="struct">SolvePeriodicInterp1D&lt; double &gt;</class>
    <class kind="struct">SolvePeriodicInterp1D&lt; std::complex&lt; double &gt; &gt;</class>
    <class kind="struct">SolveFirstDerivInterp1D</class>
    <class kind="struct">SolveFirstDerivInterp1D&lt; double &gt;</class>
    <class kind="struct">SolveFirstDerivInterp1D&lt; std::complex&lt; double &gt; &gt;</class>
    <member kind="function">
      <type>void</type>
      <name>FuncSolvePeriodicInterp1D</name>
      <anchorfile>a00567.html</anchorfile>
      <anchor>ab0cefb7e7e0f1640936e5e143b56a7a9</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;data, std::vector&lt; T &gt; &amp;p)</arglist>
    </member>
  <compound kind="struct">
    <name>SolvePeriodicInterp1D</name>
    <filename>a00567.html</filename>
    <anchor>a01527</anchor>
    <templarg></templarg>
  <compound kind="struct">
    <name>SolveFirstDerivInterp1D</name>
    <filename>a00567.html</filename>
    <anchor>a01526</anchor>
    <templarg></templarg>
  </compound>
  <compound kind="file">
    <name>CartesianTensor.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00717</filename>
    <class kind="class">CartesianTensor</class>
  </compound>
  <compound kind="file">
    <name>Clebsch_Gordan.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00718</filename>
  </compound>
  <compound kind="file">
    <name>Clebsch_Gordan.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00719</filename>
    <class kind="class">Clebsch_Gordan</class>
  </compound>
  <compound kind="file">
    <name>ConstScale.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00720</filename>
    <class kind="struct">ConstScale</class>
  </compound>
  <compound kind="file">
    <name>CosineFunction.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00721</filename>
    <class kind="struct">Sine3D</class>
    <class kind="struct">Cosine3D</class>
  </compound>
  <compound kind="file">
    <name>CubicBspline.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00722</filename>
    <class kind="struct">CubicBspline</class>
  </compound>
  <compound kind="file">
    <name>CubicBsplineGrid.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00723</filename>
    <class kind="struct">CubicBsplineGrid</class>
    <class kind="struct">CubicBsplineGrid&lt; T, LINEAR_1DGRID, PBC_CONSTRAINTS &gt;</class>
    <class kind="struct">CubicBsplineGrid&lt; T, LINEAR_1DGRID, FIRSTDERIV_CONSTRAINTS &gt;</class>
  </compound>
  <compound kind="file">
    <name>CubicSpline.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00724</filename>
    <class kind="class">CubicSpline</class>
  </compound>
  <compound kind="file">
    <name>CubicSplineEngine.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00120</filename>
    <class kind="struct">CubicSplineEngine</class>
    <class kind="struct">CubicSplineEngine&lt; T, GRIDTYPE, PBC_CONSTRAINTS &gt;</class>
    <class kind="struct">CubicSplineEngine&lt; T, GRIDTYPE, FIRSTDERIV_CONSTRAINTS &gt;</class>
  <compound kind="struct">
    <name>CubicSplineEngine</name>
    <filename>a00120.html</filename>
    <anchor>a01440</anchor>
    <templarg></templarg>
    <templarg>GRIDTYPE</templarg>
    <templarg>BC</templarg>
  </compound>
  <compound kind="file">
    <name>CubicSplineFunctions.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00725</filename>
  </compound>
  <compound kind="file">
    <name>CubicSplineFunctions.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00726</filename>
    <class kind="class">CubicSpline</class>
    <class kind="class">RegCubicSpline</class>
  </compound>
  <compound kind="file">
    <name>CubicSplineGrid.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00123</filename>
    <class kind="struct">CubicSplineGrid</class>
    <class kind="struct">CubicSplineGrid&lt; T, LINEAR_1DGRID, PBC_CONSTRAINTS &gt;</class>
    <class kind="struct">CubicSplineGrid&lt; T, LINEAR_1DGRID, FIRSTDERIV_CONSTRAINTS &gt;</class>
  <compound kind="struct">
    <name>CubicSplineGrid</name>
    <filename>a00123.html</filename>
    <anchor>a01441</anchor>
    <templarg></templarg>
    <templarg>GRIDTYPE</templarg>
    <templarg>BC</templarg>
  </compound>
  <compound kind="file">
    <name>cuda_inverse.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/CUDA/</path>
    <filename>a00727</filename>
    <member kind="function">
      <type>size_t</type>
      <name>cuda_inverse_many_worksize</name>
      <anchorfile>a00727.html</anchorfile>
      <anchor>a33242d62186999c72e6f3fa484ca55a8</anchor>
      <arglist>(int N)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cuda_inverse_many</name>
      <anchorfile>a00727.html</anchorfile>
      <anchor>a23c5f8047891aca0fe1e379187033971</anchor>
      <arglist>(float *Alist_d[], float *worklist_d[], int N, int num_mats)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>cuda_inverse_many_double_worksize</name>
      <anchorfile>a00727.html</anchorfile>
      <anchor>aa0847fff064e68755125bd41107a6fa3</anchor>
      <arglist>(int N)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cuda_inverse_many_double</name>
      <anchorfile>a00727.html</anchorfile>
      <anchor>adaab279db2be05d39ca658bf16f1b1f4</anchor>
      <arglist>(float *Alist_d[], float *worklist_d[], int N, int num_mats)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cuda_inverse_many_double</name>
      <anchorfile>a00727.html</anchorfile>
      <anchor>a6e61a9affe609de555a3d62d826a4129</anchor>
      <arglist>(float *Alist_d[], float *worklist_d[], int N, int row_stride, int num_mats)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cuda_inverse_many_double</name>
      <anchorfile>a00727.html</anchorfile>
      <anchor>a67cc44527b9a02e11acfe263dbc53fc9</anchor>
      <arglist>(double *Alist_d[], double *worklist_d[], int N, int num_mats)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>determinant_operators.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00728</filename>
    <class kind="struct">qmcplusplus::const_traits</class>
    <class kind="struct">qmcplusplus::const_traits&lt; double &gt;</class>
    <class kind="struct">qmcplusplus::const_traits&lt; std::complex&lt; double &gt; &gt;</class>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>void</type>
      <name>det_row_update</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ad3302fe370dae045690b9c3d2b4bfc42</anchor>
      <arglist>(T *restrict pinv, const T *restrict tv, int m, int rowchanged, T c_ratio, T *restrict temp, T *restrict rcopy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>det_row_update</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>abb46683a6f7817e206a7f39ada60a2b0</anchor>
      <arglist>(T *restrict pinv, const T *restrict tv, int m, int rowchanged, T c_ratio)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>det_row_block_update</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a2a2e147a4cd9b990de293101483e9572</anchor>
      <arglist>(const T *restrict inv0, const T *restrict tv, const T *restrict tv_replaced, T *restrict inv, int n, int m, int rowchanged, T inv_utv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>det_col_update</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>aa5d56382022f9b9f17cbbef5213546f7</anchor>
      <arglist>(T *restrict pinv, const T *restrict tv, int m, int colchanged, T c_ratio, T *restrict temp, T *restrict rcopy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>det_col_update</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>aca8b8eefa9d9c3e42973127a2c8a814e</anchor>
      <arglist>(T *restrict pinv, const T *restrict tv, int m, int colchanged, T c_ratio)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multidet_row_update</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a36b9296a2d5184dfdd50ccd0f7e6f5f3</anchor>
      <arglist>(const T *restrict pinv, const T *restrict tm, const T *ratios, T *restrict new_invs, int m, int rowchanged, int howmany)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multidet_row_update</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ad963689da36f8bb521a64ed57e8f652a</anchor>
      <arglist>(const T *restrict pinv, const T *restrict tm, const T *ratios, T *restrict new_invs, int m, int rowchanged, const INDARRAY &amp;ind)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multidet_row_update</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ad64dc6f4fd49195acea9bfdf320045c3</anchor>
      <arglist>(const MAT &amp;pinv, const MAT &amp;tm, const VV &amp;ratios, vector&lt; MAT * &gt; new_invs, int m, int rowchanged, const INDARRAY &amp;ind)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRatiosByRowSubstitution</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ad8fd1e0e1fb93dae674379f9d814440a</anchor>
      <arglist>(const T *restrict tm_new, const T *restrict r_replaced, T *restrict ratios, int m, int howmany)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRatiosByRowSubstitution</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a7a58cc3d5b78c1920668de31630acf4f</anchor>
      <arglist>(const T *restrict tm_new, const T *restrict r_replaced, T *restrict ratios, int m, const INDARRAY &amp;ind)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRatiosByRowSubstitution_dummy</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a6f250367f975d71b60b3d5015e5d4fd1</anchor>
      <arglist>(const T *restrict tm_new, const T *restrict r_replaced, T *restrict ratios, int m, int howmany)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getRatioByColSubstitution</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a006374f34423bd55cdf6f973053745a0</anchor>
      <arglist>(const T *restrict pinv, const T *restrict tc, int m, int colchanged)</arglist>
    </member>
    <member kind="function">
      <type>MAT::value_type</type>
      <name>getRatioByColSubstitution</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a25fc6b7f3da7fd29db02910958a1721b</anchor>
      <arglist>(const MAT &amp;pinv, const VV &amp;tc, int colchanged)</arglist>
    </member>
    <member kind="function">
      <type>MAT::value_type</type>
      <name>getRatioByColSubstitution</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>aa708175f268080367d3ece5dcb594e3a</anchor>
      <arglist>(const MAT &amp;refinv, const VV &amp;tcm, VV &amp;ratios, int m, int colchanged, int r_replaced, IV &amp;ind)</arglist>
    </member>
  <compound kind="struct">
    <name>qmcplusplus::const_traits</name>
    <filename>a00008.html</filename>
    <anchor>a01433</anchor>
    <templarg></templarg>
  </compound>
  <compound kind="file">
    <name>DeterminantOperators.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00729</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>void</type>
      <name>LUFactorization</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>aad059e38dbefada307e2044d8907e811</anchor>
      <arglist>(int n, int m, double *restrict a, int n0, int *restrict piv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LUFactorization</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>afd512dade95cf7a0f6200128d6a19a4e</anchor>
      <arglist>(int n, int m, float *restrict a, const int &amp;n0, int *restrict piv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LUFactorization</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a89357e5d3d7b639c43a616fcdceadd61</anchor>
      <arglist>(int n, int m, std::complex&lt; double &gt; *restrict a, int n0, int *restrict piv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InvertLU</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a89fa57b0bd0dd189bdabd8681dbb84ff</anchor>
      <arglist>(int n, double *restrict a, int n0, int *restrict piv, double *restrict work, int n1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InvertLU</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a17ba4911987558dc390632ce1c66a209</anchor>
      <arglist>(const int &amp;n, float *restrict a, const int &amp;n0, int *restrict piv, float *restrict work, const int &amp;n1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InvertLU</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>adfd7ada6858d93001e80e63164c6aacd</anchor>
      <arglist>(int n, std::complex&lt; double &gt; *restrict a, int n0, int *restrict piv, std::complex&lt; double &gt; *restrict work, int n1)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Invert</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>acff25a73782039e8a7805ac83bc07ae1</anchor>
      <arglist>(T *restrict x, int n, int m, T *restrict work, int *restrict pivot)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Determinant</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a4e497aa8f2a9cba277ccdc060ff7fe1d</anchor>
      <arglist>(T *restrict x, int n, int m, int *restrict pivot)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Invert</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a847ab6087d64fb192e6f7faa3d03faac</anchor>
      <arglist>(T *restrict x, int n, int m)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>InvertWithLog</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a7a1ccdf274e8f33860b0bd485affbf0a</anchor>
      <arglist>(double *restrict x, int n, int m, double *restrict work, int *restrict pivot, double &amp;phase)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>InvertWithLog</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a19b1003acd190013edf1c087d53c0a0b</anchor>
      <arglist>(std::complex&lt; double &gt; *restrict x, int n, int m, std::complex&lt; double &gt; *restrict work, int *restrict pivot, double &amp;phase)</arglist>
    </member>
    <member kind="function">
      <type>RT</type>
      <name>InvertWithLog</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a59b9b982e72a48fd249b0d2d2969e30c</anchor>
      <arglist>(T *restrict x, int n, int m, RT &amp;phase)</arglist>
    </member>
    <member kind="function">
      <type>MatrixA::value_type</type>
      <name>invert_matrix</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a22df3fcf4b6a3420cc54ab3ace98e040</anchor>
      <arglist>(MatrixA &amp;M, bool getdet=true)</arglist>
    </member>
    <member kind="function">
      <type>MatrixA::value_type</type>
      <name>determinant_matrix</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ae5f94b138d2123b1e688e8a943218716</anchor>
      <arglist>(MatrixA &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>MatA::value_type</type>
      <name>DetRatioByRow</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a996ce82f0c79d8916b9fdaebbfebdfa3</anchor>
      <arglist>(const MatA &amp;Minv, const VecB &amp;newv, int rowchanged)</arglist>
    </member>
    <member kind="function">
      <type>MatA::value_type</type>
      <name>DetRatioByColumn</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ac92e21f8f1a32c17731a4f15f0c39ad9</anchor>
      <arglist>(const MatA &amp;Minv, const VecB &amp;newv, int colchanged)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InverseUpdateByRow</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a9524c6f00a53620bf091de09cf3d8e30</anchor>
      <arglist>(MatA &amp;Minv, VecT &amp;newrow, VecT &amp;rvec, VecT &amp;rvecinv, int rowchanged, typename MatA::value_type c_ratio)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InverseUpdateByColumn</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>af31e46bdfd4a4d2ea9fa05dec800475e</anchor>
      <arglist>(MatA &amp;Minv, VecT &amp;newcol, VecT &amp;rvec, VecT &amp;rvecinv, int colchanged, typename MatA::value_type c_ratio)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>e2iphi.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00730</filename>
    <member kind="function">
      <type>void</type>
      <name>eval_e2iphi</name>
      <anchorfile>a00730.html</anchorfile>
      <anchor>a6f1ea5bd632ba858c1fb46a9b856a20f</anchor>
      <arglist>(int n, const T *restrict phi, T *restrict phase_r, T *restrict phase_i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval_e2iphi</name>
      <anchorfile>a00730.html</anchorfile>
      <anchor>a18406663858bbad13f7d671acc62bff1</anchor>
      <arglist>(int n, const T *restrict phi, std::complex&lt; T &gt; *restrict z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval_e2iphi</name>
      <anchorfile>a00730.html</anchorfile>
      <anchor>a61fd803ad804cc815d0e5f7ecfbef3d4</anchor>
      <arglist>(std::vector&lt; T &gt; &amp;phi, std::vector&lt; std::complex&lt; T &gt; &gt; &amp;z)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ExpFitClass.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00731</filename>
    <class kind="class">qmcplusplus::ComplexExpFitClass</class>
    <class kind="class">qmcplusplus::ExpFitClass</class>
    <class kind="class">qmcplusplus::ComplexExpFitClass</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>FFTAbleVector.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00732</filename>
    <class kind="class">qmcplusplus::FFTAbleVectorBase</class>
    <class kind="class">qmcplusplus::FFTAbleVector</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>FFTEngines.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00733</filename>
    <class kind="class">qmcplusplus::FFTWEngine</class>
    <class kind="class">qmcplusplus::FFTWEngine&lt; dimensions, std::complex&lt; double &gt; &gt;</class>
    <class kind="class">qmcplusplus::FFTWEngine&lt; dimensions, std::complex&lt; long double &gt; &gt;</class>
    <class kind="class">qmcplusplus::FFTWEngine&lt; dimensions, std::complex&lt; float &gt; &gt;</class>
    <namespace>qmcplusplus</namespace>
  <compound kind="class">
    <name>qmcplusplus::FFTWEngine</name>
    <filename>a00008.html</filename>
    <anchor>a01459</anchor>
    <templarg>dimensions</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="file">
    <name>GaussianBasisSet.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00734</filename>
    <class kind="struct">GaussianCombo</class>
    <class kind="struct">GaussianCombo::BasicGaussian</class>
  </compound>
  <compound kind="file">
    <name>GaussianTimesRN.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00735</filename>
    <class kind="struct">GaussianTimesRN</class>
    <class kind="struct">GaussianTimesRN::BasicGaussian</class>
  </compound>
  <compound kind="file">
    <name>GaussianTypeOrbital.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00736</filename>
    <class kind="struct">RadialGaussian</class>
  </compound>
  <compound kind="file">
    <name>GridBConds.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00737</filename>
    <class kind="struct">qmcplusplus::GridBCond</class>
    <class kind="struct">qmcplusplus::GridBCond&lt; T, FIXED_GBC &gt;</class>
    <class kind="struct">qmcplusplus::GridBCond&lt; T, PERIODIC_GBC &gt;</class>
    <namespace>qmcplusplus</namespace>
    <member kind="enumvalue">
      <type>@</type>
      <name>FIXED_GBC</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a5d76b81b0ad4c19007a781d4edb8181fa18d1c8866d809dc1091910e2016600dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PERIODIC_GBC</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a5d76b81b0ad4c19007a781d4edb8181fa1e0323311ad180e6babfd927ad3e967a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NO_GBC</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a5d76b81b0ad4c19007a781d4edb8181fa68e75ccf67ba72de27e5e63b2ae9c9a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GridTraits.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00245</filename>
    <class kind="struct">GridTraits</class>
    <class kind="struct">GridTraits&lt; double &gt;</class>
    <class kind="struct">GridTraits&lt; std::complex&lt; double &gt; &gt;</class>
    <member kind="enumvalue">
      <type>@</type>
      <name>LINEAR_1DGRID</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>aac34dfe6c6b73b43a4656c9dce041034a6f2878a0a6c2a1f43346cd0b8aa356f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LOG_1DGRID</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>aac34dfe6c6b73b43a4656c9dce041034aa6b381a90687b741d49d78cacbc59c6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LOGZERO_1DGRID</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>aac34dfe6c6b73b43a4656c9dce041034a5f55fe8f8283089f5a99850def18226f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CUSTOM_1DGRID</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>aac34dfe6c6b73b43a4656c9dce041034a29fd042c43b4d82005e588c4c94ceeef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PBC_CONSTRAINTS</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>a0ed680fdb405e7195d9f14032851eebba250abe62dd74e8028ce20454f7d44d72</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FIRSTDERIV_CONSTRAINTS</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>a0ed680fdb405e7195d9f14032851eebba5f3210a1450b08007106b588af12cf7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NATURAL_CONSTRAINTS</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>a0ed680fdb405e7195d9f14032851eebba61549ecba3ec41695e09b2808274555b</anchor>
      <arglist></arglist>
    </member>
  <compound kind="struct">
    <name>GridTraits</name>
    <filename>a00245.html</filename>
    <anchor>a01462</anchor>
    <templarg></templarg>
  </compound>
  <compound kind="file">
    <name>HDFNumericAttrib.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00738</filename>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; hsize_t &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; unsigned long &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; int &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; double &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; TinyVector&lt; double, D &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; Tensor&lt; double, D &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; TinyVector&lt; int, D &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; std::vector&lt; TinyVector&lt; int, D &gt; &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; std::vector&lt; TinyVector&lt; double, D &gt; &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; Vector&lt; double &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; Vector&lt; std::complex&lt; double &gt; &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; Vector&lt; int &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; Vector&lt; TinyVector&lt; double, D &gt; &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; Matrix&lt; double &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; Matrix&lt; TinyVector&lt; double, D &gt; &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; Array&lt; double, D &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; Array&lt; complex&lt; double &gt;, D &gt; &gt;</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>HDFSTLAttrib.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00739</filename>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; std::vector&lt; int &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; std::vector&lt; double &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; std::vector&lt; std::complex&lt; double &gt; &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; std::bitset&lt; N &gt; &gt;</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>HDFTriCubicSpline.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00740</filename>
    <class kind="struct">HDFAttribIO&lt; TriCubicSplineT&lt; double &gt; &gt;</class>
  </compound>
  <compound kind="file">
    <name>LibxmlNumericIO.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00741</filename>
    <member kind="function">
      <type>bool</type>
      <name>putContent</name>
      <anchorfile>a00741.html</anchorfile>
      <anchor>a69a50d02e6fbba5f890bff88a2044daa</anchor>
      <arglist>(qmcplusplus::Vector&lt; T &gt; &amp;a, xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putContent</name>
      <anchorfile>a00741.html</anchorfile>
      <anchor>ac0c0b987eb1edc0b575e0aaa2b033fbb</anchor>
      <arglist>(qmcplusplus::Matrix&lt; T &gt; &amp;a, xmlNodePtr cur)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LinearFit.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00742</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>void</type>
      <name>LinearFit</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a11a5d94830b7e813517f3a4f12d9c835</anchor>
      <arglist>(vector&lt; T &gt; &amp;y, Matrix&lt; T &gt; &amp;A, vector&lt; T &gt; &amp;coefs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LinearSpline.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00743</filename>
    <class kind="struct">LinearSplineGrid</class>
    <class kind="struct">LinearSplineGrid&lt; T, LINEAR_1DGRID, PBC_CONSTRAINTS &gt;</class>
    <class kind="struct">LinearSplineGrid&lt; T, LINEAR_1DGRID, FIRSTDERIV_CONSTRAINTS &gt;</class>
    <class kind="struct">LinearSplineGrid&lt; T, CUSTOM_1DGRID, FIRSTDERIV_CONSTRAINTS &gt;</class>
    <class kind="struct">LinearSpline</class>
  </compound>
  <compound kind="file">
    <name>MatGrid1D.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00744</filename>
    <class kind="class">MatGrid1D</class>
  </compound>
  <compound kind="file">
    <name>MatrixOperators.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00745</filename>
    <class kind="struct">qmcplusplus::MatrixOperators</class>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>T</type>
      <name>TESTDOT</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a2b7935e4caa319e647e7d9a21b40e557</anchor>
      <arglist>(const T *restrict f, const T *restrict l, const T *restrict b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NRSplineFunctions.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00746</filename>
    <class kind="struct">TriDiagSolver</class>
    <member kind="function">
      <type>void</type>
      <name>NRCubicSpline</name>
      <anchorfile>a00746.html</anchorfile>
      <anchor>af1572aa52af4be19023992c941d63f69</anchor>
      <arglist>(const Tg *x, const T *y, int n, T yp1, T ypn, T *y2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NRCubicSplinePBC</name>
      <anchorfile>a00746.html</anchorfile>
      <anchor>aad94a1f00533d9aac956e485499b3780</anchor>
      <arglist>(const Tg *x, const T *y, int n, T *d1, T *d2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NRCubicSplineFirst</name>
      <anchorfile>a00746.html</anchorfile>
      <anchor>ae0552266cb5c0cf041be33919230f0b6</anchor>
      <arglist>(const Tg *x, const T *y, int n, T *d1, T *d2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>QuinticSplineSolve</name>
      <anchorfile>a00746.html</anchorfile>
      <anchor>a760d1816a852d924acc3584755317c31</anchor>
      <arglist>(int N, const Tg *X, T *Y, T *B, T *C, T *D, T *E, T *F)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OhmmsBlas.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00747</filename>
  </compound>
  <compound kind="file">
    <name>OhmmsBlas.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00748</filename>
    <class kind="struct">BLAS</class>
  </compound>
  <compound kind="file">
    <name>OneDimCubicSpline.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00749</filename>
    <class kind="class">qmcplusplus::OneDimCubicSplineFirst</class>
    <class kind="class">qmcplusplus::OneDimCubicSplinePBC</class>
    <class kind="class">qmcplusplus::OneDimCubicSpline</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>OneDimGridBase.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00750</filename>
    <class kind="struct">qmcplusplus::OneDimGridBase</class>
    <class kind="struct">qmcplusplus::LinearGrid</class>
    <class kind="struct">qmcplusplus::LogGrid</class>
    <class kind="struct">qmcplusplus::LogGridZero</class>
    <class kind="struct">qmcplusplus::NumericalGrid</class>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a55c873af544b9cce095d8735cb3a0b10</anchor>
      <arglist>(std::ostream &amp;out, const OneDimGridBase&lt; T &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OneDimGridFunctor.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00751</filename>
    <class kind="struct">qmcplusplus::FunctorBase</class>
    <class kind="struct">qmcplusplus::OneDimGridFunctor</class>
    <class kind="class">qmcplusplus::OneDimConstFunctor</class>
    <namespace>qmcplusplus</namespace>
  <compound kind="struct">
    <name>qmcplusplus::FunctorBase</name>
    <filename>a00008.html</filename>
    <anchor>a01460</anchor>
    <templarg></templarg>
    <templarg>D</templarg>
  </compound>
  <compound kind="file">
    <name>OneDimIntegration.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00752</filename>
    <member kind="function">
      <type>GF::value_type</type>
      <name>integrate_RK2</name>
      <anchorfile>a00752.html</anchorfile>
      <anchor>ad2517e2124252c17b757a5fc1ab59715</anchor>
      <arglist>(const GF &amp;f, GF &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>GF::value_type</type>
      <name>integrate_RK2_forward</name>
      <anchorfile>a00752.html</anchorfile>
      <anchor>a3ce654f63bfa74f84176e565e807fd24</anchor>
      <arglist>(const GF &amp;f, GF &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>GF::value_type</type>
      <name>integrate_RK2_backward</name>
      <anchorfile>a00752.html</anchorfile>
      <anchor>aa4deca3a2f80e1b336753d26c86738a8</anchor>
      <arglist>(const GF &amp;f, GF &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>GF::value_type</type>
      <name>integrate_RK2</name>
      <anchorfile>a00752.html</anchorfile>
      <anchor>ae972afeb551b64dd4f64b8c6f83159ce</anchor>
      <arglist>(const GF &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize_RK2</name>
      <anchorfile>a00752.html</anchorfile>
      <anchor>a218fa2a43e32c37e5daab98888e04a9c</anchor>
      <arglist>(GF &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>Fn::value_type</type>
      <name>integrate_RK2</name>
      <anchorfile>a00752.html</anchorfile>
      <anchor>af259064017170a3225f7250f84c83459</anchor>
      <arglist>(const GT &amp;grid, const Fn &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>GF::value_type</type>
      <name>integrate</name>
      <anchorfile>a00752.html</anchorfile>
      <anchor>a57b33a2c48b7781b98f76eaed83c2971</anchor>
      <arglist>(const GF &amp;f)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OneDimLinearSpline.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00753</filename>
    <class kind="class">qmcplusplus::OneDimLinearSpline</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>OneDimNumGridFunctor.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00754</filename>
    <class kind="struct">qmcplusplus::OneDimNumGridFunctor</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>OneDimQuinticSpline.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00755</filename>
    <class kind="class">qmcplusplus::OneDimQuinticSpline</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>OptimizableFunctorBase.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00756</filename>
    <class kind="struct">OptimizableFunctorBase</class>
  </compound>
  <compound kind="file">
    <name>RadialFunctorUtility.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00757</filename>
    <member kind="function">
      <type>T</type>
      <name>Phisq_x_Yk</name>
      <anchorfile>a00757.html</anchorfile>
      <anchor>a64af1a15f9cd6dc1e0f33a26b85cb75d</anchor>
      <arglist>(const GF &amp;g, const GF &amp;a, const GF &amp;b, T prefactor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Ykofr</name>
      <anchorfile>a00757.html</anchorfile>
      <anchor>ad198d2f86e501e7d56b4c9ec6abe64d1</anchor>
      <arglist>(GF &amp;g, const GF &amp;a, const GF &amp;b, int k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Make_Loc_Pot</name>
      <anchorfile>a00757.html</anchorfile>
      <anchor>a74508548748daa4f6bb31396ae61affd</anchor>
      <arglist>(GF &amp;g, const GF &amp;y, const GF &amp;a, const GF &amp;b, typename GF::value_type coeff)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RadialOrbitalBase.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00758</filename>
    <class kind="struct">RadialOrbitalBase</class>
    <class kind="struct">RadialOrbitalSet</class>
  </compound>
  <compound kind="file">
    <name>SlaterBasisSet.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00759</filename>
    <class kind="struct">SlaterCombo</class>
  </compound>
  <compound kind="file">
    <name>SlaterTypeOrbital.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00760</filename>
    <class kind="struct">STONorm</class>
    <class kind="struct">GenericSTO</class>
    <class kind="struct">RadialSTO</class>
  </compound>
  <compound kind="file">
    <name>SphericalTensor.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00761</filename>
    <class kind="class">SphericalTensor</class>
    <class kind="struct">SCTFunctor</class>
    <class kind="struct">SCTFunctor&lt; SCT, 1 &gt;</class>
    <class kind="struct">SCTFunctor&lt; SCT, 2 &gt;</class>
    <class kind="struct">SCTFunctor&lt; SCT, 3 &gt;</class>
  </compound>
  <compound kind="file">
    <name>SymmetryOperations.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00762</filename>
    <class kind="struct">qmcplusplus::SymmetryGroup</class>
    <class kind="class">qmcplusplus::SymmetryBuilder</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>UOverRN.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00763</filename>
    <class kind="struct">UOverRN</class>
  </compound>
  <compound kind="file">
    <name>XYZCubicGrid.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>a00764</filename>
    <class kind="struct">qmcplusplus::XYZCubicGrid</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ProjectData.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/OhmmsApp/</path>
    <filename>a00765</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ProjectData.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/OhmmsApp/</path>
    <filename>a00766</filename>
    <class kind="struct">qmcplusplus::ProjectData</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>RandomNumberControl.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/OhmmsApp/</path>
    <filename>a00767</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>RandomNumberControl.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/OhmmsApp/</path>
    <filename>a00768</filename>
    <class kind="class">qmcplusplus::RandomNumberControl</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>AttributeSet.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/OhmmsData/</path>
    <filename>a00769</filename>
    <class kind="struct">OhmmsAttributeSet</class>
  </compound>
  <compound kind="file">
    <name>DataParserTemplate.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/OhmmsData/</path>
    <filename>a00770</filename>
  </compound>
  <compound kind="file">
    <name>DOMProcessor.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/OhmmsData/</path>
    <filename>a00771</filename>
  </compound>
  <compound kind="file">
    <name>FileUtility.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/OhmmsData/</path>
    <filename>a00772</filename>
    <member kind="function">
      <type>void</type>
      <name>Tokenize</name>
      <anchorfile>a00772.html</anchorfile>
      <anchor>a4b5ccab3e9c58e9776b17a2197c16a6d</anchor>
      <arglist>(const std::string &amp;str, std::vector&lt; std::string &gt; &amp;tokens, const std::string &amp;delimiters=&quot; &quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getExtension</name>
      <anchorfile>a00772.html</anchorfile>
      <anchor>a3783fbfa322462d5d033052387a8b198</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>HDFAttribIO.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/OhmmsData/</path>
    <filename>a00773</filename>
    <class kind="struct">qmcplusplus::HDFAttribIOBase</class>
    <class kind="struct">qmcplusplus::HDFAttribIO</class>
    <namespace>qmcplusplus</namespace>
    <member kind="typedef">
      <type>int</type>
      <name>hid_t</name>
      <anchorfile>a00773.html</anchorfile>
      <anchor>a96df66c0d11ed2a58049c29f6fa510ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>hsize_t</name>
      <anchorfile>a00773.html</anchorfile>
      <anchor>a1e6b228493f550c22275e37b18c4e021</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>H5P_DEFAULT</name>
      <anchorfile>a00773.html</anchorfile>
      <anchor>a85d6466a994a6ea5ee6d366eb40da49a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>HDFStringAttrib.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/OhmmsData/</path>
    <filename>a00774</filename>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; string &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; std::ostringstream &gt;</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>Libxml2Doc.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/OhmmsData/</path>
    <filename>a00775</filename>
  </compound>
  <compound kind="file">
    <name>Libxml2Doc.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/OhmmsData/</path>
    <filename>a00776</filename>
    <class kind="struct">OhmmsXPathObject</class>
    <class kind="struct">Libxml2Document</class>
  </compound>
  <compound kind="file">
    <name>libxmldefs.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/OhmmsData/</path>
    <filename>a00777</filename>
    <member kind="function">
      <type>void</type>
      <name>getNodeName</name>
      <anchorfile>a00777.html</anchorfile>
      <anchor>a1ebbf89c7b556aade350113d3202178f</anchor>
      <arglist>(std::basic_string&lt; _CharT &gt; &amp;cname, xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putContent</name>
      <anchorfile>a00777.html</anchorfile>
      <anchor>ab8e4d29521c03995e8fe257e58f69864</anchor>
      <arglist>(T &amp;a, xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putContent</name>
      <anchorfile>a00777.html</anchorfile>
      <anchor>ac1c920e4d8b05c2c28bd7a62d3c3218c</anchor>
      <arglist>(IT first, IT last, xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getContent</name>
      <anchorfile>a00777.html</anchorfile>
      <anchor>ab67aa9142c5dc0b1f71a8a0439bff3f8</anchor>
      <arglist>(const T &amp;a, xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putContent</name>
      <anchorfile>a00777.html</anchorfile>
      <anchor>a2e8fa89e14b4ab5416d7c1b9a9478f56</anchor>
      <arglist>(std::vector&lt; T &gt; &amp;a, xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getContent</name>
      <anchorfile>a00777.html</anchorfile>
      <anchor>ae9e09a8e551bc9ec0dd0e9694052b206</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;a, xmlNodePtr cur)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OhmmsElementBase.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/OhmmsData/</path>
    <filename>a00778</filename>
    <class kind="class">OhmmsElementBase</class>
    <member kind="define">
      <type>#define</type>
      <name>xmlDocPtr</name>
      <anchorfile>a00778.html</anchorfile>
      <anchor>afce00d49ee3d7178f773c3e439090802</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>xmlNodePtr</name>
      <anchorfile>a00778.html</anchorfile>
      <anchor>a9559fa02dc5763cfd71b5fc2f2107d9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>xmlNsPtr</name>
      <anchorfile>a00778.html</anchorfile>
      <anchor>abe5104001fc626afc1d082f48d579d48</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tolower</name>
      <anchorfile>a00778.html</anchorfile>
      <anchor>acb511a92d38ee9cd9dafe7d26d792ee5</anchor>
      <arglist>(std::string &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OhmmsIOBase.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/OhmmsData/</path>
    <filename>a00779</filename>
    <class kind="class">OhmmsIOBase</class>
    <class kind="class">StreamIO</class>
  </compound>
  <compound kind="file">
    <name>OhmmsParameter.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/OhmmsData/</path>
    <filename>a00780</filename>
    <class kind="class">OhmmsParameter</class>
    <class kind="class">OhmmsParameter&lt; bool &gt;</class>
  </compound>
  <compound kind="file">
    <name>ParameterSet.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/OhmmsData/</path>
    <filename>a00781</filename>
    <class kind="struct">ParameterSet</class>
  </compound>
  <compound kind="file">
    <name>RecordProperty.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/OhmmsData/</path>
    <filename>a00782</filename>
    <class kind="struct">RecordProperty</class>
    <class kind="class">RecordPropertyList</class>
    <class kind="struct">RecordNamedProperty</class>
  </compound>
  <compound kind="file">
    <name>OhmmsArray.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/OhmmsPETE/</path>
    <filename>a00783</filename>
    <class kind="class">Array</class>
  </compound>
  <compound kind="file">
    <name>OhmmsMatrix.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/OhmmsPETE/</path>
    <filename>a00784</filename>
    <class kind="class">qmcplusplus::Matrix</class>
    <class kind="struct">qmcplusplus::CreateLeaf&lt; Matrix&lt; T, C &gt; &gt;</class>
    <class kind="class">qmcplusplus::SizeLeaf2</class>
    <class kind="struct">qmcplusplus::LeafFunctor&lt; Scalar&lt; T &gt;, SizeLeaf2 &gt;</class>
    <class kind="struct">qmcplusplus::LeafFunctor&lt; Matrix&lt; T, C &gt;, SizeLeaf2 &gt;</class>
    <class kind="struct">qmcplusplus::LeafFunctor&lt; Matrix&lt; T, C &gt;, EvalLeaf2 &gt;</class>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>aadf4ec643e78aadc81a8052b0fe1fc2f</anchor>
      <arglist>(std::ostream &amp;out, const Matrix&lt; T, C &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a23419e7eeed4c8c3a6c19e8134700913</anchor>
      <arglist>(std::istream &amp;is, Matrix&lt; T, C &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a015c428f8cc4118f8c306912a531e925</anchor>
      <arglist>(Matrix&lt; T, C &gt; &amp;lhs, const Op &amp;op, const Expression&lt; RHS &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OhmmsVector.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/OhmmsPETE/</path>
    <filename>a00785</filename>
    <class kind="class">qmcplusplus::Vector</class>
    <class kind="struct">qmcplusplus::CreateLeaf&lt; Vector&lt; T, C &gt; &gt;</class>
    <class kind="class">qmcplusplus::SizeLeaf</class>
    <class kind="struct">qmcplusplus::LeafFunctor&lt; Scalar&lt; T &gt;, SizeLeaf &gt;</class>
    <class kind="struct">qmcplusplus::LeafFunctor&lt; Vector&lt; T, C &gt;, SizeLeaf &gt;</class>
    <class kind="struct">qmcplusplus::LeafFunctor&lt; Vector&lt; T, C &gt;, EvalLeaf1 &gt;</class>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>af4a0fe3a9d75a372b4530ee3e3afd71b</anchor>
      <arglist>(Vector&lt; T, C &gt; &amp;lhs, const Op &amp;op, const Expression&lt; RHS &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ac95bcbc7fcefdeb4f1a097741cffd3a2</anchor>
      <arglist>(std::ostream &amp;out, const Vector&lt; T, C &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>aba87dee469e7da5df804711b0d6c41d9</anchor>
      <arglist>(std::istream &amp;is, Vector&lt; T, C &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Tensor.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/OhmmsPETE/</path>
    <filename>a00786</filename>
    <class kind="class">qmcplusplus::SymTensor</class>
    <class kind="class">qmcplusplus::AntiSymTensor</class>
    <class kind="class">qmcplusplus::Tensor</class>
    <class kind="class">qmcplusplus::Tensor::DontInitialize</class>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>T</type>
      <name>trace</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a12734d392a633763c62944e80d42838e</anchor>
      <arglist>(const Tensor&lt; T, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; T, D &gt;</type>
      <name>transpose</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a7f4827935af7f4c1bdc048bcdac7995d</anchor>
      <arglist>(const Tensor&lt; T, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>T1</type>
      <name>trace</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a195dff331de7d6c88137c8c1bdfed2c7</anchor>
      <arglist>(const Tensor&lt; T1, D &gt; &amp;a, const Tensor&lt; T2, D &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>traceAtB</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a40178788e43d49a24cca8dd73765ff86</anchor>
      <arglist>(const Tensor&lt; T, D &gt; &amp;a, const Tensor&lt; T, D &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>BinaryReturn&lt; T1, T2, OpMultiply &gt;::Type_t</type>
      <name>traceAtB</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a41d253e2a1fe755e587a23cb619e5ddf</anchor>
      <arglist>(const Tensor&lt; T1, D &gt; &amp;a, const Tensor&lt; T2, D &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; typename BinaryReturn&lt; T1, T2, OpMultiply &gt;::Type_t, D &gt;</type>
      <name>dot</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a3cb7d1fa99d53a0747d0d0bb3d5e78e4</anchor>
      <arglist>(const Tensor&lt; T1, D &gt; &amp;lhs, const Tensor&lt; T2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TinyVector&lt; typename BinaryReturn&lt; T1, T2, OpMultiply &gt;::Type_t, D &gt;</type>
      <name>dot</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ab145f59de060cb10031948fe3d0c0357</anchor>
      <arglist>(const TinyVector&lt; T1, D &gt; &amp;lhs, const Tensor&lt; T2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TinyVector&lt; typename BinaryReturn&lt; T1, T2, OpMultiply &gt;::Type_t, D &gt;</type>
      <name>dot</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ab2eb5bf8d95bdf99da18bb5865602287</anchor>
      <arglist>(const Tensor&lt; T1, D &gt; &amp;lhs, const TinyVector&lt; T2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a0550c8c08b3688a3a2017609741c503d</anchor>
      <arglist>(std::ostream &amp;out, const Tensor&lt; T, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a2fb27fce461440cbe1a73c4a6fb7e329</anchor>
      <arglist>(std::istream &amp;is, Tensor&lt; T, D &gt; &amp;rhs)</arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::SymTensor</name>
    <filename>a00008.html</filename>
    <anchor>a01529</anchor>
    <templarg></templarg>
    <templarg>D</templarg>
  <compound kind="class">
    <name>qmcplusplus::AntiSymTensor</name>
    <filename>a00008.html</filename>
    <anchor>a01426</anchor>
    <templarg></templarg>
    <templarg>D</templarg>
  <compound kind="class">
    <name>qmcplusplus::Tensor::DontInitialize</name>
    <filename>a00168.html</filename>
    <anchor>a01451</anchor>
  </compound>
  <compound kind="file">
    <name>TinyVector.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/OhmmsPETE/</path>
    <filename>a00787</filename>
    <class kind="class">qmcplusplus::TinyVector</class>
    <class kind="class">qmcplusplus::TinyVector::DontInitialize</class>
    <class kind="struct">qmcplusplus::printTinyVector</class>
    <class kind="struct">qmcplusplus::printTinyVector&lt; TinyVector&lt; T, D &gt; &gt;</class>
    <class kind="struct">qmcplusplus::printTinyVector&lt; TinyVector&lt; T, 2 &gt; &gt;</class>
    <class kind="struct">qmcplusplus::printTinyVector&lt; TinyVector&lt; T, 3 &gt; &gt;</class>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>BinaryReturn&lt; T1, T2, OpMultiply &gt;::Type_t</type>
      <name>dot</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a119a086ef9c83a3aca201d0d88b49bd1</anchor>
      <arglist>(const TinyVector&lt; T1, D &gt; &amp;lhs, const TinyVector&lt; T2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TinyVector&lt; typename BinaryReturn&lt; T1, T2, OpMultiply &gt;::Type_t, D &gt;</type>
      <name>cross</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>acc8ed0aac9753a211b5f9104d2f61a17</anchor>
      <arglist>(const TinyVector&lt; T1, D &gt; &amp;lhs, const TinyVector&lt; T2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; typename BinaryReturn&lt; T1, T2, OpMultiply &gt;::Type_t, D &gt;</type>
      <name>outerProduct</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a035596498a092acda862864c16d1974e</anchor>
      <arglist>(const TinyVector&lt; T1, D &gt; &amp;lhs, const TinyVector&lt; T2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TinyVector&lt; Tensor&lt; T1, D &gt;, D &gt;</type>
      <name>outerdot</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>aa9487968cecd18859e75c1c56bf39932</anchor>
      <arglist>(const TinyVector&lt; T1, D &gt; &amp;lhs, const TinyVector&lt; T1, D &gt; &amp;mhs, const TinyVector&lt; T1, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TinyVector&lt; Tensor&lt; typename BinaryReturn&lt; T1, T2, OpMultiply &gt;::Type_t, D &gt;, D &gt;</type>
      <name>symouterdot</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ae13b4c6acb99ab7cc4c895dd1e9fd1fc</anchor>
      <arglist>(const TinyVector&lt; T1, D &gt; &amp;lhs, const TinyVector&lt; T2, D &gt; &amp;mhs, const TinyVector&lt; T3, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ae3d9f5efebe7e2326019e32d8cb718ea</anchor>
      <arglist>(std::ostream &amp;out, const TinyVector&lt; T, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a47595cf4f975704c7aae0f8b5b7ae4bb</anchor>
      <arglist>(std::istream &amp;is, TinyVector&lt; T, D &gt; &amp;rhs)</arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::TinyVector::DontInitialize</name>
    <filename>a00167.html</filename>
    <anchor>a01452</anchor>
  <compound kind="struct">
    <name>qmcplusplus::printTinyVector</name>
    <filename>a00008.html</filename>
    <anchor>a01505</anchor>
    <templarg></templarg>
  </compound>
  <compound kind="file">
    <name>accept_kernel.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Particle/</path>
    <filename>a00788</filename>
    <member kind="function">
      <type>void</type>
      <name>accept_move_GPU_cuda</name>
      <anchorfile>a00788.html</anchorfile>
      <anchor>a2cb2b196ace47eb807a0d3a3a98c8f65</anchor>
      <arglist>(float *Rlist[], float new_pos[], int toAccept[], int iat, int N)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accept_move_GPU_cuda</name>
      <anchorfile>a00788.html</anchorfile>
      <anchor>a742b691f7a9a01e784e2f109417ba0cd</anchor>
      <arglist>(double *Rlist[], double new_pos[], int toAccept[], int iat, int N)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NL_move_cuda</name>
      <anchorfile>a00788.html</anchorfile>
      <anchor>a644388eda1f0a850aec3657962ed4ffb</anchor>
      <arglist>(float *Rlist[], float new_pos[], int N)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NL_move_cuda</name>
      <anchorfile>a00788.html</anchorfile>
      <anchor>a497a0d3b3d2ac8ae5cb264dd78eb6500</anchor>
      <arglist>(double *Rlist[], double new_pos[], int N)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AsymmetricDistanceTableData.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Particle/</path>
    <filename>a00789</filename>
    <class kind="struct">qmcplusplus::AsymmetricDTD</class>
    <namespace>qmcplusplus</namespace>
    <member kind="define">
      <type>#define</type>
      <name>QMCPLUSPLUS_ASYMMETROCDISTANCETABLEDATAIMPL_H</name>
      <anchorfile>a00789.html</anchorfile>
      <anchor>a50d7a97b17d19f4fd559fe78015603d1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DistanceTable.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Particle/</path>
    <filename>a00790</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>DistanceTableData *</type>
      <name>createDistanceTable</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a25d0e5d25fa87c487e27ad4f344f04ca</anchor>
      <arglist>(ParticleSet &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>DistanceTableData *</type>
      <name>createDistanceTable</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a8965a975211d8697b734b36d35b17d31</anchor>
      <arglist>(const ParticleSet &amp;s, ParticleSet &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DistanceTable.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Particle/</path>
    <filename>a00791</filename>
    <class kind="struct">qmcplusplus::DistanceTable</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DistanceTableData.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Particle/</path>
    <filename>a00792</filename>
    <class kind="struct">qmcplusplus::PairDataType</class>
    <class kind="struct">qmcplusplus::TempDisplacement</class>
    <class kind="class">qmcplusplus::DistanceTableData</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>FastParticleOperators.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Particle/</path>
    <filename>a00793</filename>
    <class kind="struct">qmcplusplus::ConvertPosUnit</class>
    <class kind="struct">qmcplusplus::ConvertPosUnit&lt; ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt;, Tensor&lt; T, 3 &gt;, 3, true &gt;</class>
    <class kind="struct">qmcplusplus::ConvertPosUnit&lt; ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt;, Tensor&lt; T, 3 &gt;, 3, false &gt;</class>
    <class kind="struct">qmcplusplus::ConvertPosUnit&lt; ParticleAttrib&lt; TinyVector&lt; T, 2 &gt; &gt;, Tensor&lt; T, 2 &gt;, 2, true &gt;</class>
    <class kind="struct">qmcplusplus::ConvertPosUnit&lt; ParticleAttrib&lt; TinyVector&lt; T, 2 &gt; &gt;, Tensor&lt; T, 2 &gt;, 2, false &gt;</class>
    <class kind="struct">qmcplusplus::ApplyBConds</class>
    <class kind="struct">qmcplusplus::ApplyBConds&lt; ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt;, Tensor&lt; T, 3 &gt;, 3, true &gt;</class>
    <class kind="struct">qmcplusplus::ApplyBConds&lt; ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt;, Tensor&lt; T, 3 &gt;, 3, false &gt;</class>
    <class kind="struct">qmcplusplus::ApplyBConds&lt; ParticleAttrib&lt; TinyVector&lt; T, 2 &gt; &gt;, Tensor&lt; T, 2 &gt;, 2, true &gt;</class>
    <class kind="struct">qmcplusplus::ApplyBConds&lt; ParticleAttrib&lt; TinyVector&lt; T, 2 &gt; &gt;, Tensor&lt; T, 2 &gt;, 2, false &gt;</class>
    <namespace>qmcplusplus</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SUPERCELL_BOUNDARY_LIMITS</name>
      <anchorfile>a00793.html</anchorfile>
      <anchor>a8d78c46d7923014a94df1c7c9c4e4808</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>THREE_DIM_BOUNDARY_BLOCK</name>
      <anchorfile>a00793.html</anchorfile>
      <anchor>aa6fd7caf233250fc90abcdc1ea94b815</anchor>
      <arglist>(X, Y, Z, EPS, PLUSONE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TWO_DIM_BOUNDARY_BLOCK</name>
      <anchorfile>a00793.html</anchorfile>
      <anchor>a37973b59c0b031123bbd89f78befd105</anchor>
      <arglist>(X, Y, EPS, PLUSONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put2box</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>adf7e43d9708438a92a8504a60a8fc2e1</anchor>
      <arglist>(ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;inout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put2box</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a35ac32ee9ba6734d7435c8d90f515a9e</anchor>
      <arglist>(const ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;in, ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;out)</arglist>
    </member>
  <compound kind="struct">
    <name>qmcplusplus::ConvertPosUnit</name>
    <filename>a00008.html</filename>
    <anchor>a01434</anchor>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>D</templarg>
    <templarg>ORTHO</templarg>
  <compound kind="struct">
    <name>qmcplusplus::ApplyBConds</name>
    <filename>a00008.html</filename>
    <anchor>a01427</anchor>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>D</templarg>
    <templarg>ORTHO</templarg>
  </compound>
  <compound kind="file">
    <name>HDFParticleAttrib.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Particle/</path>
    <filename>a00794</filename>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; ParticleAttrib&lt; int &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; ParticleAttrib&lt; double &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; ParticleAttrib&lt; TinyVector&lt; double, 3 &gt; &gt; &gt;</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>HDFParticleAttrib.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/ParticleIO/</path>
    <filename>a00795</filename>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; ParticleAttrib&lt; int &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; ParticleAttrib&lt; double &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; ParticleAttrib&lt; TinyVector&lt; double, D &gt; &gt; &gt;</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>HDFWalkerInput0.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Particle/</path>
    <filename>a00796</filename>
  </compound>
  <compound kind="file">
    <name>HDFWalkerInput0.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Particle/</path>
    <filename>a00797</filename>
    <class kind="class">qmcplusplus::HDFWalkerInput0</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>HDFWalkerInput_0_0.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Particle/</path>
    <filename>a00798</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>HDFWalkerInput_0_0.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Particle/</path>
    <filename>a00799</filename>
    <class kind="class">qmcplusplus::HDFWalkerInput_0_0</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>HDFWalkerInput_0_4.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Particle/</path>
    <filename>a00800</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>HDFWalkerInput_0_4.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Particle/</path>
    <filename>a00801</filename>
    <class kind="struct">qmcplusplus::HDFWalkerInput_0_4</class>
    <class kind="struct">qmcplusplus::HDFWalkerInput_0_4::IOInfo</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>HDFWalkerInputCollect.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Particle/</path>
    <filename>a00802</filename>
  </compound>
  <compound kind="file">
    <name>HDFWalkerInputCollect.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Particle/</path>
    <filename>a00803</filename>
    <class kind="class">qmcplusplus::HDFWalkerInputCollect</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>HDFWalkerInputManager.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Particle/</path>
    <filename>a00804</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>HDFWalkerInputManager.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Particle/</path>
    <filename>a00805</filename>
    <class kind="class">qmcplusplus::HDFWalkerInputManager</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>HDFWalkerIO.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Particle/</path>
    <filename>a00806</filename>
  </compound>
  <compound kind="file">
    <name>HDFWalkerIOEngine.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Particle/</path>
    <filename>a00807</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>HDFWalkerIOEngine.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Particle/</path>
    <filename>a00808</filename>
    <class kind="struct">qmcplusplus::HDFWalkerIOEngine</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>HDFWalkerOutput.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Particle/</path>
    <filename>a00809</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>HDFWalkerOutput.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Particle/</path>
    <filename>a00810</filename>
    <class kind="class">qmcplusplus::HDFWalkerOutput</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>make_clones.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Particle/</path>
    <filename>a00811</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>MCWalkerConfiguration.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Particle/</path>
    <filename>a00812</filename>
    <class kind="struct">qmcplusplus::MCSample</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>MCWalkerConfiguration.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Particle/</path>
    <filename>a00813</filename>
    <class kind="class">qmcplusplus::MCWalkerConfiguration</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>MixedBCDistanceTableData.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Particle/</path>
    <filename>a00814</filename>
    <class kind="struct">qmcplusplus::BoxBCHandler</class>
    <class kind="struct">qmcplusplus::BoxBCHandler&lt; T, 3, true &gt;</class>
    <class kind="struct">qmcplusplus::BoxBCHandler&lt; T, 3, false &gt;</class>
    <class kind="struct">qmcplusplus::MixedBCDTD</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ParticleSet.BC.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Particle/</path>
    <filename>a00815</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ParticleSet.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Particle/</path>
    <filename>a00816</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>void</type>
      <name>add_p_timer</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a5f1d28cf1aaa07569cbb66ef78a71005</anchor>
      <arglist>(vector&lt; NewTimer * &gt; &amp;timers)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParticleSet.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Particle/</path>
    <filename>a00817</filename>
    <class kind="struct">qmcplusplus::MCDataType</class>
    <class kind="class">qmcplusplus::ParticleSet</class>
    <namespace>qmcplusplus</namespace>
  <compound kind="struct">
    <name>qmcplusplus::MCDataType</name>
    <filename>a00008.html</filename>
    <anchor>a01488</anchor>
    <templarg>T</templarg>
  </compound>
  <compound kind="file">
    <name>ParticleSetProxy.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Particle/</path>
    <filename>a00818</filename>
    <class kind="struct">qmcplusplus::D2OnSphere</class>
    <class kind="struct">qmcplusplus::D1OnSphere</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ParticleSetProxy.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Particle/</path>
    <filename>a00819</filename>
    <class kind="struct">qmcplusplus::DistTableOnSphere</class>
    <class kind="struct">qmcplusplus::MultiMoveHandler</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>PLayoutFunctions.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Particle/</path>
    <filename>a00820</filename>
    <class kind="struct">OHMMS::PLayoutFunc</class>
    <namespace>OHMMS</namespace>
  </compound>
  <compound kind="file">
    <name>Reptile.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Particle/</path>
    <filename>a00821</filename>
    <class kind="class">qmcplusplus::Reptile</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>SymmetricDistanceTableData.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Particle/</path>
    <filename>a00822</filename>
    <class kind="struct">qmcplusplus::SymmetricDTD</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>Walker.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Particle/</path>
    <filename>a00823</filename>
    <class kind="struct">qmcplusplus::Walker</class>
    <namespace>qmcplusplus</namespace>
    <member kind="enumvalue">
      <type>@</type>
      <name>LOGPSI</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a39fca1837c5ce7715cbf571669660c13a4fe62519ebe82cad43a4cf94ffb4a280</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SIGN</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a39fca1837c5ce7715cbf571669660c13a682bff09ecd13e855c20beeea7f234f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UMBRELLAWEIGHT</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a39fca1837c5ce7715cbf571669660c13a7682bc5d032ed9a8739deafb04c69cb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>R2ACCEPTED</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a39fca1837c5ce7715cbf571669660c13ab76925f697df2ff1e985a880c8f85f83</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>R2PROPOSED</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a39fca1837c5ce7715cbf571669660c13abe19e327b37a1d4606aeb9222e6b8c2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DRIFTSCALE</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a39fca1837c5ce7715cbf571669660c13a61ff5e550114b3bf194ab479533a3855</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ALTERNATEENERGY</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a39fca1837c5ce7715cbf571669660c13a141b54d2836861d6195021cc88ab10ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LOCALENERGY</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a39fca1837c5ce7715cbf571669660c13a05c83ed2bcae6568117b429168f45fd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LOCALPOTENTIAL</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a39fca1837c5ce7715cbf571669660c13aa5e54219b00badabf8d2e84479b9a72d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NUMPROPERTIES</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a39fca1837c5ce7715cbf571669660c13acb3ac6718d887d4baf8089de35504ae1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a7666888eaf51b680ccdf24329c993e9a</anchor>
      <arglist>(ostream &amp;out, const Walker&lt; RealType, PA &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParticleAttrib.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/ParticleBase/</path>
    <filename>a00824</filename>
    <class kind="struct">qmcplusplus::CreateLeaf&lt; ParticleAttrib&lt; T &gt; &gt;</class>
    <class kind="class">qmcplusplus::SizeLeafPA</class>
    <class kind="struct">qmcplusplus::LeafFunctor&lt; Scalar&lt; T &gt;, SizeLeafPA &gt;</class>
    <class kind="struct">qmcplusplus::LeafFunctor&lt; ParticleAttrib&lt; T &gt;, SizeLeafPA &gt;</class>
    <class kind="struct">qmcplusplus::LeafFunctor&lt; ParticleAttrib&lt; T &gt;, EvalLeaf1 &gt;</class>
    <namespace>qmcplusplus</namespace>
    <member kind="define">
      <type>#define</type>
      <name>OHMMS_PARTICLEATTRIB_PEPE_OPERATORS_H</name>
      <anchorfile>a00824.html</anchorfile>
      <anchor>a727e4df8a8c4eb22dc2bae7bb07b7eda</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PETE_EXPRESSION_OPERATORS</name>
      <anchorfile>a00824.html</anchorfile>
      <anchor>aeac19c79314c26ec278b044357f5cb6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpUnaryMinus, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a170536d6b92ac4344ccb35a0e283e473</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpUnaryPlus, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>aea7e1ad1dd0b101a2c82055467a9dfe3</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpBitwiseNot, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator~</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ae36e1febc5c8aef2893dc001e00879ca</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpIdentity, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>PETE_identity</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a336bf115a99b6324bf5f040d7b9926f5</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpCast&lt; T1 &gt;, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>peteCast</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a1151d4dd4bc4098ba2fb599abebe07cb</anchor>
      <arglist>(const T1 &amp;, const ParticleAttrib&lt; T2 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a9fc4314209753ac2e79c5684922f871b</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a1e661eca595379592058dde8280d0f63</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator*</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a30c5af49ff9a13a836f130e83f53cd17</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>af6eb1c0e38eec19b38cd8a3a916b2f35</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&amp;</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ab91f19891b26c3fb501abb74a87d6788</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a39db443fbf8c2515b19c88f47747dd31</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>adcbd0897afa1abfa0e1572078db76b3a</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a92da032c1d8568ddf47716f2413b89cd</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a6b8fc07bdfc6d54878312890ba4a7fe4</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator*</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a52882c9925a599b2afa6643cbe89eef7</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a0e34b23148730d493212047387330d39</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&amp;</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>affa131ad621eb5c38a7e90208b4977cc</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a7d9f5f2a9594d65e3467bb98d2813f3c</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a9ba5944fe389a4f66fd44be24bb8898d</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a259b6b4fb812f4b7f4fe4eaaae10fde2</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a83b0384d57e8b3d73440bc148b3baaf2</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator*</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a375eefcc1930240f6025e604ab8fa355</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>aeed2093c94e3420f47e3857595e649d1</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&amp;</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a9ca950e1d8e73757438fea7996f18ca7</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>afa7ef4b90307057197717352aaf9791a</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a2a86e1d9968106a25ec46000f3d0e339</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ac562cdb445ab5cc9315d7b8bfc970e67</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>aa2ce5fdbfc11d20b5d195e216d384d1d</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator*</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a1cf60e63c737f7daf0faa89560c27bef</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a4cae052db2aa091033cab6fd7481d186</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&amp;</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a8212c1f0a0b73b2f763a2625cca28226</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a0025bfbbed67d9dbeb5d4d821bf75dde</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a3c3834178fd8ae4c6f9516c8b3246885</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a7184fe97be4e5f580b9dda43f88185c4</anchor>
      <arglist>(const T1 &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a1ee3c9fa8c50db3e8ad134fc5e5330bc</anchor>
      <arglist>(const T1 &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator*</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>aec3e4612c684e5a41c63e138adeb161d</anchor>
      <arglist>(const T1 &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a863c819b57795422e2b9ae500a5c9e1e</anchor>
      <arglist>(const T1 &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&amp;</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a994bcd7cc6fa3e71dd4d5568fcefd756</anchor>
      <arglist>(const T1 &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a5be2dd43cbd2849ab6019e84ee971859</anchor>
      <arglist>(const T1 &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a38b0ce3ea9d4326307fc54ec4d1d788d</anchor>
      <arglist>(const T1 &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; TrinaryNode&lt; FnWhere, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t, typename CreateLeaf&lt; T3 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>where</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a2525a4f6cdb5ec14c665c4bdbab8e358</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;c, const T2 &amp;t, const T3 &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpUnaryMinus, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a718558345d9a91d07c27c1b0b371c99b</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpUnaryPlus, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a7bad8650693fa4217a37922c7d8f7bd0</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpBitwiseNot, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator~</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ab79ebdd6cb77e7f4318b63b592efcd37</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpIdentity, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>PETE_identity</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ad38d4197aa255582acf4dcc8b2906014</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpCast&lt; T1 &gt;, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>peteCast</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a80f4c21c26ceda38669040c9877c3023</anchor>
      <arglist>(const T1 &amp;, const Expression&lt; T2 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ad8e7c58f145e6a90b74e803fb6154e55</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a89162794330624a0dab3febd63cb18b1</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator*</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ae07632911ffcec124c4595999253554e</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a3cf186f501697b0d90904f94046477b0</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&amp;</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a57cba5ed9bd8d35b6b58bb6d5519a7cc</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ae643cfebc1000927edb581439caf5986</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a95270171bbc9b614d4b286976adaf002</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>aea5a0406b6954a9d02b5f62f78112148</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a1f9e31d1de2feb6257dc4a6bf7edbe6b</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator*</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>af8d8112db42624c01c211a72019e2f0d</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a677533a6bc57a2d0afe15f9e4b2ecdef</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&amp;</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a8cc96d6431e0c04e2a285f629316e5d9</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>aabbd45bfd543840b302fa7cd460ce6fe</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ade82452e96196b3a01cbb3bcbd4e38f5</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a83200e4892262e3239b57d00725d7809</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a50decf6f30401e515c186b62fb62f265</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator*</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a94427848ce376ab52207bf01e52205e8</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>acd20094503a64ca4d2cf892a18073605</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&amp;</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a05cf4a67ffa6e5fbb792e2c12a930a16</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ae406d477eb6ea59889454084f3475a8e</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a5302492b0560c4707a4e3f0264c5554c</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; TrinaryNode&lt; FnWhere, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t, typename CreateLeaf&lt; T3 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>where</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a1d82e92ab0e6ed1f072380d8b422ed95</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;c, const T2 &amp;t, const T3 &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>ParticleAttrib&lt; T1 &gt; &amp;</type>
      <name>assign</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a026e4690dea477f4018a9de93db58a71</anchor>
      <arglist>(ParticleAttrib&lt; T1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParticleAttrib&lt; T1 &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a1e9e78d1255f3ee125e46c929a45380b</anchor>
      <arglist>(ParticleAttrib&lt; T1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParticleAttrib&lt; T1 &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a5bd64c5d988eb205c94dae43d5eee206</anchor>
      <arglist>(ParticleAttrib&lt; T1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParticleAttrib&lt; T1 &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ad9a68ed32c9df03a3e66e89881b016f4</anchor>
      <arglist>(ParticleAttrib&lt; T1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParticleAttrib&lt; T1 &gt; &amp;</type>
      <name>operator%=</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a681684103aaa865893584cb1dd1be2b3</anchor>
      <arglist>(ParticleAttrib&lt; T1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParticleAttrib&lt; T1 &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a4910f1b10da1c97a09096978af6f757d</anchor>
      <arglist>(ParticleAttrib&lt; T1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParticleAttrib&lt; T1 &gt; &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>afd67c5e4eb00eb16a110edd71956fe1f</anchor>
      <arglist>(ParticleAttrib&lt; T1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParticleAttrib&lt; T1 &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a65b100f962fc4c0e8be8db0e5c77a802</anchor>
      <arglist>(ParticleAttrib&lt; T1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a9116f20a31f556d67d779933c25a8dff</anchor>
      <arglist>(ParticleAttrib&lt; T &gt; &amp;lhs, const Op &amp;op, const Expression&lt; RHS &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ac436de97973f01f51a9b2c0245830d12</anchor>
      <arglist>(std::ostream &amp;out, const ParticleAttrib&lt; T &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParticleAttrib.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/ParticleBase/</path>
    <filename>a00825</filename>
    <class kind="class">qmcplusplus::ParticleAttrib</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ParticleBase.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/ParticleBase/</path>
    <filename>a00826</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ParticleBase.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/ParticleBase/</path>
    <filename>a00827</filename>
    <class kind="class">qmcplusplus::ParticleBase</class>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>T *</type>
      <name>get_first_address</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a985d2b8f3d4fb60ae826bcfca41d00c5</anchor>
      <arglist>(ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>get_last_address</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a20151131e44417e8a03857b6c208f62f</anchor>
      <arglist>(ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParticleFunctions.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/ParticleBase/</path>
    <filename>a00828</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>void</type>
      <name>PartitionGrid</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ab0587fbe9455fc97650c2e381e9ffec7</anchor>
      <arglist>(PL &amp;lattice, GIM &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ExpandSuperCell</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a7c5471808ca76366cb29b412f78cff1a</anchor>
      <arglist>(PT &amp;in_, PT &amp;out_, GIV &amp;uc_grid, GIM &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ExpandSuperCellOMP</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a532b7d3ea9916861a174a6fb6bcbe6fa</anchor>
      <arglist>(PT &amp;in_, PT &amp;out_, GIV &amp;uc_grid, GIM &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ExpandSuperCell</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a5529e82a95be646ae75695d427cc191b</anchor>
      <arglist>(PT &amp;inout_, GIV &amp;uc_grid)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParticleMessage.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/ParticleBase/</path>
    <filename>a00829</filename>
    <member kind="function">
      <type>void</type>
      <name>gsum</name>
      <anchorfile>a00829.html</anchorfile>
      <anchor>ad15a0a15c4418b9ac6e613a727988f70</anchor>
      <arglist>(T &amp;, int)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParticleUtility.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/ParticleBase/</path>
    <filename>a00830</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>void</type>
      <name>convert</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a9f4b549374e4eca9f61ff0bc6ca6a594</anchor>
      <arglist>(const PL &amp;lat, const PV &amp;pin, PV &amp;pout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert2Cart</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ae2a3dea6ae7e2ac190c1d61d3398116b</anchor>
      <arglist>(const PL &amp;lat, PV &amp;pin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert2Unit</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>aa7c80b73f40a295c5dc9da3910f91ad8</anchor>
      <arglist>(const PL &amp;lat, PV &amp;pin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wrapAroundBox</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a195d28e3e8c346d40b65ec21db142ed2</anchor>
      <arglist>(const PL &amp;lat, const PV &amp;pin, PV &amp;pout)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Dot</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>aa2041d1c7a6513d15ba2f6c4e8608681</anchor>
      <arglist>(const ParticleAttrib&lt; TinyVector&lt; double, D &gt; &gt; &amp;pa, const ParticleAttrib&lt; TinyVector&lt; double, D &gt; &gt; &amp;pb)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Sum</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>af90a7c1e5437d1b42f23c9e93002edac</anchor>
      <arglist>(const ParticleAttrib&lt; double &gt; &amp;pa)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a1675036ddc206d83119152f14d7644de</anchor>
      <arglist>(ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;pa)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RandomSeqGenerator.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/ParticleBase/</path>
    <filename>a00831</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>void</type>
      <name>assignGaussRand</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>abd50a0fe5601db35d65d727384883e0f</anchor>
      <arglist>(T *restrict a, unsigned n, RG &amp;rng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assignUniformRand</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>af96f4a895eb668562a56f3c82cab9347</anchor>
      <arglist>(T *restrict a, unsigned n, RG &amp;rng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeGaussRandom</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a98748812783fa6cf59b2a5b9a9a2cbdc</anchor>
      <arglist>(std::vector&lt; TinyVector&lt; T, D &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeGaussRandom</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a5165fafc6febf0cabb19ced88ace5383</anchor>
      <arglist>(Matrix&lt; TinyVector&lt; T, D &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeGaussRandom</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a79ddfe343eeba779c9663c243dcee5be</anchor>
      <arglist>(ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeGaussRandom</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a04e431d3ec4f5a3c8682a105dfd293a9</anchor>
      <arglist>(ParticleAttrib&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeUniformRandom</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a0a469ab94eae932a775bfe99ab6a5b9b</anchor>
      <arglist>(ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeUniformRandom</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a42708105da3b566b23eb6d2edb8745fe</anchor>
      <arglist>(ParticleAttrib&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeSphereRandom</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a0e3f9bb44933ec58770172ae797323c3</anchor>
      <arglist>(ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeSphereRandom</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a33b1640261daf69702099c946ad17df2</anchor>
      <arglist>(ParticleAttrib&lt; TinyVector&lt; T, 2 &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeGaussRandomWithEngine</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a80c24a62dc0be1823adf5e21ac21e1ec</anchor>
      <arglist>(ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;a, RG &amp;rng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeGaussRandomWithEngine</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>adf0756d844a105dc97358df9ad4bf04c</anchor>
      <arglist>(std::vector&lt; TinyVector&lt; T, D &gt; &gt; &amp;a, RG &amp;rng)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ESHDFParticleParser.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/ParticleIO/</path>
    <filename>a00832</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ESHDFParticleParser.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/ParticleIO/</path>
    <filename>a00833</filename>
    <class kind="struct">qmcplusplus::ESHDFElectronsParser</class>
    <class kind="struct">qmcplusplus::ESHDFIonsParser</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>GnomeParticleInputImpl.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/ParticleIO/</path>
    <filename>a00834</filename>
    <namespace>OHMMS</namespace>
  </compound>
  <compound kind="file">
    <name>HDFParticleIO.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/ParticleIO/</path>
    <filename>a00835</filename>
  </compound>
  <compound kind="file">
    <name>HDFParticleIO.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/ParticleIO/</path>
    <filename>a00836</filename>
    <class kind="class">qmcplusplus::HDFParticleParser</class>
    <class kind="class">qmcplusplus::HDFSaveParticle</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ParticleIOUtility.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/ParticleIO/</path>
    <filename>a00837</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ParticleIOUtility.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/ParticleIO/</path>
    <filename>a00838</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>void</type>
      <name>PartitionGrid</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>acdef8f0d68a32665d186d7a0eefed0db</anchor>
      <arglist>(ParticleSet::ParticleLayout_t &amp;lattice, GI &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expandSuperCell</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a280a3879f7673c255e3065600a453e5f</anchor>
      <arglist>(ParticleSet &amp;ref, Tensor&lt; int, OHMMS_DIM &gt; &amp;tmat)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParticleLayoutIO.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/ParticleIO/</path>
    <filename>a00839</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ParticleLayoutIO.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/ParticleIO/</path>
    <filename>a00840</filename>
    <class kind="class">qmcplusplus::LatticeParser</class>
    <class kind="class">qmcplusplus::LatticeXMLWriter</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>XMLParticleIO.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/ParticleIO/</path>
    <filename>a00841</filename>
    <class kind="struct">qmcplusplus::ParticleAttribXmlNode</class>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>void</type>
      <name>setSpeciesProperty</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a206c462c01314c225a47ff274cc200a4</anchor>
      <arglist>(SpeciesSet &amp;tspecies, int sid, xmlNodePtr cur)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>XMLParticleIO.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/ParticleIO/</path>
    <filename>a00842</filename>
    <class kind="class">qmcplusplus::XMLParticleParser</class>
    <class kind="class">qmcplusplus::XMLSaveParticle</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ParticleTags.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/</path>
    <filename>a00843</filename>
  </compound>
  <compound kind="file">
    <name>ParticleTags.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/</path>
    <filename>a00844</filename>
    <class kind="struct">ParticleTags</class>
  </compound>
  <compound kind="file">
    <name>HamiltonianPool.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCApp/</path>
    <filename>a00845</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>HamiltonianPool.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCApp/</path>
    <filename>a00846</filename>
    <class kind="class">qmcplusplus::HamiltonianPool</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>InitMolecularSystem.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCApp/</path>
    <filename>a00847</filename>
    <class kind="struct">qmcplusplus::LoneElectron</class>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>TinyVector&lt; T, 3 &gt;</type>
      <name>lower_bound</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ae8f706fa96eb2bee117673e92a8613c0</anchor>
      <arglist>(const TinyVector&lt; T, 3 &gt; &amp;a, const TinyVector&lt; T, 3 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>TinyVector&lt; T, 3 &gt;</type>
      <name>upper_bound</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a875998be46d743aaffd0dce6f46a50e0</anchor>
      <arglist>(const TinyVector&lt; T, 3 &gt; &amp;a, const TinyVector&lt; T, 3 &gt; &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>InitMolecularSystem.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCApp/</path>
    <filename>a00848</filename>
    <class kind="class">qmcplusplus::InitMolecularSystem</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>MO2Grid3D.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCApp/</path>
    <filename>a00849</filename>
    <class kind="struct">qmcplusplus::BasisGroupType</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>MO2Grid3D.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCApp/</path>
    <filename>a00850</filename>
    <class kind="class">qmcplusplus::MO2Grid3D</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>mo2grid3d_main.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCApp/</path>
    <filename>a00851</filename>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>a00851.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParticleSetPool.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCApp/</path>
    <filename>a00852</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ParticleSetPool.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCApp/</path>
    <filename>a00853</filename>
    <class kind="class">qmcplusplus::ParticleSetPool</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>qmcapp.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCApp/</path>
    <filename>a00854</filename>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>a00854.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>QMCAppBase.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCApp/</path>
    <filename>a00855</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>QMCAppBase.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCApp/</path>
    <filename>a00856</filename>
    <class kind="class">qmcplusplus::QMCAppBase</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>QMCDriverFactory.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCApp/</path>
    <filename>a00857</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>QMCDriverFactory.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCApp/</path>
    <filename>a00858</filename>
    <class kind="struct">qmcplusplus::QMCDriverFactory</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>QMCInterface.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCApp/</path>
    <filename>a00859</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="typedef">
      <type>std::map&lt; std::string, HamiltonianFactory * &gt;</type>
      <name>PoolType</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a382af37d4899a0735b8cf20e08978876</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>QMCInterface.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCApp/</path>
    <filename>a00860</filename>
    <class kind="class">qmcplusplus::QMCInterface</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>QMCMain.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCApp/</path>
    <filename>a00861</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>QMCMain.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCApp/</path>
    <filename>a00862</filename>
    <class kind="class">qmcplusplus::QMCMain</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>WaveFunctionPool.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCApp/</path>
    <filename>a00863</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>WaveFunctionPool.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCApp/</path>
    <filename>a00864</filename>
    <class kind="class">qmcplusplus::WaveFunctionPool</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>BranchIO.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>a00865</filename>
    <class kind="struct">qmcplusplus::h5data_proxy&lt; accumulator_set&lt; T &gt; &gt;</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>BranchIO.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>a00866</filename>
    <class kind="struct">qmcplusplus::BranchIO</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>CloneManager.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>a00867</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ENABLE_CLONE_PSI_AND_H</name>
      <anchorfile>a00867.html</anchorfile>
      <anchor>a7946355f151bc08bf3eb7d3f58921936</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CloneManager.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>a00868</filename>
    <class kind="class">qmcplusplus::CloneManager</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>CSUpdateBase.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/CorrelatedSampling/</path>
    <filename>a00869</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>CSUpdateBase.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/CorrelatedSampling/</path>
    <filename>a00870</filename>
    <class kind="class">qmcplusplus::CSUpdateBase</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>CSVMC.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/CorrelatedSampling/</path>
    <filename>a00871</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>CSVMC.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/CorrelatedSampling/</path>
    <filename>a00872</filename>
    <class kind="class">qmcplusplus::CSVMC</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>CSVMCUpdateAll.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/CorrelatedSampling/</path>
    <filename>a00873</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>CSVMCUpdateAll.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/CorrelatedSampling/</path>
    <filename>a00874</filename>
    <class kind="class">qmcplusplus::CSVMCUpdateAll</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>CSVMCUpdatePbyP.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/CorrelatedSampling/</path>
    <filename>a00875</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>CSVMCUpdatePbyP.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/CorrelatedSampling/</path>
    <filename>a00876</filename>
    <class kind="class">qmcplusplus::CSVMCUpdatePbyP</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DMC.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>a00877</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DMC.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>a00878</filename>
    <class kind="class">qmcplusplus::DMC</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DMC_CUDA.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>a00879</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DMC_CUDA.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>a00880</filename>
    <class kind="class">qmcplusplus::DMCcuda</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DMCFactory.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>a00881</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DMCFactory.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>a00882</filename>
    <class kind="struct">qmcplusplus::DMCFactory</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DMCNonLocalUpdate.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>a00883</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DMCNonLocalUpdate.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>a00884</filename>
    <class kind="class">qmcplusplus::DMCNonLocalUpdate</class>
    <class kind="class">qmcplusplus::DMCNonLocalUpdatePbyP</class>
    <class kind="class">qmcplusplus::DMCNonLocalUpdatePbyPFast</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DMCOMP.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>a00885</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DMCOMP.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>a00886</filename>
    <class kind="class">qmcplusplus::DMCOMP</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DMCOMP.master.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>a00887</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DMCOMPOPT.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>a00888</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DMCOMPOPT.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>a00889</filename>
    <class kind="class">qmcplusplus::DMCOMPOPT</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DMCPeta.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>a00890</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DMCPeta.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>a00891</filename>
    <class kind="class">qmcplusplus::DMCPeta</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DMCUpdateAll.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>a00892</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DMCUpdateAll.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>a00893</filename>
    <class kind="class">qmcplusplus::DMCUpdateAllWithRejection</class>
    <class kind="class">qmcplusplus::DMCUpdateAllWithKill</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DMCUpdatePbyP.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>a00894</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DMCUpdatePbyP.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>a00895</filename>
    <class kind="class">qmcplusplus::DMCUpdatePbyPWithRejection</class>
    <class kind="class">qmcplusplus::DMCUpdatePbyPWithRejectionFast</class>
    <class kind="class">qmcplusplus::DMCUpdatePbyPWithKill</class>
    <class kind="class">qmcplusplus::RNDMCUpdatePbyPFast</class>
    <class kind="class">qmcplusplus::RNDMCUpdatePbyPCeperley</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DMCUpdatePbyPFast.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>a00896</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DMCWOS.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>a00897</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DMCWOS.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>a00898</filename>
    <class kind="class">qmcplusplus::DMCWOS</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>WalkerControlFactory.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>a00899</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>WalkerControlBase *</type>
      <name>createWalkerController</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ab01a0a0c870ee95ea41e4c952db338dd</anchor>
      <arglist>(int nwtot, Communicate *comm, xmlNodePtr cur, bool reconfig=false)</arglist>
    </member>
    <member kind="function">
      <type>WalkerControlBase *</type>
      <name>CreateWalkerController</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a5ae7f713ab4607944df0e8bfbd539dd0</anchor>
      <arglist>(bool reconfig, int &amp;swapmode, int nideal, int nmax, int nmin, WalkerControlBase *wc, Communicate *comm)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WalkerControlFactory.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>a00900</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>WalkerControlMPI.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>a00901</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DMC_BRANCH_START</name>
      <anchorfile>a00901.html</anchorfile>
      <anchor>aed1eac73f3edeb8a043380ce18e86da3</anchor>
      <arglist>(NOW)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DMC_BRANCH_STOP</name>
      <anchorfile>a00901.html</anchorfile>
      <anchor>ae81afda6ca52b896e886be1d62893c8c</anchor>
      <arglist>(TID, TM)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DMC_BRANCH_DUMP</name>
      <anchorfile>a00901.html</anchorfile>
      <anchor>a52e6b95cb2f7234785d106192a6dd730</anchor>
      <arglist>(IT, T1, T2, T3)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WalkerControlMPI.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>a00902</filename>
    <class kind="struct">qmcplusplus::WalkerControlMPI</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>WalkerPureDMC.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>a00903</filename>
  </compound>
  <compound kind="file">
    <name>WalkerPureDMC.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>a00904</filename>
    <class kind="struct">qmcplusplus::WalkerPureDMC</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>WalkerReconfiguration.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>a00905</filename>
  </compound>
  <compound kind="file">
    <name>WalkerReconfiguration.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>a00906</filename>
    <class kind="struct">qmcplusplus::WalkerReconfiguration</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>WalkerReconfigurationMPI.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>a00907</filename>
  </compound>
  <compound kind="file">
    <name>WalkerReconfigurationMPI.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>a00908</filename>
    <class kind="struct">qmcplusplus::WalkerReconfigurationMPI</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DriftOperators.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>a00909</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>T</type>
      <name>getDriftScale</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a4ea2e713d4f617ec0163c186bd6da330</anchor>
      <arglist>(T tau, const ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;ga)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getDriftScale</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a2f0efe7e08e99485603dec9fbc9de343</anchor>
      <arglist>(T tau, const ParticleAttrib&lt; TinyVector&lt; complex&lt; T &gt;, D &gt; &gt; &amp;ga)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getDriftScale</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a87c41b9dd799ae1e11b402eb79f31047</anchor>
      <arglist>(T tau, const TinyVector&lt; T, D &gt; &amp;qf)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getDriftScale</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a5861648b6ed1b379e52a3ae6868012d3</anchor>
      <arglist>(T tau, const TinyVector&lt; complex&lt; T &gt;, D &gt; &amp;qf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getScaledDrift</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>af212bd7d38b6223c37be2fa0e4bfa690</anchor>
      <arglist>(T tau, const TinyVector&lt; T, D &gt; &amp;qf, TinyVector&lt; T, D &gt; &amp;drift)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getScaledDrift</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a2dbc98853b2065cf9ad651c9e3150cdf</anchor>
      <arglist>(T tau, const TinyVector&lt; complex&lt; T &gt;, D &gt; &amp;qf, TinyVector&lt; T, D &gt; &amp;drift)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getNodeCorrectionP</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a06f371249974e0163fa48f1fc1352832</anchor>
      <arglist>(T tau, const ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;ga, T a=1)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getNodeCorrectionW</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>aae54026b25b67c246b4bfb1ec661d5fe</anchor>
      <arglist>(T tau, const ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;ga)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScaledDriftPbyP</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a6ff26d1b734927d53eec33939237ddef</anchor>
      <arglist>(T tau, const ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;qf, ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;drift)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setScaledDriftPbyPandNodeCorr</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ac0b954aef31b94d8b7b2d9528149dbe8</anchor>
      <arglist>(T tau, const ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;qf, ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;drift)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setScaledDriftPbyPandNodeCorr</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ac33c2f6b584ee6f823eb478a3a2f65b8</anchor>
      <arglist>(T tau, const ParticleAttrib&lt; TinyVector&lt; complex&lt; T &gt;, D &gt; &gt; &amp;qf, ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;drift)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setLargestScaledDriftPbyP</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a490f29d895c5d9c9ee7738017f59ba73</anchor>
      <arglist>(T tau, const ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;qf, ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;drift)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScaledDrift</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a1411c23233dc46445d9d22a9e770f485</anchor>
      <arglist>(T tau, const ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;qf, ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;drift)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScaledDrift</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a0bed4c71eae22317efd6e42721793499</anchor>
      <arglist>(T tau, ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;drift)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScaledDrift</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a68ad7f6d2887987da847e94733a819aa</anchor>
      <arglist>(T tau, const ParticleAttrib&lt; TinyVector&lt; complex&lt; T &gt;, D &gt; &gt; &amp;qf, ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;drift)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScaledDrift</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a1ff1472a2622e0cbcd020a2e8bcd83bb</anchor>
      <arglist>(T tau, const ParticleAttrib&lt; TinyVector&lt; complex&lt; T &gt;, D &gt; &gt; &amp;qf, ParticleAttrib&lt; TinyVector&lt; complex&lt; T &gt;, D &gt; &gt; &amp;drift)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assignDrift</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>adcb871cd67182e7ba3d43db25162a703</anchor>
      <arglist>(T s, const ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;ga, ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;da)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assignDrift</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a7c860dcbd58d417e501d5812d19631a5</anchor>
      <arglist>(T s, const ParticleAttrib&lt; TinyVector&lt; complex&lt; T &gt;, D &gt; &gt; &amp;ga, ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;da)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DummyQMC.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>a00910</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DummyQMC.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>a00911</filename>
    <class kind="class">qmcplusplus::DummyQMC</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>QMCCorrelatedSamplingLinearOptimize.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>a00912</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>QMCCorrelatedSamplingLinearOptimize.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>a00913</filename>
    <class kind="class">qmcplusplus::QMCCorrelatedSamplingLinearOptimize</class>
    <namespace>qmcplusplus</namespace>
    <member kind="define">
      <type>#define</type>
      <name>QMCPLUSPLUS_QMCCSLINEAROPTIMIZATION_VMCSINGLE_H</name>
      <anchorfile>a00913.html</anchorfile>
      <anchor>ab101a12e79125815f4d70f4e80e8047a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>QMCCostFunctionBase.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>a00914</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>QMCCostFunctionBase.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>a00915</filename>
    <class kind="class">qmcplusplus::QMCCostFunctionBase</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>QMCCostFunctionCUDA.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>a00916</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>QMCCostFunctionCUDA.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>a00917</filename>
    <class kind="class">qmcplusplus::QMCCostFunctionCUDA</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>QMCCostFunctionOMP.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>a00918</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>QMCCostFunctionOMP.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>a00919</filename>
    <class kind="class">qmcplusplus::QMCCostFunctionOMP</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>QMCCSLinearOptimizeWFmanagerOMP.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>a00920</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>QMCCSLinearOptimizeWFmanagerOMP.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>a00921</filename>
    <class kind="class">qmcplusplus::QMCCSLinearOptimizeWFmanagerOMP</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>QMCDriver.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>a00922</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>QMCDriver.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>a00923</filename>
    <class kind="class">qmcplusplus::QMCDriver</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>QMCFixedSampleLinearOptimize.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>a00924</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>QMCFixedSampleLinearOptimize.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>a00925</filename>
    <class kind="class">qmcplusplus::QMCFixedSampleLinearOptimize</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>QMCLinearOptimize.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>a00926</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>QMCLinearOptimize.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>a00927</filename>
    <class kind="class">qmcplusplus::QMCLinearOptimize</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>QMCOptimize.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>a00928</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>QMCOptimize.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>a00929</filename>
    <class kind="class">qmcplusplus::QMCOptimize</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>QMCUpdateBase.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>a00930</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>QMCUpdateBase.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>a00931</filename>
    <class kind="class">qmcplusplus::QMCUpdateBase</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>RMCFactory.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/RMC/</path>
    <filename>a00932</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>RMCFactory.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/RMC/</path>
    <filename>a00933</filename>
    <class kind="struct">qmcplusplus::RMCFactory</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>RMCSingleOMP.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/RMC/</path>
    <filename>a00934</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>RMCSingleOMP.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/RMC/</path>
    <filename>a00935</filename>
    <class kind="class">qmcplusplus::RMCSingleOMP</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>RMCUpdateAll.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/RMC/</path>
    <filename>a00936</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>RMCUpdateAll.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/RMC/</path>
    <filename>a00937</filename>
    <class kind="class">qmcplusplus::RMCUpdateAllWithDrift</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>RMCUpdatePbyP.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/RMC/</path>
    <filename>a00938</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>RMCUpdatePbyP.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/RMC/</path>
    <filename>a00939</filename>
    <class kind="class">qmcplusplus::RMCUpdatePbyPWithDrift</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>SimpleFixedNodeBranch.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>a00940</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="enumvalue">
      <type>@</type>
      <name>COMBOPT</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a8628933cde20921c453a6d2607bdad62ac25200fd724e893ae6ce32e43ced652f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>USETAUOPT</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a8628933cde20921c453a6d2607bdad62a67a37304f4d4719fd722706884e37ee2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MIXDMCOPT</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a8628933cde20921c453a6d2607bdad62ae0dc765743ab4cf5f46522cbcde8e706</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DUMMYOPT</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a8628933cde20921c453a6d2607bdad62a9202fbc9ca2b7413336e27fdf5d704a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimpleFixedNodeBranch.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>a00941</filename>
    <class kind="struct">qmcplusplus::SimpleFixedNodeBranch</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>SinglePtclWarp.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>a00942</filename>
    <class kind="struct">qmcplusplus::SinglePtclWarp</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>SpaceWarp.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>a00943</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>SpaceWarp.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>a00944</filename>
    <class kind="struct">qmcplusplus::SpaceWarp</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>dmc_advance.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>a00945</filename>
  </compound>
  <compound kind="file">
    <name>vmc_advance.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>a00946</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>VMC_CUDA.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>a00947</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>VMC_CUDA.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>a00948</filename>
    <class kind="class">qmcplusplus::VMCcuda</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>VMCFactory.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>a00949</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>VMCFactory.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>a00950</filename>
    <class kind="struct">qmcplusplus::VMCFactory</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>VMCLinearOptOMP.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>a00951</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>VMCLinearOptOMP.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>a00952</filename>
    <class kind="class">qmcplusplus::VMCLinearOptOMP</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>VMCMultipleWarp.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>a00953</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>VMCMultipleWarp.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>a00954</filename>
    <class kind="class">qmcplusplus::VMCMultipleWarp</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>VMCPbyPMultiple.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>a00955</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>VMCPbyPMultiple.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>a00956</filename>
    <class kind="class">qmcplusplus::VMCPbyPMultiple</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>VMCPbyPMultiWarp.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>a00957</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>VMCPbyPMultiWarp.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>a00958</filename>
    <class kind="class">qmcplusplus::VMCPbyPMultiWarp</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>VMCSingleOMP.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>a00959</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>VMCSingleOMP.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>a00960</filename>
    <class kind="class">qmcplusplus::VMCSingleOMP</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>VMCUpdateAll.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>a00961</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>VMCUpdateAll.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>a00962</filename>
    <class kind="class">qmcplusplus::VMCUpdateAll</class>
    <class kind="class">qmcplusplus::VMCUpdateAllWithDrift</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>VMCUpdatePbyP.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>a00963</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>void</type>
      <name>add_vmc_timers</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ae9bdd523a32d3e0f089a012233c2861d</anchor>
      <arglist>(vector&lt; NewTimer * &gt; &amp;timers)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VMCUpdatePbyP.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>a00964</filename>
    <class kind="class">qmcplusplus::VMCUpdatePbyP</class>
    <class kind="class">qmcplusplus::VMCUpdatePbyPWithDrift</class>
    <class kind="class">qmcplusplus::VMCUpdatePbyPWithDriftFast</class>
    <class kind="class">qmcplusplus::VMCUpdateRenyiWithDriftFast</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>WalkerAdvance.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>a00965</filename>
    <class kind="struct">qmcplusplus::VMCBranch</class>
    <class kind="struct">qmcplusplus::FixedNodeCBranch</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>WalkerControlBase.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>a00966</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>void</type>
      <name>Write2XYZ</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a8abf140dbe4cdb87e818240db7828b46</anchor>
      <arglist>(MCWalkerConfiguration &amp;W)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WalkerControlBase.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>a00967</filename>
    <class kind="class">qmcplusplus::WalkerControlBase</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>WaveFunctionTester.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>a00968</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>WaveFunctionTester.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>a00969</filename>
    <class kind="class">qmcplusplus::WaveFunctionTester</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>BareKineticEnergy.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a00970</filename>
    <class kind="struct">qmcplusplus::BareKineticEnergy</class>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>T</type>
      <name>laplacian</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a338494188384d83005b660c940978d00</anchor>
      <arglist>(const TinyVector&lt; T, D &gt; &amp;g, T l)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>laplacian</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a89e7f7150c68ab9e9263981a1651012e</anchor>
      <arglist>(const TinyVector&lt; complex&lt; T &gt;, D &gt; &amp;g, const complex&lt; T &gt; &amp;l)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ChiesaCorrection.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a00971</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ChiesaCorrection.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a00972</filename>
    <class kind="class">qmcplusplus::ChiesaCorrection</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ConservedEnergy.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a00973</filename>
    <class kind="struct">qmcplusplus::ConservedEnergy</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>Coulomb_CUDA.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a00974</filename>
    <class kind="struct">qmcplusplus::CoulombAA_CUDA</class>
    <class kind="struct">qmcplusplus::CoulombAB_CUDA</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>CoulombPBCAA.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a00975</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>CoulombPBCAA.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a00976</filename>
    <class kind="struct">qmcplusplus::CoulombPBCAA</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>CoulombPBCAA_CUDA.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a00977</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>CoulombPBCAA_CUDA.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a00978</filename>
    <class kind="struct">qmcplusplus::CoulombPBCAA_CUDA</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>CoulombPBCAB.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a00979</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>CoulombPBCAB.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a00980</filename>
    <class kind="struct">qmcplusplus::CoulombPBCAB</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>CoulombPBCAB_CUDA.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a00981</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>CoulombPBCAB_CUDA.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a00982</filename>
    <class kind="struct">qmcplusplus::CoulombPBCAB_CUDA</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>CoulombPotential.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a00983</filename>
    <class kind="struct">qmcplusplus::CoulombPotential</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>CoulombPotential_CUDA.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a00984</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>CoulombPotential_CUDA.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a00985</filename>
    <class kind="struct">qmcplusplus::CoulombPotentialAA_CUDA</class>
    <class kind="struct">qmcplusplus::CoulombPotentialAB_CUDA</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>CoulombPotentialFactory.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a00986</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>CudaCoulomb.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a00987</filename>
    <class kind="class">TextureSpline</class>
    <member kind="function">
      <type>void</type>
      <name>CoulombAA_Sum</name>
      <anchorfile>a00987.html</anchorfile>
      <anchor>aaf46ca9f4ae77185984e158592ee3d01</anchor>
      <arglist>(float *R[], int N, float sum[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CoulombAA_SR_Sum</name>
      <anchorfile>a00987.html</anchorfile>
      <anchor>adfc3da2f9ba50b75c4b2243758005875</anchor>
      <arglist>(float *R[], int N, float rMax, int Ntex, int texNum, float lattice[], float latticeInv[], float sum[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CoulombAB_Sum</name>
      <anchorfile>a00987.html</anchorfile>
      <anchor>acfae151bef908fc18ab3f57ac6a320eb</anchor>
      <arglist>(float *R[], int Nelec, float I[], float Zion[], int Nion, float sum[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CoulombAB_Sum</name>
      <anchorfile>a00987.html</anchorfile>
      <anchor>a022f1cbdf0616bcf33d08b0df30b5bf5</anchor>
      <arglist>(double *R[], int Nelec, double I[], double Zion[], int Nion, double sum[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CoulombAB_SR_Sum</name>
      <anchorfile>a00987.html</anchorfile>
      <anchor>afe8a282344e11b4ceab0f1e7e2db7080</anchor>
      <arglist>(float *R[], int Nelec, float I[], int Ifirst, int Ilast, float rMax, int Ntex, int textureNum, float lattice[], float latticeInv[], float sum[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval_rhok_cuda</name>
      <anchorfile>a00987.html</anchorfile>
      <anchor>a8a655bf872236b742ba56c003b296b1a</anchor>
      <arglist>(float *R[], int numr, float kpoints[], int numk, float *rhok[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval_vk_sum_cuda</name>
      <anchorfile>a00987.html</anchorfile>
      <anchor>ac41f416e8d927a2ab3902401ce435db4</anchor>
      <arglist>(float *rhok[], float vk[], int numk, float sum[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval_rhok_cuda</name>
      <anchorfile>a00987.html</anchorfile>
      <anchor>a124b0fbe0d2ac5eb4eccf85b1cf27d11</anchor>
      <arglist>(float *R[], int first, int last, float kpoints[], int numk, float *rhok[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval_vk_sum_cuda</name>
      <anchorfile>a00987.html</anchorfile>
      <anchor>ad53f5fcaa99723d276c3cad8448d919f</anchor>
      <arglist>(float *rhok1[], float *rhok2[], float vk[], int numk, float sum[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval_vk_sum_cuda</name>
      <anchorfile>a00987.html</anchorfile>
      <anchor>a6be15d581a2e6d079c41f47e8a928b3e</anchor>
      <arglist>(float *rhok1[], float rhok2[], float vk[], int numk, float sum[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CoulombAA_SR_Sum</name>
      <anchorfile>a00987.html</anchorfile>
      <anchor>a86877f1c99fc4daf7bab2a23985e21ae</anchor>
      <arglist>(double *R[], int N, double rMax, int Ntex, int texNum, double lattice[], double latticeInv[], double sum[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CoulombAB_SR_Sum</name>
      <anchorfile>a00987.html</anchorfile>
      <anchor>a4dea6305c6ac5ff22284a7ee701ac999</anchor>
      <arglist>(double *R[], int Nelec, double I[], int Ifirst, int Ilast, double rMax, int Ntex, int textureNum, double lattice[], double latticeInv[], double sum[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval_rhok_cuda</name>
      <anchorfile>a00987.html</anchorfile>
      <anchor>a78156518bd88fbb7a1b13bd5f92ff03e</anchor>
      <arglist>(double *R[], int numr, double kpoints[], int numk, double *rhok[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval_vk_sum_cuda</name>
      <anchorfile>a00987.html</anchorfile>
      <anchor>a3a7e370e8c5f6138bdf981640c4590da</anchor>
      <arglist>(double *rhok[], double vk[], int numk, double sum[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval_rhok_cuda</name>
      <anchorfile>a00987.html</anchorfile>
      <anchor>af789de9e4bb22a1ce7cf4bf6ae3d3c80</anchor>
      <arglist>(double *R[], int first, int last, double kpoints[], int numk, double *rhok[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval_vk_sum_cuda</name>
      <anchorfile>a00987.html</anchorfile>
      <anchor>ad41d7ba17624827ef454c8e32bb6f82c</anchor>
      <arglist>(double *rhok1[], double *rhok2[], double vk[], int numk, double sum[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval_vk_sum_cuda</name>
      <anchorfile>a00987.html</anchorfile>
      <anchor>a7793d5c92dfefc09b545113b7a3cb250</anchor>
      <arglist>(double *rhok1[], double rhok2[], double vk[], int numk, double sum[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MPC_SR_Sum</name>
      <anchorfile>a00987.html</anchorfile>
      <anchor>a3aadcdc7ee3e4551a8035b53be76bfe8</anchor>
      <arglist>(float *R[], int N, float lattice[], float latticeInv[], float sum[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MPC_SR_Sum</name>
      <anchorfile>a00987.html</anchorfile>
      <anchor>ac8db14d3d278cd0c28aee72fc9afc075</anchor>
      <arglist>(double *R[], int N, double lattice[], double latticeInv[], double sum[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MPC_LR_Sum</name>
      <anchorfile>a00987.html</anchorfile>
      <anchor>acf4c7d2c9cacde53c39c52568bdd6a0f</anchor>
      <arglist>(float *R[], int N, UBspline_3d_s_cuda *spline, float latticeInv[], float sum[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MPC_LR_Sum</name>
      <anchorfile>a00987.html</anchorfile>
      <anchor>a5eda2bea633e203ac172aacc032d3623</anchor>
      <arglist>(double *R[], int N, UBspline_3d_d_cuda *spline, double latticeInv[], double sum[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init_Acuda</name>
      <anchorfile>a00987.html</anchorfile>
      <anchor>a3038937f0780b5c6d1911d91b465123c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>local_ecp_sum</name>
      <anchorfile>a00987.html</anchorfile>
      <anchor>a98d627074ba17363bd56b578343759bc</anchor>
      <arglist>(float *R[], int Nelec, float I[], int Ifirst, int Ilast, float rMax, int Ntex, int textureNum, float sum[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>local_ecp_sum</name>
      <anchorfile>a00987.html</anchorfile>
      <anchor>ae99e5043e78298e428a5d6b55e9bcb50</anchor>
      <arglist>(double *R[], int Nelec, double I[], int Ifirst, int Ilast, double rMax, int Ntex, int textureNum, double sum[], int numWalkers)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DensityEstimator.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a00988</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="typedef">
      <type>LRCoulombSingleton::LRHandlerType</type>
      <name>LRHandlerType</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a8067976403b820c1de438b7ae6c830ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LRCoulombSingleton::GridType</type>
      <name>GridType</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a9fe512f54f433fd3e9e1047ff3454db5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LRCoulombSingleton::RadFunctorType</type>
      <name>RadFunctorType</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a8142ab4aadc20734e945cff7c95c7595</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DensityEstimator.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a00989</filename>
    <class kind="class">qmcplusplus::DensityEstimator</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DispersionRelation.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a00990</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="typedef">
      <type>QMCTraits::RealType</type>
      <name>RealType</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a4228079a723a75bfce1ee275d2d9ad39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>QMCTraits::IndexType</type>
      <name>IndexType</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>acc7204ce81193a6105cd29eb1f82ca1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>QMCTraits::PosType</type>
      <name>PosType</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a3fbed5cd2013a62776dac11862da2003</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gen3DLattice</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a7394d6d1305170291ccfaf120ef8ab10</anchor>
      <arglist>(RealType cut, ParticleSet &amp;ptclSet, Vector&lt; PosType &gt; &amp;LocLattice, Vector&lt; RealType &gt; &amp;Degeneracies, Vector&lt; IndexType &gt; &amp;DimSizes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gen1DLattice</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a0f8eac79e1eedb217ef6f28ac3c6591d</anchor>
      <arglist>(RealType cut, ParticleSet &amp;ptclSet, Vector&lt; PosType &gt; &amp;LocLattice, Vector&lt; RealType &gt; &amp;Degeneracies, Vector&lt; IndexType &gt; &amp;DimSizes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genDegenLattice</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ac6251447d293a5c3e46e2004c7c59926</anchor>
      <arglist>(RealType cut, ParticleSet &amp;ptclSet, Vector&lt; PosType &gt; &amp;LocLattice, Vector&lt; RealType &gt; &amp;Degeneracies, Vector&lt; IndexType &gt; &amp;DimSizes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genFreeParticleDispersion</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a1af24b362e4eead7d158689c25b2d55f</anchor>
      <arglist>(const Vector&lt; PosType &gt; &amp;LocLattice, Vector&lt; RealType &gt; &amp;Disp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genDebugDispersion</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a21f3c5a741f68db1c63a822ab730c26e</anchor>
      <arglist>(const Vector&lt; PosType &gt; &amp;LocLattice, Vector&lt; RealType &gt; &amp;Disp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genSimpleModelDispersion</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a69c493700a7d702e54eb8c9b0e8febef</anchor>
      <arglist>(const Vector&lt; PosType &gt; &amp;LocLattice, Vector&lt; RealType &gt; &amp;Disp, RealType GapSize, RealType FermiMomentum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genPennModelDispersion</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a077b3c14b0eff11eefaea613e053b8df</anchor>
      <arglist>(const Vector&lt; PosType &gt; &amp;LocLattice, Vector&lt; RealType &gt; &amp;Disp, RealType GapSize, RealType FermiMomentum)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DispersionRelation.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a00991</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ECPComponentBuilder.1.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a00992</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ECPComponentBuilder.2.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a00993</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ECPComponentBuilder.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a00994</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ECPComponentBuilder.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a00995</filename>
    <class kind="struct">qmcplusplus::ECPComponentBuilder</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ECPotentialBuilder.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a00996</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ECPotentialBuilder.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a00997</filename>
    <class kind="struct">qmcplusplus::ECPotentialBuilder</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>EffMKineticEnergy.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a00998</filename>
    <class kind="struct">qmcplusplus::EffMKineticEnergy</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>EwaldSum.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a00213</filename>
    <class kind="struct">EwaldSumTraits</class>
    <class kind="struct">EwaldSumTraits&lt; T, true, true &gt;</class>
    <class kind="struct">EwaldSumTraits&lt; T, false, false &gt;</class>
    <class kind="struct">EwaldSum</class>
  <compound kind="struct">
    <name>EwaldSumTraits</name>
    <filename>a00213.html</filename>
    <anchor>a01458</anchor>
    <templarg></templarg>
    <templarg>EVUNIT</templarg>
    <templarg>AAUNIT</templarg>
  </compound>
  <compound kind="file">
    <name>ForceBase.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a00999</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ForceBase.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01000</filename>
    <class kind="struct">qmcplusplus::ForceBase</class>
    <class kind="struct">qmcplusplus::BareForce</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ForceCeperley.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01001</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ForceCeperley.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01002</filename>
    <class kind="struct">qmcplusplus::ForceCeperley</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ForwardWalking.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01003</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ForwardWalking.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01004</filename>
    <class kind="struct">qmcplusplus::ForwardWalking</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>FSAtomPseudoPot.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01005</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>FSAtomPseudoPot.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01006</filename>
    <class kind="struct">qmcplusplus::FSAtomPseudoPot</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianPot.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01007</filename>
    <class kind="struct">qmcplusplus::GaussianPot</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>HamiltonianFactory.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01008</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>HamiltonianFactory.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01009</filename>
    <class kind="struct">qmcplusplus::HamiltonianFactory</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>HardSphere.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01010</filename>
    <class kind="struct">qmcplusplus::HardSphere</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>HarmonicPotential.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01011</filename>
    <class kind="struct">qmcplusplus::HarmonicPotential</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>HeEPotential.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01012</filename>
    <class kind="struct">qmcplusplus::HeePotential</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>HeEPotential_tail.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01013</filename>
    <class kind="struct">qmcplusplus::HeePotential_tail</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>HePressure.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01014</filename>
    <class kind="struct">qmcplusplus::HePressure</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>HeSAPT_smoothed.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01015</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>HeSAPT_smoothed.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01016</filename>
    <class kind="struct">qmcplusplus::HeSAPT_smoothed_phy</class>
    <class kind="struct">qmcplusplus::HeSAPT_smoothed_aux</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>HFDBHE_smoothed.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01017</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>HFDBHE_smoothed.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01018</filename>
    <class kind="struct">qmcplusplus::HFDBHE_smoothed_phy</class>
    <class kind="struct">qmcplusplus::HFDBHE_smoothed_aux</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>HFDHE2_Moroni1995.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01019</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>HFDHE2_Moroni1995.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01020</filename>
    <class kind="struct">qmcplusplus::HFDHE2_Moroni1995_phy</class>
    <class kind="struct">qmcplusplus::HFDHE2_Moroni1995_aux</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>HFDHE2Potential.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01021</filename>
    <class kind="struct">qmcplusplus::HFDHE2Potential</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>HFDHE2Potential_tail.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01022</filename>
    <class kind="struct">qmcplusplus::HFDHE2Potential_tail</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>HFDHE2PotentialWithCorrection.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01023</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>HFDHE2PotentialWithCorrection.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01024</filename>
    <class kind="struct">qmcplusplus::HFDHE2Potential</class>
    <class kind="struct">qmcplusplus::HFDHE2Potential_tail</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>HusePot.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01025</filename>
    <class kind="struct">qmcplusplus::HusePot</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>JelliumPotential.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01026</filename>
    <class kind="struct">qmcplusplus::JelliumPotential</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>LennardJones_smoothed.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01027</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>LennardJones_smoothed.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01028</filename>
    <class kind="struct">qmcplusplus::LennardJones_smoothed_phy</class>
    <class kind="struct">qmcplusplus::LennardJones_smoothed_aux</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>LocalCorePolPotential.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01029</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>LocalCorePolPotential.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01030</filename>
    <class kind="struct">qmcplusplus::LocalCorePolPotential</class>
    <class kind="struct">qmcplusplus::LocalCorePolPotential::CPP_Param</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>LocalECPotential.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01031</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>LocalECPotential.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01032</filename>
    <class kind="struct">qmcplusplus::LocalECPotential</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>LocalECPotential_CUDA.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01033</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>LocalECPotential_CUDA.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01034</filename>
    <class kind="struct">qmcplusplus::LocalECPotential_CUDA</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>LocalMomentEstimator.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01035</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>LocalMomentEstimator.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01036</filename>
    <class kind="class">qmcplusplus::LocalMomentEstimator</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>LocalPPotential.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01037</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>LocalPPotential.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01038</filename>
    <class kind="struct">qmcplusplus::LocalPPotential</class>
    <class kind="struct">qmcplusplus::LocalPPotential::RadialPotentialSet</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ModInsKineticEnergy.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01039</filename>
    <class kind="class">qmcplusplus::ModInsKineticEnergy</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ModPosTelPot.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01040</filename>
    <class kind="struct">qmcplusplus::ModPoschlTeller</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>MomentumDistribution.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01041</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="typedef">
      <type>QMCTraits::ComplexType</type>
      <name>ComplexType</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ad3ec0de1acc714638d7f2a715987a253</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MomentumDistribution.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01042</filename>
    <class kind="class">qmcplusplus::PtclChoiceBase</class>
    <class kind="class">qmcplusplus::RandomChoice</class>
    <class kind="class">qmcplusplus::RandomChoicePerWalker</class>
    <class kind="class">qmcplusplus::StaticChoice</class>
    <class kind="class">qmcplusplus::MomDistBase</class>
    <class kind="class">qmcplusplus::FFTMomentumDist</class>
    <class kind="class">qmcplusplus::ThreeDimMomDist</class>
    <class kind="class">qmcplusplus::OneDimMomDist</class>
    <class kind="class">qmcplusplus::AveragedOneDimMomDist</class>
    <class kind="class">qmcplusplus::DirectMomDist</class>
    <class kind="class">qmcplusplus::RandomMomDist</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>MomentumEstimator.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01043</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>MomentumEstimator.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01044</filename>
    <class kind="class">qmcplusplus::MomentumEstimator</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>MPC.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01045</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>MPC.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01046</filename>
    <class kind="class">qmcplusplus::MPC</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>MPC_CUDA.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01047</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>MPC_CUDA.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01048</filename>
    <class kind="class">qmcplusplus::MPC_CUDA</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>NLPP.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01049</filename>
    <member kind="function">
      <type>void</type>
      <name>find_core_electrons_PBC</name>
      <anchorfile>a01049.html</anchorfile>
      <anchor>aa7e8a8d7b197c2fbf373195198935453</anchor>
      <arglist>(float *R[], int numElec, float I[], int firstIon, int lastIon, float rcut, float L[], float Linv[], int2 *pairs[], float *dist[], int numPairs[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>find_core_electrons_PBC</name>
      <anchorfile>a01049.html</anchorfile>
      <anchor>a0fad654652081046ce9b8c6f6037f9c6</anchor>
      <arglist>(double *R[], int numElec, double I[], int firstIon, int lastIon, double rcut, double L[], double Linv[], int2 *pairs[], double *dist[], int numPairs[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>find_core_electrons_PBC</name>
      <anchorfile>a01049.html</anchorfile>
      <anchor>a55f615e46174c28e22cf9d62238b771d</anchor>
      <arglist>(float *R[], int numElec, float I[], int firstIon, int lastIon, float rcut, float L[], float Linv[], float quadPoints[], int numQuadPoints, int *elecs[], float *ratioPos[], float *dist_list[], float *cosTheta_list[], int numPairs[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>find_core_electrons_PBC</name>
      <anchorfile>a01049.html</anchorfile>
      <anchor>a69a4a442959b4612a95c1c7d5270da90</anchor>
      <arglist>(double *R[], int numElec, double I[], int firstIon, int lastIon, double rcut, double L[], double Linv[], double quadPoints[], int numQuadPoints, int *elecs[], double *ratioPos[], double *dist_list[], double *cosTheta_list[], int numPairs[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>find_core_electrons</name>
      <anchorfile>a01049.html</anchorfile>
      <anchor>a62990239b6472cd369f2ad70199d45bd</anchor>
      <arglist>(float *R[], int numElec, float I[], int firstIon, int lastIon, float rcut, int2 *pairs[], float *dist[], int numPairs[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>find_core_electrons</name>
      <anchorfile>a01049.html</anchorfile>
      <anchor>a141f87ee33aaf26101b9cbee147af87d</anchor>
      <arglist>(double *R[], int numElec, double I[], int firstIon, int lastIon, double rcut, double L[], double Linv[], int2 *pairs[], double *dist[], int numPairs[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>find_core_electrons</name>
      <anchorfile>a01049.html</anchorfile>
      <anchor>ad1aea0267fb6e8bb8227dbaaabef8d8e</anchor>
      <arglist>(float *R[], int numElec, float I[], int firstIon, int lastIon, float rcut, float quadPoints[], int numQuadPoints, int *elecs[], float *ratioPos[], float *dist_list[], float *cosTheta_list[], int numPairs[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>find_core_electrons</name>
      <anchorfile>a01049.html</anchorfile>
      <anchor>adf628a84b1982f87db002758aae183d3</anchor>
      <arglist>(double *R[], int numElec, double I[], int firstIon, int lastIon, double rcut, double quadPoints[], int numQuadPoints, int *elecs[], double *ratioPos[], double *dist_list[], double *cosTheta_list[], int numPairs[], int numWalkers)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NonLocalECPComponent.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01050</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>NonLocalECPComponent.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01051</filename>
    <class kind="struct">qmcplusplus::NonLocalECPComponent</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>NonLocalECPotential.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01052</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>NonLocalECPotential.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01053</filename>
    <class kind="struct">qmcplusplus::NonLocalECPotential</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>NonLocalECPotential_CUDA.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01054</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>NonLocalECPotential_CUDA.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01055</filename>
    <class kind="class">qmcplusplus::NonLocalECPotential_CUDA</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>NonLocalTOperator.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01056</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>NonLocalTOperator.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01057</filename>
    <class kind="struct">qmcplusplus::NonLocalTOperator</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>NumberFluctuations.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01058</filename>
    <class kind="struct">qmcplusplus::NumberFluctuations</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>NumericalRadialPotential.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01059</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>NumericalRadialPotential.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01060</filename>
    <class kind="struct">qmcplusplus::NumericalRadialPotential</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>observable_helper.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01061</filename>
    <class kind="struct">qmcplusplus::observable_helper</class>
    <namespace>qmcplusplus</namespace>
    <member kind="variable">
      <type>const hsize_t</type>
      <name>h5_observable_type</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a7f1c79413928faa4a7db11a49efc3a46</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OneBodyDensityMatrix.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01062</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>OneBodyDensityMatrix.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01063</filename>
    <class kind="class">qmcplusplus::OneBodyDensityMatrix</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>OscillatoryPot.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01064</filename>
    <class kind="struct">qmcplusplus::OscillatoryPotential</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>PairCorrEstimator.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01065</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>PairCorrEstimator.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01066</filename>
    <class kind="class">qmcplusplus::PairCorrEstimator</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>PolarizationPotential.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01067</filename>
    <class kind="struct">qmcplusplus::PolarizationPotential</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>Pressure.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01068</filename>
    <class kind="struct">qmcplusplus::Pressure</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>PulayForce.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01069</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>PulayForce.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01070</filename>
    <class kind="struct">qmcplusplus::PulayForce</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>QMCHamiltonian.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01071</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>QMCHamiltonian.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01072</filename>
    <class kind="class">qmcplusplus::QMCHamiltonian</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>QMCHamiltonianBase.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01073</filename>
    <class kind="struct">qmcplusplus::NonLocalData</class>
    <class kind="struct">qmcplusplus::QMCHamiltonianBase</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>SkEstimator.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01074</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>SkEstimator.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01075</filename>
    <class kind="class">qmcplusplus::SkEstimator</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>SkEstimator_CUDA.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01076</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>SkEstimator_CUDA.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01077</filename>
    <class kind="class">qmcplusplus::SkEstimator_CUDA</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>SkPot.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01078</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>SkPot.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01079</filename>
    <class kind="class">qmcplusplus::SkPot</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>Spline3DPotential.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01080</filename>
    <class kind="struct">qmcplusplus::Spline3DPotential</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>TriCubicSplinePotential.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01081</filename>
    <class kind="struct">qmcplusplus::TriCubicSplinePotential</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>VHXC.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01082</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>VHXC.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01083</filename>
    <class kind="class">qmcplusplus::VHXC</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>Ylm.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01084</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>T</type>
      <name>LegendrePll</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>af282dad8e3bfc2b3128f74782b9142ca</anchor>
      <arglist>(int l, T x)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>LegendrePlm</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a4831db28f2986fb3503b1e17fbec4261</anchor>
      <arglist>(int l, int m, T x)</arglist>
    </member>
    <member kind="function">
      <type>std::complex&lt; T &gt;</type>
      <name>Ylm</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ab9a8e8ca99621d27f19c2336135a3d3d</anchor>
      <arglist>(int l, int m, const TinyVector&lt; T, 3 &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ZeroVarianceForce.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01085</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ZeroVarianceForce.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>a01086</filename>
    <class kind="struct">qmcplusplus::ZeroVarianceForce</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>Any2Slater.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCTools/</path>
    <filename>a01087</filename>
    <class kind="class">Any2Slater</class>
  </compound>
  <compound kind="file">
    <name>Assign.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCTools/</path>
    <filename>a01088</filename>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>a01088.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CasinoParser.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCTools/</path>
    <filename>a01089</filename>
  </compound>
  <compound kind="file">
    <name>CasinoParser.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCTools/</path>
    <filename>a01090</filename>
    <class kind="class">CasinoParser</class>
  </compound>
  <compound kind="file">
    <name>convert4qmc.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCTools/</path>
    <filename>a01091</filename>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>a01091.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>densityplot.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCTools/</path>
    <filename>a01092</filename>
    <class kind="struct">DensityObserver</class>
    <member kind="function">
      <type>int</type>
      <name>print_help</name>
      <anchorfile>a01092.html</anchorfile>
      <anchor>aa3101de9cfce67e9ae5124ca34175733</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>a01092.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ecp4qmc.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCTools/</path>
    <filename>a01093</filename>
    <class kind="struct">ECPTest</class>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>a01093.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>extract-eshdf-kvectors.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCTools/</path>
    <filename>a01094</filename>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>a01094.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GamesAsciiParser.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCTools/</path>
    <filename>a01095</filename>
    <member kind="function">
      <type>void</type>
      <name>Cartesian2Spherical</name>
      <anchorfile>a01095.html</anchorfile>
      <anchor>a0b5ca80f108a8798ecd5dfb8e9329fdc</anchor>
      <arglist>(int n, double *Cart, double *Sphe)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GamesAsciiParser.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCTools/</path>
    <filename>a01096</filename>
    <class kind="class">GamesAsciiParser</class>
  </compound>
  <compound kind="file">
    <name>GamesXmlParser.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCTools/</path>
    <filename>a01097</filename>
  </compound>
  <compound kind="file">
    <name>GamesXmlParser.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCTools/</path>
    <filename>a01098</filename>
    <class kind="class">GamesXmlParser</class>
  </compound>
  <compound kind="file">
    <name>GaussianFCHKParser.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCTools/</path>
    <filename>a01099</filename>
  </compound>
  <compound kind="file">
    <name>GaussianFCHKParser.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCTools/</path>
    <filename>a01100</filename>
    <class kind="class">GaussianFCHKParser</class>
  </compound>
  <compound kind="file">
    <name>gemtest.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCTools/</path>
    <filename>a01101</filename>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>a01101.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>getSupercell.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCTools/</path>
    <filename>a01102</filename>
    <member kind="function">
      <type>T</type>
      <name>getDet</name>
      <anchorfile>a01102.html</anchorfile>
      <anchor>ac670802e3df3d166ed6f197281661912</anchor>
      <arglist>(T *mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSupercell</name>
      <anchorfile>a01102.html</anchorfile>
      <anchor>a33e51f6ea602be7245a2db8eb2c50a8a</anchor>
      <arglist>(double *prim, int *tile, double *super)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dot</name>
      <anchorfile>a01102.html</anchorfile>
      <anchor>a122fcbf3ce06844d88c26120b144dee0</anchor>
      <arglist>(T *a, T *b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cross</name>
      <anchorfile>a01102.html</anchorfile>
      <anchor>a14ff921bc8d6b0321368bd7bafc215c4</anchor>
      <arglist>(T *a, T *b, T *c)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SimCellRad</name>
      <anchorfile>a01102.html</anchorfile>
      <anchor>acee74e2bf012dd8704233cc77d63f428</anchor>
      <arglist>(double *mat)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getScore</name>
      <anchorfile>a01102.html</anchorfile>
      <anchor>a63049ba05be2aac17cac12a9b54f7d30</anchor>
      <arglist>(double *mat)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>WigSeitzRad</name>
      <anchorfile>a01102.html</anchorfile>
      <anchor>aa04144420fe6b20b58183dda46aac1dc</anchor>
      <arglist>(double *mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBestTile</name>
      <anchorfile>a01102.html</anchorfile>
      <anchor>ad1ec5f5d4842aa65fec81e507389b825</anchor>
      <arglist>(double *primcell, int target, int *tilemat, double &amp;radius, int range=7)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>a01102.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>gofr.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCTools/</path>
    <filename>a01103</filename>
    <class kind="struct">GofRObserver</class>
    <member kind="function">
      <type>int</type>
      <name>print_help</name>
      <anchorfile>a01103.html</anchorfile>
      <anchor>aa3101de9cfce67e9ae5124ca34175733</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>a01103.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>gto2grid.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCTools/</path>
    <filename>a01104</filename>
    <member kind="function">
      <type>void</type>
      <name>buildBasisSet</name>
      <anchorfile>a01104.html</anchorfile>
      <anchor>a0eda80e415eaadda4590da180e74b877</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>a01104.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GTO2GridBuilder.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCTools/</path>
    <filename>a01105</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>GTO2GridBuilder.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCTools/</path>
    <filename>a01106</filename>
    <class kind="struct">qmcplusplus::GTO2GridBuilder</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>gto2slater.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCTools/</path>
    <filename>a01107</filename>
    <class kind="struct">GTO2Slater</class>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>a01107.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>h5merge.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCTools/</path>
    <filename>a01108</filename>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>a01108.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>HDFWalkerMerger.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCTools/</path>
    <filename>a01109</filename>
  </compound>
  <compound kind="file">
    <name>HDFWalkerMerger.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCTools/</path>
    <filename>a01110</filename>
    <class kind="class">qmcplusplus::HDFWalkerMerger</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>MolecularOrbitalBasis.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCTools/</path>
    <filename>a01111</filename>
    <class kind="class">qmcplusplus::MolecularOrbitalBasis</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>MSDgenerator.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCTools/</path>
    <filename>a01112</filename>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>a01112.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>observable.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCTools/</path>
    <filename>a01113</filename>
    <class kind="struct">ObservableFile</class>
    <member kind="function">
      <type>int</type>
      <name>print_help</name>
      <anchorfile>a01113.html</anchorfile>
      <anchor>aa3101de9cfce67e9ae5124ca34175733</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>a01113.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PC.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCTools/</path>
    <filename>a01114</filename>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>a01114.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PHDFWalkerMerger.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCTools/</path>
    <filename>a01115</filename>
  </compound>
  <compound kind="file">
    <name>QMCGaussianParserBase.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCTools/</path>
    <filename>a01116</filename>
  </compound>
  <compound kind="file">
    <name>QMCGaussianParserBase.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCTools/</path>
    <filename>a01117</filename>
    <class kind="struct">QMCGaussianParserBase</class>
  </compound>
  <compound kind="file">
    <name>QMCUtilities.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCTools/</path>
    <filename>a01118</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>bool</type>
      <name>determineNumOfElectrons</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>aae8cd7b74758d1270a228f51fe91ecb5</anchor>
      <arglist>(ParticleSet &amp;el, xmlXPathContextPtr acontext)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RGFBuilderBase.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCTools/</path>
    <filename>a01119</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>RGFBuilderBase.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCTools/</path>
    <filename>a01120</filename>
    <class kind="struct">qmcplusplus::RGFBuilderBase</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>spline.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCTools/</path>
    <filename>a01121</filename>
    <member kind="define">
      <type>#define</type>
      <name>FUNCTION</name>
      <anchorfile>a01121.html</anchorfile>
      <anchor>a5c98f329f324caf3d6d5348c33cc24d6</anchor>
      <arglist>(r)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DFUNCTION</name>
      <anchorfile>a01121.html</anchorfile>
      <anchor>aa660c901ed494f06f3e12ca0ce24fde6</anchor>
      <arglist>(r)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>a01121.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>spline3.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCTools/</path>
    <filename>a01122</filename>
    <class kind="struct">TestFunc</class>
    <class kind="struct">ComboFunc</class>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>a01122.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>spline3_io.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCTools/</path>
    <filename>a01123</filename>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>a01123.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>STO2GridBuilder.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCTools/</path>
    <filename>a01124</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>STO2GridBuilder.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCTools/</path>
    <filename>a01125</filename>
    <class kind="struct">qmcplusplus::STO2GridBuilder</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ylmtest.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCTools/</path>
    <filename>a01126</filename>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>a01126.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AFMSPOBuilder.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01127</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>AFMSPOBuilder.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01128</filename>
    <class kind="class">qmcplusplus::AFMSPOBuilder</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>AFMSPOSet.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01129</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>AFMSPOSet.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01130</filename>
    <class kind="class">qmcplusplus::AFMSPOSet</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>AGPDeterminant.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01131</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>AGPDeterminant.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01132</filename>
    <class kind="class">qmcplusplus::AGPDeterminant</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>AGPDeterminantBuilder.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01133</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>AGPDeterminantBuilder.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01134</filename>
    <class kind="class">qmcplusplus::AGPDeterminantBuilder</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>AtomicOrbital.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01135</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>AtomicOrbital.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01136</filename>
    <class kind="struct">qmcplusplus::AtomicOrbitalTraits</class>
    <class kind="struct">qmcplusplus::AtomicOrbitalTraits&lt; double &gt;</class>
    <class kind="struct">qmcplusplus::AtomicOrbitalTraits&lt; complex&lt; double &gt; &gt;</class>
    <class kind="class">qmcplusplus::AtomicOrbital</class>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>void</type>
      <name>EinsplineMultiEval</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ac539b873bfd6c1f57044494f47e7211f</anchor>
      <arglist>(multi_UBspline_1d_d *spline, double x, double *val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EinsplineMultiEval</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a41fd36194ad563d6ea709715ce9e25bc</anchor>
      <arglist>(multi_UBspline_1d_z *spline, double x, complex&lt; double &gt; *val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EinsplineMultiEval</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>aaf7dd73dc3fc1c87d7b7fbcc1f087a5a</anchor>
      <arglist>(multi_UBspline_1d_d *spline, double x, double *val, double *grad, double *lapl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EinsplineMultiEval</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>accf60f8446f4f0abd1d3232f7f9e38c1</anchor>
      <arglist>(multi_UBspline_1d_z *spline, double x, complex&lt; double &gt; *val, complex&lt; double &gt; *grad, complex&lt; double &gt; *lapl)</arglist>
    </member>
  <compound kind="struct">
    <name>qmcplusplus::AtomicOrbitalTraits</name>
    <filename>a00008.html</filename>
    <anchor>a01430</anchor>
    <templarg></templarg>
  </compound>
  <compound kind="file">
    <name>AtomicOrbitalCuda.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a00019</filename>
    <class kind="struct">HybridDataFloat</class>
    <class kind="class">AtomicOrbitalCuda</class>
    <member kind="enumeration">
      <type></type>
      <name>HybridJobType</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a642eee8543393576f76872c0818f1734</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BSPLINE_3D_JOB</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a642eee8543393576f76872c0818f1734a165c356d9817e6e395c82207a742e2c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ATOMIC_POLY_JOB</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a642eee8543393576f76872c0818f1734a6b908986160332004e55f8322a4a0493</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ATOMIC_SPLINE_JOB</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a642eee8543393576f76872c0818f1734a53c612b66e06368a3e30d57bee6d5863</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BSPLINE_3D_JOB</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a642eee8543393576f76872c0818f1734a165c356d9817e6e395c82207a742e2c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ATOMIC_POLY_JOB</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a642eee8543393576f76872c0818f1734a6b908986160332004e55f8322a4a0493</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ATOMIC_SPLINE_JOB</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a642eee8543393576f76872c0818f1734a53c612b66e06368a3e30d57bee6d5863</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init_atomic_cuda</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a1847d6d84b37836302011426e28b6f55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeHybridJobList</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a4e3af78dcf71de2644fa0a6f817c5878</anchor>
      <arglist>(float *elec_list, int num_elecs, float *ion_list, float *poly_radii, float *spline_radii, int num_ions, float *L, float *Linv, HybridJobType *job_list, float *rhat_list, HybridDataFloat *data_list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateHybridSplineReal</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>aeba7ab79d749cb16ff8cf5dd38094a3c</anchor>
      <arglist>(HybridJobType *job_types, float **Ylm_real, AtomicOrbitalCuda&lt; float &gt; *orbitals, HybridDataFloat *data, float *k_reduced, float **vals, int N, int numWalkers, int lMax)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateHybridSplineReal</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a2174e8408938c4026fab6b5a5ba051fd</anchor>
      <arglist>(HybridJobType *job_types, float *rhats, float **Ylm_real, float **dYlm_dTheta, float **dYlm_dphi, AtomicOrbitalCuda&lt; float &gt; *orbitals, HybridDataFloat *data, float *k_reduced, float **vals, float **grad_lapl, int row_stride, int N, int numWalkers, int lMax)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateHybridSplineComplexToReal</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>ad890cff5fe518f89288139f1facf7c2a</anchor>
      <arglist>(HybridJobType *job_types, float **Ylm_real, AtomicOrbitalCuda&lt; float &gt; *orbitals, HybridDataFloat *data, float *k_reduced, int *make2copies, float **vals, int N, int numWalkers, int lMax)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateHybridSplineComplexToRealNLPP</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a19c6da710d8e193ad269fa678cf18206</anchor>
      <arglist>(HybridJobType *job_types, float **Ylm_real, AtomicOrbitalCuda&lt; float &gt; *orbitals, HybridDataFloat *data, float *k_reduced, int *make2copies, float **vals, int N, int numWalkers, int lMax)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateHybridSplineComplexToReal</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a31afcf47d3716da09d6bb7c66ef82bcc</anchor>
      <arglist>(HybridJobType *job_types, float *rhats, float **Ylm, float **dYlm_dTheta, float **dYlm_dphi, AtomicOrbitalCuda&lt; float &gt; *orbitals, HybridDataFloat *data, float *k_reduced, int *make2copies, float **vals, float **grad_lapl, int row_stride, int N, int numWalkers, int lMax)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate3DSplineReal</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a6223682cb70c9b985249fcac914b6021</anchor>
      <arglist>(HybridJobType *job_types, float *pos, float *kpoints, multi_UBspline_3d_s_cuda *multispline, float *Linv, float **vals, int N, int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate3DSplineReal</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a4adb9e001536566fa80d0cadcfe2a6f7</anchor>
      <arglist>(HybridJobType *job_types, float *pos, float *kpoints, multi_UBspline_3d_s_cuda *multispline, float *Linv, float **vals, float **grad_lapl, int row_stride, int N, int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate3DSplineComplexToReal</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a34117e07ae70fd3d69a1f0c98c2d6c97</anchor>
      <arglist>(HybridJobType *job_types, float *pos, float *kpoints, int *make2copies, multi_UBspline_3d_c_cuda *multispline, float *Linv, float **vals, int N, int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate3DSplineComplexToReal</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>ad671eb540cec71e7f1c5d85e146a2b3f</anchor>
      <arglist>(HybridJobType *job_types, float *pos, float *kpoints, int *make2copies, multi_UBspline_3d_c_cuda *multispline, float *Linv, float **vals, float **grad_lapl, int row_stride, int N, int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CalcYlmRealCuda</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a1aebe9034ab4c8753c73a51f563c8b6e</anchor>
      <arglist>(float *rhats, HybridJobType *job_type, float **Ylm_ptr, float **dYlm_dtheta_ptr, float **dYlm_dphi_ptr, int lMax, int N)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CalcYlmComplexCuda</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>afde4def380d8523581fdbbf74df89d60</anchor>
      <arglist>(float *rhats, HybridJobType *job_type, float **Ylm_ptr, float **dYlm_dtheta_ptr, float **dYlm_dphi_ptr, int lMax, int N)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CalcYlmRealCuda</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>ad6cd02c3c7fd86089758db72788678b5</anchor>
      <arglist>(float *rhats, HybridJobType *job_type, float **Ylm_ptr, int lMax, int N)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CalcYlmComplexCuda</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a0cd10b159f325c85c03828f34c3542a2</anchor>
      <arglist>(float *rhats, HybridJobType *job_type, float **Ylm_ptr, int lMax, int N)</arglist>
    </member>
  <compound kind="struct">
    <name>HybridDataFloat</name>
    <filename>a00019.html</filename>
    <anchor>a01477</anchor>
  <compound kind="class">
    <name>AtomicOrbitalCuda</name>
    <filename>a00019.html</filename>
    <anchor>a01429</anchor>
    <templarg>T</templarg>
  </compound>
  <compound kind="file">
    <name>HeSTOClementiRottie.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/AtomicOrbitals/</path>
    <filename>a01137</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>HeSTOClementiRottie.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/AtomicOrbitals/</path>
    <filename>a01138</filename>
    <class kind="struct">qmcplusplus::HePresetHF</class>
    <class kind="struct">qmcplusplus::HePresetHFBuilder</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>HFAtomicSTOSet.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/AtomicOrbitals/</path>
    <filename>a01139</filename>
  </compound>
  <compound kind="file">
    <name>HFAtomicSTOSet.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/AtomicOrbitals/</path>
    <filename>a01140</filename>
    <class kind="struct">qmcplusplus::ComboSTO</class>
    <class kind="struct">qmcplusplus::HFAtomicSTOSet</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>HFAtomicSTOSetBuilder.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/AtomicOrbitals/</path>
    <filename>a01141</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>aaa316611293fa859cc96d8b83116fb0f</anchor>
      <arglist>(std::ostream &amp;out, const ComboSTO&lt; T, POS &gt; &amp;asto)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>HFAtomicSTOSetBuilder.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/AtomicOrbitals/</path>
    <filename>a01142</filename>
    <class kind="class">qmcplusplus::HFAtomicSTOSetBuilder</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>BasisSetBase.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01143</filename>
    <class kind="struct">qmcplusplus::BasisSetBase</class>
    <class kind="struct">qmcplusplus::BasisSetBuilder</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>BasisSetFactory.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01144</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>BasisSetFactory.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01145</filename>
    <class kind="class">qmcplusplus::BasisSetFactory</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>BigEinsplineSetBuilder.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01146</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="define">
      <type>#define</type>
      <name>QMCPLUSPLUS_EINSPLINE_BUILDER_ESHDF_BIG_H</name>
      <anchorfile>a01146.html</anchorfile>
      <anchor>a1933367fdee6486b5cab26afd981c14d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DiffOrbitalBase.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01147</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DiffOrbitalBase.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01148</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DistributedSPOSet.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01149</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="define">
      <type>#define</type>
      <name>MAX_NUM_SHARED_NODES</name>
      <anchorfile>a01149.html</anchorfile>
      <anchor>a6c0ca94fc328224f123d9b09dbd6bd04</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PSI_DIM</name>
      <anchorfile>a01149.html</anchorfile>
      <anchor>a52b7bef0d33737b78ae2a2aa20d78a4e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DistributedSPOSet.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01150</filename>
    <class kind="struct">qmcplusplus::DistributedSPOSet</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DummyBasisSet.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01151</filename>
    <class kind="struct">qmcplusplus::DummyBasisSet</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>EinsplineAdoptor.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01152</filename>
    <class kind="struct">qmcplusplus::einspline_traits</class>
    <class kind="struct">qmcplusplus::einspline_traits&lt; double, 3 &gt;</class>
    <class kind="struct">qmcplusplus::einspline_traits&lt; complex&lt; double &gt;, 3 &gt;</class>
    <class kind="struct">qmcplusplus::einspline_traits&lt; float, 3 &gt;</class>
    <class kind="struct">qmcplusplus::einspline_traits&lt; complex&lt; float &gt;, 3 &gt;</class>
    <class kind="struct">qmcplusplus::SplineAdoptorBase</class>
    <class kind="struct">qmcplusplus::VectorViewer</class>
    <class kind="struct">qmcplusplus::BsplineSet</class>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>Tensor&lt; T, D &gt;</type>
      <name>outerProductSymm</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>af149d0de4c7e7dfdff12dc21dc73cd1a</anchor>
      <arglist>(const TinyVector&lt; T, D &gt; &amp;v, const TinyVector&lt; T, D &gt; &amp;w)</arglist>
    </member>
  <compound kind="struct">
    <name>qmcplusplus::einspline_traits</name>
    <filename>a00008.html</filename>
    <anchor>a01456</anchor>
    <templarg></templarg>
    <templarg>D</templarg>
  </compound>
  <compound kind="file">
    <name>EinsplineOrb.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01153</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>EinsplineOrb.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01154</filename>
    <class kind="class">qmcplusplus::EinsplineOrb</class>
    <namespace>qmcplusplus</namespace>
  <compound kind="class">
    <name>qmcplusplus::EinsplineOrb</name>
    <filename>a00008.html</filename>
    <anchor>a01457</anchor>
    <templarg></templarg>
    <templarg>N</templarg>
  </compound>
  <compound kind="file">
    <name>EinsplineSet.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01155</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>void</type>
      <name>EinsplineMultiEval</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a0633d3207a00e266cfd14859d47b8ac2</anchor>
      <arglist>(multi_UBspline_3d_d *restrict spline, const TinyVector&lt; double, 3 &gt; &amp;r, Vector&lt; double &gt; &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EinsplineMultiEval</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ae3a9bdd784bce67eb31623c0921c4559</anchor>
      <arglist>(multi_UBspline_3d_d *restrict spline, TinyVector&lt; double, 3 &gt; r, vector&lt; double &gt; &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EinsplineMultiEval</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>abdd0ef5d26f199cf9df976bb257df9b3</anchor>
      <arglist>(multi_UBspline_3d_d *restrict spline, const TinyVector&lt; double, 3 &gt; &amp;r, Vector&lt; double &gt; &amp;psi, Vector&lt; TinyVector&lt; double, 3 &gt; &gt; &amp;grad)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EinsplineMultiEval</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>afa7ce4ad7338b8f6df377f806f28eddd</anchor>
      <arglist>(multi_UBspline_3d_d *restrict spline, const TinyVector&lt; double, 3 &gt; &amp;r, Vector&lt; double &gt; &amp;psi, Vector&lt; TinyVector&lt; double, 3 &gt; &gt; &amp;grad, Vector&lt; Tensor&lt; double, 3 &gt; &gt; &amp;hess)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EinsplineMultiEval</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a1edb59c933319c75f8c7b863d21803e2</anchor>
      <arglist>(multi_UBspline_3d_d *restrict spline, const TinyVector&lt; double, 3 &gt; &amp;r, Vector&lt; double &gt; &amp;psi, Vector&lt; TinyVector&lt; double, 3 &gt; &gt; &amp;grad, Vector&lt; Tensor&lt; double, 3 &gt; &gt; &amp;hess, Vector&lt; TinyVector&lt; Tensor&lt; double, 3 &gt;, 3 &gt; &gt; &amp;gradhess)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EinsplineMultiEval</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>aeb0c30e76c3da44e6da85bc4be1ef733</anchor>
      <arglist>(multi_UBspline_3d_z *restrict spline, const TinyVector&lt; double, 3 &gt; &amp;r, Vector&lt; complex&lt; double &gt; &gt; &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EinsplineMultiEval</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a810c528d384422dc943e76a5cda8df06</anchor>
      <arglist>(multi_UBspline_3d_z *restrict spline, const TinyVector&lt; double, 3 &gt; &amp;r, Vector&lt; complex&lt; double &gt; &gt; &amp;psi, Vector&lt; TinyVector&lt; complex&lt; double &gt;, 3 &gt; &gt; &amp;grad)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EinsplineMultiEval</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a51a5e3f234f2d8995366a9e32a837c78</anchor>
      <arglist>(multi_UBspline_3d_z *restrict spline, const TinyVector&lt; double, 3 &gt; &amp;r, Vector&lt; complex&lt; double &gt; &gt; &amp;psi, Vector&lt; TinyVector&lt; complex&lt; double &gt;, 3 &gt; &gt; &amp;grad, Vector&lt; Tensor&lt; complex&lt; double &gt;, 3 &gt; &gt; &amp;hess)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EinsplineMultiEval</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>aa210739e4769f04ce62f82b4594d9c21</anchor>
      <arglist>(multi_UBspline_3d_z *restrict spline, const TinyVector&lt; double, 3 &gt; &amp;r, Vector&lt; complex&lt; double &gt; &gt; &amp;psi, Vector&lt; TinyVector&lt; complex&lt; double &gt;, 3 &gt; &gt; &amp;grad, Vector&lt; Tensor&lt; complex&lt; double &gt;, 3 &gt; &gt; &amp;hess, Vector&lt; TinyVector&lt; Tensor&lt; complex&lt; double &gt;, 3 &gt;, 3 &gt; &gt; &amp;gradhess)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EinsplineSet.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01156</filename>
    <class kind="class">qmcplusplus::EinsplineSet</class>
    <class kind="struct">qmcplusplus::MultiOrbitalTraits</class>
    <class kind="struct">qmcplusplus::MultiOrbitalTraits&lt; double, 2 &gt;</class>
    <class kind="struct">qmcplusplus::MultiOrbitalTraits&lt; complex&lt; double &gt;, 2 &gt;</class>
    <class kind="struct">qmcplusplus::MultiOrbitalTraits&lt; float, 2 &gt;</class>
    <class kind="struct">qmcplusplus::MultiOrbitalTraits&lt; complex&lt; float &gt;, 2 &gt;</class>
    <class kind="struct">qmcplusplus::MultiOrbitalTraits&lt; double, 3 &gt;</class>
    <class kind="struct">qmcplusplus::MultiOrbitalTraits&lt; complex&lt; double &gt;, 3 &gt;</class>
    <class kind="struct">qmcplusplus::MultiOrbitalTraits&lt; float, 3 &gt;</class>
    <class kind="struct">qmcplusplus::MultiOrbitalTraits&lt; complex&lt; float &gt;, 3 &gt;</class>
    <class kind="class">qmcplusplus::EinsplineSetExtended</class>
    <namespace>qmcplusplus</namespace>
  <compound kind="struct">
    <name>qmcplusplus::MultiOrbitalTraits</name>
    <filename>a00008.html</filename>
    <anchor>a01491</anchor>
    <templarg></templarg>
    <templarg>dim</templarg>
  </compound>
  <compound kind="file">
    <name>EinsplineSetBuilder.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01157</filename>
    <class kind="struct">qmcplusplus::Int3less</class>
    <class kind="struct">qmcplusplus::Int4less</class>
    <class kind="struct">qmcplusplus::H5OrbSet</class>
    <class kind="struct">qmcplusplus::BandInfo</class>
    <class kind="class">qmcplusplus::EinsplineSetBuilder</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>EinsplineSetBuilder_createSPOs.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01158</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>EinsplineSetBuilderCommon.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01159</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>TinyVector&lt; T, 3 &gt;</type>
      <name>IntPart</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a1598a59a78f6bce41a9de064089941ca</anchor>
      <arglist>(const TinyVector&lt; T, 3 &gt; &amp;twist)</arglist>
    </member>
    <member kind="function">
      <type>TinyVector&lt; T, 3 &gt;</type>
      <name>FracPart</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a55ec49e8e23b1c1171c4d7d07cb838fb</anchor>
      <arglist>(const TinyVector&lt; T, 3 &gt; &amp;twist)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EinsplineSetBuilderESHDF.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01160</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="define">
      <type>#define</type>
      <name>EINSPLINE_HELP_DEBUG</name>
      <anchorfile>a01160.html</anchorfile>
      <anchor>a4133a1df39614f2c70a35bc67082ccaf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EinsplineSetBuilderESHDF.fft.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01161</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>bool</type>
      <name>sortByIndex</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a78311f3182bd6f23d616e1fddce97bb5</anchor>
      <arglist>(BandInfo leftB, BandInfo rightB)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EinsplineSetBuilderOld.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01162</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>EinsplineSetBuilderReadBands_ESHDF.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01163</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>EinsplineSetBuilderReadBands_ESHDF2.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01164</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="define">
      <type>#define</type>
      <name>QMCPLUSPLUS_EINSPLINE_BUILDER_ESHDF_H</name>
      <anchorfile>a01164.html</anchorfile>
      <anchor>a8a661317b01fb2f89893afc0401884d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a6498aca2b7e672c762a81a64d947788e</anchor>
      <arglist>(EinsplineSet *in, SPE *out)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EinsplineSetCuda.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01165</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>void</type>
      <name>apply_phase_factors</name>
      <anchorfile>a01165.html</anchorfile>
      <anchor>a1a1d7967c8d32059b4b09b2a83ed231e</anchor>
      <arglist>(float kPoints[], int makeTwoCopies[], float pos[], float *phi_in[], float *phi_out[], int num_splines, int num_walkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_phase_factors</name>
      <anchorfile>a01165.html</anchorfile>
      <anchor>ac87f71e9fc7cb01f78c990a0ccb1628c</anchor>
      <arglist>(float kPoints[], int makeTwoCopies[], float pos[], float *phi_in[], float *phi_out[], float *GL_in[], float *GL_out[], int num_splines, int num_walkers, int row_stride)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_multi_UBspline_3d_cuda</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>aac94debf5f2f29c8c3e951d70407a94f</anchor>
      <arglist>(multi_UBspline_3d_d *in, multi_UBspline_3d_s_cuda *&amp;out)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_multi_UBspline_3d_cuda</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>aeb754f457d4ec58ef7b4fb18d9e42c71</anchor>
      <arglist>(multi_UBspline_3d_d *in, multi_UBspline_3d_d_cuda *&amp;out)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_multi_UBspline_3d_cuda</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a92cf7f00b2df51e24ce59f56f198d05f</anchor>
      <arglist>(multi_UBspline_3d_z *in, multi_UBspline_3d_c_cuda *&amp;out)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_multi_UBspline_3d_cuda</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>af796f34826e22dc00307a66afdc618ac</anchor>
      <arglist>(multi_UBspline_3d_z *in, multi_UBspline_3d_z_cuda *&amp;out)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_multi_UBspline_3d_cuda</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a40a87434b16bf4de99f3e64fe25c98ec</anchor>
      <arglist>(multi_UBspline_3d_z *in, multi_UBspline_3d_d_cuda *&amp;out)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_multi_UBspline_3d_cuda</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a186086167ef9352b55be202803cc6ab9</anchor>
      <arglist>(multi_UBspline_3d_z *in, multi_UBspline_3d_s_cuda *&amp;out)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EinsplineMultiEval</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a9c90d7f0720a794f47cd8c9a200a5ffc</anchor>
      <arglist>(multi_UBspline_3d_d *restrict spline, TinyVector&lt; double, 3 &gt; r, Vector&lt; double &gt; &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EinsplineMultiEval</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ad494206457f87638bd29a557a7141f1d</anchor>
      <arglist>(multi_UBspline_3d_d *restrict spline, TinyVector&lt; double, 3 &gt; r, Vector&lt; double &gt; &amp;psi, Vector&lt; TinyVector&lt; double, 3 &gt; &gt; &amp;grad, Vector&lt; Tensor&lt; double, 3 &gt; &gt; &amp;hess)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EinsplineMultiEval</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ada26650fa11efe85e208d14b031a78a2</anchor>
      <arglist>(multi_UBspline_3d_z *restrict spline, TinyVector&lt; double, 3 &gt; r, Vector&lt; complex&lt; double &gt; &gt; &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EinsplineMultiEval</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a28dbbaa44e563384261539b126d33ed5</anchor>
      <arglist>(multi_UBspline_3d_z *restrict spline, TinyVector&lt; double, 3 &gt; r, Vector&lt; complex&lt; double &gt; &gt; &amp;psi, Vector&lt; TinyVector&lt; complex&lt; double &gt;, 3 &gt; &gt; &amp;grad, Vector&lt; Tensor&lt; complex&lt; double &gt;, 3 &gt; &gt; &amp;hess)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval_multi_multi_UBspline_3d_cuda</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a61510ed689e87c7a614b1f97c4478f42</anchor>
      <arglist>(multi_UBspline_3d_s_cuda *spline, float *pos, float *sign, float *phi[], int N)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval_multi_multi_UBspline_3d_cuda</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a8f37597cccf874556b3bf721197bc73f</anchor>
      <arglist>(multi_UBspline_3d_d_cuda *spline, double *pos, double *phi[], int N)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval_multi_multi_UBspline_3d_vgl_cuda</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>aa16121bd095f3565b90d0dd116b511b0</anchor>
      <arglist>(multi_UBspline_3d_s_cuda *spline, float *pos, float *sign, float Linv[], float *phi[], float *grad_lapl[], int N, int row_stride)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval_multi_multi_UBspline_3d_vgl_cuda</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a6a76e91b519f5459e92ea88020fa3b3d</anchor>
      <arglist>(multi_UBspline_3d_d_cuda *spline, double *pos, double Linv[], double *phi[], double *grad_lapl[], int N, int row_stride)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval_multi_multi_UBspline_3d_cuda</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a4fc3daa527e65a8a022f7bf3d48adca6</anchor>
      <arglist>(multi_UBspline_3d_c_cuda *spline, float *pos, complex&lt; float &gt; *phi[], int N)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval_multi_multi_UBspline_3d_cuda</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a8193e95d465ab0eb4707f03ebaf12d55</anchor>
      <arglist>(multi_UBspline_3d_z_cuda *spline, double *pos, complex&lt; double &gt; *phi[], int N)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval_multi_multi_UBspline_3d_vgl_cuda</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a228186c3b8cbdb25ab40adcbe82aac98</anchor>
      <arglist>(multi_UBspline_3d_c_cuda *spline, float *pos, float Linv[], complex&lt; float &gt; *phi[], complex&lt; float &gt; *grad_lapl[], int N, int row_stride)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval_multi_multi_UBspline_3d_vgl_cuda</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>aed36fcc903e77f8aa12be55226e84ab3</anchor>
      <arglist>(multi_UBspline_3d_z_cuda *spline, double *pos, double Linv[], complex&lt; double &gt; *phi[], complex&lt; double &gt; *grad_lapl[], int N, int row_stride)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EinsplineSetLocal.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01166</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>EinsplineSetLocal.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01167</filename>
    <class kind="class">qmcplusplus::EinsplineSetLocal</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>EinsplineWrapper.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01168</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>EinsplineWrapper.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01169</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ElectronGasComplexOrbitalBuilder.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/ElectronGas/</path>
    <filename>a01170</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ElectronGasComplexOrbitalBuilder.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/ElectronGas/</path>
    <filename>a01171</filename>
    <class kind="struct">qmcplusplus::EGOSet</class>
    <class kind="class">qmcplusplus::ElectronGasComplexOrbitalBuilder</class>
    <class kind="class">qmcplusplus::ElectronGasBasisBuilder</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ElectronGasOrbitalBuilder.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/ElectronGas/</path>
    <filename>a01172</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ElectronGasOrbitalBuilder.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/ElectronGas/</path>
    <filename>a01173</filename>
    <class kind="struct">qmcplusplus::RealEGOSet</class>
    <class kind="class">qmcplusplus::ElectronGasOrbitalBuilder</class>
    <class kind="class">qmcplusplus::ElectronGasBasisBuilder</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>HEGGrid.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/ElectronGas/</path>
    <filename>a01174</filename>
    <class kind="struct">qmcplusplus::HEGGrid</class>
    <class kind="struct">qmcplusplus::HEGGrid&lt; T, 3 &gt;</class>
    <class kind="struct">qmcplusplus::HEGGrid&lt; T, 2 &gt;</class>
    <namespace>qmcplusplus</namespace>
  <compound kind="struct">
    <name>qmcplusplus::HEGGrid</name>
    <filename>a00008.html</filename>
    <anchor>a01467</anchor>
    <templarg></templarg>
    <templarg>D</templarg>
  </compound>
  <compound kind="file">
    <name>Backflow_ee.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01175</filename>
    <class kind="class">qmcplusplus::Backflow_ee</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>Backflow_ee_kSpace.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01176</filename>
    <class kind="class">qmcplusplus::Backflow_ee_kSpace</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>Backflow_eI.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01177</filename>
    <class kind="class">qmcplusplus::Backflow_eI</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>Backflow_eI_spin.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01178</filename>
    <class kind="class">qmcplusplus::Backflow_eI_spin</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>BackflowBuilder.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01179</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>BackflowBuilder.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01180</filename>
    <class kind="class">qmcplusplus::BackflowBuilder</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>BackflowFunctionBase.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01181</filename>
    <class kind="class">qmcplusplus::BackflowFunctionBase</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>BackflowTransformation.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01182</filename>
    <class kind="class">qmcplusplus::BackflowTransformation</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>BFsplineFunctor.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01183</filename>
    <class kind="struct">qmcplusplus::BFsplineFunctor</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ci_builder.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01184</filename>
    <class kind="struct">qmcplusplus::ci_builder</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ci_configuration.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01185</filename>
    <class kind="struct">qmcplusplus::ci_configuration</class>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a9f9848361308ea20995137a292df2105</anchor>
      <arglist>(std::ostream &amp;out, const ci_configuration &amp;c)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ci_configuration2.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01186</filename>
    <class kind="struct">qmcplusplus::ci_configuration2</class>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a7e79dcf88f261830cc8d6dbc27e2aa95</anchor>
      <arglist>(std::ostream &amp;out, const ci_configuration2 &amp;c)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ci_node.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01187</filename>
    <class kind="struct">qmcplusplus::ci_node</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>determinant_update.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a00623</filename>
    <class kind="struct">updateJob</class>
    <member kind="function">
      <type>void</type>
      <name>update_inverse_cuda</name>
      <anchorfile>a00623.html</anchorfile>
      <anchor>af5fe116599030c5ee2ec4f0639b0ae35</anchor>
      <arglist>(float *A_g[], float *Ainv_g[], float *u_g[], float *Ainv_delta_g[], float *Ainv_colk_g[], int N, int rowstride, int iat, int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_inverse_cuda</name>
      <anchorfile>a00623.html</anchorfile>
      <anchor>a36b2eee270bb4370d02be0199d195754</anchor>
      <arglist>(updateJob jobList[], double dummy, int N, int rowstride, int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_inverse_cuda</name>
      <anchorfile>a00623.html</anchorfile>
      <anchor>a044069508894f316ae4037e41e0ce21b</anchor>
      <arglist>(updateJob jobList[], float dummy, int N, int rowstride, int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_inverse_cuda</name>
      <anchorfile>a00623.html</anchorfile>
      <anchor>a35b2158f07dba79e7187a8250ab326d7</anchor>
      <arglist>(double *A_g[], double *Ainv_g[], double *u_g[], double *Ainv_delta_g[], double *Ainv_colk_g[], int N, int rowstride, int iat, int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_inverse_cuda</name>
      <anchorfile>a00623.html</anchorfile>
      <anchor>a611a197632d3579898eb41884ab354a2</anchor>
      <arglist>(float **data, int iat[], int A_off, int Ainv_off, int newRow_off, int AinvDelta_off, int AinvColk_off, int N, int rowstride, int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_inverse_cuda</name>
      <anchorfile>a00623.html</anchorfile>
      <anchor>a5723a800891b85ee94ff30b3eca90871</anchor>
      <arglist>(double **data, int iat[], int A_off, int Ainv_off, int newRow_off, int AinvDelta_off, int AinvColk_off, int N, int rowstride, int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_inverse_cuda</name>
      <anchorfile>a00623.html</anchorfile>
      <anchor>aa1c7b3e8f71d883fdcb0d246a8414976</anchor>
      <arglist>(float **data, int iat, int A_off, int Ainv_off, int newRow_off, int AinvDelta_off, int AinvColk_off, int N, int rowstride, int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_inverse_cuda</name>
      <anchorfile>a00623.html</anchorfile>
      <anchor>a215a077d91175740edbde44269ff1552</anchor>
      <arglist>(double **data, int iat, int A_off, int Ainv_off, int newRow_off, int AinvDelta_off, int AinvColk_off, int N, int rowstride, int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>determinant_ratios_cuda</name>
      <anchorfile>a00623.html</anchorfile>
      <anchor>ac7f89f870570923b2b9f88b632cfeb5b</anchor>
      <arglist>(float *Ainv_list[], float *new_row_list[], float *ratios, int N, int row_stride, int iat, int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>determinant_ratios_cuda</name>
      <anchorfile>a00623.html</anchorfile>
      <anchor>ae093a4db0476442c2642203573d53f7b</anchor>
      <arglist>(double *Ainv_list[], double *new_row_list[], double *ratios, int N, int row_stride, int iat, int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calc_many_ratios</name>
      <anchorfile>a00623.html</anchorfile>
      <anchor>a83daaa71a8149d37975397d6841990a0</anchor>
      <arglist>(float *Ainv_list[], float *new_row_list[], float *ratio_list[], int num_ratio_list[], int N, int row_stride, int elec_list[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calc_many_ratios</name>
      <anchorfile>a00623.html</anchorfile>
      <anchor>aad783cddba83a852ce0677700a170690</anchor>
      <arglist>(double *Ainv_list[], double *new_row_list[], double *ratio_list[], int num_ratio_list[], int N, int row_stride, int elec_list[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale_grad_lapl</name>
      <anchorfile>a00623.html</anchorfile>
      <anchor>a9cc1e2f5899cd7e1d024111a1f1dd0dd</anchor>
      <arglist>(float *grad_list[], float *hess_list[], float *grad_lapl_list[], float Linv[], int N, int num_walkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calc_grad_lapl</name>
      <anchorfile>a00623.html</anchorfile>
      <anchor>a77c9c9405e335230164a87852a90c1d6</anchor>
      <arglist>(float *Ainv_list[], float *grad_lapl_list[], float *out_list[], int N, int row_stride, int num_mats)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calc_grad_lapl</name>
      <anchorfile>a00623.html</anchorfile>
      <anchor>a9864cff49ede8cdd902f51fae5cb10f2</anchor>
      <arglist>(double *Ainv_list[], double *grad_lapl_list[], double *out_list[], int N, int row_stride, int num_mats)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multi_copy</name>
      <anchorfile>a00623.html</anchorfile>
      <anchor>afd21966937fb89db046650dfeacc1a9f</anchor>
      <arglist>(float *dest[], float *src[], int len, int num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multi_copy</name>
      <anchorfile>a00623.html</anchorfile>
      <anchor>ac21cd8f9619724c6fc4cb00c605f1299</anchor>
      <arglist>(double *dest[], double *src[], int len, int num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multi_copy</name>
      <anchorfile>a00623.html</anchorfile>
      <anchor>aefb22237a1cbf66a5bd0de5fb8980f40</anchor>
      <arglist>(float *buff[], int srcoff, int dest_off, int len, int num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multi_copy</name>
      <anchorfile>a00623.html</anchorfile>
      <anchor>ab26fdf31aa5eb29923f0aa340c505420</anchor>
      <arglist>(double *buff[], int src_off, int dest_off, int len, int num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>determinant_ratios_grad_lapl_cuda</name>
      <anchorfile>a00623.html</anchorfile>
      <anchor>a5ef4a5d8098d704c86bcefe5ce5c67ed</anchor>
      <arglist>(float *Ainv_list[], float *new_row_list[], float *grad_lapl_list[], float ratios_grad_lapl[], int N, int row_stride, int iat, int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>determinant_ratios_grad_lapl_cuda</name>
      <anchorfile>a00623.html</anchorfile>
      <anchor>ab9c8f4b18a6834ef5806a32bb8e277c2</anchor>
      <arglist>(double *Ainv_list[], double *new_row_list[], double *grad_lapl_list[], double ratios_grad_lapl[], int N, int row_stride, int iat, int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>determinant_ratios_grad_lapl_cuda</name>
      <anchorfile>a00623.html</anchorfile>
      <anchor>ae3a4aa1edbff5fc1c8b3c07df9dcc624</anchor>
      <arglist>(float *Ainv_list[], float *new_row_list[], float *grad_lapl_list[], float ratios_grad_lapl[], int N, int row_stride, int iat_list[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>determinant_ratios_grad_lapl_cuda</name>
      <anchorfile>a00623.html</anchorfile>
      <anchor>a0ea191e35ec847c86003b0d1c76be411</anchor>
      <arglist>(double *Ainv_list[], double *new_row_list[], double *grad_lapl_list[], double ratios_grad_lapl[], int N, int row_stride, int iat_list[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calc_gradient</name>
      <anchorfile>a00623.html</anchorfile>
      <anchor>af3dbf7517080115775ae940e8058678f</anchor>
      <arglist>(float *Ainv_list[], float *grad_lapl_list[], float grad[], int N, int row_stride, int elec, int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calc_gradient</name>
      <anchorfile>a00623.html</anchorfile>
      <anchor>a274377c016f0fe4b7fab80aabc39dbbd</anchor>
      <arglist>(double *Ainv_list[], double *grad_lapl_list[], double grad[], int N, int row_stride, int elec, int numWalkers)</arglist>
    </member>
  <compound kind="struct">
    <name>updateJob</name>
    <filename>a00623.html</filename>
    <anchor>a01540</anchor>
  </compound>
  <compound kind="file">
    <name>DiracDeterminantAFM.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01188</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DiracDeterminantAFM.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01189</filename>
    <class kind="class">qmcplusplus::DiracDeterminantAFM</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DiracDeterminantBase.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01190</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DiracDeterminantBase.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01191</filename>
    <class kind="class">qmcplusplus::DiracDeterminantBase</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DiracDeterminantCUDA.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01192</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>void</type>
      <name>CheckAlign</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a8409caff8d28a250db320586840c367b</anchor>
      <arglist>(void *p, string var)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DiracDeterminantCUDA.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01193</filename>
    <class kind="class">qmcplusplus::DiracDeterminantCUDA</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DiracDeterminantIterative.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01194</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DiracDeterminantIterative.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01195</filename>
    <class kind="class">qmcplusplus::DiracDeterminantIterative</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DiracDeterminantOpt.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01196</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DiracDeterminantOpt.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01197</filename>
    <class kind="class">qmcplusplus::DiracDeterminantOpt</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DiracDeterminantT.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01198</filename>
    <class kind="class">qmcplusplus::DiracDeterminantT</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DiracDeterminantTruncation.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01199</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DiracDeterminantTruncation.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01200</filename>
    <class kind="class">qmcplusplus::DiracDeterminantTruncation</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DiracDeterminantWithBackflow.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01201</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DiracDeterminantWithBackflow.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01202</filename>
    <class kind="class">qmcplusplus::DiracDeterminantWithBackflow</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>excitation_node.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01203</filename>
    <class kind="struct">qmcplusplus::excitation_node</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ExcitationClass.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01204</filename>
    <class kind="class">qmcplusplus::ExcitationClass</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianFunctor.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01205</filename>
    <class kind="struct">qmcplusplus::GaussianFunctor</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianFunctor.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01206</filename>
    <class kind="struct">qmcplusplus::GaussianFunctor</class>
    <class kind="struct">qmcplusplus::TruncatedShiftedGaussianFunctor</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ILUGMRESInterface.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01207</filename>
    <member kind="define">
      <type>#define</type>
      <name>UMFPACK_INFO</name>
      <anchorfile>a01207.html</anchorfile>
      <anchor>ac9416e5a33a69d29d72e0ed9c3264cc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UMFPACK_CONTROL</name>
      <anchorfile>a01207.html</anchorfile>
      <anchor>aff51d1bfc1184a011e901ebbc7180115</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UMFPACK_A</name>
      <anchorfile>a01207.html</anchorfile>
      <anchor>abf50a10eb4b710070451423dcc2a918d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UMFPACK_DROPTOL</name>
      <anchorfile>a01207.html</anchorfile>
      <anchor>a4202e9f68f833f30bbd0ae39df578667</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UMFPACK_SCALE</name>
      <anchorfile>a01207.html</anchorfile>
      <anchor>a05cbf6461845ed93d75385afc13585c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UMFPACK_SCALE_NONE</name>
      <anchorfile>a01207.html</anchorfile>
      <anchor>aaae47488f4043d35f1cf382cbc81497d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>umfpack_di_symbolic</name>
      <anchorfile>a01207.html</anchorfile>
      <anchor>aab70b6ae3290bea32bc09a69ee971207</anchor>
      <arglist>(int n_row, int n_col, const int Ap[], const int Ai[], const double Ax[], void **Symbolic, const double Control[UMFPACK_CONTROL], double Info[UMFPACK_INFO])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>umfpack_di_numeric</name>
      <anchorfile>a01207.html</anchorfile>
      <anchor>a443ad80c4f19123ed827cecfced2b411</anchor>
      <arglist>(const int Ap[], const int Ai[], const double Ax[], void *Symbolic, void **Numeric, const double Control[UMFPACK_CONTROL], double Info[UMFPACK_INFO])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umfpack_di_free_symbolic</name>
      <anchorfile>a01207.html</anchorfile>
      <anchor>ae97eee0408e395e6857a493b1eb2e513</anchor>
      <arglist>(void **Symbolic)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>umfpack_di_solve</name>
      <anchorfile>a01207.html</anchorfile>
      <anchor>a36292c13850c3e106774d94eb69cb3b6</anchor>
      <arglist>(int sys, const int Ap[], const int Ai[], const double Ax[], double X[], const double B[], void *Numeric, const double Control[UMFPACK_CONTROL], double Info[UMFPACK_INFO])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umfpack_di_free_numeric</name>
      <anchorfile>a01207.html</anchorfile>
      <anchor>ad6119e111efd6d7fcbea44037f3f4105</anchor>
      <arglist>(void **Numeric)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>umfpack_di_get_lunz</name>
      <anchorfile>a01207.html</anchorfile>
      <anchor>a404ea281d01e39bfdd59fbb10f8b3123</anchor>
      <arglist>(int *lnz, int *unz, int *n_row, int *n_col, int *nz_udiag, void *Numeric)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>umfpack_di_get_numeric</name>
      <anchorfile>a01207.html</anchorfile>
      <anchor>a772656ce860808d384543f22f26037c7</anchor>
      <arglist>(int Lp[], int Lj[], double Lx[], int Up[], int Ui[], double Ux[], int P[], int Q[], double Dx[], int *do_recip, double Rs[], void *Numeric)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>umfpack_di_transpose</name>
      <anchorfile>a01207.html</anchorfile>
      <anchor>a1fbe31b3230669feb223c48e0eedae9f</anchor>
      <arglist>(int n_row, int n_col, const int Ap[], const int Ai[], const double Ax[], const int P[], const int Q[], int Rp[], int Ri[], double Rx[])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>gmresm</name>
      <anchorfile>a01207.html</anchorfile>
      <anchor>aa977801fad6a108257c203f3bda53bf7</anchor>
      <arglist>(int, int, int, double, double *, double *, int *, int *, double *, int *, int *, double *, double *, double *, int *, int *, FILE *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ilutp_</name>
      <anchorfile>a01207.html</anchorfile>
      <anchor>ad0181860362d96d8e3f9345a9a9895f3</anchor>
      <arglist>(int *, double *, int *, int *, int *, double *, double *, int *, double *, int *, int *, int *, double *, double *, int *, int *, int *, int *, int *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lusol_</name>
      <anchorfile>a01207.html</anchorfile>
      <anchor>a4f4496bc9e8dcb89f418a12bcee41179</anchor>
      <arglist>(int *, double *, double *, double *, int *, int *)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>TestMe</name>
      <anchorfile>a01207.html</anchorfile>
      <anchor>adbf0abc30004a30c1a1cc327388d76b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcDeterminantILUGMRES</name>
      <anchorfile>a01207.html</anchorfile>
      <anchor>a8f736f45ac1cd6b71d1e4b9e64bbaf02</anchor>
      <arglist>(int *movedParticle, int *size, int *passedArrLength, double u[], int Ap[], int Ai[], double Ax[], int Arp[], int Ari[], double Arx[], double *detRatio_ILU)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcDeterminantILUGMRESNew</name>
      <anchorfile>a01207.html</anchorfile>
      <anchor>a956c195fbd05e1e33c70bc6a0e3e24d0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MultiDiracDeterminantBase.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01208</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>void</type>
      <name>out1</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a84dfafa5dc2cf784a7226af357f40ac1</anchor>
      <arglist>(int n, string str=&quot;NULL&quot;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MultiDiracDeterminantBase.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01209</filename>
    <class kind="class">qmcplusplus::MultiDiracDeterminantBase</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>MultiDiracDeterminantBase_help.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01210</filename>
  </compound>
  <compound kind="file">
    <name>MultiDiracDeterminantBase_help.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01211</filename>
    <class kind="struct">qmcplusplus::MyDeterminant</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>MultiDiracDeterminantWithBackflow.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01212</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>MultiDiracDeterminantWithBackflow.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01213</filename>
    <class kind="class">qmcplusplus::MultiDiracDeterminantBase</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>MultiSlaterDeterminant.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01214</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>MultiSlaterDeterminant.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01215</filename>
    <class kind="class">qmcplusplus::MultiSlaterDeterminant</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>MultiSlaterDeterminantFast.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01216</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>MultiSlaterDeterminantFast.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01217</filename>
    <class kind="class">qmcplusplus::MultiSlaterDeterminantFast</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>MultiSlaterDeterminantWithBackflow.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01218</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>MultiSlaterDeterminantWithBackflow.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01219</filename>
    <class kind="class">qmcplusplus::MultiSlaterDeterminantWithBackflow</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>RNDiracDeterminantBase.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01220</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>RNDiracDeterminantBase.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01221</filename>
    <class kind="class">qmcplusplus::RNDiracDeterminantBase</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>RNDiracDeterminantBaseAlternate.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01222</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>RNDiracDeterminantBaseAlternate.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01223</filename>
    <class kind="class">qmcplusplus::RNDiracDeterminantBaseAlternate</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>SlaterDet.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01224</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>SlaterDet.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01225</filename>
    <class kind="class">qmcplusplus::SlaterDet</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>SlaterDetBuilder.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01226</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>SlaterDetBuilder.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01227</filename>
    <class kind="class">qmcplusplus::SlaterDetBuilder</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>SlaterDetCUDA.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01228</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>SlaterDetWithBackflow.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01229</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>SlaterDetWithBackflow.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01230</filename>
    <class kind="class">qmcplusplus::SlaterDetWithBackflow</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>SPOSetProxy.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01231</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>SPOSetProxy.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01232</filename>
    <class kind="struct">qmcplusplus::SPOSetProxy</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>SPOSetProxyForMSD.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01233</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>SPOSetProxyForMSD.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>a01234</filename>
    <class kind="struct">qmcplusplus::SPOSetProxyForMSD</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>FermionBase.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01235</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>FermionBase.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01236</filename>
    <class kind="struct">qmcplusplus::FermionBase</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>GroupedOrbitalSet.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01237</filename>
    <class kind="struct">qmcplusplus::GroupedOrbitalSet</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>IonOrbital.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01238</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="typedef">
      <type>IonOrbital::ValueType</type>
      <name>ValueType</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a641fbb6e0e1886d97ff6dd1031c53e82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IonOrbital::GradType</type>
      <name>GradType</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>afe5f9cc410cef3e37a636664a7820388</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IonOrbital.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01239</filename>
    <class kind="struct">qmcplusplus::IonOrbital</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>IonOrbitalBuilder.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01240</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>IonOrbitalBuilder.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01241</filename>
    <class kind="class">qmcplusplus::IonOrbitalBuilder</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>BesselZeroFunctor.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01242</filename>
    <class kind="struct">qmcplusplus::BesselZero</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>BsplineFunctor.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01243</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>BsplineFunctor.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01244</filename>
    <class kind="struct">qmcplusplus::BsplineFunctor</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>BsplineFunctor3D.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01245</filename>
    <class kind="struct">qmcplusplus::BsplineFunctor3D</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>BsplineJastrowBuilder.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01246</filename>
    <class kind="struct">qmcplusplus::BsplineInitializer</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>BsplineJastrowBuilder.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01247</filename>
    <class kind="struct">qmcplusplus::BsplineJastrowBuilder</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>BsplineJastrowCuda.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01248</filename>
    <member kind="function">
      <type>void</type>
      <name>two_body_sum</name>
      <anchorfile>a01248.html</anchorfile>
      <anchor>adc30b4c3e93e270dae0d6aa1b4c6c292</anchor>
      <arglist>(float *R[], int e1_first, int e1_last, int e2_first, int e2_last, float spline_coefs[], int numCoefs, float rMax, float sum[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>two_body_sum</name>
      <anchorfile>a01248.html</anchorfile>
      <anchor>a351bf4bb5cb5067b6ff08ceacc7e98b3</anchor>
      <arglist>(double *R[], int e1_first, int e1_last, int e2_first, int e2_last, double spline_coefs[], int numCoefs, double rMax, double sum[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>two_body_ratio</name>
      <anchorfile>a01248.html</anchorfile>
      <anchor>ab0f2c6c5487c7d0d2b11bb9d781794a3</anchor>
      <arglist>(float *R[], int first, int last, float Rnew[], int inew, float spline_coefs[], int numCoefs, float rMax, float sum[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>two_body_ratio</name>
      <anchorfile>a01248.html</anchorfile>
      <anchor>a563bb618dc213593ac426ed08fcc05da</anchor>
      <arglist>(double *R[], int first, int last, double Rnew[], int inew, double spline_coefs[], int numCoefs, double rMax, double sum[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>two_body_ratio_grad</name>
      <anchorfile>a01248.html</anchorfile>
      <anchor>a3189007f051525580a896d15d80b45b6</anchor>
      <arglist>(float *R[], int first, int last, float Rnew[], int inew, float spline_coefs[], int numCoefs, float rMax, bool zero, float ratio_grad[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>two_body_ratio_grad</name>
      <anchorfile>a01248.html</anchorfile>
      <anchor>a44b2a7fe0f77b05651f34d4f540fbf05</anchor>
      <arglist>(double *R[], int first, int last, double Rnew[], int inew, double spline_coefs[], int numCoefs, double rMax, bool zero, double ratio_grad[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>two_body_NLratios</name>
      <anchorfile>a01248.html</anchorfile>
      <anchor>aa6742f1f08ee20bf3d81b522455d1a89</anchor>
      <arglist>(NLjobGPU&lt; float &gt; jobs[], int first, int last, float *spline_coefs[], int numCoefs[], float rMax[], int numjobs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>two_body_NLratios</name>
      <anchorfile>a01248.html</anchorfile>
      <anchor>a1f3a41dd7c750872f9dcc8f4520753a4</anchor>
      <arglist>(NLjobGPU&lt; double &gt; jobs[], int first, int last, double *spline_coefs[], int numCoefs[], double rMax[], int numjobs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>two_body_update</name>
      <anchorfile>a01248.html</anchorfile>
      <anchor>ad46483d27b0d7e33c9b46ae8191040a4</anchor>
      <arglist>(float *R[], int N, int iat, int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>two_body_update</name>
      <anchorfile>a01248.html</anchorfile>
      <anchor>a8074f3f6da79c0648922d734559775f9</anchor>
      <arglist>(double *R[], int N, int iat, int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>two_body_grad_lapl</name>
      <anchorfile>a01248.html</anchorfile>
      <anchor>ac098134eb1ff8125a10c275e52b5e214</anchor>
      <arglist>(float *R[], int e1_first, int e1_last, int e2_first, int e2_last, float spline_coefs[], int numCoefs, float rMax, float gradLapl[], int row_stride, int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>two_body_grad_lapl</name>
      <anchorfile>a01248.html</anchorfile>
      <anchor>aabe8074a6785a989e48b99c67411bcb4</anchor>
      <arglist>(double *R[], int e1_first, int e1_last, int e2_first, int e2_last, double spline_coefs[], int numCoefs, double rMax, double gradLapl[], int row_stride, int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>two_body_gradient</name>
      <anchorfile>a01248.html</anchorfile>
      <anchor>a5456689137df166e26bf4acc8ebcf51e</anchor>
      <arglist>(float *R[], int first, int last, int iat, float spline_coefs[], int numCoefs, float rMax, bool zeroOut, float grad[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>two_body_gradient</name>
      <anchorfile>a01248.html</anchorfile>
      <anchor>ab3e8b00fa2551eaf9bfe389207148c68</anchor>
      <arglist>(double *R[], int first, int last, int iat, double spline_coefs[], int numCoefs, double rMax, bool zeroOut, double grad[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>two_body_derivs</name>
      <anchorfile>a01248.html</anchorfile>
      <anchor>a580f438d788f184e5bdcf2447aa60a02</anchor>
      <arglist>(float *R[], float *gradLogPsi[], int e1_first, int e1_last, int e2_first, int e2_last, int numCoefs, float rMax, float *derivs[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>two_body_derivs</name>
      <anchorfile>a01248.html</anchorfile>
      <anchor>ae7c61e5bc6d4bfa4f92e1b1f7961e6d2</anchor>
      <arglist>(double *R[], double *gradLogPsi[], int e1_first, int e1_last, int e2_first, int e2_last, int numCoefs, double rMax, double *derivs[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>one_body_sum</name>
      <anchorfile>a01248.html</anchorfile>
      <anchor>af36c96256770f9fbefa7a007c0873c8b</anchor>
      <arglist>(float C[], float *R[], int e1_first, int e1_last, int e2_first, int e2_last, float spline_coefs[], int numCoefs, float rMax, float sum[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>one_body_sum</name>
      <anchorfile>a01248.html</anchorfile>
      <anchor>ab54db5ad3a8a5f82ae26a500b60db6ee</anchor>
      <arglist>(double C[], double *R[], int e1_first, int e1_last, int e2_first, int e2_last, double spline_coefs[], int numCoefs, double rMax, double sum[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>one_body_ratio</name>
      <anchorfile>a01248.html</anchorfile>
      <anchor>ad47f066dbb86b2abd9d2d5784842e0b1</anchor>
      <arglist>(float C[], float *R[], int first, int last, float Rnew[], int inew, float spline_coefs[], int numCoefs, float rMax, float sum[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>one_body_ratio</name>
      <anchorfile>a01248.html</anchorfile>
      <anchor>a2856e734365e5916a80b3bde99131454</anchor>
      <arglist>(double C[], double *R[], int first, int last, double Rnew[], int inew, double spline_coefs[], int numCoefs, double rMax, double sum[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>one_body_ratio_grad</name>
      <anchorfile>a01248.html</anchorfile>
      <anchor>abae946a6e3e630d12389e7c531e78040</anchor>
      <arglist>(float C[], float *R[], int first, int last, float Rnew[], int inew, float spline_coefs[], int numCoefs, float rMax, bool zero, float ratio_grad[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>one_body_ratio_grad</name>
      <anchorfile>a01248.html</anchorfile>
      <anchor>a1a6466498ae79506f3959bc2181375c6</anchor>
      <arglist>(double C[], double *R[], int first, int last, double Rnew[], int inew, double spline_coefs[], int numCoefs, double rMax, bool zero, double ratio_grad[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>one_body_NLratios</name>
      <anchorfile>a01248.html</anchorfile>
      <anchor>a79e03aa4126713078b9b765bba68ecb3</anchor>
      <arglist>(NLjobGPU&lt; float &gt; jobs[], float C[], int first, int last, float spline_coefs[], int numCoefs, float rMax, int numjobs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>one_body_NLratios</name>
      <anchorfile>a01248.html</anchorfile>
      <anchor>aeecc4e4aee3728f7222d8d5867514f79</anchor>
      <arglist>(NLjobGPU&lt; double &gt; jobs[], double C[], int first, int last, double spline_coefs[], int numCoefs, double rMax, int numjobs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>one_body_update</name>
      <anchorfile>a01248.html</anchorfile>
      <anchor>a897c9ea576471e431ffa9f33ad1b825a</anchor>
      <arglist>(float *R[], int N, int iat, int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>one_body_update</name>
      <anchorfile>a01248.html</anchorfile>
      <anchor>adb8d0ce3f9709fd1d7a056a374dc2c28</anchor>
      <arglist>(double *R[], int N, int iat, int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>one_body_grad_lapl</name>
      <anchorfile>a01248.html</anchorfile>
      <anchor>af9180997784584f210b5accc77b11af6</anchor>
      <arglist>(float C[], float *R[], int e1_first, int e1_last, int e2_first, int e2_last, float spline_coefs[], int numCoefs, float rMax, float gradLapl[], int row_stride, int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>one_body_grad_lapl</name>
      <anchorfile>a01248.html</anchorfile>
      <anchor>a2d5cdf5b105c6f3f7a98925ed4cdbae7</anchor>
      <arglist>(double C[], double *R[], int e1_first, int e1_last, int e2_first, int e2_last, double spline_coefs[], int numCoefs, double rMax, double gradLapl[], int row_stride, int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>one_body_gradient</name>
      <anchorfile>a01248.html</anchorfile>
      <anchor>a88a553d0a0e7c836d401f24a8a24b0cb</anchor>
      <arglist>(float *Rlist[], int iat, float C[], int first, int last, float spline_coefs[], int num_coefs, float rMax, bool zeroSum, float grad[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>one_body_gradient</name>
      <anchorfile>a01248.html</anchorfile>
      <anchor>a4a084e2850e8d4ab481ed8e116339a62</anchor>
      <arglist>(double *Rlist[], int iat, double C[], int first, int last, double spline_coefs[], int num_coefs, double rMax, bool zeroSum, double grad[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>one_body_derivs</name>
      <anchorfile>a01248.html</anchorfile>
      <anchor>ac858bd1a2d8bd24e41ef8b5016bd3521</anchor>
      <arglist>(float C[], float *R[], float *gradLogPsi[], int cfirst, int clast, int efirst, int elast, int numCoefs, float rMax, float *derivs[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>one_body_derivs</name>
      <anchorfile>a01248.html</anchorfile>
      <anchor>a915d1a4ca4ce7fd53eaf1c4adec42a62</anchor>
      <arglist>(double C[], double *R[], double *gradLogPsi[], int cfirst, int clast, int efirst, int elast, int numCoefs, double rMax, double *derivs[], int numWalkers)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BsplineJastrowCudaPBC.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01249</filename>
    <member kind="function">
      <type>void</type>
      <name>two_body_sum_PBC</name>
      <anchorfile>a01249.html</anchorfile>
      <anchor>a375738643d694fe43cc950ba2ac71177</anchor>
      <arglist>(float *R[], int e1_first, int e1_last, int e2_first, int e2_last, float spline_coefs[], int numCoefs, float rMax, float lattice[], float latticeInv[], float sum[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>two_body_sum_PBC</name>
      <anchorfile>a01249.html</anchorfile>
      <anchor>a263021d5fbb17d117ab6d348099ae3ab</anchor>
      <arglist>(double *R[], int e1_first, int e1_last, int e2_first, int e2_last, double spline_coefs[], int numCoefs, double rMax, double lattice[], double latticeInv[], double sum[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>two_body_ratio_PBC</name>
      <anchorfile>a01249.html</anchorfile>
      <anchor>ae4bc763438c6d0561df0ed7a30d12db7</anchor>
      <arglist>(float *R[], int first, int last, float Rnew[], int inew, float spline_coefs[], int numCoefs, float rMax, float lattice[], float latticeInv[], float sum[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>two_body_ratio_PBC</name>
      <anchorfile>a01249.html</anchorfile>
      <anchor>a97122ad18b94d99a989d977095749cc7</anchor>
      <arglist>(double *R[], int first, int last, double Rnew[], int inew, double spline_coefs[], int numCoefs, double rMax, double lattice[], double latticeInv[], double sum[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>two_body_ratio_grad_PBC</name>
      <anchorfile>a01249.html</anchorfile>
      <anchor>aa6dfa30d838442f83dfbfacf128b7d31</anchor>
      <arglist>(float *R[], int first, int last, float Rnew[], int inew, float spline_coefs[], int numCoefs, float rMax, float lattice[], float latticeInv[], bool zero, float ratio_grad[], int numWalkers, bool use_fast_image)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>two_body_ratio_grad_PBC</name>
      <anchorfile>a01249.html</anchorfile>
      <anchor>a35cae912b53e86375b696033a53c3c86</anchor>
      <arglist>(double *R[], int first, int last, double Rnew[], int inew, double spline_coefs[], int numCoefs, double rMax, double lattice[], double latticeInv[], bool zero, double ratio_grad[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>two_body_NLratios_PBC</name>
      <anchorfile>a01249.html</anchorfile>
      <anchor>adb22b5b7552ac0510a2abea99dc0c89a</anchor>
      <arglist>(NLjobGPU&lt; float &gt; jobs[], int first, int last, float *spline_coefs[], int numCoefs[], float rMax[], float lattice[], float latticeInv[], float sim_cell_radius, int numjobs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>two_body_NLratios_PBC</name>
      <anchorfile>a01249.html</anchorfile>
      <anchor>a56ffe1f1322e33e03f240f303a279595</anchor>
      <arglist>(NLjobGPU&lt; double &gt; jobs[], int first, int last, double *spline_coefs[], int numCoefs[], double rMax[], double lattice[], double latticeInv[], double sim_cell_radius, int numjobs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>two_body_update</name>
      <anchorfile>a01249.html</anchorfile>
      <anchor>ad46483d27b0d7e33c9b46ae8191040a4</anchor>
      <arglist>(float *R[], int N, int iat, int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>two_body_update</name>
      <anchorfile>a01249.html</anchorfile>
      <anchor>a8074f3f6da79c0648922d734559775f9</anchor>
      <arglist>(double *R[], int N, int iat, int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>two_body_grad_lapl_PBC</name>
      <anchorfile>a01249.html</anchorfile>
      <anchor>af7fee9bda16977a4fdd4f69c3a987f2d</anchor>
      <arglist>(float *R[], int e1_first, int e1_last, int e2_first, int e2_last, float spline_coefs[], int numCoefs, float rMax, float lattice[], float latticeInv[], float sim_cell_radius, float gradLapl[], int row_stride, int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>two_body_grad_lapl_PBC</name>
      <anchorfile>a01249.html</anchorfile>
      <anchor>a30fc270908f705250f298d246bc1e746</anchor>
      <arglist>(double *R[], int e1_first, int e1_last, int e2_first, int e2_last, double spline_coefs[], int numCoefs, double rMax, double lattice[], double latticeInv[], double gradLapl[], int row_stride, int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>two_body_gradient_PBC</name>
      <anchorfile>a01249.html</anchorfile>
      <anchor>a54227fb335b280560c4a7f298b627b4e</anchor>
      <arglist>(float *R[], int first, int last, int iat, float spline_coefs[], int numCoefs, float rMax, float lattice[], float latticeInv[], float sim_cell_radius, bool zeroOut, float grad[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>two_body_gradient_PBC</name>
      <anchorfile>a01249.html</anchorfile>
      <anchor>a4435aa5be796162147e229e4e9736085</anchor>
      <arglist>(double *R[], int first, int last, int iat, double spline_coefs[], int numCoefs, double rMax, double lattice[], double latticeInv[], bool zeroOut, double grad[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>two_body_derivs_PBC</name>
      <anchorfile>a01249.html</anchorfile>
      <anchor>a02a5f076ceef25f8dc2ed948ff7e1c6c</anchor>
      <arglist>(float *R[], float *gradLogPsi[], int e1_first, int e1_last, int e2_first, int e2_last, int numCoefs, float rMax, float lattice[], float latticeInv[], float sim_cell_radius, float *derivs[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>two_body_derivs_PBC</name>
      <anchorfile>a01249.html</anchorfile>
      <anchor>a35256258ab608d70cc1d533e367384bd</anchor>
      <arglist>(double *R[], double *gradLogPsi[], int e1_first, int e1_last, int e2_first, int e2_last, int numCoefs, double rMax, double lattice[], double latticeInv[], double sim_cell_radius, double *derivs[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>one_body_sum_PBC</name>
      <anchorfile>a01249.html</anchorfile>
      <anchor>a70af30b7049fd777b8be891651dc0f12</anchor>
      <arglist>(float C[], float *R[], int e1_first, int e1_last, int e2_first, int e2_last, float spline_coefs[], int numCoefs, float rMax, float lattice[], float latticeInv[], float sum[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>one_body_sum_PBC</name>
      <anchorfile>a01249.html</anchorfile>
      <anchor>aaa9276c1ed505821d9dde82bb8545352</anchor>
      <arglist>(double C[], double *R[], int e1_first, int e1_last, int e2_first, int e2_last, double spline_coefs[], int numCoefs, double rMax, double lattice[], double latticeInv[], double sum[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>one_body_ratio_PBC</name>
      <anchorfile>a01249.html</anchorfile>
      <anchor>a1b426fd81e8fb19775da28312a14980a</anchor>
      <arglist>(float C[], float *R[], int first, int last, float Rnew[], int inew, float spline_coefs[], int numCoefs, float rMax, float lattice[], float latticeInv[], float sum[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>one_body_ratio_PBC</name>
      <anchorfile>a01249.html</anchorfile>
      <anchor>a532a039d82fdf1844a1e48829e6374d3</anchor>
      <arglist>(double C[], double *R[], int first, int last, double Rnew[], int inew, double spline_coefs[], int numCoefs, double rMax, double lattice[], double latticeInv[], double sum[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>one_body_ratio_grad_PBC</name>
      <anchorfile>a01249.html</anchorfile>
      <anchor>a91a7140ce5753729a07130d4cce0ba1e</anchor>
      <arglist>(float C[], float *R[], int first, int last, float Rnew[], int inew, float spline_coefs[], int numCoefs, float rMax, float lattice[], float latticeInv[], bool zero, float ratio_grad[], int numWalkers, bool use_fast_image)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>one_body_ratio_grad_PBC</name>
      <anchorfile>a01249.html</anchorfile>
      <anchor>a251b96978a9d17ce443250aa0694da4b</anchor>
      <arglist>(double C[], double *R[], int first, int last, double Rnew[], int inew, double spline_coefs[], int numCoefs, double rMax, double lattice[], double latticeInv[], bool zero, double ratio_grad[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>one_body_NLratios_PBC</name>
      <anchorfile>a01249.html</anchorfile>
      <anchor>a974f39e3b592263d5d6375bafec33f6d</anchor>
      <arglist>(NLjobGPU&lt; float &gt; jobs[], float C[], int first, int last, float spline_coefs[], int numCoefs, float rMax, float lattice[], float latticeInv[], int numjobs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>one_body_NLratios_PBC</name>
      <anchorfile>a01249.html</anchorfile>
      <anchor>a194f9e0b9fb1b40ee97f4fb055d8ccb1</anchor>
      <arglist>(NLjobGPU&lt; float &gt; jobs[], float C[], int first, int last, float spline_coefs[], int numCoefs, float rMax, float lattice[], float latticeInv[], float sim_cell_radius, int numjobs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>one_body_NLratios_PBC</name>
      <anchorfile>a01249.html</anchorfile>
      <anchor>a2d317c2ebdaba2f670efdd135edb08f3</anchor>
      <arglist>(NLjobGPU&lt; double &gt; jobs[], double C[], int first, int last, double spline_coefs[], int numCoefs, double rMax, double lattice[], double latticeInv[], int numjobs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>one_body_update</name>
      <anchorfile>a01249.html</anchorfile>
      <anchor>a897c9ea576471e431ffa9f33ad1b825a</anchor>
      <arglist>(float *R[], int N, int iat, int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>one_body_update</name>
      <anchorfile>a01249.html</anchorfile>
      <anchor>adb8d0ce3f9709fd1d7a056a374dc2c28</anchor>
      <arglist>(double *R[], int N, int iat, int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>one_body_grad_lapl_PBC</name>
      <anchorfile>a01249.html</anchorfile>
      <anchor>aff952f1a39b8f8ccbfd721408558083c</anchor>
      <arglist>(float C[], float *R[], int e1_first, int e1_last, int e2_first, int e2_last, float spline_coefs[], int numCoefs, float rMax, float lattice[], float latticeInv[], float gradLapl[], int row_stride, int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>one_body_grad_lapl_PBC</name>
      <anchorfile>a01249.html</anchorfile>
      <anchor>a23aa08b171368769f504ebb8a9b32b51</anchor>
      <arglist>(double C[], double *R[], int e1_first, int e1_last, int e2_first, int e2_last, double spline_coefs[], int numCoefs, double rMax, double lattice[], double latticeInv[], double gradLapl[], int row_stride, int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>one_body_gradient_PBC</name>
      <anchorfile>a01249.html</anchorfile>
      <anchor>a9939218edfee84309c90acd5f99563c8</anchor>
      <arglist>(float *Rlist[], int iat, float C[], int first, int last, float spline_coefs[], int num_coefs, float rMax, float L[], float Linv[], float sim_cell_radius, bool zeroSum, float grad[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>one_body_gradient_PBC</name>
      <anchorfile>a01249.html</anchorfile>
      <anchor>a7b3458717ab12aaa6ebe58bc5c460552</anchor>
      <arglist>(double *Rlist[], int iat, double C[], int first, int last, double spline_coefs[], int num_coefs, double rMax, double L[], double Linv[], bool zeroSum, double grad[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>one_body_derivs_PBC</name>
      <anchorfile>a01249.html</anchorfile>
      <anchor>a7458900074331890d5526a20c361c3bc</anchor>
      <arglist>(float C[], float *R[], float *gradLogPsi[], int cfirst, int clast, int efirst, int elast, int numCoefs, float rMax, float lattice[], float latticeInv[], float sim_cell_radius, float *derivs[], int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>one_body_derivs_PBC</name>
      <anchorfile>a01249.html</anchorfile>
      <anchor>a5d5b84f413820786da2a21b9aaa1ea20</anchor>
      <arglist>(double C[], double *R[], double *gradLogPsi[], int cfirst, int clast, int efirst, int elast, int numCoefs, double rMax, double lattice[], double latticeInv[], double sim_cell_radius, double *derivs[], int numWalkers)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CBSOBuilder.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01250</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>CBSOBuilder.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01251</filename>
    <class kind="class">qmcplusplus::CBSOBuilder</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ChebyshevFunctor.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01252</filename>
    <class kind="struct">ChebyshevFunctor</class>
  </compound>
  <compound kind="file">
    <name>CompositeFunctor.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01253</filename>
    <class kind="struct">qmcplusplus::TruncatedPadeFunctor</class>
    <class kind="struct">qmcplusplus::AnyTimesRnFunctor</class>
    <class kind="struct">qmcplusplus::CuspCorrectionFunctor</class>
    <class kind="struct">qmcplusplus::DCuspCorrectionDEFunctor</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>CubicBsplineGroup.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01254</filename>
    <class kind="class">qmcplusplus::CubicBsplineGroup</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>CudaSpline.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01255</filename>
    <class kind="struct">qmcplusplus::CudaSpline</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DerivPadeFunctors.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01256</filename>
    <class kind="struct">qmcplusplus::DPadeDBFunctor</class>
    <class kind="struct">qmcplusplus::D2PadeDB2Functor</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DerivWMFunctor.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01257</filename>
    <class kind="struct">qmcplusplus::DWMDBFunctor</class>
    <class kind="struct">qmcplusplus::D2WMDB2Functor</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DiffOneBodyJastrowOrbital.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01258</filename>
    <class kind="class">qmcplusplus::DiffOneBodyJastrowOrbital</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DiffOneBodySpinJastrowOrbital.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01259</filename>
    <class kind="class">qmcplusplus::DiffOneBodySpinJastrowOrbital</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DiffTwoBodyJastrowOrbital.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01260</filename>
    <class kind="class">qmcplusplus::DiffTwoBodyJastrowOrbital</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>eeI_JastrowBuilder.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01261</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>eeI_JastrowBuilder.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01262</filename>
    <class kind="struct">qmcplusplus::eeI_JastrowBuilder</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>eeI_JastrowOrbital.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01263</filename>
    <class kind="struct">qmcplusplus::IonData</class>
    <class kind="class">qmcplusplus::eeI_JastrowOrbital</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>JAABuilder.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01264</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>JAABuilder.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01265</filename>
    <class kind="struct">qmcplusplus::JAABuilder</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>JABBuilder.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01266</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>JABBuilder.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01267</filename>
    <class kind="struct">qmcplusplus::JABBuilder</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>JastrowBasisBuilder.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01268</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>JastrowBasisBuilder.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01269</filename>
    <class kind="class">qmcplusplus::JastrowBasisBuilder</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>JastrowBuilder.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01270</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>JastrowBuilder.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01271</filename>
    <class kind="class">qmcplusplus::JastrowBuilder</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>kSpaceJastrow.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01272</filename>
    <class kind="struct">qmcplusplus::magLess</class>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>bool</type>
      <name>Include</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a18394b4493c4d13d1f2792522cd87d06</anchor>
      <arglist>(int i, int j, int k)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Include</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a2feccc839bf27e8cb27f784ac2eb6453</anchor>
      <arglist>(int i, int j)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>kSpaceJastrow.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01273</filename>
    <class kind="struct">qmcplusplus::RPA0</class>
    <class kind="class">qmcplusplus::kSpaceCoef</class>
    <class kind="class">qmcplusplus::kSpaceJastrow</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>kSpaceJastrowBuilder.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01274</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>bool</type>
      <name>putContent2</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>aed9325c8811bc8210c8ab75d18a684aa</anchor>
      <arglist>(std::vector&lt; T &gt; &amp;a, xmlNodePtr cur)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>kSpaceJastrowBuilder.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01275</filename>
    <class kind="struct">qmcplusplus::kSpaceJastrowBuilder</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>LinearCombinationFunctor.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01276</filename>
    <class kind="struct">LinearCombinationFunctor</class>
  </compound>
  <compound kind="file">
    <name>LRBreakupUtilities.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01277</filename>
    <class kind="struct">qmcplusplus::YukawaBreakup</class>
    <class kind="struct">qmcplusplus::DerivRPABreakup</class>
    <class kind="struct">qmcplusplus::RPABreakup</class>
    <class kind="struct">qmcplusplus::DerivYukawaBreakup</class>
    <class kind="struct">qmcplusplus::EPRPABreakup</class>
    <class kind="struct">qmcplusplus::derivEPRPABreakup</class>
    <class kind="struct">qmcplusplus::ShortRangePartAdapter</class>
    <class kind="struct">qmcplusplus::RPABFeeBreakup</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>LRTwoBodyJastrow.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01278</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>LRTwoBodyJastrow.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01279</filename>
    <class kind="class">qmcplusplus::LRTwoBodyJastrow</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>McMillanJ2Functor.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01280</filename>
    <class kind="struct">qmcplusplus::McMillanJ2Functor</class>
    <class kind="struct">qmcplusplus::ModMcMillanJ2Functor</class>
    <class kind="struct">qmcplusplus::comboMcMillanJ2Functor</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>McMillanJ2GFunctor.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01281</filename>
    <class kind="struct">qmcplusplus::McMillanJ2GFunctor</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ModPadeFunctor.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01282</filename>
    <class kind="struct">qmcplusplus::ModPadeFunctor</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>NLjobGPU.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a00408</filename>
    <class kind="struct">NLjobGPU</class>
  <compound kind="struct">
    <name>NLjobGPU</name>
    <filename>a00408.html</filename>
    <anchor>a01495</anchor>
    <templarg>S</templarg>
  </compound>
  <compound kind="file">
    <name>NumericalJastrowFunctor.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01283</filename>
    <class kind="struct">qmcplusplus::CutoffFunctor</class>
    <class kind="struct">qmcplusplus::NumericalJastrow</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>OneBodyJastrowOrbital.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01284</filename>
    <class kind="class">qmcplusplus::OneBodyJastrowOrbital</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>OneBodyJastrowOrbitalBspline.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01285</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>OneBodyJastrowOrbitalBspline.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01286</filename>
    <class kind="class">qmcplusplus::OneBodyJastrowOrbitalBspline</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>OneBodySpinJastrowOrbital.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01287</filename>
    <class kind="class">qmcplusplus::OneBodySpinJastrowOrbital</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>OpenGaussianSlaterFunctor.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01288</filename>
    <class kind="struct">qmcplusplus::OpenGaussianSlaterFunctor</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>PadeFunctors.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01289</filename>
    <class kind="struct">qmcplusplus::PadeFunctor</class>
    <class kind="struct">qmcplusplus::Pade2ndOrderFunctor</class>
    <class kind="struct">qmcplusplus::PadeTwo2ndOrderFunctor</class>
    <class kind="struct">qmcplusplus::ScaledPadeFunctor</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>PadeJastrowBuilder.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01290</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>PadeJastrowBuilder.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01291</filename>
    <class kind="struct">qmcplusplus::PadeJastrowBuilder</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>PolarizedJastrow.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01292</filename>
    <class kind="class">qmcplusplus::PolarizedJastrow</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>PolyConstraints.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01293</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>PolyConstraints.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01294</filename>
    <class kind="struct">qmcplusplus::PolyConstraints</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>PolyFunctor.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01295</filename>
    <class kind="struct">qmcplusplus::PolyFunctor</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>PolynomialFunctor3D.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01296</filename>
    <class kind="struct">qmcplusplus::PolynomialFunctor3D</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>RPAJastrow.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01297</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>RPAJastrow.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01298</filename>
    <class kind="struct">qmcplusplus::RPAJastrow</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>RPAJastrowFunctor.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01299</filename>
    <class kind="struct">qmcplusplus::RPAJastrowFunctor</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>singleRPAJastrowBuilder.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01300</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>singleRPAJastrowBuilder.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01301</filename>
    <class kind="struct">qmcplusplus::singleRPAJastrowBuilder</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>SplineFunctors.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01302</filename>
    <class kind="struct">qmcplusplus::CubicSplineSingle</class>
    <class kind="struct">qmcplusplus::CubicSplineBasisSet</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ThreeBodyBlockSparse.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01303</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ThreeBodyBlockSparse.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01304</filename>
    <class kind="class">qmcplusplus::ThreeBodyBlockSparse</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ThreeBodyGeminal.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01305</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ThreeBodyGeminal.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01306</filename>
    <class kind="class">qmcplusplus::ThreeBodyGeminal</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ThreeBodyGeminalBuilder.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01307</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ThreeBodyGeminalBuilder.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01308</filename>
    <class kind="class">qmcplusplus::ThreeBodyGeminalBuilder</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ThreeBodyJastrowOrbital.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01309</filename>
    <class kind="class">qmcplusplus::ThreeBodyJastrowOrbital</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ThreeBodyPade.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01310</filename>
    <class kind="class">qmcplusplus::ThreeBodyPade</class>
    <class kind="struct">qmcplusplus::ThreeBodyPade::Coeff</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ThreeBodyPadeBuilder.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01311</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ThreeBodyPadeBuilder.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01312</filename>
    <class kind="class">qmcplusplus::ThreeBodyPadeBuilder</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>TwoBodyJastrowFunction.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01313</filename>
    <class kind="class">qmcplusplus::TwoBodyJastrow</class>
    <class kind="class">qmcplusplus::TwoBodyJastrow&lt; FT, false &gt;</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>TwoBodyJastrowFunction.Shared.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01314</filename>
    <class kind="class">qmcplusplus::TwoBodyJastrow&lt; FT, true &gt;</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>TwoBodyJastrowOrbital.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01315</filename>
    <class kind="class">qmcplusplus::TwoBodyJastrowOrbital</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>TwoBodyJastrowOrbitalBspline.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01316</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>TwoBodyJastrowOrbitalBspline.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01317</filename>
    <class kind="class">qmcplusplus::TwoBodyJastrowOrbitalBspline</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>WMFunctor.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01318</filename>
    <class kind="struct">qmcplusplus::WMFunctor</class>
    <class kind="struct">qmcplusplus::WMFunctorSet</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>WMJastrowBuilder.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01319</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>WMJastrowBuilder.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>a01320</filename>
    <class kind="class">qmcplusplus::WMJastrowBuilder</class>
    <class kind="struct">qmcplusplus::WMJastrowBuilder::BasisGroupType</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>LCOrbitals.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01321</filename>
    <class kind="class">qmcplusplus::LCOrbitals</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>LCOrbitalSet.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01322</filename>
    <class kind="class">qmcplusplus::LCOrbitalSet</class>
    <class kind="class">qmcplusplus::LCOrbitalSet&lt; BS, true &gt;</class>
    <class kind="class">qmcplusplus::LCOrbitalSet&lt; BS, false &gt;</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>LocalizedBasisSet.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01323</filename>
    <class kind="struct">qmcplusplus::LocalizedBasisSet</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>MixedSPOSet.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01324</filename>
    <class kind="class">qmcplusplus::MixedSPOSet</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>AtomicBasisBuilder.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>a01325</filename>
    <class kind="struct">qmcplusplus::AtomicBasisBuilder</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>BsplineAOBuilder.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>a01326</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>BsplineAOBuilder.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>a01327</filename>
    <class kind="class">qmcplusplus::BsplineAOBuilder</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>GTOBuilder.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>a01328</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>GTOBuilder.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>a01329</filename>
    <class kind="class">qmcplusplus::GTOBuilder</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>GTOMolecularOrbitals.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>a01330</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>MolecularBasisBuilder.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>a01331</filename>
    <class kind="class">qmcplusplus::MolecularBasisBuilder</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>NGOBuilder.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>a01332</filename>
    <class kind="struct">qmcplusplus::PadeOrbital</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>NGOBuilder.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>a01333</filename>
    <class kind="struct">qmcplusplus::NGOrbital</class>
    <class kind="class">qmcplusplus::NGOBuilder</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>STOBuilder.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>a01334</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>STOBuilder.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>a01335</filename>
    <class kind="class">qmcplusplus::STOBuilder</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>MuffinTin.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01336</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>MuffinTin.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01337</filename>
    <class kind="class">qmcplusplus::MuffinTinClass</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>OptimizableSPOBuilder.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01338</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>OptimizableSPOBuilder.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01339</filename>
    <class kind="class">qmcplusplus::OptimizableSPOBuilder</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>OptimizableSPOSet.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01340</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>OptimizableSPOSet.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01341</filename>
    <class kind="class">qmcplusplus::OptimizableSPOSet</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>OrbitalBase.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01342</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>OrbitalBase.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01343</filename>
    <class kind="struct">qmcplusplus::OrbitalBase</class>
    <namespace>qmcplusplus</namespace>
    <member kind="typedef">
      <type>OrbitalBase *</type>
      <name>OrbitalBasePtr</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ae8453d21b68425514bbc953f25e1342f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiffOrbitalBase *</type>
      <name>DiffOrbitalBasePtr</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a6cd11c9e3480d05894140387c63d9eb9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OrbitalBuilderBase.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01344</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>OrbitalBuilderBase.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01345</filename>
    <class kind="class">qmcplusplus::OrbitalBuilderBase</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>OrbitalConstraintsBase.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01346</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>OrbitalConstraintsBase.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01347</filename>
    <class kind="struct">qmcplusplus::OrbitalConstraintsBase</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>OrbitalSetTraits.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01348</filename>
    <class kind="struct">qmcplusplus::DummyGrid</class>
    <class kind="struct">qmcplusplus::OrbitalSetTraits</class>
    <namespace>qmcplusplus</namespace>
    <member kind="typedef">
      <type>TinyVector&lt; int, 4 &gt;</type>
      <name>QuantumNumberType</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a1c6c0534666963ebfa4eab740accb259</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>optimize::VariableSet</type>
      <name>opt_variables_type</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a7889af7f2cc8ecdb39b57a278df4d3c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>optimize::VariableSet::variable_map_type</type>
      <name>variable_map_type</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>afef3bb1526675128213cd4dacc3e789d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>q_n</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a394b3903fbf00ba2b6243f60689a5a5fa7cfacd0e6634b0429a6e8751d14ab538</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>q_l</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a394b3903fbf00ba2b6243f60689a5a5fadbfe9da1faecadd2e01426867b8f86c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>q_m</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a394b3903fbf00ba2b6243f60689a5a5fad8ac9eec8043d70442fdb0a1a9fdc43c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>q_s</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a394b3903fbf00ba2b6243f60689a5a5fa2f26939d40f83092b1d3654d60ee03cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluatePhase</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a8a7eefb4e5474e2dfc5801f02f96064d</anchor>
      <arglist>(T sign_v)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluatePhase</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a5e4c10e0a3a970205473ac415e20de04</anchor>
      <arglist>(const std::complex&lt; double &gt; &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluateLogAndPhase</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ad5fab18fb46459e7b43d496312ebd697</anchor>
      <arglist>(const T psi, T &amp;phase)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluateLogAndPhase</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a6acd5b2fb069a02f72b01cc18fa48369</anchor>
      <arglist>(const std::complex&lt; T &gt; &amp;psi, T &amp;phase)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluatePhase</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>adf40cfc93ddf6162a0815b4c79720495</anchor>
      <arglist>(const double psi)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PWBasis.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/PlaneWave/</path>
    <filename>a01349</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>PWBasis.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/PlaneWave/</path>
    <filename>a01350</filename>
    <class kind="class">qmcplusplus::PWBasis</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>PWOrbitalBuilder.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/PlaneWave/</path>
    <filename>a01351</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>PWOrbitalBuilder.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/PlaneWave/</path>
    <filename>a01352</filename>
    <class kind="class">qmcplusplus::PWOrbitalBuilder</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>PWOrbitalSet.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/PlaneWave/</path>
    <filename>a01353</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>PWOrbitalSet.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/PlaneWave/</path>
    <filename>a01354</filename>
    <class kind="class">qmcplusplus::PWOrbitalSet</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>PWParameterSet.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/PlaneWave/</path>
    <filename>a01355</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>PWParameterSet.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/PlaneWave/</path>
    <filename>a01356</filename>
    <class kind="struct">qmcplusplus::PWParameterSet</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>PWRealOrbitalSet.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/PlaneWave/</path>
    <filename>a01357</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>PWRealOrbitalSet.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/PlaneWave/</path>
    <filename>a01358</filename>
    <class kind="class">qmcplusplus::PWRealOrbitalSet</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ProductOrbital.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01359</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ProductOrbital.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01360</filename>
    <class kind="struct">qmcplusplus::ProductOrbital</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>SparseLocalizedBasisSet.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01361</filename>
    <class kind="struct">qmcplusplus::SparseLocalizedBasisSet</class>
    <class kind="struct">qmcplusplus::SparseLocalizedBasisSet::LOForCenter</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>SphericalBasisSet.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01362</filename>
    <class kind="struct">qmcplusplus::SphericalBasisSet</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>SphericalOrbitalSet.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01363</filename>
    <class kind="struct">qmcplusplus::SphericalOrbitalSet</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>SplineAdoptorReader.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01364</filename>
    <class kind="struct">qmcplusplus::BsplineReaderBase</class>
    <class kind="struct">qmcplusplus::SplineAdoptorReader</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>SplineAdoptorReaderP.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01365</filename>
    <class kind="struct">qmcplusplus::BsplineReaderBase</class>
    <class kind="struct">qmcplusplus::SplineAdoptorReader</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>SplineC2XAdoptor.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01366</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>SplineC2XAdoptor.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01367</filename>
    <class kind="struct">qmcplusplus::SplineC2CPackedAdoptor</class>
    <class kind="struct">qmcplusplus::SplineC2RPackedAdoptor</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>SplineMixedAdoptor.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01368</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>SplineMixedAdoptor.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01369</filename>
    <class kind="struct">qmcplusplus::hdf_dual_grid</class>
    <class kind="struct">qmcplusplus::SplineMixedAdoptor</class>
    <class kind="struct">qmcplusplus::SplineOpenAdoptor</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>SplineMixedAdoptorReader.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01370</filename>
    <class kind="struct">qmcplusplus::SplineMixedAdoptorReader</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>SplineMixedAdoptorReaderP.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01371</filename>
    <class kind="struct">qmcplusplus::SplineMixedAdoptorReader</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>SplineR2RAdoptor.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01372</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>SplineR2RAdoptor.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01373</filename>
    <class kind="struct">qmcplusplus::SplineR2RAdoptor</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>SPOSetBase.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01374</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>void</type>
      <name>transpose</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a6f9890590577a4e509570da0fa8e2b92</anchor>
      <arglist>(const T *restrict in, T *restrict out, int m)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SPOSetBase.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01375</filename>
    <class kind="class">qmcplusplus::SPOSetBase</class>
    <namespace>qmcplusplus</namespace>
    <member kind="typedef">
      <type>SPOSetBase *</type>
      <name>SPOSetBasePtr</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ab3beec5c7a9d8e56de8f16321f218da0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrialWaveFunction.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01376</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>TrialWaveFunction.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01377</filename>
    <class kind="struct">qmcplusplus::CoefficientHolder</class>
    <class kind="class">qmcplusplus::TrialWaveFunction</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>TrialWaveFunction_CUDA.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01378</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="enumeration">
      <type></type>
      <name>TimerEnum</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>acf25e80fd369c266dca702f6875de04b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>V_TIMER</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>acf25e80fd369c266dca702f6875de04ba15a3f41fbf08e8b56550773fc55f96a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VGL_TIMER</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>acf25e80fd369c266dca702f6875de04bae442e64220a0414bf08e87d647e6bc9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACCEPT_TIMER</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>acf25e80fd369c266dca702f6875de04ba574e33a869b29716de49088b421b3179</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NL_TIMER</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>acf25e80fd369c266dca702f6875de04baee998fc4233a52cac1ef5bb9b9039c6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RECOMPUTE_TIMER</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>acf25e80fd369c266dca702f6875de04bacc7183a32d131cdfb6b646dc7ec57896</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DERIVS_TIMER</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>acf25e80fd369c266dca702f6875de04ba6878b6d4e137a85824d92ae2f15072ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIMER_SKIP</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>acf25e80fd369c266dca702f6875de04baf02cbb8ee6c745e3618adb036af84261</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>V_TIMER</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>acf25e80fd369c266dca702f6875de04ba15a3f41fbf08e8b56550773fc55f96a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VGL_TIMER</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>acf25e80fd369c266dca702f6875de04bae442e64220a0414bf08e87d647e6bc9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ACCEPT_TIMER</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>acf25e80fd369c266dca702f6875de04ba574e33a869b29716de49088b421b3179</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NL_TIMER</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>acf25e80fd369c266dca702f6875de04baee998fc4233a52cac1ef5bb9b9039c6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RECOMPUTE_TIMER</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>acf25e80fd369c266dca702f6875de04bacc7183a32d131cdfb6b646dc7ec57896</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DERIVS_TIMER</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>acf25e80fd369c266dca702f6875de04ba6878b6d4e137a85824d92ae2f15072ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TIMER_SKIP</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>acf25e80fd369c266dca702f6875de04baf02cbb8ee6c745e3618adb036af84261</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WaveFunctionFactory.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01379</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>WaveFunctionFactory.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>a01380</filename>
    <class kind="struct">qmcplusplus::WaveFunctionFactory</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>BoostRandom.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Utilities/</path>
    <filename>a01381</filename>
    <class kind="class">BoostRandom</class>
  </compound>
  <compound kind="file">
    <name>Clock.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Utilities/</path>
    <filename>a01382</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>double</type>
      <name>cpu_clock</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ab4e2896c54d5e1ad465b44068448b849</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cuda_allocator.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Utilities/</path>
    <filename>a01383</filename>
    <class kind="class">cuda_allocator</class>
    <class kind="class">cuda_allocator&lt; void &gt;</class>
    <class kind="struct">cuda_allocator&lt; void &gt;::rebind</class>
    <class kind="class">cuda_allocator</class>
    <class kind="struct">cuda_allocator::rebind</class>
    <class kind="class">cuda_vector</class>
  </compound>
  <compound kind="file">
    <name>IteratorUtility.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Utilities/</path>
    <filename>a01384</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>void</type>
      <name>delete_iter</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a65bcb20805778f059d9ce583790fd0a7</anchor>
      <arglist>(IT first, IT last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate_elements</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a0d28f2c280bc5b2ca832ca24428f33e1</anchor>
      <arglist>(IT1 first, IT1 last, IT2 res)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MersenneTwister.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Utilities/</path>
    <filename>a01385</filename>
    <class kind="class">MTRand</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01385.html</anchorfile>
      <anchor>a059061d50a1e54ee3067d4e1dbdd7c64</anchor>
      <arglist>(std::ostream &amp;os, const MTRand &amp;mtrand)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01385.html</anchorfile>
      <anchor>a45b02a702835a3be42171c5c2dc79b2d</anchor>
      <arglist>(std::istream &amp;is, MTRand &amp;mtrand)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NewTimer.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Utilities/</path>
    <filename>a01386</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="variable">
      <type>TimerManagerClass</type>
      <name>TimerManager</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a5649a4dd62d6e9f0a3a02bb7955d96fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NewTimer.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Utilities/</path>
    <filename>a01387</filename>
    <class kind="class">qmcplusplus::NewTimer</class>
    <class kind="struct">qmcplusplus::TimerComparator</class>
    <class kind="class">qmcplusplus::TimerManagerClass</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>OhmmsInfo.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Utilities/</path>
    <filename>a01388</filename>
  </compound>
  <compound kind="file">
    <name>OhmmsInfo.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Utilities/</path>
    <filename>a01389</filename>
    <class kind="class">OhmmsInfo</class>
    <member kind="define">
      <type>#define</type>
      <name>LOGMSG</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a3cc195f38b3b36953ed4cf62c0b296fd</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ERRORMSG</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a93d4be0c42bb6191255e156c2943be12</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WARNMSG</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>af4377ffb3a0dc2a20873db75c3fb0d56</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>XMLReport</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>ac4d04e387120e00abe291af4aebc878d</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUGMSG</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>aed6d1186912238eabd7672078a396423</anchor>
      <arglist>(msg)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OhmmsInform.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Utilities/</path>
    <filename>a01390</filename>
  </compound>
  <compound kind="file">
    <name>OhmmsInform.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Utilities/</path>
    <filename>a01391</filename>
    <class kind="class">OhmmsInform</class>
    <member kind="function">
      <type>OhmmsInform &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01391.html</anchorfile>
      <anchor>a6cbae1c48e384a9c7f3db78df748bfe7</anchor>
      <arglist>(OhmmsInform &amp;o, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>OhmmsInform &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01391.html</anchorfile>
      <anchor>a633a8a3ec6772f32f3f65f99a0adcad7</anchor>
      <arglist>(OhmmsInform &amp;o, const std::string &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OhmmsObject.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Utilities/</path>
    <filename>a01392</filename>
  </compound>
  <compound kind="file">
    <name>OhmmsObject.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Utilities/</path>
    <filename>a01393</filename>
    <class kind="class">OhmmsObject</class>
  </compound>
  <compound kind="file">
    <name>OhmmsSpecies.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Utilities/</path>
    <filename>a01394</filename>
  </compound>
  <compound kind="file">
    <name>OhmmsSpecies.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Utilities/</path>
    <filename>a01395</filename>
    <class kind="class">SpeciesBase</class>
  </compound>
  <compound kind="file">
    <name>PointerPool.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Utilities/</path>
    <filename>a01396</filename>
    <class kind="class">PointerPool</class>
  </compound>
  <compound kind="file">
    <name>PooledData.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Utilities/</path>
    <filename>a01397</filename>
    <class kind="struct">PooledData</class>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01397.html</anchorfile>
      <anchor>ab7db2bd6b9d1d6ac999cc5b445ae8d0a</anchor>
      <arglist>(const PooledData&lt; T &gt; &amp;a, const PooledData&lt; T &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01397.html</anchorfile>
      <anchor>a9eddea7d50b747e863fed2bbfa881951</anchor>
      <arglist>(const PooledData&lt; T &gt; &amp;a, const PooledData&lt; T &gt; &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PrimeNumberSet.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Utilities/</path>
    <filename>a01398</filename>
    <class kind="struct">PrimeConstants</class>
    <class kind="struct">PrimeConstants&lt; uint32_t &gt;</class>
    <class kind="struct">PrimeConstants&lt; uint64_t &gt;</class>
    <class kind="struct">PrimeNumberSet</class>
  </compound>
  <compound kind="file">
    <name>ProgressReportEngine.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Utilities/</path>
    <filename>a01399</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ProgressReportEngine.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Utilities/</path>
    <filename>a01400</filename>
    <class kind="class">qmcplusplus::ReportEngine</class>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>ReportEngine &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a3a685e9c1195dd8b48f39a2332c9df20</anchor>
      <arglist>(ReportEngine &amp;o, const T &amp;val)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RandomFunctors.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Utilities/</path>
    <filename>a00413</filename>
    <class kind="class">RandomUniformPos</class>
    <class kind="class">RandomUniformPos&lt; TinyVector&lt; double, 3 &gt;, RNG &gt;</class>
    <class kind="class">RandomUniformPos&lt; TinyVector&lt; double, 2 &gt;, RNG &gt;</class>
    <class kind="struct">NormRandomSeq</class>
    <class kind="struct">NormRandomSeq&lt; TinyVector&lt; T, D &gt;, RNG &gt;</class>
    <class kind="struct">NormRandomSeq&lt; TinyVector&lt; double, 3 &gt;, RNG &gt;</class>
    <class kind="struct">RandomSeq</class>
    <class kind="struct">RandomSeq&lt; TinyVector&lt; T, D &gt;, RNG &gt;</class>
    <class kind="struct">RandomSeq&lt; TinyVector&lt; double, 3 &gt;, RNG &gt;</class>
    <class kind="struct">RandomVector</class>
    <class kind="struct">RandomSequence</class>
    <class kind="struct">RandomSequence&lt; vector&lt; T &gt;, RNG &gt;</class>
    <class kind="struct">RandomSequence&lt; vector&lt; double &gt;, RNG &gt;</class>
  <compound kind="class">
    <name>RandomUniformPos</name>
    <filename>a00413.html</filename>
    <anchor>a01521</anchor>
    <templarg></templarg>
    <templarg></templarg>
  <compound kind="struct">
    <name>NormRandomSeq</name>
    <filename>a00413.html</filename>
    <anchor>a01497</anchor>
    <templarg></templarg>
    <templarg></templarg>
  <compound kind="struct">
    <name>RandomSeq</name>
    <filename>a00413.html</filename>
    <anchor>a01519</anchor>
    <templarg></templarg>
    <templarg></templarg>
  <compound kind="struct">
    <name>RandomVector</name>
    <filename>a00413.html</filename>
    <anchor>a01522</anchor>
    <templarg></templarg>
    <templarg></templarg>
  <compound kind="struct">
    <name>RandomSequence</name>
    <filename>a00413.html</filename>
    <anchor>a01520</anchor>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="file">
    <name>RandomGenerator.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Utilities/</path>
    <filename>a01401</filename>
  </compound>
  <compound kind="file">
    <name>RandomGenerator.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Utilities/</path>
    <filename>a01402</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="typedef">
      <type>SimpleRandom&lt; MTRand &gt;</type>
      <name>RandomGenerator_t</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a9b36d364670206e34caee676993dc8c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>make_seed</name>
      <anchorfile>a01402.html</anchorfile>
      <anchor>a0a50c146020d3019bd23594cbd70f398</anchor>
      <arglist>(int i, int n)</arglist>
    </member>
    <member kind="variable">
      <type>RandomGenerator_t</type>
      <name>Random</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ac3f0401d9f60df86b3020a7f67fd6c7a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RandomGeneratorIO.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Utilities/</path>
    <filename>a01403</filename>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; RandomGenerator_t &gt;</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>RandRandom.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Utilities/</path>
    <filename>a01404</filename>
    <member kind="define">
      <type>#define</type>
      <name>struct_t</name>
      <anchorfile>a01404.html</anchorfile>
      <anchor>ad2e3a41c7112fbd37479ba224a10fc7b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RandRandom.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Utilities/</path>
    <filename>a01405</filename>
    <class kind="class">RandRandom</class>
  </compound>
  <compound kind="file">
    <name>SimpleParser.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Utilities/</path>
    <filename>a01406</filename>
    <member kind="function">
      <type>char *</type>
      <name>readLine</name>
      <anchorfile>a01406.html</anchorfile>
      <anchor>ad210be08a283a1ddfb28b03db993a860</anchor>
      <arglist>(char *s, int max, istream &amp;fp)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>parsewords</name>
      <anchorfile>a01406.html</anchorfile>
      <anchor>a2bddbf7567c9d5fab29aaa662bd17221</anchor>
      <arglist>(const char *inbuf, vector&lt; string &gt; &amp;slist)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>parsewords</name>
      <anchorfile>a01406.html</anchorfile>
      <anchor>a552e6353aeec8031593750407e2e34d4</anchor>
      <arglist>(const char *inbuf, list&lt; string &gt; &amp;slist)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getwords</name>
      <anchorfile>a01406.html</anchorfile>
      <anchor>a8fb7ad8e202115161f2539305201c4e0</anchor>
      <arglist>(vector&lt; string &gt; &amp;slist, istream &amp;fp, string &amp;aline)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getwords</name>
      <anchorfile>a01406.html</anchorfile>
      <anchor>acedb0fc35a7c7cd668442b7bcc234854</anchor>
      <arglist>(vector&lt; string &gt; &amp;slist, istream &amp;fp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readXmol</name>
      <anchorfile>a01406.html</anchorfile>
      <anchor>ad19019cb09e80e22655ec5b705e6195f</anchor>
      <arglist>(istream &amp;fxmol, double *data, int numvar)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getwords</name>
      <anchorfile>a01406.html</anchorfile>
      <anchor>ad2476014a964fcd1e6a5c076b4b0a7d0</anchor>
      <arglist>(vector&lt; string &gt; &amp;slist, istream &amp;fpos, const char *field, const char *terminate)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getwords</name>
      <anchorfile>a01406.html</anchorfile>
      <anchor>a0e9cce3ddc11baac1e13cfc5725a7a23</anchor>
      <arglist>(vector&lt; string &gt; &amp;slist, istream &amp;fpos, const char *terminate)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>parseXwords</name>
      <anchorfile>a01406.html</anchorfile>
      <anchor>a1c437d2e794d339a0cf68dd2205f3895</anchor>
      <arglist>(char *inbuf, vector&lt; string &gt; &amp;slist)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getXwords</name>
      <anchorfile>a01406.html</anchorfile>
      <anchor>a533087dfebcf2150ddbb8af51579097a</anchor>
      <arglist>(vector&lt; string &gt; &amp;slist, istream &amp;fp)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getXwords</name>
      <anchorfile>a01406.html</anchorfile>
      <anchor>a6892813437315314be864e9ccc86bfa4</anchor>
      <arglist>(vector&lt; string &gt; &amp;slist, istream &amp;fpos, const char *terminate)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimpleParser.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Utilities/</path>
    <filename>a01407</filename>
    <class kind="struct">OhmmsAsciiParser</class>
    <member kind="function">
      <type>char *</type>
      <name>readLine</name>
      <anchorfile>a01407.html</anchorfile>
      <anchor>ad210be08a283a1ddfb28b03db993a860</anchor>
      <arglist>(char *s, int max, istream &amp;fp)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getwords</name>
      <anchorfile>a01407.html</anchorfile>
      <anchor>acedb0fc35a7c7cd668442b7bcc234854</anchor>
      <arglist>(vector&lt; string &gt; &amp;slist, istream &amp;fp)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getwords</name>
      <anchorfile>a01407.html</anchorfile>
      <anchor>a8fb7ad8e202115161f2539305201c4e0</anchor>
      <arglist>(vector&lt; string &gt; &amp;slist, istream &amp;fp, string &amp;aline)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getwords</name>
      <anchorfile>a01407.html</anchorfile>
      <anchor>ad2476014a964fcd1e6a5c076b4b0a7d0</anchor>
      <arglist>(vector&lt; string &gt; &amp;slist, istream &amp;fpos, const char *field, const char *terminate)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getwords</name>
      <anchorfile>a01407.html</anchorfile>
      <anchor>a0e9cce3ddc11baac1e13cfc5725a7a23</anchor>
      <arglist>(vector&lt; string &gt; &amp;slist, istream &amp;fpos, const char *terminate)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getXwords</name>
      <anchorfile>a01407.html</anchorfile>
      <anchor>a533087dfebcf2150ddbb8af51579097a</anchor>
      <arglist>(vector&lt; string &gt; &amp;slist, istream &amp;fp)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getXwords</name>
      <anchorfile>a01407.html</anchorfile>
      <anchor>a6892813437315314be864e9ccc86bfa4</anchor>
      <arglist>(vector&lt; string &gt; &amp;slist, istream &amp;fpos, const char *terminate)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>parsewords</name>
      <anchorfile>a01407.html</anchorfile>
      <anchor>a2bddbf7567c9d5fab29aaa662bd17221</anchor>
      <arglist>(const char *inbuf, vector&lt; string &gt; &amp;slist)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>parsewords</name>
      <anchorfile>a01407.html</anchorfile>
      <anchor>a552e6353aeec8031593750407e2e34d4</anchor>
      <arglist>(const char *inbuf, list&lt; string &gt; &amp;slist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readXmol</name>
      <anchorfile>a01407.html</anchorfile>
      <anchor>a3988bcbedfa2819d560fbfd7b88415de</anchor>
      <arglist>(istream &amp;, double *, int)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimpleRandom.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Utilities/</path>
    <filename>a01408</filename>
    <class kind="class">SimpleRandom</class>
  </compound>
  <compound kind="file">
    <name>SpeciesSet.cpp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Utilities/</path>
    <filename>a01409</filename>
  </compound>
  <compound kind="file">
    <name>SpeciesSet.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Utilities/</path>
    <filename>a01410</filename>
    <class kind="class">SpeciesSet</class>
  </compound>
  <compound kind="file">
    <name>SprngRandom.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Utilities/</path>
    <filename>a01411</filename>
    <class kind="class">SprngRandom</class>
    <member kind="define">
      <type>#define</type>
      <name>SRSEED</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>a532002b980a3812602cb62b776ee2950</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Timer.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Utilities/</path>
    <filename>a01412</filename>
    <class kind="struct">qmcplusplus::Timer</class>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>UtilityFunctions.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Utilities/</path>
    <filename>a01413</filename>
    <member kind="function">
      <type>void</type>
      <name>FairDivide</name>
      <anchorfile>a01413.html</anchorfile>
      <anchor>a4ae9dd21502b957832fee54c2021ee76</anchor>
      <arglist>(int ntot, int npart, IV &amp;adist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FairDivideLow</name>
      <anchorfile>a01413.html</anchorfile>
      <anchor>a9b3515f502253f8c1e9e74339a48acb8</anchor>
      <arglist>(int ntot, int npart, IV &amp;adist)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FairDivideHigh</name>
      <anchorfile>a01413.html</anchorfile>
      <anchor>a7961757b16ebddad159b2ae51d0ef493</anchor>
      <arglist>(int me, int ntot, int npart, IV &amp;adist)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FairDivideLow</name>
      <anchorfile>a01413.html</anchorfile>
      <anchor>afde7dca7cc832b616617a46e5e8051cf</anchor>
      <arglist>(int me, int ntot, int npart, IV &amp;adist)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>XMLTemplate.h</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Utilities/</path>
    <filename>a01414</filename>
    <namespace>OHMMS</namespace>
    <member kind="function">
      <type>void</type>
      <name>printXML</name>
      <anchorfile>a01415.html</anchorfile>
      <anchor>a8267ec21342ff9ba27e19292a5921fa7</anchor>
      <arglist>(const T &amp;, ostream &amp;)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>XMLTags</name>
    <title>Reserved XML tags</title>
    <filename>a01417.html</filename>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>null_tag</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>gab80885a0156898ef46f0876d0474e785</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>indextype_tag</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>gae7c0a0a0060e4c509d6bb811ca8a1b67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>scalartype_tag</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>gae672a15f663c0625f7ede4e606c6c4e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>stringtype_tag</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>ga8ab5b8bd18985e1031583e2b0c887563</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>postype_tag</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>ga478f0abe6363c6a665d692a25b9c33ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>gradtype_tag</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>gaea6731684536686830078043ede33d5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>laptype_tag</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>gaa2d11dade43627a596a605606cb9e464</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>tensortype_tag</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>ga299fc055976228649228144e0194c0ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>xmoltype_tag</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>ga33d88681b2d5d3e5a9e0a9e4389b3a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>position_tag</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>gadeb9f957560e9866c90a15b0f97beebb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>id_tag</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>ga9134d3d13a3682c0fa1f268faa9a5db0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>ionid_tag</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>gaf996ca1071327c50351380583ad68948</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>trajectory_tag</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>gac8b9acf427192d63eb7f702e064645b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>force_tag</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>ga5c2d12e3f86187e2281b4675a884f116</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>velocity_tag</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>ga431159a439c072bd79f20af1bf7053e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>energy_tag</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>gacd7568847eba087840b75093af2b6395</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>sumbc_tag</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>ga91a6cb97d7ae6fe890af1548277be94b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>root_tag</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>ga6780c1e8a0434cd1744530d98ca97311</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>attrib_tag</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>ga399d1cfe4c49ae7fa637401bed1374b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>name_tag</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>gaa820c2a775d123f77ebc105343cb72db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>datatype_tag</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>gac6cc967df6145e1d0e6bed88c6b41dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>condition_tag</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>gad4b38476c8d54fb9fad126952c06d370</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>size_tag</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>gafd48644be580d45c2cb1f2a69cb1d9fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>format_tag</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>ga132d0e5234ede15c7cddac0030e8851f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>role_tag</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>ga5c11c106805c07552899d736955f1601</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>wfs_tag</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>ga002dcd22708fdf5f2d5e6caa1ade759a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>param_tag</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>ga6d1713dad9c04ddcbe3b1f87a0fe5794</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>dtable_tag</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>ga283971c8ad0f5e55c7e56743d3dd6428</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>jastrow_tag</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>ga0d407d1b46a8ac589c7357f03b7e07e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>detset_tag</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>ga301d342d081fc593e961d5eacf3cab00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>sd_tag</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>ga3080f2abc43a68600b24f3f3e82713e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>det_tag</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>ga9c36f781f006624ac1d254907a46cc90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>rn_tag</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>gad5e0397e936b0228ae60669d87d4f3c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>spo_tag</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>ga79306aaf107d8382a48e0b049cbca111</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>sposet_tag</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>ga6b763ad84094efe9d78c11201ff91897</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>basisset_tag</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>gac27a14e00b5bc45920cc8efe302b1bc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>basis_tag</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>ga5e03692dd973a2d1f22a6f2a5232e622</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>basisfunc_tag</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>ga9fcf51ecd9dd2eff0da4d83e8ea17af1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>ionorb_tag</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>ga9bc207d07c0766e3d8818dfb6a77dfb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>backflow_tag</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>gad7e3b314d520215f16365b160e286b37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>multisd_tag</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>ga11cc8bca81201b3a0c9138c4a0de6b2f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>PtclAttribConst</name>
    <title>Constructors of ParticleAttrib</title>
    <filename>a01418.html</filename>
    <member kind="function">
      <type></type>
      <name>ParticleAttrib</name>
      <anchorfile>a01418.html</anchorfile>
      <anchor>ga38f246f115d65b54ebf9292206678d70</anchor>
      <arglist>(const std::string &amp;tname, const std::string &amp;oname)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParticleAttrib</name>
      <anchorfile>a01418.html</anchorfile>
      <anchor>ga4687d5339bd9afa6c1df57803d2e1e17</anchor>
      <arglist>(const std::string &amp;tname, const std::string &amp;oname, int n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParticleAttrib</name>
      <anchorfile>a01418.html</anchorfile>
      <anchor>ga5c1a581c2b5235f078ee6d98065d33d2</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ParticleAttrib</name>
      <anchorfile>a01418.html</anchorfile>
      <anchor>gac184319e84d1ea1c460514488d849f74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>size</name>
      <anchorfile>a01418.html</anchorfile>
      <anchor>gacdb549c592f948a9d973d4d84b02ef87</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a01418.html</anchorfile>
      <anchor>gac7267e4d0be6999c43930b05cee281d6</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>a01418.html</anchorfile>
      <anchor>ga2adbbd2425f69e2ba6e51fc252bb3e0f</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>This_t &amp;</type>
      <name>operator=</name>
      <anchorfile>a01418.html</anchorfile>
      <anchor>ga09b8a9ca55fe18b3bf3739c2c264adc9</anchor>
      <arglist>(const ParticleAttrib&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const This_t &amp;</type>
      <name>operator=</name>
      <anchorfile>a01418.html</anchorfile>
      <anchor>ga48bce0f49edc37a84bb4e27d6d3be5c8</anchor>
      <arglist>(const ParticleAttrib&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>This_t &amp;</type>
      <name>operator=</name>
      <anchorfile>a01418.html</anchorfile>
      <anchor>ga4e909351cffc01c9ccfa52f781acd323</anchor>
      <arglist>(const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01418.html</anchorfile>
      <anchor>ga4ae243265c82fa27f9536d113c7e8ccf</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator[]</name>
      <anchorfile>a01418.html</anchorfile>
      <anchor>ga39a1b2774e2a11ed4db5b6848de09feb</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator()</name>
      <anchorfile>a01418.html</anchorfile>
      <anchor>ga7370ad3c0010b19e4374be9b6257a5a8</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator()</name>
      <anchorfile>a01418.html</anchorfile>
      <anchor>ga1d7391c814ed6bcb580ee66f0e26dee0</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a01418.html</anchorfile>
      <anchor>ga110accc44e8e40fe2a92d79f146e09d5</anchor>
      <arglist>(std::ostream &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a01418.html</anchorfile>
      <anchor>ga65590683adf948193180bd095592bc6c</anchor>
      <arglist>(std::istream &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a01418.html</anchorfile>
      <anchor>gaec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a01418.html</anchorfile>
      <anchor>gad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>begin_node</name>
      <anchorfile>a01418.html</anchorfile>
      <anchor>ga16b1d9e8f7648886682992a3bb4680ee</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>end_node</name>
      <anchorfile>a01418.html</anchorfile>
      <anchor>ga339b54af3e2e902a63d2757b39e63587</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Container_t</type>
      <name>X</name>
      <anchorfile>a01418.html</anchorfile>
      <anchor>gadd6c36324dbe075ad4ac91b95845e703</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumGhosts</name>
      <anchorfile>a01418.html</anchorfile>
      <anchor>gabec9e5be162f9a39b0d0fa9dab778778</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a01418.html</anchorfile>
      <anchor>gac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearGhosts</name>
      <anchorfile>a01418.html</anchorfile>
      <anchor>ga7e9c5443d27222ad5470193153ee4098</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGhosts</name>
      <anchorfile>a01418.html</anchorfile>
      <anchor>ga701f867f49e4da1dd1af1119420e4e78</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUnit</name>
      <anchorfile>a01418.html</anchorfile>
      <anchor>ga112121bc66b21b3e9971dd4b7f63f3ab</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getUnit</name>
      <anchorfile>a01418.html</anchorfile>
      <anchor>ga8af772f20203ab085c399d3c2960fba0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a01418.html</anchorfile>
      <anchor>gaa4b02d4f1a8500fb07a551069060709f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a01418.html</anchorfile>
      <anchor>ga350132543d80a1c1e5be844e6d2878ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a01418.html</anchorfile>
      <anchor>gad69bd11391be1a1dba5c8202259664f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a01418.html</anchorfile>
      <anchor>gacad38d52497a975bfb6f2f6acd76631f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Type_t *</type>
      <name>first_address</name>
      <anchorfile>a01418.html</anchorfile>
      <anchor>ga706933ea201433a310df98db84b405f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Type_t *</type>
      <name>first_address</name>
      <anchorfile>a01418.html</anchorfile>
      <anchor>ga69395620b9e5f24e49041f06d01196bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Type_t *</type>
      <name>last_address</name>
      <anchorfile>a01418.html</anchorfile>
      <anchor>ga457cf7c9a0ae67236ef886a5d94b4f93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Type_t *</type>
      <name>last_address</name>
      <anchorfile>a01418.html</anchorfile>
      <anchor>ga84c8ad07c5be157adfcc71ca38295d31</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>nnlist</name>
    <title>Distance-table group</title>
    <filename>a00016.html</filename>
    <class kind="struct">qmcplusplus::AsymmetricDTD</class>
    <class kind="class">qmcplusplus::DistanceTableData</class>
    <class kind="struct">qmcplusplus::SymmetricDTD</class>
    <base>qmcplusplus::DTD_BConds</base>
    <base>qmcplusplus::DistanceTableData</base>
    <member kind="function">
      <type></type>
      <name>AsymmetricDTD</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>aa3f323fdc861ef06a41dc4ef67da937b</anchor>
      <arglist>(const ParticleSet &amp;source, const ParticleSet &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a66c26a00b384475a3c0229b64c6f0e5d</anchor>
      <arglist>(int walkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a9bc482eb2e63a142dade8bc6491efc4e</anchor>
      <arglist>(int n1, int n2, int nactive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a0bb2ffda8422273ba3ef55b25eb07fe1</anchor>
      <arglist>(const ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>aaf32fd05b134bd0712fd673b758cb9f3</anchor>
      <arglist>(const ParticleSet &amp;P, const PosType &amp;rnew, IndexType jat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveby</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a13695e5ce38f2eba4db4b2d20363f76b</anchor>
      <arglist>(const ParticleSet &amp;P, const PosType &amp;displ, IndexType jat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveOnSphere</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a3e587e6b24ef3fe77b58146d33fe5b01</anchor>
      <arglist>(const ParticleSet &amp;P, const PosType &amp;rnew, IndexType jat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a17d529b0b294a5cf07854e893f4ff658</anchor>
      <arglist>(IndexType jat)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DTD_BConds</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>a7d8c30a312a8524750445c53b7258c2b</anchor>
      <arglist>(const CrystalLattice&lt; T, D &gt; &amp;lat)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>apply_bc</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>ac2610beabea330b7099b8907aef349ec</anchor>
      <arglist>(TinyVector&lt; T, D &gt; &amp;displ) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_bc</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>ace57f106c72969ef2bea8713dceaefd7</anchor>
      <arglist>(std::vector&lt; TinyVector&lt; T, D &gt; &gt; &amp;dr, std::vector&lt; T &gt; &amp;r, std::vector&lt; T &gt; &amp;rinv) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_bc</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>a17e74743fbb6640a447b6e6ebf936dca</anchor>
      <arglist>(std::vector&lt; TinyVector&lt; T, D &gt; &gt; &amp;dr, std::vector&lt; T &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_rsquared</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>a1bcc20f18af5c582d94c6f63cc7c52b2</anchor>
      <arglist>(TinyVector&lt; T, D &gt; *restrict dr, T *restrict rr, int n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DistanceTableData</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a48fc4478db4d907667a71c356f217fdf</anchor>
      <arglist>(const ParticleSet &amp;source, const ParticleSet &amp;target)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DistanceTableData</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a787606c1a3ea8d32a1222933bf59243e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>getName</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a5e164ba33b1dfc211559756aa5d486c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ade9f6b2fd6709d8b9f19dc01db8f3b93</anchor>
      <arglist>(const string &amp;tname)</arglist>
    </member>
    <member kind="function">
      <type>const ParticleSet &amp;</type>
      <name>origin</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>aaef897b7a3992c078259f187c087ebaa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>centers</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>aa2da83b3bb9cbafc7473fbf8f45a0169</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>size</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>acae3d1d8aa0d8bdab1a0d4ffd7d12369</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>getTotNadj</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a625f5d737e1687b56180ad59259d241f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>nadj</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a00e2612dda169f5b1b462eab1d0f3212</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>iadj</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a4b84882c79d5617d9014f233f671b7ee</anchor>
      <arglist>(int i, int j) const </arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>loc</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>aabd3543c9eab135920c3e822ceddca67</anchor>
      <arglist>(int i, int j) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fill</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ab356f6a9d81add56ee320738baea45a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerData</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>afead2f3a46b6e375c826773eae5c35f6</anchor>
      <arglist>(BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateBuffer</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ad2724a7e83d5a202742c836ad70a95f5</anchor>
      <arglist>(BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyToBuffer</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a33c07f2cf12202b9e663cbcd4d6a40b0</anchor>
      <arglist>(BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>aee91cc495c4bae6dd0675e0ead7c651d</anchor>
      <arglist>(BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>aa0c53387f47a46bf4c549b8f3bc6a941</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>PosType</type>
      <name>dr</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a211701ac552d31321520b603abe1bef8</anchor>
      <arglist>(int iw, int iat) const </arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>r</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>aea02f4e117cbcdfca17d017ce2fa74b4</anchor>
      <arglist>(int iw, int iat) const </arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>rinv</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>acd7fbbba9bd6923cfe68d84891382a83</anchor>
      <arglist>(int iw, int iat) const </arglist>
    </member>
    <member kind="function">
      <type>PosType</type>
      <name>dr</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a116ac014344b8154da5a10730f9d52d6</anchor>
      <arglist>(int j) const </arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>r</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a77d0842ea9f17cdc0f96f2c814ab3a1e</anchor>
      <arglist>(int j) const </arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>rinv</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a35ee517684aeac55c8567d898134a81c</anchor>
      <arglist>(int j) const </arglist>
    </member>
    <member kind="variable">
      <type>const ParticleSet &amp;</type>
      <name>Target</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>abda3d1be6fe32812d2e4b6b814e2f7af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>CellType</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a961a8b30d09a2903d5268a480674d384</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ID</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>af180e926633cde08a05ccbc3af397ee4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>activePtcl</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ae967471c5e2c92819178de07c425267a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; IndexType, 4 &gt;</type>
      <name>N</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a9b5790f7d5a5f2e12ee5f0a98f7be253</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexVectorType</type>
      <name>M</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a307466df517cd5340f856c03f0b2811f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexVectorType</type>
      <name>J</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a603e05d50dff385b271a31888061b07c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexVectorType</type>
      <name>PairID</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a7c8f10fbe60b3e53d8763bf8e3791581</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; IndexType &gt;</type>
      <name>IJ</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a04ce82e1e77eda2d84026e5b5fabafbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; RealType &gt;</type>
      <name>r_full</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a63c6ab216bd67cabe75f070fe6c8f983</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; PosType &gt;</type>
      <name>dr_full</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a9d9af1f5cee719ec3c87915a71ad7104</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; TempDistType &gt;</type>
      <name>Temp</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a3afaf1ef3fe51332565140303cf5fc27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; RealType &gt;</type>
      <name>temp_r</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>af5c78a5ad40d7edf97097d904183f104</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; PosType &gt;</type>
      <name>temp_dr</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>aff474967eb34b3563ba1a61f84605b76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>Name</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>adc852f586959ce13117d737cf3f14899</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WalkerIndex</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>af9bdc3014f3d54c426b6d2df10de4960a9d56f51d27fea9e97110028e87d4908a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SourceIndex</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>af9bdc3014f3d54c426b6d2df10de4960a732385481fd4cdd65e2b03bf1e5a8391</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VisitorIndex</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>af9bdc3014f3d54c426b6d2df10de4960a08b87a0f672e69b6c83e764232271b37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PairIndex</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>af9bdc3014f3d54c426b6d2df10de4960a809a6d09f0667c0af557cf41061d345e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; IndexType &gt;</type>
      <name>IndexVectorType</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>af00acd15ffdff05141daae609b72ee5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TempDisplacement&lt; RealType, DIM &gt;</type>
      <name>TempDistType</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a2dba4e58212eff1854c1aeb638d09075</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PooledData&lt; RealType &gt;</type>
      <name>BufferType</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>aafbb2ba87673453a75bd434114d3c91f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ac945f1f9e66fc48cc039ca4d0f62502c</anchor>
      <arglist>(int npairs, int nw=1)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ParticleSet &amp;</type>
      <name>Origin</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>abdb1a30c90c488c812d27e88189fc4a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>npairs_m</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a872fefdcc54a7d64a89fb4d7045dd2e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix&lt; PosType &gt;</type>
      <name>dr2_m</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>abe43e199ece8afc423c0bde1a0477b27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix&lt; RealType &gt;</type>
      <name>r2_m</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a534c9457823f3e71e790994fc860b19d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix&lt; RealType &gt;</type>
      <name>rinv2_m</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a95195b66ed42ba4cd5db3f4725104e5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; RealType &gt;</type>
      <name>r_m</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a9743239930d860a785bbdde00ebc1245</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; RealType &gt;</type>
      <name>rinv_m</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a9ca4b0ce2d9f80dc5e21fc7987694a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; PosType &gt;</type>
      <name>dr_m</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a72ed7e8cb7d6f11a906be7cc139b0407</anchor>
      <arglist></arglist>
    </member>
  <compound kind="struct">
    <name>qmcplusplus::AsymmetricDTD</name>
    <filename>a00016.html</filename>
    <anchor>a01428</anchor>
    <templarg>T</templarg>
    <templarg>D</templarg>
    <templarg>SC</templarg>
    <base>qmcplusplus::QMCTraits</base>
    <member kind="enumvalue">
      <type>@</type>
      <name>DIM</name>
      <anchorfile>a00499.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba6c8e5f290be4be86fd5e7048654b4a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OHMMS_INDEXTYPE</type>
      <name>IndexType</name>
      <anchorfile>a00499.html</anchorfile>
      <anchor>a5f34c4be868dea4d8ca26139e709b96e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OHMMS_PRECISION</type>
      <name>RealType</name>
      <anchorfile>a00499.html</anchorfile>
      <anchor>ad7d82031a4d3e651238601719cfe874c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OHMMS_PRECISION</type>
      <name>ValueType</name>
      <anchorfile>a00499.html</anchorfile>
      <anchor>a7bfa30e7011beb308d6a910cd90a9b42</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::complex&lt; RealType &gt;</type>
      <name>ComplexType</name>
      <anchorfile>a00499.html</anchorfile>
      <anchor>a7918175767584611b1989b7d708c77ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TinyVector&lt; RealType, DIM &gt;</type>
      <name>PosType</name>
      <anchorfile>a00499.html</anchorfile>
      <anchor>a2fb4a2cf24372ffb2efeaf47fc7de30d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TinyVector&lt; ValueType, DIM &gt;</type>
      <name>GradType</name>
      <anchorfile>a00499.html</anchorfile>
      <anchor>a978d841a8f80a2da012df5dbea6368c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tensor&lt; RealType, DIM &gt;</type>
      <name>TensorType</name>
      <anchorfile>a00499.html</anchorfile>
      <anchor>aeadb48ab441933ee43503417f54e4fc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RecordNamedProperty&lt; RealType &gt;</type>
      <name>PropertySetType</name>
      <anchorfile>a00499.html</anchorfile>
      <anchor>a5c5b6e51751a14434c6c5df2d431cb04</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluate</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a926a1baff1081d05393cdaee606c9381</anchor>
      <arglist>(const ParticleSet &amp;P)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>move</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>af0cd93e274148cc5e7b08f0f398179aa</anchor>
      <arglist>(const ParticleSet &amp;P, const PosType &amp;rnew, IndexType jat)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>moveby</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>aa8abf2d20879d6f471537e29cff55a17</anchor>
      <arglist>(const ParticleSet &amp;P, const PosType &amp;displ, IndexType jat)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>moveOnSphere</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ae624217186a18e0462c528c88bd194f8</anchor>
      <arglist>(const ParticleSet &amp;P, const PosType &amp;displ, IndexType jat)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a786744fc5a85a9d6aa1942e9693b3993</anchor>
      <arglist>(IndexType jat)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>create</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ab1da72ce52a0f0f8a2b29d189dc36c01</anchor>
      <arglist>(int walkers)=0</arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::DistanceTableData</name>
    <filename>a00016.html</filename>
    <anchor>a01445</anchor>
    <base>qmcplusplus::DTD_BConds</base>
    <base>qmcplusplus::DistanceTableData</base>
    <member kind="function">
      <type></type>
      <name>SymmetricDTD</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a6f5bbf2941969a9fdf2e2b65d49cf192</anchor>
      <arglist>(const ParticleSet &amp;source, const ParticleSet &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a66c26a00b384475a3c0229b64c6f0e5d</anchor>
      <arglist>(int walkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a2bd97336c0f91907d45d94bf274f7b1b</anchor>
      <arglist>(int m, int nactive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>aed2e8e8986e7d641f74b6dc70f26cb0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a0bb2ffda8422273ba3ef55b25eb07fe1</anchor>
      <arglist>(const ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>aaf32fd05b134bd0712fd673b758cb9f3</anchor>
      <arglist>(const ParticleSet &amp;P, const PosType &amp;rnew, IndexType jat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveby</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ac6c4f2cc0df461ab8c5bad2c7a768bd6</anchor>
      <arglist>(const ParticleSet &amp;P, const PosType &amp;displ, IndexType iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveOnSphere</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a3e587e6b24ef3fe77b58146d33fe5b01</anchor>
      <arglist>(const ParticleSet &amp;P, const PosType &amp;rnew, IndexType jat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a17d529b0b294a5cf07854e893f4ff658</anchor>
      <arglist>(IndexType jat)</arglist>
    </member>
  <compound kind="struct">
    <name>qmcplusplus::SymmetricDTD</name>
    <filename>a00016.html</filename>
    <anchor>a01528</anchor>
    <templarg>T</templarg>
    <templarg>D</templarg>
    <templarg>SC</templarg>
  </compound>
  <compound kind="group">
    <name>OrbitalComponent</name>
    <title>Orbital group</title>
    <filename>a00143.html</filename>
    <class kind="class">qmcplusplus::MultiSlaterDeterminant</class>
    <class kind="class">qmcplusplus::MultiSlaterDeterminantFast</class>
    <class kind="class">qmcplusplus::MultiSlaterDeterminantWithBackflow</class>
    <class kind="class">qmcplusplus::DiffOneBodyJastrowOrbital</class>
    <class kind="class">qmcplusplus::DiffOneBodySpinJastrowOrbital</class>
    <class kind="class">qmcplusplus::DiffTwoBodyJastrowOrbital</class>
    <class kind="class">qmcplusplus::eeI_JastrowOrbital</class>
    <class kind="class">qmcplusplus::OneBodyJastrowOrbital</class>
    <class kind="class">qmcplusplus::ThreeBodyBlockSparse</class>
    <class kind="class">qmcplusplus::ThreeBodyGeminal</class>
    <class kind="class">qmcplusplus::TwoBodyJastrow</class>
    <class kind="class">qmcplusplus::TwoBodyJastrow&lt; FT, false &gt;</class>
    <class kind="class">qmcplusplus::TwoBodyJastrow&lt; FT, true &gt;</class>
    <class kind="class">qmcplusplus::TwoBodyJastrowOrbital</class>
    <class kind="struct">qmcplusplus::OrbitalBase</class>
    <base>qmcplusplus::OrbitalBase</base>
    <base>qmcplusplus::FermionBase</base>
    <member kind="typedef">
      <type>DiracDeterminantBase *</type>
      <name>DiracDeterminantPtr</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a832bb2d53eb7360a77c0a7bbfcdf0cf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase *</type>
      <name>SPOSetBasePtr</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab3beec5c7a9d8e56de8f16321f218da0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetProxyForMSD *</type>
      <name>SPOSetProxyPtr</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a1eb588077c3e3960c008538ad69fdfa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; ValueType &gt;::IndexVector_t</type>
      <name>IndexVector_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab2ca84294934f0eb4b729108305264ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; ValueType &gt;::ValueVector_t</type>
      <name>ValueVector_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad0172165062017a41c68bc07b92e7d3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; ValueType &gt;::GradVector_t</type>
      <name>GradVector_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a208653b5ccf74a237f5a1a786ee150ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; ValueType &gt;::HessMatrix_t</type>
      <name>HessMatrix_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4da43e29ce05e52087b1edf32ffe2976</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; ValueType &gt;::HessType</type>
      <name>HessType</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a9f477d9122d5e76aacaa19792fe3ec54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array&lt; HessType, 3 &gt;</type>
      <name>HessArray_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac4a74d8105115cf95f8c6ce58c59d360</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TinyVector&lt; HessType, 3 &gt;</type>
      <name>GGGType</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa061426acbed47472a40837e91ff0ea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; GGGType &gt;</type>
      <name>GGGVector_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8fbe45949eb3665c4e9ce7562900ff13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; GGGType &gt;</type>
      <name>GGGMatrix_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad9d64609176495b009d086094279f5a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleSet::Walker_t</type>
      <name>Walker_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>abbc77657579efa0cd83de2b985f92476</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SourceIndex</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a16685eea158879e41b101ca3634de462a732385481fd4cdd65e2b03bf1e5a8391</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VisitorIndex</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a16685eea158879e41b101ca3634de462a08b87a0f672e69b6c83e764232271b37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WalkerIndex</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a16685eea158879e41b101ca3634de462a9d56f51d27fea9e97110028e87d4908a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ORB_PBYP_RATIO</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a2970898e8a43ce21e1cc510d49f1b89da36688c5f60c79ea07f23643ca46ba2de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ORB_PBYP_ALL</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a2970898e8a43ce21e1cc510d49f1b89da6928eef20aebef14a5d7217bf189bd00</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ORB_PBYP_PARTIAL</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a2970898e8a43ce21e1cc510d49f1b89daaa80cfa484ee4c6156b6ed902612a893</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ORB_WALKER</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a2970898e8a43ce21e1cc510d49f1b89da07a27a0ea3865d7ad4fa3725df5d0da2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ORB_ALLWALKER</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a2970898e8a43ce21e1cc510d49f1b89da6ff6aca59c1077d061b4397c134877c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleAttrib&lt; ValueType &gt;</type>
      <name>ValueVectorType</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a2e80b6f1c3b1590de1ee473629b982a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleAttrib&lt; GradType &gt;</type>
      <name>GradVectorType</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a227b16b9d3537f5ebd65ba4515090f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PooledData&lt; RealType &gt;</type>
      <name>BufferType</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aafbb2ba87673453a75bd434114d3c91f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleSet::Walker_t</type>
      <name>Walker_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>abbc77657579efa0cd83de2b985f92476</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; ValueType &gt;::ValueMatrix_t</type>
      <name>ValueMatrix_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a2de3c67ba53d8f2ba51b45df13c5d41a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; ValueType &gt;::GradMatrix_t</type>
      <name>GradMatrix_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa5070ce8df7d576c601174859f54b7ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>map&lt; string, SPOSetBasePtr &gt;</type>
      <name>spo_set_type</name>
      <anchorfile>a00219.html</anchorfile>
      <anchor>a368ee5373218f7691752d755028726f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerTimers</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a43dda6f0760a96661a60a054c6efb017</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiSlaterDeterminant</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a1e8212dcb2020cbe2d71d4581d8b5594</anchor>
      <arglist>(ParticleSet &amp;targetPtcl, SPOSetProxyPtr upspo, SPOSetProxyPtr dnspo)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MultiSlaterDeterminant</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7fa575e2a9113587e220762e9ad3e3e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkInVariables</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetParameters</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reportStatus</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0a144256f92f2fa9e13e840bc30baef7</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBF</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7afb2f20704b253609e753bea519d09b</anchor>
      <arglist>(BackflowTransformation *BFTrans)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ValueType</type>
      <name>evaluate</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a6ac5818339b84cb39dfab834d86d22a8</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a6bcce2f10ac703661972f496f8eb0a1c</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradType</type>
      <name>evalGrad</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5ff7a42c136e9fb51d29c4fdfeaba90b</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ValueType</type>
      <name>ratioGrad</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a670b6d3ad89d4b95ad08a5a911e705cc</anchor>
      <arglist>(ParticleSet &amp;P, int iat, GradType &amp;grad_iat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ValueType</type>
      <name>ratio</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a9a9c8f614e857c18fc75ef985d9015cc</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ValueType</type>
      <name>ratio</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa70bd01b10c1a7ec009c505a73e3bcd8</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>acceptMove</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af79a1f1637e80a729043600a7656054d</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>restore</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4fad6e178271bda6f6e70a5965041472</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aeba37f5a7f9e1c209be41e1f8c2d316d</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab3bd96ff04aaa52093a511569f2ee8eb</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealType</type>
      <name>registerData</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae22a617a9c398ca7abc8c4ed43bd8bbf</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealType</type>
      <name>updateBuffer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8edfeb76f725b1d73ae70131178644a6</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf, bool fromscratch=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a873b86d22a6078397525e16eae04ed7c</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OrbitalBasePtr</type>
      <name>makeClone</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab68f5027a5eee70c7e4e130cfa9aab1b</anchor>
      <arglist>(ParticleSet &amp;tqp) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>evaluateDerivatives</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aafd880c4d54de935e4fc244b1d7cd606</anchor>
      <arglist>(ParticleSet &amp;P, const opt_variables_type &amp;optvars, vector&lt; RealType &gt; &amp;dlogpsi, vector&lt; RealType &gt; &amp;dhpsioverpsi)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resize</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a94fe4412f1302f5ff3027e2f9e43379c</anchor>
      <arglist>(int, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrbitalBase</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ace71337415e9b18cda38a416a2c9667d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OrbitalBase</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a094d3f90d018dd9cd2b88bffa1ae70c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOptimizable</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a593c76bfaf2cc2f507f78aca3fd30d55</anchor>
      <arglist>(bool optimizeit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIonDerivs</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac132c57a890793ac2221cd35cf7b2996</anchor>
      <arglist>(bool calcionderiv)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealType</type>
      <name>getAlternatePhaseDiff</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a94fdfbb56af9d5f10930feed1d003b45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealType</type>
      <name>getAlternatePhaseDiff</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7306c84cf71b68bdb9a2aa970f1f67a8</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDiffOrbital</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a219329d9afd1f539a2db6b8d67d7de1b</anchor>
      <arglist>(DiffOrbitalBasePtr d)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ValueType</type>
      <name>evaluate</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a9b4cbbf40547e3d91297788a62acb9ed</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a37542d37b41cfd4b06618d827dba0d97</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a636b688c026472d9806ee1c63179862d</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L, PooledData&lt; RealType &gt; &amp;buf, bool fillBuffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradType</type>
      <name>alternateEvalGrad</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a1aab7d4a53bf375e8ffefe91ba2b91fa</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradType</type>
      <name>evalGradSource</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0411365f16f3f14c0c4eb6a1e101c032</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet &amp;source, int iat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradType</type>
      <name>evalGradSource</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a9be589f4b3156927f0d80b1c4932fc29</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet &amp;source, int iat, TinyVector&lt; ParticleSet::ParticleGradient_t, OHMMS_DIM &gt; &amp;grad_grad, TinyVector&lt; ParticleSet::ParticleLaplacian_t, OHMMS_DIM &gt; &amp;lapl_grad)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ValueType</type>
      <name>alternateRatioGrad</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aeb7ad5fc7e4871d5fd2880e442c9ff02</anchor>
      <arglist>(ParticleSet &amp;P, int iat, GradType &amp;grad_iat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>alternateGrad</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aacf962a922f3361335c084e1d22a10f1</anchor>
      <arglist>(ParticleSet::ParticleGradient_t &amp;G)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ValueType</type>
      <name>ratio</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af7ee8f189ebab237e275bda05b659d53</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ValueType</type>
      <name>alternateRatio</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af902814950fe1fa0f8df44ab5a7042ab</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab8b0ac946541a92afe9a0c5ed48d29a4</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>registerDataForDerivatives</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac47c6523854cdf6db4671e4561eddc68</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf, int storageType=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>memoryUsage_DataForDerivatives</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac376cd2b448d380a980f4a28d4b62855</anchor>
      <arglist>(ParticleSet &amp;P, long &amp;orbs_only, long &amp;orbs, long &amp;invs, long &amp;dets)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFromDerivativeBuffer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a36e4aac995d81df6c230dbfe71093a0e</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dumpToBuffer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4614da9a162cb501d05c84c0c4985e11</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dumpFromBuffer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a96ac836c580c0d85cf31594d905f9478</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>OrbitalBasePtr</type>
      <name>makeProxy</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a3a03ac1be8c0d57f36a92e88e225e7a6</anchor>
      <arglist>(ParticleSet &amp;tqp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealType</type>
      <name>KECorrection</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a942b08a2062469cef4043d72a2757236</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>multiplyDerivsByOrbR</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab8997c829e7e436fe02f9f83a65da11b</anchor>
      <arglist>(vector&lt; RealType &gt; &amp;dlogpsi)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finalizeOptimization</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad42e09b7dadae9c570db0fa08197e0df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>get_ratios</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0afd740894bec6ecb30956568b7deeeb</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; ValueType &gt; &amp;ratios)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSPO</name>
      <anchorfile>a00219.html</anchorfile>
      <anchor>a75693999f69dee33d44b8682e796543e</anchor>
      <arglist>(const string &amp;aname, SPOSetBase *sposet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSPO</name>
      <anchorfile>a00219.html</anchorfile>
      <anchor>a6bfc0b40c1811340f1aeefbce4b9bc13</anchor>
      <arglist>(SPOSetBase *sposet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetSPOs</name>
      <anchorfile>a00219.html</anchorfile>
      <anchor>a594ad9d173cd1f05387f498eb354ec2f</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copySPOs</name>
      <anchorfile>a00219.html</anchorfile>
      <anchor>ab31e48deb3f7d1327afa9bd5e8b2f632</anchor>
      <arglist>(FermionBase &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copySPOs</name>
      <anchorfile>a00219.html</anchorfile>
      <anchor>a1ad65cd7be91fd8f3e8db25ab62f7134</anchor>
      <arglist>(spo_set_type &amp;spos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cloneSPOs</name>
      <anchorfile>a00219.html</anchorfile>
      <anchor>afe4b30f53200b9b6be757acabd0b07b2</anchor>
      <arglist>(const spo_set_type &amp;spos, ParticleSet &amp;tqp)</arglist>
    </member>
    <member kind="function">
      <type>SPOSetBasePtr</type>
      <name>getSPO</name>
      <anchorfile>a00219.html</anchorfile>
      <anchor>a0a919e17e01905ff0c9939810d3d2ca7</anchor>
      <arglist>(SPOSetBasePtr phi)</arglist>
    </member>
    <member kind="function">
      <type>SPOSetBasePtr</type>
      <name>getSPO</name>
      <anchorfile>a00219.html</anchorfile>
      <anchor>aeb0b435a3fec5237bded3cb3969a368e</anchor>
      <arglist>(const string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>found</name>
      <anchorfile>a00219.html</anchorfile>
      <anchor>a8a4d6f8b0387833f902a28f74270153e</anchor>
      <arglist>(const string &amp;aname)</arglist>
    </member>
    <member kind="variable">
      <type>NewTimer</type>
      <name>RatioTimer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a389dd73e741b46fd5c8a8d9f67367ee4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NewTimer</type>
      <name>RatioGradTimer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5fd71305810d2b2d8f3e07398a6b872b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NewTimer</type>
      <name>RatioAllTimer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5e7aa995c7d212964be572d692431d17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NewTimer</type>
      <name>UpdateTimer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a246fd5c732c167dd6ff44bd1d5ba860d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NewTimer</type>
      <name>EvaluateTimer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>acd240789069a96d1f892eb1fc404d7fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NewTimer</type>
      <name>Ratio1Timer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a332ac3ab027c505a9a4f53541fb3ae3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NewTimer</type>
      <name>Ratio1GradTimer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af0651124ecfce68ce4c9c7b2db5ae702</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NewTimer</type>
      <name>Ratio1AllTimer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>afdfcdc2e06afc1c639fec30ed360decd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NewTimer</type>
      <name>AccRejTimer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae384b7a37d99278dbed408cc9e7fd24c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NewTimer</type>
      <name>evalOrbTimer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a785ca214017b3b242a487046523f2910</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nels_up</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0e43a3abc45524c130b4227a8542bdd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nels_dn</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a07b397d0beea0159490ec68bca945bfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumUniqueDets_up</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a50f00b9a111e3430cd208f031e237b9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumUniqueDets_dn</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a63185f33e022ae9a9fa87395ebe1bd69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>DetID</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae2e5823f4caf99558aa17b34edef149e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>FirstIndex_up</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>afc1eb2c8c98a063d99a2c7bfc9254fb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>LastIndex_up</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae64dcca86f0588741def86818c9e2897</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>FirstIndex_dn</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae09e5a57d4e8a8375d5198b7d8e54af7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>LastIndex_dn</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab858f921473d8ac02323247129b4d2a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>map&lt; string, int &gt;</type>
      <name>SPOSetID</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac3252e3775a1e2328314311d2f5232f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SPOSetProxyPtr</type>
      <name>spo_up</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4aef0d742c247cd923b40eff89aaa816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SPOSetProxyPtr</type>
      <name>spo_dn</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4fb1acb9fd1a9b64bd50fe70cc832d2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; DiracDeterminantPtr &gt;</type>
      <name>dets_up</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac9a96f358dfc01c893e2b2a791593221</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; DiracDeterminantPtr &gt;</type>
      <name>dets_dn</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a3001882cc88ee70ab8699d4ecb87cf30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>C2node_up</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>abc58bad554d9ce522bb2082098020b39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>C2node_dn</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad441a681a869d1c055b5c052409872ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>C</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0086bedce56bb7dfb8ce1a915b40a4d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueVector_t</type>
      <name>detValues_up</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4a62ca8b0b3c70ed151075aa48209a02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueVector_t</type>
      <name>detValues_dn</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a05f3cdde23c665a1c8dda7b5db62bbd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; ParticleSet::ParticleGradient_t &gt;</type>
      <name>grads_up</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a290ce8c33a131a7a8deb07b0ba4c030f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; ParticleSet::ParticleGradient_t &gt;</type>
      <name>grads_dn</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5d4a0565a2f07a80054d77b765d4238f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; ParticleSet::ParticleLaplacian_t &gt;</type>
      <name>lapls_up</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0c1fd3946fc521f2b67ed32991f5bf13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; ParticleSet::ParticleLaplacian_t &gt;</type>
      <name>lapls_dn</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a48731b5aa81570bbd2420fba63b00fca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; ParticleSet::ParticleGradient_t &gt;</type>
      <name>tempgrad</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae729c79ccca750cf76317cf55774b52b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; ParticleSet::ParticleLaplacian_t &gt;</type>
      <name>templapl</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a14aae1782e0d6c2de77e709bad71d167</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>curRatio</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a3223a5f5d9b426c097308900f6d26140</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>psiCurrent</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a628237ea83574372a6cf3c454120aa89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueVector_t</type>
      <name>detsRatios</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>afa07d8740117b008fe0a6d9536af79e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueVector_t</type>
      <name>tempstorage_up</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a1115d16ef51e1c629c1d44a1f65dc97a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueVector_t</type>
      <name>tempstorage_dn</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a334fcfd39e98d102fcafb988ce9dda13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradVector_t</type>
      <name>grad_temp</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa98cd636228fc773278fdb8b1012a829</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>myG</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa0dba9d4f5bcf53c9acb35826f95a05e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleLaplacian_t</type>
      <name>myL</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a44658be2f16a467db55191123408425f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>opt_variables_type</type>
      <name>myVars</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aee7ccfd07712b8606ef965967b67e860</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>usingCSF</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>acab6a40b3eaf10e5fd343cef3b69fbb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>CSFcoeff</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a6c1d54c9a83dddfff48bf8bef13d68ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>DetsPerCSF</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af60a395ed0384ed445642ac6ec5b3b50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>CSFexpansion</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>abb92e0f65dccdbf6c642f3a1a593e83d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>IsOptimizing</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>abe95e3c9061bea64fd3101ef98206f6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Optimizable</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a92c20354cdb1900a8f7605ee9f1d70cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>DerivStorageType</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a9bf16ad619133288c7d2b5291836d9e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>derivsDone</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab9117daee2712f1e7de811efdc46bebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>ionDerivs</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a93068dff7960e7522fdff98b8a44a11a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>parameterType</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a91bdeda2b497ec06edb6b1bfbcfa2cf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>UpdateMode</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a742b26dcec2d1a30c3b4fa0a5cc34304</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>LogValue</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7e1662905b39866a7a2eff4b3e5468dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>PhaseValue</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8c6f041cb32d2103aa8c98a450047a6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DiffOrbitalBasePtr</type>
      <name>dPsi</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>afa789a3aabdfff892e162aa6be4532da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradVectorType</type>
      <name>dLogPsi</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4a4fc074b50dd026c368d6eae2fae446</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueVectorType</type>
      <name>d2LogPsi</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa6aed8d01bf91be7b7552cc6e04f0921</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>OrbitalName</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5015e5c8bb2fedcb7db6103f33e78265</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>opt_variables_type</type>
      <name>myVars</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aee7ccfd07712b8606ef965967b67e860</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>spo_set_type</type>
      <name>mySPOSet</name>
      <anchorfile>a00219.html</anchorfile>
      <anchor>a4062267cde09af87b660aaf8feeab800</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::MultiSlaterDeterminant</name>
    <filename>a00143.html</filename>
    <anchor>a01492</anchor>
    <base>qmcplusplus::OrbitalBase</base>
    <base>qmcplusplus::FermionBase</base>
    <member kind="typedef">
      <type>MultiDiracDeterminantBase *</type>
      <name>DiracDeterminantPtr</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0e19e7e98419b4d0d1fde766dc2a523a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase *</type>
      <name>SPOSetBasePtr</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab3beec5c7a9d8e56de8f16321f218da0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetProxyForMSD *</type>
      <name>SPOSetProxyPtr</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a1eb588077c3e3960c008538ad69fdfa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; ValueType &gt;::IndexVector_t</type>
      <name>IndexVector_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab2ca84294934f0eb4b729108305264ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; ValueType &gt;::ValueVector_t</type>
      <name>ValueVector_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad0172165062017a41c68bc07b92e7d3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; ValueType &gt;::GradVector_t</type>
      <name>GradVector_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a208653b5ccf74a237f5a1a786ee150ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; ValueType &gt;::HessMatrix_t</type>
      <name>HessMatrix_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4da43e29ce05e52087b1edf32ffe2976</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; ValueType &gt;::HessType</type>
      <name>HessType</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a9f477d9122d5e76aacaa19792fe3ec54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array&lt; HessType, 3 &gt;</type>
      <name>HessArray_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac4a74d8105115cf95f8c6ce58c59d360</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TinyVector&lt; HessType, OHMMS_DIM &gt;</type>
      <name>GGGType</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aef1b45f2c244184714e5fcb6bb87ad2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; GGGType &gt;</type>
      <name>GGGVector_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8fbe45949eb3665c4e9ce7562900ff13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; GGGType &gt;</type>
      <name>GGGMatrix_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad9d64609176495b009d086094279f5a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleSet::Walker_t</type>
      <name>Walker_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>abbc77657579efa0cd83de2b985f92476</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerTimers</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a43dda6f0760a96661a60a054c6efb017</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiSlaterDeterminantFast</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aabf33d3060a1f5f86e9f71da739bf19e</anchor>
      <arglist>(ParticleSet &amp;targetPtcl, MultiDiracDeterminantBase *up, MultiDiracDeterminantBase *dn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MultiSlaterDeterminantFast</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a89a2c99fb0d1e2882da74d8bb4b3da0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportStatus</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0a144256f92f2fa9e13e840bc30baef7</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBF</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a3f12ecd4ae2d2cfd41bc86b42ac75da6</anchor>
      <arglist>(BackflowTransformation *bf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a6ac5818339b84cb39dfab834d86d22a8</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aee6c98df74fd951c23aedb0d38625d4e</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>adcd1a90b943836c10339d145aa39eeb4</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L, PooledData&lt; RealType &gt; &amp;buf, bool fillBuffer)</arglist>
    </member>
    <member kind="function">
      <type>GradType</type>
      <name>evalGrad</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5ff7a42c136e9fb51d29c4fdfeaba90b</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratioGrad</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a670b6d3ad89d4b95ad08a5a911e705cc</anchor>
      <arglist>(ParticleSet &amp;P, int iat, GradType &amp;grad_iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad4ac6ecacd80d95941026660c9799fd0</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa70bd01b10c1a7ec009c505a73e3bcd8</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af79a1f1637e80a729043600a7656054d</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4fad6e178271bda6f6e70a5965041472</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aeba37f5a7f9e1c209be41e1f8c2d316d</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab3bd96ff04aaa52093a511569f2ee8eb</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>registerData</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae22a617a9c398ca7abc8c4ed43bd8bbf</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerDataForDerivatives</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aaa52fc94e8378c70746f4087f49fb88a</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf, int storageType=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>memoryUsage_DataForDerivatives</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac376cd2b448d380a980f4a28d4b62855</anchor>
      <arglist>(ParticleSet &amp;P, long &amp;orbs_only, long &amp;orbs, long &amp;invs, long &amp;dets)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>updateBuffer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8edfeb76f725b1d73ae70131178644a6</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf, bool fromscratch=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a873b86d22a6078397525e16eae04ed7c</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>OrbitalBasePtr</type>
      <name>makeClone</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab68f5027a5eee70c7e4e130cfa9aab1b</anchor>
      <arglist>(ParticleSet &amp;tqp) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateDerivatives</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aafd880c4d54de935e4fc244b1d7cd606</anchor>
      <arglist>(ParticleSet &amp;P, const opt_variables_type &amp;optvars, vector&lt; RealType &gt; &amp;dlogpsi, vector&lt; RealType &gt; &amp;dhpsioverpsi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a94fe4412f1302f5ff3027e2f9e43379c</anchor>
      <arglist>(int, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testMSD</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a60d0e1efd9bbb611329f4d34b7eff7ac</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="variable">
      <type>NewTimer</type>
      <name>RatioTimer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a389dd73e741b46fd5c8a8d9f67367ee4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NewTimer</type>
      <name>RatioGradTimer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5fd71305810d2b2d8f3e07398a6b872b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NewTimer</type>
      <name>RatioAllTimer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5e7aa995c7d212964be572d692431d17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NewTimer</type>
      <name>UpdateTimer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a246fd5c732c167dd6ff44bd1d5ba860d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NewTimer</type>
      <name>EvaluateTimer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>acd240789069a96d1f892eb1fc404d7fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NewTimer</type>
      <name>Ratio1Timer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a332ac3ab027c505a9a4f53541fb3ae3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NewTimer</type>
      <name>Ratio1GradTimer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af0651124ecfce68ce4c9c7b2db5ae702</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NewTimer</type>
      <name>Ratio1AllTimer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>afdfcdc2e06afc1c639fec30ed360decd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NewTimer</type>
      <name>AccRejTimer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae384b7a37d99278dbed408cc9e7fd24c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NP</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a60c04f5f0a9da38f288ce36947d8a8b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nels_up</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0e43a3abc45524c130b4227a8542bdd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nels_dn</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a07b397d0beea0159490ec68bca945bfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>FirstIndex_up</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>afc1eb2c8c98a063d99a2c7bfc9254fb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>FirstIndex_dn</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae09e5a57d4e8a8375d5198b7d8e54af7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>usingCSF</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>acab6a40b3eaf10e5fd343cef3b69fbb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; MultiDiracDeterminantBase * &gt;</type>
      <name>Dets</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a88b6e60034550fbc7c1c0bc7e9d2ba3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>DetID</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae2e5823f4caf99558aa17b34edef149e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>map&lt; string, int &gt;</type>
      <name>SPOSetID</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac3252e3775a1e2328314311d2f5232f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>C2node_up</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>abc58bad554d9ce522bb2082098020b39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>C2node_dn</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad441a681a869d1c055b5c052409872ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>C</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0086bedce56bb7dfb8ce1a915b40a4d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>curRatio</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a3223a5f5d9b426c097308900f6d26140</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>psiCurrent</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a628237ea83574372a6cf3c454120aa89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType *</type>
      <name>FirstAddressOfG</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aeae6622a6b99c85ea788a61e69f247ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType *</type>
      <name>LastAddressOfG</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af271fc71c124dccd4a3b7c0fee8c6a76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>myG</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa0dba9d4f5bcf53c9acb35826f95a05e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>myG_temp</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a855362d0cf4bade046252012629c970f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleLaplacian_t</type>
      <name>myL</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a44658be2f16a467db55191123408425f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleLaplacian_t</type>
      <name>myL_temp</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a606558266a45e3424bb76c10f28cbc8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueVector_t</type>
      <name>laplSum_up</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>acab19806dbca3767f98bea7d324d2dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueVector_t</type>
      <name>laplSum_dn</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a1fe39d2d82da329b1ac1c262b5bb9c7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>opt_variables_type</type>
      <name>myVars</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aee7ccfd07712b8606ef965967b67e860</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>CSFcoeff</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a6c1d54c9a83dddfff48bf8bef13d68ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>DetsPerCSF</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af60a395ed0384ed445642ac6ec5b3b50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>CSFexpansion</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>abb92e0f65dccdbf6c642f3a1a593e83d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BackflowTransformation *</type>
      <name>BFTrans</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa1a491a54b76fafb648fa3137be80cf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>usingBF</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a124c557d65228f3d8244a0010383668b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>gmPG</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4bab4c2747ce0184dfd3d164bd95c7e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; RealType &gt;</type>
      <name>dpsia_up</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a95733339f58387ff57c828c58b976de8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; RealType &gt;</type>
      <name>dLa_up</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa781f662ef7b4fc129f46f45fbb3fe8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; RealType &gt;</type>
      <name>dpsia_dn</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a3a0a9f700f9f8dfa2841ee90afc7d2d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; RealType &gt;</type>
      <name>dLa_dn</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4be7e75ec833a48134efaa06e0bb0554</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; GradType, OHMMS_DIM &gt;</type>
      <name>dGa_up</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8f231594f8505cb649c9a9131e4d17b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; GradType, OHMMS_DIM &gt;</type>
      <name>dGa_dn</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8c61c46945318c5637713ef6866f86fc</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::MultiSlaterDeterminantFast</name>
    <filename>a00143.html</filename>
    <anchor>a01493</anchor>
    <base>qmcplusplus::MultiSlaterDeterminant</base>
    <member kind="function">
      <type></type>
      <name>MultiSlaterDeterminantWithBackflow</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa90dc74224c6031d02e4988163638b79</anchor>
      <arglist>(ParticleSet &amp;targetPtcl, SPOSetProxyPtr upspo, SPOSetProxyPtr dnspo, BackflowTransformation *tr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MultiSlaterDeterminantWithBackflow</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a143f85f0a15f4c47290e861f9608bce6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportStatus</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0a144256f92f2fa9e13e840bc30baef7</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBF</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a3f12ecd4ae2d2cfd41bc86b42ac75da6</anchor>
      <arglist>(BackflowTransformation *bf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a6ac5818339b84cb39dfab834d86d22a8</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a413a7fa9a9f03dceab555cba017255ef</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>GradType</type>
      <name>evalGrad</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5ff7a42c136e9fb51d29c4fdfeaba90b</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratioGrad</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a670b6d3ad89d4b95ad08a5a911e705cc</anchor>
      <arglist>(ParticleSet &amp;P, int iat, GradType &amp;grad_iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa5823bae7662b305bd701454545ee75a</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa70bd01b10c1a7ec009c505a73e3bcd8</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af79a1f1637e80a729043600a7656054d</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4fad6e178271bda6f6e70a5965041472</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aeba37f5a7f9e1c209be41e1f8c2d316d</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab3bd96ff04aaa52093a511569f2ee8eb</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>registerData</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae22a617a9c398ca7abc8c4ed43bd8bbf</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>updateBuffer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8edfeb76f725b1d73ae70131178644a6</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf, bool fromscratch=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a873b86d22a6078397525e16eae04ed7c</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>OrbitalBasePtr</type>
      <name>makeClone</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab68f5027a5eee70c7e4e130cfa9aab1b</anchor>
      <arglist>(ParticleSet &amp;tqp) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateDerivatives</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aafd880c4d54de935e4fc244b1d7cd606</anchor>
      <arglist>(ParticleSet &amp;P, const opt_variables_type &amp;optvars, vector&lt; RealType &gt; &amp;dlogpsi, vector&lt; RealType &gt; &amp;dhpsioverpsi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a94fe4412f1302f5ff3027e2f9e43379c</anchor>
      <arglist>(int, int)</arglist>
    </member>
    <member kind="variable">
      <type>BackflowTransformation *</type>
      <name>BFTrans</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa1a491a54b76fafb648fa3137be80cf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; RealType &gt;</type>
      <name>dpsia_up</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a95733339f58387ff57c828c58b976de8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; RealType &gt;</type>
      <name>dLa_up</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa781f662ef7b4fc129f46f45fbb3fe8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; RealType &gt;</type>
      <name>dpsia_dn</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a3a0a9f700f9f8dfa2841ee90afc7d2d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; RealType &gt;</type>
      <name>dLa_dn</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4be7e75ec833a48134efaa06e0bb0554</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; GradType, 3 &gt;</type>
      <name>dGa_up</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4a840765bba6f941e777adc5b57ef2ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; GradType, 3 &gt;</type>
      <name>dGa_dn</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aad777505631fcc703749130532c3e8bd</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::MultiSlaterDeterminantWithBackflow</name>
    <filename>a00143.html</filename>
    <anchor>a01494</anchor>
    <member kind="function">
      <type></type>
      <name>DiffOneBodyJastrowOrbital</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a482e281f7924598d43fa7fa77e4a37ed</anchor>
      <arglist>(const ParticleSet &amp;centers, ParticleSet &amp;els)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DiffOneBodyJastrowOrbital</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a9ee7b5b3d6b864b44e31a201f33d5a1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFunc</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a190cef2a0438ac51e549cee213c205e5</anchor>
      <arglist>(int source_type, FT *afunc, int target_type=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateDerivatives</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a291c52dc43d28edb9643f61b763e0952</anchor>
      <arglist>(ParticleSet &amp;P, const opt_variables_type &amp;active, vector&lt; RealType &gt; &amp;dlogpsi, vector&lt; RealType &gt; &amp;dhpsioverpsi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVars</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a1857ed9ec754019d3d96e17964559a8c</anchor>
      <arglist>(const opt_variables_type &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>DiffOrbitalBasePtr</type>
      <name>makeClone</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad89dce42737077ec341512a98895ef88</anchor>
      <arglist>(ParticleSet &amp;tqp) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumVars</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa17b61ab805c68e20552b13a8ddb431d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumPtcls</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac696dd2e9e407dabdbda0ce636a569e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const ParticleSet &amp;</type>
      <name>CenterRef</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab2185ecb80d978d74b01ab1450e115fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a53956c224bd49abff541a1a7c2ad305d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>opt_variables_type</type>
      <name>myVars</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aee7ccfd07712b8606ef965967b67e860</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; FT * &gt;</type>
      <name>Fs</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a9d69f560dc6e512b3145ad296273f4e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; FT * &gt;</type>
      <name>Funique</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aab209055759a41d30f02dff8794b1c4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; pair&lt; int, int &gt; &gt;</type>
      <name>OffSet</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a2f05f36a972e074feef7e883e3fb1252</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; RealType &gt;</type>
      <name>dLogPsi</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac1044d89037f74e552b8146609ad0c87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; GradVectorType * &gt;</type>
      <name>gradLogPsi</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a893baa7731e5ec5e9d4ba16a3a0bc7e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; ValueVectorType * &gt;</type>
      <name>lapLogPsi</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae8c2b95762f3cf78f76368488b97fa71</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::DiffOneBodyJastrowOrbital</name>
    <filename>a00143.html</filename>
    <anchor>a01442</anchor>
    <templarg>FT</templarg>
    <member kind="function">
      <type></type>
      <name>DiffOneBodySpinJastrowOrbital</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7f30a605d7dcabbc11f20b062e4bd210</anchor>
      <arglist>(const ParticleSet &amp;centers, ParticleSet &amp;els)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DiffOneBodySpinJastrowOrbital</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac6522dd90fb5ce315115272f7913af64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFunc</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a122dee56593d0e246af6feb21906dcdc</anchor>
      <arglist>(int source_g, FT *afunc, int target_g=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateDerivatives</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a291c52dc43d28edb9643f61b763e0952</anchor>
      <arglist>(ParticleSet &amp;P, const opt_variables_type &amp;active, vector&lt; RealType &gt; &amp;dlogpsi, vector&lt; RealType &gt; &amp;dhpsioverpsi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVars</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a1857ed9ec754019d3d96e17964559a8c</anchor>
      <arglist>(const opt_variables_type &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>DiffOrbitalBasePtr</type>
      <name>makeClone</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad89dce42737077ec341512a98895ef88</anchor>
      <arglist>(ParticleSet &amp;tqp) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>Spin</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a480deac19030a3a2a6c835c6f9d925d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumVars</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa17b61ab805c68e20552b13a8ddb431d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumPtcls</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac696dd2e9e407dabdbda0ce636a569e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>VarOffset</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7ccb2a1a7cd9131a7904c681310e8538</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const ParticleSet &amp;</type>
      <name>CenterRef</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab2185ecb80d978d74b01ab1450e115fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a53956c224bd49abff541a1a7c2ad305d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>opt_variables_type</type>
      <name>myVars</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aee7ccfd07712b8606ef965967b67e860</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; FT * &gt;</type>
      <name>F</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a995921ea57681acd34f206382702307a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; int &gt;</type>
      <name>Fmask</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a03ce17081fd917c20a20b1026bf04ff2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; int &gt;</type>
      <name>s_offset</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad1526b9ca521470481e542a44d88bae6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; int &gt;</type>
      <name>t_offset</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab3882ab0ae641522fe13319b3c5cdb9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; RealType &gt;</type>
      <name>dLogPsi</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac1044d89037f74e552b8146609ad0c87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; GradVectorType * &gt;</type>
      <name>gradLogPsi</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a893baa7731e5ec5e9d4ba16a3a0bc7e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; ValueVectorType * &gt;</type>
      <name>lapLogPsi</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae8c2b95762f3cf78f76368488b97fa71</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::DiffOneBodySpinJastrowOrbital</name>
    <filename>a00143.html</filename>
    <anchor>a01443</anchor>
    <templarg>FT</templarg>
    <member kind="function">
      <type></type>
      <name>DiffTwoBodyJastrowOrbital</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae1ff6c80c4ac1f1c2fecb66f88c0d02f</anchor>
      <arglist>(ParticleSet &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DiffTwoBodyJastrowOrbital</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a65c026867123b98191c12050b5c5725e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFunc</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac882239a96b1b886b014f6afd37b4cde</anchor>
      <arglist>(int ia, int ib, FT *j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateDerivatives</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a291c52dc43d28edb9643f61b763e0952</anchor>
      <arglist>(ParticleSet &amp;P, const opt_variables_type &amp;active, vector&lt; RealType &gt; &amp;dlogpsi, vector&lt; RealType &gt; &amp;dhpsioverpsi)</arglist>
    </member>
    <member kind="function">
      <type>DiffOrbitalBasePtr</type>
      <name>makeClone</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad89dce42737077ec341512a98895ef88</anchor>
      <arglist>(ParticleSet &amp;tqp) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumVars</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa17b61ab805c68e20552b13a8ddb431d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumPtcls</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac696dd2e9e407dabdbda0ce636a569e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumGroups</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>abe48fe1d890e3822a6889caa9b3f99b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a53956c224bd49abff541a1a7c2ad305d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>opt_variables_type</type>
      <name>myVars</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aee7ccfd07712b8606ef965967b67e860</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; FT * &gt;</type>
      <name>F</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af45b5a2c3984028fafeca7ff2d413ed2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; pair&lt; int, int &gt; &gt;</type>
      <name>OffSet</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a2f05f36a972e074feef7e883e3fb1252</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; RealType &gt;</type>
      <name>dLogPsi</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac1044d89037f74e552b8146609ad0c87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; GradVectorType * &gt;</type>
      <name>gradLogPsi</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a893baa7731e5ec5e9d4ba16a3a0bc7e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; ValueVectorType * &gt;</type>
      <name>lapLogPsi</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae8c2b95762f3cf78f76368488b97fa71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; std::string, FT * &gt;</type>
      <name>J2Unique</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae0d2580a8ea1715ad680db498ff3eb21</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::DiffTwoBodyJastrowOrbital</name>
    <filename>a00143.html</filename>
    <anchor>a01444</anchor>
    <templarg>FT</templarg>
    <base>qmcplusplus::OrbitalBase</base>
    <member kind="typedef">
      <type>FT</type>
      <name>FuncType</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a617b482486e44becbde6ea4cf2c96f16</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>ChiesaKEcorrection</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a3d263f59a04f09512dc371881aa3808f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eeI_JastrowOrbital</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a2e9f8db969bb5b3f7a7f01b0e14b0cc4</anchor>
      <arglist>(ParticleSet &amp;ions, ParticleSet &amp;elecs, bool is_master)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~eeI_JastrowOrbital</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8e0f71cbdcfe4caa27706b42889f33d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>afc240af166cfa1be747a1ddf159e007e</anchor>
      <arglist>(ParticleSet &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initUnique</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8e78aea5ef70eda252bbce2294af24c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFunc</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aff73298e073fcf1d3b62ab54adfb4d0f</anchor>
      <arglist>(int iSpecies, int eSpecies1, int eSpecies2, FT *j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportStatus</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0a144256f92f2fa9e13e840bc30baef7</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aee6c98df74fd951c23aedb0d38625d4e</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a17a690a835b951b7cb5ec17d890a1e2b</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>GradType</type>
      <name>evalGradSourceFD</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a6b021ed767c2bc5c316914954914a2c6</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet &amp;source, int isrc)</arglist>
    </member>
    <member kind="function">
      <type>GradType</type>
      <name>evalGradSource</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae22540bdd1acd95e3cbbc46f5cc66359</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet &amp;source, int isrc)</arglist>
    </member>
    <member kind="function">
      <type>GradType</type>
      <name>evalGradSourceFD</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae5feb0a54fbb3d13304e38ee6539b216</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet &amp;source, int isrc, TinyVector&lt; ParticleSet::ParticleGradient_t, OHMMS_DIM &gt; &amp;grad_grad, TinyVector&lt; ParticleSet::ParticleLaplacian_t, OHMMS_DIM &gt; &amp;lapl_grad)</arglist>
    </member>
    <member kind="function">
      <type>GradType</type>
      <name>evalGradSource</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a26cffe0125748b9c12b3b37484872f04</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet &amp;source, int isrc, TinyVector&lt; ParticleSet::ParticleGradient_t, OHMMS_DIM &gt; &amp;grad_grad, TinyVector&lt; ParticleSet::ParticleLaplacian_t, OHMMS_DIM &gt; &amp;lapl_grad)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5e4a7bd7e23a6beab0d8bc131be6ffc4</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad4ac6ecacd80d95941026660c9799fd0</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>GradType</type>
      <name>evalGrad</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a178607284b7ab1e4c389fce8e0c80de3</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratioGrad</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af21351a5f07bfcec09d2f2c85c24ffee</anchor>
      <arglist>(ParticleSet &amp;P, int iat, GradType &amp;grad_iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4fad6e178271bda6f6e70a5965041472</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af79a1f1637e80a729043600a7656054d</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aeba37f5a7f9e1c209be41e1f8c2d316d</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateLogAndStore</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4711d996a09ec9fad0d3965db8ded746</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>registerData</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a6c52a19e935c4f5e9bc363f535a1eb58</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>updateBuffer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a90a7c6c91ae13b2d7141fc8d1315d8d8</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf, bool fromscratch=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5261ed49b5195980c91c0024b860fdb2</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a058a5a1e24105137f5509a585419d0ef</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>OrbitalBasePtr</type>
      <name>makeClone</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab68f5027a5eee70c7e4e130cfa9aab1b</anchor>
      <arglist>(ParticleSet &amp;tqp) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFrom</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af1a7c966102d2128341c24cf920adc49</anchor>
      <arglist>(const OrbitalBase &amp;old)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finalizeOptimization</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a48d91310b053ab96442a62668825b5cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>KECorrection</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a414075e013df97571266ce3cd0d6b0ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateDerivatives</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aafd880c4d54de935e4fc244b1d7cd606</anchor>
      <arglist>(ParticleSet &amp;P, const opt_variables_type &amp;optvars, vector&lt; RealType &gt; &amp;dlogpsi, vector&lt; RealType &gt; &amp;dhpsioverpsi)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a3ecae872bf03e9401d25b40ecfe6ce50</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RealType</type>
      <name>registerData</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a9dc7cda38c97b2bad397bd65e35b61f9</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RealType</type>
      <name>updateBuffer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa2e0d6ee805f9ae3f991080ef0764ea8</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf, bool fromscratch=false)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a21422fa21b85422776ada2a92b3efe8a</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)=0</arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; FT *, 3 &gt;</type>
      <name>F</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a047036a51600d7aacc7efe2a0d12c1bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const DistanceTableData *</type>
      <name>ee_table</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a98bad66970832adc6ab54b53bfb844f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const DistanceTableData *</type>
      <name>eI_table</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a3e0797b72ff11ddac7e8242012ce8374</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>Write_Chiesa_Correction</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ade3b5bac493c966ef007d45eb130057f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>Nelec</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a849e4a1d5fee0c024e42b658d3babd02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>Nion</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac3ffb8d57ab8bc994b1a95f8d83c604d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NN</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a13fa86a226aeccab13ef11a89ebb97a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>eGroups</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a18e6591f71060572ea9ef1aa7a257d4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>iGroups</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a1241c9469e8327f9ac5247b276b02f65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>DiffVal</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a02b7473369de9fd01b0fc872b3fd36f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>DiffValSum</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a9e21b4f663096af7e56903799492a832</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleAttrib&lt; RealType &gt;</type>
      <name>U</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5b43bd96312d140cb8feaead0dcf7ded</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleAttrib&lt; RealType &gt;</type>
      <name>d2U</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae2a389d37b3a24fd59adba99921fd768</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleAttrib&lt; RealType &gt;</type>
      <name>curLap_i</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa99a879817c3aafd93c9613f25e9cb31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleAttrib&lt; RealType &gt;</type>
      <name>curLap_j</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae04bcbea5a01ab35db379d60ff2759a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleAttrib&lt; RealType &gt;</type>
      <name>curVal</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af288489de344bff57b2a0b5445ef5ab9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleAttrib&lt; PosType &gt;</type>
      <name>dU</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a59f58fa10257e6758df81fdf1df34017</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleAttrib&lt; PosType &gt;</type>
      <name>curGrad_i</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>acd74368c7fa7804fba0494f04fc798d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleAttrib&lt; PosType &gt;</type>
      <name>curGrad_j</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a1ffa19dc3552edf030617f775ba22d5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleAttrib&lt; PosType &gt;</type>
      <name>curGrad0</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a78a0733444a7b852ee570aa05445d9f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType *</type>
      <name>FirstAddressOfdU</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a77538c1503ee95a4637198725fe78fb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType *</type>
      <name>LastAddressOfdU</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa28d1447dcf13740b471c860cca9db18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Array&lt; int, 3 &gt;</type>
      <name>TripletID</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4000744123eda2f0d8c3a4bb2953bb49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Array&lt; int, 3 &gt;</type>
      <name>J3UniqueIndex</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a38fff4c765bac3b687d97b9531b4458a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; std::string, FT * &gt;</type>
      <name>J3Unique</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a3776dd5c4015380deb5b879de5e82289</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet *</type>
      <name>eRef</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af4e6ba54f1cb033c495412c3bdd3283c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet *</type>
      <name>IRef</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a10ba5ced820367ee7153340892a8df49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>FirstTime</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af1d18579862309ebb383f534ece9efc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>KEcorr</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a92724b9302c290622038e20adb11a024</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; IonData &gt;</type>
      <name>IonDataList</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7837f0d480b10dc3aa828b371a79b74d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; vector&lt; RealType &gt; &gt;</type>
      <name>du_dalpha</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a86dc383c27952778e041a991754b1177</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; vector&lt; PosType &gt; &gt;</type>
      <name>dgrad_dalpha</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aff4b5ca7d213c810ed5fc149542aa693</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; vector&lt; Tensor&lt; RealType, 3 &gt; &gt; &gt;</type>
      <name>dhess_dalpha</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7cb31bbdea8262dcdcbd5bc7becbf5a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumVars</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa17b61ab805c68e20552b13a8ddb431d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Array&lt; pair&lt; int, int &gt;, 3 &gt;</type>
      <name>VarOffset</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aad3ce557866b52586401ea842463c04d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; RealType &gt;</type>
      <name>dLogPsi</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac1044d89037f74e552b8146609ad0c87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Array&lt; PosType, 2 &gt;</type>
      <name>gradLogPsi</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a2b73ac1c3b7b77ea0bb7961ceec9e278</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Array&lt; RealType, 2 &gt;</type>
      <name>lapLogPsi</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a56bf4df979acacd368d602b4517f7d60</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::eeI_JastrowOrbital</name>
    <filename>a00143.html</filename>
    <anchor>a01455</anchor>
    <templarg>FT</templarg>
    <base>qmcplusplus::OrbitalBase</base>
    <member kind="typedef">
      <type>FT</type>
      <name>FuncType</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a617b482486e44becbde6ea4cf2c96f16</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneBodyJastrowOrbital</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad56d95c46ab9b7ce341be0402bbadf4c</anchor>
      <arglist>(const ParticleSet &amp;centers, ParticleSet &amp;els)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OneBodyJastrowOrbital</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7dd29d305532053c6e3bf1635a0985fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFunc</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a190cef2a0438ac51e549cee213c205e5</anchor>
      <arglist>(int source_type, FT *afunc, int target_type=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportStatus</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0a144256f92f2fa9e13e840bc30baef7</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aee6c98df74fd951c23aedb0d38625d4e</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a17a690a835b951b7cb5ec17d890a1e2b</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5e4a7bd7e23a6beab0d8bc131be6ffc4</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_ratios</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0afd740894bec6ecb30956568b7deeeb</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; ValueType &gt; &amp;ratios)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad4ac6ecacd80d95941026660c9799fd0</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>GradType</type>
      <name>evalGrad</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a178607284b7ab1e4c389fce8e0c80de3</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>GradType</type>
      <name>evalGradSource</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae22540bdd1acd95e3cbbc46f5cc66359</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet &amp;source, int isrc)</arglist>
    </member>
    <member kind="function">
      <type>GradType</type>
      <name>evalGradSource</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a26cffe0125748b9c12b3b37484872f04</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet &amp;source, int isrc, TinyVector&lt; ParticleSet::ParticleGradient_t, OHMMS_DIM &gt; &amp;grad_grad, TinyVector&lt; ParticleSet::ParticleLaplacian_t, OHMMS_DIM &gt; &amp;lapl_grad)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratioGrad</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af21351a5f07bfcec09d2f2c85c24ffee</anchor>
      <arglist>(ParticleSet &amp;P, int iat, GradType &amp;grad_iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>logRatio</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af6fa7f27fa33e00e9097169c82dff776</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4fad6e178271bda6f6e70a5965041472</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af79a1f1637e80a729043600a7656054d</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aeba37f5a7f9e1c209be41e1f8c2d316d</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateLogAndStore</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af2729bf726a29202c501a093cec75761</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>registerData</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a6c52a19e935c4f5e9bc363f535a1eb58</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>updateBuffer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5c8b7a72afdb083caddc5e57640b4549</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf, bool fromscratch=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5261ed49b5195980c91c0024b860fdb2</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a058a5a1e24105137f5509a585419d0ef</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>OrbitalBasePtr</type>
      <name>makeClone</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab68f5027a5eee70c7e4e130cfa9aab1b</anchor>
      <arglist>(ParticleSet &amp;tqp) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFrom</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af1a7c966102d2128341c24cf920adc49</anchor>
      <arglist>(const OrbitalBase &amp;old)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>evaluateDerivatives</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aafd880c4d54de935e4fc244b1d7cd606</anchor>
      <arglist>(ParticleSet &amp;P, const opt_variables_type &amp;optvars, vector&lt; RealType &gt; &amp;dlogpsi, vector&lt; RealType &gt; &amp;dhpsioverpsi)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ParticleSet &amp;</type>
      <name>CenterRef</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab2185ecb80d978d74b01ab1450e115fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a53956c224bd49abff541a1a7c2ad305d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>curVal</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a9d968af9e056fb5b523c54fb2b46b562</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>curLap</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af231fbc54bac0d9508402e1a9ab6e445</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PosType</type>
      <name>curGrad</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a1f7818b1f57b3d6585ac950fecec6d07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleAttrib&lt; RealType &gt;</type>
      <name>U</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5b43bd96312d140cb8feaead0dcf7ded</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleAttrib&lt; RealType &gt;</type>
      <name>d2U</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae2a389d37b3a24fd59adba99921fd768</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleAttrib&lt; PosType &gt;</type>
      <name>dU</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a59f58fa10257e6758df81fdf1df34017</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType *</type>
      <name>FirstAddressOfdU</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a77538c1503ee95a4637198725fe78fb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType *</type>
      <name>LastAddressOfdU</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa28d1447dcf13740b471c860cca9db18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; FT * &gt;</type>
      <name>Fs</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a9d69f560dc6e512b3145ad296273f4e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; FT * &gt;</type>
      <name>Funique</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aab209055759a41d30f02dff8794b1c4b</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::OneBodyJastrowOrbital</name>
    <filename>a00143.html</filename>
    <anchor>a01498</anchor>
    <templarg>FT</templarg>
    <base>qmcplusplus::OrbitalBase</base>
    <member kind="typedef">
      <type>BasisSetBase&lt; RealType &gt;</type>
      <name>BasisSetType</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac49f2b96cf5fe756621e3456a3a906fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ThreeBodyBlockSparse</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0d36b03e8f5f9e4371c52a3a8fc40956</anchor>
      <arglist>(const ParticleSet &amp;ions, ParticleSet &amp;els)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ThreeBodyBlockSparse</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4db5f142aebb6db45a7b32e2a0bd27fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportStatus</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0a144256f92f2fa9e13e840bc30baef7</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a413a7fa9a9f03dceab555cba017255ef</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a17a690a835b951b7cb5ec17d890a1e2b</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa70bd01b10c1a7ec009c505a73e3bcd8</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa5823bae7662b305bd701454545ee75a</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>logRatio</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab7870674fbe33172897cbadade5e659a</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4fad6e178271bda6f6e70a5965041472</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af79a1f1637e80a729043600a7656054d</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aeba37f5a7f9e1c209be41e1f8c2d316d</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>registerData</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aee15b8fc49302d30c12179a06cbed8a0</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>updateBuffer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a3a14bea0a578b0c6c86f835e84cda22d</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf, bool fromscratch=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5261ed49b5195980c91c0024b860fdb2</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a3a85e4f6f9077a60e593c5941a0b8822</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>OrbitalBasePtr</type>
      <name>makeClone</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab68f5027a5eee70c7e4e130cfa9aab1b</anchor>
      <arglist>(ParticleSet &amp;tqp) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBasisSet</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad4d33e422f0d49b321927e342b823a2c</anchor>
      <arglist>(BasisSetType *abasis)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBlocks</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a3f63557802f273171e8c96a01ed74f4e</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;blockspergroup)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateLogAndStore</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a9e71788b87df26e5b240436267cf60aa</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkLambda</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a00301d9f918aaffa172d06bcaadd4a8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradType</type>
      <name>evalGrad</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a801b74da5174c0dd0fc461acde54f7dd</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ValueType</type>
      <name>ratioGrad</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>abbb5d49715a43b66c809387225fd57eb</anchor>
      <arglist>(ParticleSet &amp;P, int iat, GradType &amp;grad_iat)</arglist>
    </member>
    <member kind="variable">
      <type>const ParticleSet &amp;</type>
      <name>CenterRef</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab2185ecb80d978d74b01ab1450e115fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>SameBlocksForGroup</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a852a04b9f3155155b42f1d91ed6ba870</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>myTableIndex</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa0e1a164ff81fc42ab4f688c6aeca19e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>BasisSize</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a2180d68e324e5f0dfa3def364536c201</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumPtcls</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac696dd2e9e407dabdbda0ce636a569e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>IndexOffSet</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7fc3cceb3dfa31d85b5633591402771b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>diffVal</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad0ff8229ba2c81539d2d6979ab0987ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>ID_Lambda</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a739f6f85fe6998bae1e34e99c2a570b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; RealType &gt;</type>
      <name>Y</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a9e51ea9fbcccc0a5b886034ae1cae049</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; PosType &gt;</type>
      <name>dY</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>adcc8419e2c9046e4ce0fa807e6d1cd15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; RealType &gt;</type>
      <name>d2Y</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a3c75141e10f5df6d6129f6c78a876402</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; RealType &gt;</type>
      <name>V</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a3e19def695dcd6f330422bb406b95bad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; RealType &gt;</type>
      <name>Lambda</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a266d678bd1e680700634130efa232a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; int &gt;</type>
      <name>FreeLambda</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7d2a5caa23a29c47651244f998c78108</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; IndexType &gt;</type>
      <name>BlocksPerGroup</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8c270cd1d3668e98b7945b0472e6596f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; IndexType &gt;</type>
      <name>Blocks</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a48cdea8f352e4d87704c33dd0624c266</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; IndexType &gt;</type>
      <name>BlockOffset</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af97eb8c577585b4df4f6b64b1cfdb8aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; IndexType &gt;</type>
      <name>BlockID</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a044f7f06c215c2bf626105d38a7e83e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; Matrix&lt; RealType &gt; * &gt;</type>
      <name>LambdaBlocks</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>adb71cb60deee7697d389b6fdb47cc894</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; RealType &gt;</type>
      <name>Uk</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4c988842a829353985930a81fff540ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; PosType &gt;</type>
      <name>dUk</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a27e598cfac066baecff31473a6c6bd27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; RealType &gt;</type>
      <name>d2Uk</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0d3c1101001062945ec73cf01b7ee1f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; RealType &gt;</type>
      <name>curLap</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a225630de6c2b1e6893d259e8f1acf0f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; RealType &gt;</type>
      <name>tLap</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a88e157939b37285643ef8d448d00a76e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; PosType &gt;</type>
      <name>curGrad</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa5c24d0e889adf9ead10085ea6174ce6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; PosType &gt;</type>
      <name>tGrad</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5e9fbd6a94c23227c4d65f9cb1997ecf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; RealType &gt;</type>
      <name>curV</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a432e85035a647c63b0c3c4ea71be9303</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; RealType &gt;</type>
      <name>delV</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a39608c39b329b4508293ac2e610a338d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; RealType &gt;</type>
      <name>curVal</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a30b8f1a68f83ef31c117c506264f9598</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType *</type>
      <name>FirstAddressOfdY</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8fffe0143a90230fc18ed6dd7857a9a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType *</type>
      <name>LastAddressOfdY</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a692ee9a579db66df144fb21c718b3717</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType *</type>
      <name>FirstAddressOfgU</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aedbd5cbd4a7cad0182c4e7b950905f08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType *</type>
      <name>LastAddressOfgU</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8f164a0bd89497dd7e5c6fb863892b87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BasisSetType *</type>
      <name>GeminalBasis</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5a63be4a83a645af9577d9d1adf9914d</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::ThreeBodyBlockSparse</name>
    <filename>a00143.html</filename>
    <anchor>a01530</anchor>
    <base>qmcplusplus::OrbitalBase</base>
    <member kind="typedef">
      <type>BasisSetBase&lt; RealType &gt;</type>
      <name>BasisSetType</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac49f2b96cf5fe756621e3456a3a906fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ThreeBodyGeminal</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a520900b59e1f663bb975eb51d4a758fb</anchor>
      <arglist>(const ParticleSet &amp;ions, ParticleSet &amp;els)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ThreeBodyGeminal</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a90ca07ea1726306123a8c70e7abb0478</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportStatus</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0a144256f92f2fa9e13e840bc30baef7</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a413a7fa9a9f03dceab555cba017255ef</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a17a690a835b951b7cb5ec17d890a1e2b</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa70bd01b10c1a7ec009c505a73e3bcd8</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa5823bae7662b305bd701454545ee75a</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>logRatio</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab7870674fbe33172897cbadade5e659a</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4fad6e178271bda6f6e70a5965041472</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af79a1f1637e80a729043600a7656054d</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aeba37f5a7f9e1c209be41e1f8c2d316d</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>registerData</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aee15b8fc49302d30c12179a06cbed8a0</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>updateBuffer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a3a14bea0a578b0c6c86f835e84cda22d</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf, bool fromscratch=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5261ed49b5195980c91c0024b860fdb2</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a3a85e4f6f9077a60e593c5941a0b8822</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBasisSet</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad4d33e422f0d49b321927e342b823a2c</anchor>
      <arglist>(BasisSetType *abasis)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>OrbitalBasePtr</type>
      <name>makeClone</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab68f5027a5eee70c7e4e130cfa9aab1b</anchor>
      <arglist>(ParticleSet &amp;tqp) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>evaluateLogAndStore</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a9e71788b87df26e5b240436267cf60aa</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const ParticleSet &amp;</type>
      <name>CenterRef</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab2185ecb80d978d74b01ab1450e115fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a53956c224bd49abff541a1a7c2ad305d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>BasisSize</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a2180d68e324e5f0dfa3def364536c201</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumPtcls</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac696dd2e9e407dabdbda0ce636a569e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>IndexOffSet</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7fc3cceb3dfa31d85b5633591402771b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>NormFac</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af8973741dccfb85bb784b345e6c9101d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>diffVal</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad0ff8229ba2c81539d2d6979ab0987ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>ID_Lambda</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a739f6f85fe6998bae1e34e99c2a570b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; RealType &gt;</type>
      <name>Y</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a9e51ea9fbcccc0a5b886034ae1cae049</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; PosType &gt;</type>
      <name>dY</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>adcc8419e2c9046e4ce0fa807e6d1cd15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; RealType &gt;</type>
      <name>d2Y</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a3c75141e10f5df6d6129f6c78a876402</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; RealType &gt;</type>
      <name>V</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a3e19def695dcd6f330422bb406b95bad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; RealType &gt;</type>
      <name>Lambda</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a266d678bd1e680700634130efa232a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; int &gt;</type>
      <name>FreeLambda</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4c4ef025794bc69cd6be5022d2dc2422</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; RealType &gt;</type>
      <name>Uk</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4c988842a829353985930a81fff540ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; PosType &gt;</type>
      <name>dUk</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a27e598cfac066baecff31473a6c6bd27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; RealType &gt;</type>
      <name>d2Uk</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0d3c1101001062945ec73cf01b7ee1f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; RealType &gt;</type>
      <name>curLap</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a225630de6c2b1e6893d259e8f1acf0f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; RealType &gt;</type>
      <name>tLap</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a88e157939b37285643ef8d448d00a76e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; PosType &gt;</type>
      <name>curGrad</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa5c24d0e889adf9ead10085ea6174ce6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; PosType &gt;</type>
      <name>tGrad</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5e9fbd6a94c23227c4d65f9cb1997ecf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; RealType &gt;</type>
      <name>curV</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a432e85035a647c63b0c3c4ea71be9303</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; RealType &gt;</type>
      <name>delV</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a39608c39b329b4508293ac2e610a338d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; RealType &gt;</type>
      <name>curVal</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a30b8f1a68f83ef31c117c506264f9598</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType *</type>
      <name>FirstAddressOfdY</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8fffe0143a90230fc18ed6dd7857a9a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType *</type>
      <name>LastAddressOfdY</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a692ee9a579db66df144fb21c718b3717</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType *</type>
      <name>FirstAddressOfgU</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aedbd5cbd4a7cad0182c4e7b950905f08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType *</type>
      <name>LastAddressOfgU</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8f164a0bd89497dd7e5c6fb863892b87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BasisSetType *</type>
      <name>GeminalBasis</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5a63be4a83a645af9577d9d1adf9914d</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::ThreeBodyGeminal</name>
    <filename>a00143.html</filename>
    <anchor>a01531</anchor>
    <base>qmcplusplus::OrbitalBase</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>checkInVariables</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>adc2681d8748c0b42a2ffa45d21c7b466</anchor>
      <arglist>(opt_variables_type &amp;active)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa3438cc415984cdefb08b05f9ba36bc3</anchor>
      <arglist>(const opt_variables_type &amp;active)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resetParameters</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8c0c8f47cc4e0adc97b2a42f11223257</anchor>
      <arglist>(const opt_variables_type &amp;active)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reportStatus</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4aa248797e96765d158f7fa96e50cb56</anchor>
      <arglist>(ostream &amp;os)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab15b21e79332cb44a36055f19b793c39</anchor>
      <arglist>(ParticleSet &amp;P)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>acceptMove</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae4826eec3a88b0d563e6cc23df08e538</anchor>
      <arglist>(ParticleSet &amp;P, int iat)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>restore</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7456d5b342356a9cbdbc14755687f78f</anchor>
      <arglist>(int iat)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ValueType</type>
      <name>ratio</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a2b9ca75c835b615e5525d7e0b0d501f4</anchor>
      <arglist>(ParticleSet &amp;P, int iat)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OrbitalBasePtr</type>
      <name>makeClone</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab68f5027a5eee70c7e4e130cfa9aab1b</anchor>
      <arglist>(ParticleSet &amp;tqp) const </arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::TwoBodyJastrow</name>
    <filename>a00143.html</filename>
    <anchor>a01535</anchor>
    <templarg></templarg>
    <templarg>SharedFunction</templarg>
    <base>qmcplusplus::OrbitalBase</base>
    <member kind="typedef">
      <type>FT</type>
      <name>FuncType</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a617b482486e44becbde6ea4cf2c96f16</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TwoBodyJastrow</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7be328999c58312c5c76473bb6673375</anchor>
      <arglist>(ParticleSet &amp;p, DistanceTableData *dtable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TwoBodyJastrow</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a30d8814404bc666a7c88597056a43276</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluateLog</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a39920a87acab8d83f83d29733aaabd35</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a17a690a835b951b7cb5ec17d890a1e2b</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5e4a7bd7e23a6beab0d8bc131be6ffc4</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad4ac6ecacd80d95941026660c9799fd0</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>logRatio</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af6fa7f27fa33e00e9097169c82dff776</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4fad6e178271bda6f6e70a5965041472</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af79a1f1637e80a729043600a7656054d</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aeba37f5a7f9e1c209be41e1f8c2d316d</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>registerData</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a3e4ada162ce7a9b5fdeced0370ef35b6</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>updateBuffer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae2ffa3590490396557c0ad8ab6f24e68</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5261ed49b5195980c91c0024b860fdb2</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>abe1685352426b81dad951939f973a2ff</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa6a055fab7fdd044a7af0f500cccbe86</anchor>
      <arglist>(WalkerSetRef &amp;W, ValueVectorType &amp;psi, WalkerSetRef::WalkerGradient_t &amp;G, WalkerSetRef::WalkerLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; FT * &gt;</type>
      <name>F</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af45b5a2c3984028fafeca7ff2d413ed2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a53956c224bd49abff541a1a7c2ad305d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>N</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7722c8ecbb62d99aee7ce68b1752f337</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NN</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a13fa86a226aeccab13ef11a89ebb97a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType</type>
      <name>DiffVal</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>abd8f039927a376821a21b4859f45a5e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType</type>
      <name>DiffValSum</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a66a3310567e558ce30966f50d0d9a299</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueVectorType</type>
      <name>U</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aecce1a86932f62cb0eeaa03dcf6bf50d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueVectorType</type>
      <name>d2U</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aee713bcb2bdb9a51ac81d562124aecd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueVectorType</type>
      <name>curLap</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a74d993dd9c24a2641f9d3a0306b7e15a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueVectorType</type>
      <name>curVal</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a479113aff75ae3223795804a0c9efc9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GradVectorType</type>
      <name>dU</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>add95eaeac2cb0bee0fd7af07d3945a68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GradVectorType</type>
      <name>curGrad</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a47bdbe2582c6f0f13b3e5fda042cbcf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType *</type>
      <name>FirstAddressOfdU</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>adf5a116ad0cb788b7bc63b76c28f4b48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType *</type>
      <name>LastAddressOfdU</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a2aa6d32af56fdc81799bac6f1627624e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; int &gt;</type>
      <name>PairID</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0681630bcbf9bbc04e840b219fe6be11</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::TwoBodyJastrow&lt; FT, false &gt;</name>
    <filename>a00143.html</filename>
    <anchor>a01536</anchor>
    <templarg></templarg>
    <base>qmcplusplus::OrbitalBase</base>
    <member kind="typedef">
      <type>FT</type>
      <name>FuncType</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a617b482486e44becbde6ea4cf2c96f16</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TwoBodyJastrow</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7be328999c58312c5c76473bb6673375</anchor>
      <arglist>(ParticleSet &amp;p, DistanceTableData *dtable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TwoBodyJastrow</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a30d8814404bc666a7c88597056a43276</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluateLog</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a39920a87acab8d83f83d29733aaabd35</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a17a690a835b951b7cb5ec17d890a1e2b</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5e4a7bd7e23a6beab0d8bc131be6ffc4</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad4ac6ecacd80d95941026660c9799fd0</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>logRatio</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af6fa7f27fa33e00e9097169c82dff776</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4fad6e178271bda6f6e70a5965041472</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af79a1f1637e80a729043600a7656054d</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aeba37f5a7f9e1c209be41e1f8c2d316d</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>registerData</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a3e4ada162ce7a9b5fdeced0370ef35b6</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>updateBuffer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae2ffa3590490396557c0ad8ab6f24e68</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5261ed49b5195980c91c0024b860fdb2</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>abe1685352426b81dad951939f973a2ff</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa6a055fab7fdd044a7af0f500cccbe86</anchor>
      <arglist>(WalkerSetRef &amp;W, ValueVectorType &amp;psi, WalkerSetRef::WalkerGradient_t &amp;G, WalkerSetRef::WalkerLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="variable">
      <type>FT</type>
      <name>F</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a365100cb2f87ebab190bc4ac3bca3d99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a53956c224bd49abff541a1a7c2ad305d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>N</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7722c8ecbb62d99aee7ce68b1752f337</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NN</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a13fa86a226aeccab13ef11a89ebb97a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType</type>
      <name>DiffVal</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>abd8f039927a376821a21b4859f45a5e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType</type>
      <name>DiffValSum</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a66a3310567e558ce30966f50d0d9a299</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueVectorType</type>
      <name>U</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aecce1a86932f62cb0eeaa03dcf6bf50d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueVectorType</type>
      <name>d2U</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aee713bcb2bdb9a51ac81d562124aecd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueVectorType</type>
      <name>curLap</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a74d993dd9c24a2641f9d3a0306b7e15a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueVectorType</type>
      <name>curVal</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a479113aff75ae3223795804a0c9efc9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GradVectorType</type>
      <name>dU</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>add95eaeac2cb0bee0fd7af07d3945a68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GradVectorType</type>
      <name>curGrad</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a47bdbe2582c6f0f13b3e5fda042cbcf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType *</type>
      <name>FirstAddressOfdU</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>adf5a116ad0cb788b7bc63b76c28f4b48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType *</type>
      <name>LastAddressOfdU</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a2aa6d32af56fdc81799bac6f1627624e</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::TwoBodyJastrow&lt; FT, true &gt;</name>
    <filename>a00143.html</filename>
    <anchor>a01537</anchor>
    <templarg></templarg>
    <base>qmcplusplus::OrbitalBase</base>
    <member kind="typedef">
      <type>FT</type>
      <name>FuncType</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a617b482486e44becbde6ea4cf2c96f16</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TwoBodyJastrowOrbital</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4008fb4146ae603b74cf19b9af4b124b</anchor>
      <arglist>(ParticleSet &amp;p, int tid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TwoBodyJastrowOrbital</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a6914a04481f481879687936352e8df72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>afc240af166cfa1be747a1ddf159e007e</anchor>
      <arglist>(ParticleSet &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFunc</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac882239a96b1b886b014f6afd37b4cde</anchor>
      <arglist>(int ia, int ib, FT *j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportStatus</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0a144256f92f2fa9e13e840bc30baef7</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aee6c98df74fd951c23aedb0d38625d4e</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a17a690a835b951b7cb5ec17d890a1e2b</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5e4a7bd7e23a6beab0d8bc131be6ffc4</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_ratios</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0afd740894bec6ecb30956568b7deeeb</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; ValueType &gt; &amp;ratios)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad4ac6ecacd80d95941026660c9799fd0</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>GradType</type>
      <name>evalGrad</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a178607284b7ab1e4c389fce8e0c80de3</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratioGrad</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af21351a5f07bfcec09d2f2c85c24ffee</anchor>
      <arglist>(ParticleSet &amp;P, int iat, GradType &amp;grad_iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4fad6e178271bda6f6e70a5965041472</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af79a1f1637e80a729043600a7656054d</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aeba37f5a7f9e1c209be41e1f8c2d316d</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateLogAndStore</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af2729bf726a29202c501a093cec75761</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>registerData</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a6c52a19e935c4f5e9bc363f535a1eb58</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>updateBuffer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a90a7c6c91ae13b2d7141fc8d1315d8d8</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf, bool fromscratch=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5261ed49b5195980c91c0024b860fdb2</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a058a5a1e24105137f5509a585419d0ef</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>OrbitalBasePtr</type>
      <name>makeClone</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab68f5027a5eee70c7e4e130cfa9aab1b</anchor>
      <arglist>(ParticleSet &amp;tqp) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFrom</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af1a7c966102d2128341c24cf920adc49</anchor>
      <arglist>(const OrbitalBase &amp;old)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>ChiesaKEcorrection</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a3d263f59a04f09512dc371881aa3808f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finalizeOptimization</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a48d91310b053ab96442a62668825b5cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>KECorrection</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a414075e013df97571266ce3cd0d6b0ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; FT * &gt;</type>
      <name>F</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af45b5a2c3984028fafeca7ff2d413ed2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>N</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7722c8ecbb62d99aee7ce68b1752f337</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NN</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a13fa86a226aeccab13ef11a89ebb97a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumGroups</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>abe48fe1d890e3822a6889caa9b3f99b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>TaskID</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae72e52383f4f7e13a1e0ae21346f07e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a53956c224bd49abff541a1a7c2ad305d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>DiffVal</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a02b7473369de9fd01b0fc872b3fd36f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>DiffValSum</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a9e21b4f663096af7e56903799492a832</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleAttrib&lt; RealType &gt;</type>
      <name>U</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5b43bd96312d140cb8feaead0dcf7ded</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleAttrib&lt; RealType &gt;</type>
      <name>d2U</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae2a389d37b3a24fd59adba99921fd768</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleAttrib&lt; RealType &gt;</type>
      <name>curLap</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad0aa9ebb71da5b47a855c04a7fc64298</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleAttrib&lt; RealType &gt;</type>
      <name>curVal</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af288489de344bff57b2a0b5445ef5ab9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleAttrib&lt; PosType &gt;</type>
      <name>dU</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a59f58fa10257e6758df81fdf1df34017</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleAttrib&lt; PosType &gt;</type>
      <name>curGrad</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a6bf6d5c80f047bf72a7e2b855820fabd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleAttrib&lt; PosType &gt;</type>
      <name>curGrad0</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a78a0733444a7b852ee570aa05445d9f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType *</type>
      <name>FirstAddressOfdU</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a77538c1503ee95a4637198725fe78fb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType *</type>
      <name>LastAddressOfdU</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa28d1447dcf13740b471c860cca9db18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix&lt; int &gt;</type>
      <name>PairID</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0681630bcbf9bbc04e840b219fe6be11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, FT * &gt;</type>
      <name>J2Unique</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae0d2580a8ea1715ad680db498ff3eb21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleSet *</type>
      <name>PtclRef</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a810b9c6f4d1683f2d98db6a6ef6659c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>FirstTime</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af1d18579862309ebb383f534ece9efc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>KEcorr</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a92724b9302c290622038e20adb11a024</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::TwoBodyJastrowOrbital</name>
    <filename>a00143.html</filename>
    <anchor>a01538</anchor>
    <templarg>FT</templarg>
    <base>qmcplusplus::QMCTraits</base>
  <compound kind="struct">
    <name>qmcplusplus::OrbitalBase</name>
    <filename>a00143.html</filename>
    <anchor>a01499</anchor>
  </compound>
  <compound kind="group">
    <name>WFSBuilder</name>
    <title>Orbital builder group</title>
    <filename>a00006.html</filename>
    <class kind="class">qmcplusplus::AGPDeterminantBuilder</class>
    <class kind="class">qmcplusplus::ThreeBodyGeminalBuilder</class>
    <class kind="class">qmcplusplus::ThreeBodyPadeBuilder</class>
    <class kind="class">qmcplusplus::OrbitalBuilderBase</class>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>AGPDeterminantBuilder</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>ad736da8701ccafb5be5849a5ae4d87bc</anchor>
      <arglist>(ParticleSet &amp;els, TrialWaveFunction &amp;wfs, PtclPoolType &amp;pset)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrbitalBuilderBase</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a9f985ee3c37432ea164b55dec17cdfe6</anchor>
      <arglist>(ParticleSet &amp;p, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OrbitalBuilderBase</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a8bfb469795106fd6e6487d3b1ae50fc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MPIObjectBase</name>
      <anchorfile>a00389.html</anchorfile>
      <anchor>a372021b709c76b9aa204271c71a2ce0f</anchor>
      <arglist>(Communicate *c=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MPIObjectBase</name>
      <anchorfile>a00389.html</anchorfile>
      <anchor>ab3578a906f31202dbbc4604276a85078</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initCommunicator</name>
      <anchorfile>a00389.html</anchorfile>
      <anchor>aec2c5fb555d530bf3fd1b1b50c9d524d</anchor>
      <arglist>(Communicate *c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rank</name>
      <anchorfile>a00389.html</anchorfile>
      <anchor>ae59754aa54d2ee843c39aebc1de9cfb1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGroupID</name>
      <anchorfile>a00389.html</anchorfile>
      <anchor>a3f86cb4ce4f7b1107c8d40f61e5696a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Communicate *</type>
      <name>getCommunicator</name>
      <anchorfile>a00389.html</anchorfile>
      <anchor>ac3d9d4de08ba9a40aece723ccb70481a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mpi_comm_type</type>
      <name>getMPI</name>
      <anchorfile>a00389.html</anchorfile>
      <anchor>afe69d318caf6545548fa9658ab9e1284</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_manager</name>
      <anchorfile>a00389.html</anchorfile>
      <anchor>a7c911a20aeef19fe3d245ca9b1884c92</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReportLevel</name>
      <anchorfile>a00389.html</anchorfile>
      <anchor>a59fa94e05e72ba346341da28eb3d8e94</anchor>
      <arglist>(int level=1)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>a00389.html</anchorfile>
      <anchor>a8382bbe4394bd74b30c600308a2194cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>a00389.html</anchorfile>
      <anchor>a82bfc253de38cf96831473fb10689d2e</anchor>
      <arglist>(const std::string &amp;aname)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>createAGP</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a24eec2501f7e153583b532fda4700f54</anchor>
      <arglist>(BasisBuilderT *abuilder, xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PtclPoolType &amp;</type>
      <name>ptclPool</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a4fc7c3d5848a9235a0cf8803ff1f9fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BasisSetFactory *</type>
      <name>myBasisSetFactory</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>aa1ba8912516240739c8a6a5924b22407</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AGPDeterminant *</type>
      <name>agpDet</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a045c5343ad044d4d65b913ddd769fbec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>string</type>
      <name>funcOpt</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>ab28c5cc2b5f92fdf98298552021d3b7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>string</type>
      <name>transformOpt</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a0afed0c9b82a9448532799af87276f53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleSet &amp;</type>
      <name>targetPtcl</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a1a952580e121ccf8f929cadf8d1e0a5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TrialWaveFunction &amp;</type>
      <name>targetPsi</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a768b9b0b02d5a2b249b281fe0c8cd0a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>xmlNodePtr</type>
      <name>myNode</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>ade03b7f5a1fd4d07359c6e19af6db843</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; OrbitalBuilderBase * &gt;</type>
      <name>Children</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>aa52ffa542d702999268081188fd92e4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ReportLevel</name>
      <anchorfile>a00389.html</anchorfile>
      <anchor>a4508e8abc214ee5db33c185fd6594709</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Communicate *</type>
      <name>myComm</name>
      <anchorfile>a00389.html</anchorfile>
      <anchor>a6e290154265339db27f9a9bef2bd3aab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>ClassName</name>
      <anchorfile>a00389.html</anchorfile>
      <anchor>a995b081a11fae5fed318f8d6afa2dc99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myName</name>
      <anchorfile>a00389.html</anchorfile>
      <anchor>a2b080b4ea635d590ce7028ceda1342de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TrialWaveFunction::RealType</type>
      <name>RealType</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a50e2fafe4ea821f63ca795718953002d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TrialWaveFunction::ValueType</type>
      <name>ValueType</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a740118a5a8243a5e314b8060106ae65f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TrialWaveFunction::PosType</type>
      <name>PosType</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a6a2f445865c3dc64a32fe22deeee179e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TrialWaveFunction::GradType</type>
      <name>GradType</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>afe02dfba84d4d0ac1d0babb3fbefc489</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>map&lt; string, ParticleSet * &gt;</type>
      <name>PtclPoolType</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a0878154607cbe00d8a425a977401e290</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::AGPDeterminantBuilder</name>
    <filename>a00006.html</filename>
    <anchor>a01425</anchor>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>ThreeBodyGeminalBuilder</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a26a34d7b65870cfe193b4d93f54e53da</anchor>
      <arglist>(ParticleSet &amp;els, TrialWaveFunction &amp;wfs, ParticleSet &amp;ions)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleSet &amp;</type>
      <name>sourcePtcl</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a521b26e24d441b710c7b5668002ed60f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BasisSetBuilder *</type>
      <name>basisBuilder</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>ae6eeae2fff5ad1698a243fd3cd89364c</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::ThreeBodyGeminalBuilder</name>
    <filename>a00006.html</filename>
    <anchor>a01532</anchor>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>ThreeBodyPadeBuilder</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a79e1200e666f26bc774962e22d826155</anchor>
      <arglist>(ParticleSet &amp;els, TrialWaveFunction &amp;wfs, ParticleSet &amp;ions)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ThreeBodyPade *</type>
      <name>J3</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>ab54c870432ae6eab34a70b519bf476f8</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::ThreeBodyPadeBuilder</name>
    <filename>a00006.html</filename>
    <anchor>a01533</anchor>
    <base>qmcplusplus::MPIObjectBase</base>
    <member kind="typedef">
      <type>Communicate::mpi_comm_type</type>
      <name>mpi_comm_type</name>
      <anchorfile>a00389.html</anchorfile>
      <anchor>a395de6038e5051837df3e6dbe94784b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Communicate::intra_comm_type</type>
      <name>intra_comm_type</name>
      <anchorfile>a00389.html</anchorfile>
      <anchor>a751618a323a265e911c3c46655cf95b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>put</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>ad5f66fd1dbe5e3c62ee5f7f326446dee</anchor>
      <arglist>(xmlNodePtr cur)=0</arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::OrbitalBuilderBase</name>
    <filename>a00006.html</filename>
    <anchor>a01500</anchor>
  </compound>
  <compound kind="group">
    <name>MBWfs</name>
    <title>Many-body wave function group</title>
    <filename>a00609.html</filename>
    <class kind="class">qmcplusplus::TrialWaveFunction</class>
    <base>qmcplusplus::MPIObjectBase</base>
    <member kind="typedef">
      <type>OrbitalBase::RealType</type>
      <name>RealType</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a6a83deb90d5857d4890b2890646db240</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalBase::ValueType</type>
      <name>ValueType</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a4dc2f86c444fc6ee7392138c359db75c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalBase::PosType</type>
      <name>PosType</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>accce458477f3728b007f670b79bfb705</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalBase::GradType</type>
      <name>GradType</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>adc653d1a7dc6261113c865f840b5d08e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalBase::BufferType</type>
      <name>BufferType</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a26556ef873317fbfb6190f24c6f9f49c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrialWaveFunction</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a4a6d47c0520b0dcb580579164b461be9</anchor>
      <arglist>(Communicate *c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TrialWaveFunction</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>acd526c75e04adef20acc103813f697fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>ab8e4e3e2a7bf18888b71bdf9dda0770b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getPhase</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a3f51c1093920a37fc034ebc03ed0db4f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getLogs</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a73406ef390c841e972af69fff6644c62</anchor>
      <arglist>(std::vector&lt; RealType &gt; &amp;lvals)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPhases</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a0454031f00bd0482530f0661e2da4eea</anchor>
      <arglist>(std::vector&lt; RealType &gt; &amp;pvals)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getAlternatePhaseDiff</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a6c055dc195e0d8526b8b8526dbf51993</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getAlternatePhaseDiff</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a9345b83eb8076e816e872335e7e35d5e</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>alternateGrad</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>af32081a8b79e7f736b54445a719717af</anchor>
      <arglist>(ParticleSet::ParticleGradient_t &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getPhaseDiff</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a854eb5b2cb2f80e1f69eed1d7ab28f20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetPhaseDiff</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>afb6c51af72042a2cdd0189c7b96d7744</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getLogPsi</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a22893814ccfe0e2f7a834b6e41db3cc7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOrbital</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a7ae02bae49e02ac017cffb239fb03192</anchor>
      <arglist>(OrbitalBase *aterm, const string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startOptimization</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a8bb40d70af3f37d16a3e8f6d9db65522</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopOptimization</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>af22b53cc33b8d3ed48d06d12faf00fd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>ac66948db629989be1d9335e1d48dfeb0</anchor>
      <arglist>(opt_variables_type &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>ac9471334d6ff888e194a823d9f9061ae</anchor>
      <arglist>(const opt_variables_type &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportStatus</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a0a144256f92f2fa9e13e840bc30baef7</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>aeb5b0b2e102e6832ecd2719efce8c854</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLogOnly</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a39f511763a3ec475d2efe40cdcc6761f</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>ab43e4dfe49dc507fdf56522507320845</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateDeltaLog</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a4db1ef626c293e2db61bec7a2706eeda</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateDeltaLog</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>ae297c1ed9770cd60be9d90664b6f4872</anchor>
      <arglist>(ParticleSet &amp;P, RealType &amp;logpsi_fixed, RealType &amp;logpsi_opt, ParticleSet::ParticleGradient_t &amp;fixedG, ParticleSet::ParticleLaplacian_t &amp;fixedL)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateDeltaLog</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a99e5c79ef539ad18cb5104e7e31fe0b5</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateDeltaLog</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>abf0fd6f92cf3cffa80b03bda1c254224</anchor>
      <arglist>(ParticleSet &amp;P, RealType &amp;logpsi_fixed, RealType &amp;logpsi_opt, ParticleSet::ParticleGradient_t &amp;fixedG, ParticleSet::ParticleLaplacian_t &amp;fixedL, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>ratio</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>ab6d536de18dacb43c4815072fa6377e5</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>ratioVector</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>ac02b1c54f647d9dce72e26edfbed132e</anchor>
      <arglist>(ParticleSet &amp;P, int iat, std::vector&lt; RealType &gt; &amp;ratios)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>alternateRatio</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>ab9361d74710de829c742515ab23fd39f</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a77f5337d013902172ea323f282da8711</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>ratio</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a811a6968b40f1b740e32a2be29746831</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>GradType</type>
      <name>evalGradSource</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a29ae9e76a01fd7650ec22ca9b4968c6f</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet &amp;source, int iat)</arglist>
    </member>
    <member kind="function">
      <type>GradType</type>
      <name>evalGradSource</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a1c252b33f5c6e8d46c7a0b72f45ae988</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet &amp;source, int iat, TinyVector&lt; ParticleSet::ParticleGradient_t, OHMMS_DIM &gt; &amp;grad_grad, TinyVector&lt; ParticleSet::ParticleLaplacian_t, OHMMS_DIM &gt; &amp;lapl_grad)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>ratioGrad</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>ae8ba0701f5f61e8d4ad4404da822a319</anchor>
      <arglist>(ParticleSet &amp;P, int iat, GradType &amp;grad_iat)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>alternateRatioGrad</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a72d4c5896542f91378320f229e333e8f</anchor>
      <arglist>(ParticleSet &amp;P, int iat, GradType &amp;grad_iat)</arglist>
    </member>
    <member kind="function">
      <type>GradType</type>
      <name>evalGrad</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a21908fdea476b376de7668c6ccb3d50d</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>GradType</type>
      <name>alternateEvalGrad</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a7654e25b4f480a95d9468bda630af69e</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rejectMove</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a9bd1c1fa5d70322d33e5c129898c099c</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>af79a1f1637e80a729043600a7656054d</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>registerData</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>aeae28d39a96575b9f517f47a967aa25d</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>registerDataForDerivatives</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a23869b8d559ca2395e51309389ca933c</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf, int storageType=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>memoryUsage_DataForDerivatives</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a02993cee04749a8778c5844e90ac1e6b</anchor>
      <arglist>(ParticleSet &amp;P, long &amp;orbs_only, long &amp;orbs, long &amp;invs, long &amp;dets)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>updateBuffer</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a0c41b1620b9f9e45ca8e2c2a782b8e83</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf, bool fromscratch=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a873b86d22a6078397525e16eae04ed7c</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>afe5e54c7c56e7d7e29833ab6b8741777</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dumpToBuffer</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a379bc877b4e69c1cf725ff10b23104af</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dumpFromBuffer</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>af360c9711d3bb957a9737df029666815</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>KECorrection</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>aca0a0cf6b490ea4b7d63d3877368337e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateDerivatives</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a4081fa99703a9ef6d877662962970483</anchor>
      <arglist>(ParticleSet &amp;P, const opt_variables_type &amp;optvars, vector&lt; RealType &gt; &amp;dlogpsi, vector&lt; RealType &gt; &amp;dhpsioverpsi, bool project=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateDerivatives</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a7f5b15f485d513b743c7a321e83a2173</anchor>
      <arglist>(ParticleSet &amp;P, const opt_variables_type &amp;optvars, vector&lt; RealType &gt; &amp;dlogpsi, vector&lt; RealType &gt; &amp;dhpsioverpsi, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverse</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a310c0bebc002158f5646a91d60e4dc89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeTempP</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>abe6ce392aedc409e82aeead1c78fffe3</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>TrialWaveFunction *</type>
      <name>makeClone</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>ab74cde91e9c762afb72193e425fd84e1</anchor>
      <arglist>(ParticleSet &amp;tqp) const </arglist>
    </member>
    <member kind="function">
      <type>vector&lt; OrbitalBase * &gt; &amp;</type>
      <name>getOrbitals</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>ab79bc5a8c5893c74f02630d2a3d33d0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_ratios</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a0afd740894bec6ecb30956568b7deeeb</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; ValueType &gt; &amp;ratios)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTwist</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>ad46c8718f3aa811765818728a1ba3092</anchor>
      <arglist>(vector&lt; RealType &gt; t)</arglist>
    </member>
    <member kind="function">
      <type>const vector&lt; RealType &gt;</type>
      <name>twist</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a014c6e1241e4468e87d7029d0a8d3c24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMassTerm</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a81c28ea2400b247d63a0c126e318f4da</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>G</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a2e80ca05de55af93652e6a81ef04d683</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleLaplacian_t</type>
      <name>L</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>ad63a0bd353ede51d1f82c52e40822874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CoefficientHolder</type>
      <name>coefficientHistory</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a69065ecfd71a0b07f8e08fe97860644c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TrialWaveFunction</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>ac1b1dac0c52536d45702adcc6843f657</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>Ordered</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a4fcf26d6ca10a6978ecf1bb249fad88e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumPtcls</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>ac696dd2e9e407dabdbda0ce636a569e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>TotalDim</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a7b6cf45344f58da10f7d943f85eeb5ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>WorkingPtcl</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a39784bce14544cc5743d48b87455bc5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>BufferCursor</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a51d01018f089fc1cf8cd51d873c9990f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>PhaseValue</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a8c6f041cb32d2103aa8c98a450047a6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>PhaseDiff</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>ae641786a0cec74a2da9eac0b96d4506f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>LogValue</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a7e1662905b39866a7a2eff4b3e5468dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>OverM</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a432ebd6fcd98fe44e6e6736034f60087</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; OrbitalBase * &gt;</type>
      <name>Z</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>ab8f8be63b66b4b63db7e50ab44aadc10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>delta_G</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>ad840f0e0142cbbd64446e5ee636798b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet::ParticleLaplacian_t</type>
      <name>delta_L</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>aad080b1cde29f3ec83ff3289831368b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet *</type>
      <name>tempP</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a2f149f863021cf78cf08d2ca8e592197</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; NewTimer * &gt;</type>
      <name>myTimers</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a7f1b158b9dd94f7e78276fafc68f365a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>myTwist</name>
      <anchorfile>a00609.html</anchorfile>
      <anchor>a7636de131597b79c9632716ea29de9d3</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::TrialWaveFunction</name>
    <filename>a00609.html</filename>
    <anchor>a01534</anchor>
  </compound>
  <compound kind="group">
    <name>Functions</name>
    <title>to get/put observables</title>
    <filename>a01419.html</filename>
    <member kind="function">
      <type>int</type>
      <name>addObservables</name>
      <anchorfile>a01419.html</anchorfile>
      <anchor>ga3457dc981999aab866e4e5ba89524617</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerObservables</name>
      <anchorfile>a01419.html</anchorfile>
      <anchor>gab5eebbc13983223732aff2b7bcb7c4b3</anchor>
      <arglist>(vector&lt; observable_helper * &gt; &amp;h5desc, hid_t gid) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerCollectables</name>
      <anchorfile>a01419.html</anchorfile>
      <anchor>ga6f794b20e33524c704dcc03d66ad66ed</anchor>
      <arglist>(vector&lt; observable_helper * &gt; &amp;h5desc, hid_t gid) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>startIndex</name>
      <anchorfile>a01419.html</anchorfile>
      <anchor>ga46b841bb7d713ac72130034a9b55af17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sizeOfObservables</name>
      <anchorfile>a01419.html</anchorfile>
      <anchor>gac0a3e93e25e17c7f10ec7f5113f38542</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sizeOfCollectables</name>
      <anchorfile>a01419.html</anchorfile>
      <anchor>gadbc322c202f46176d3a213307d45d2ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getObservable</name>
      <anchorfile>a01419.html</anchorfile>
      <anchor>ga0215d75dc2340a009cd1f25478a94c93</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getObservable</name>
      <anchorfile>a01419.html</anchorfile>
      <anchor>gaf7887b56ccb0bed9da56abc012578f7b</anchor>
      <arglist>(string Oname) const </arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>getObservableName</name>
      <anchorfile>a01419.html</anchorfile>
      <anchor>ga71ccd6f79546c7133b290a33e0c9ce91</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveProperty</name>
      <anchorfile>a01419.html</anchorfile>
      <anchor>ga1e303d74076a988d3747d9b39049b272</anchor>
      <arglist>(IT first)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>hamiltonian</name>
    <title>Hamiltonian group</title>
    <filename>a00032.html</filename>
    <class kind="struct">qmcplusplus::BareKineticEnergy</class>
    <class kind="struct">qmcplusplus::CoulombPBCAA</class>
    <class kind="struct">qmcplusplus::CoulombPBCAB</class>
    <class kind="struct">qmcplusplus::GaussianPot</class>
    <class kind="struct">qmcplusplus::HardSphere</class>
    <class kind="struct">qmcplusplus::HeePotential</class>
    <class kind="struct">qmcplusplus::HeePotential_tail</class>
    <class kind="struct">qmcplusplus::HePressure</class>
    <class kind="struct">qmcplusplus::HeSAPT_smoothed_phy</class>
    <class kind="struct">qmcplusplus::HeSAPT_smoothed_aux</class>
    <class kind="struct">qmcplusplus::HFDBHE_smoothed_phy</class>
    <class kind="struct">qmcplusplus::HFDBHE_smoothed_aux</class>
    <class kind="struct">qmcplusplus::HFDHE2_Moroni1995_phy</class>
    <class kind="struct">qmcplusplus::HFDHE2Potential</class>
    <class kind="struct">qmcplusplus::HFDHE2Potential_tail</class>
    <class kind="struct">qmcplusplus::HusePot</class>
    <class kind="struct">qmcplusplus::JelliumPotential</class>
    <class kind="struct">qmcplusplus::LennardJones_smoothed_phy</class>
    <class kind="struct">qmcplusplus::LennardJones_smoothed_aux</class>
    <class kind="struct">qmcplusplus::LocalCorePolPotential</class>
    <class kind="struct">qmcplusplus::LocalECPotential</class>
    <class kind="struct">qmcplusplus::LocalPPotential</class>
    <class kind="struct">qmcplusplus::ModPoschlTeller</class>
    <class kind="class">qmcplusplus::MPC</class>
    <class kind="struct">qmcplusplus::NonLocalECPotential</class>
    <class kind="struct">qmcplusplus::OscillatoryPotential</class>
    <class kind="struct">qmcplusplus::Pressure</class>
    <class kind="struct">qmcplusplus::QMCHamiltonianBase</class>
    <class kind="class">qmcplusplus::VHXC</class>
    <member kind="function">
      <type></type>
      <name>HFDBHE_smoothed_phy</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>gacb9a0081094ce335acd65e423083d0ef</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>BareKineticEnergy</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a0ce99fd37fbdf859a9202c6cfee39043</anchor>
      <arglist>(RealType m=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BareKineticEnergy</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a82f93fa7cad023428e40d34d8cf8e8ed</anchor>
      <arglist>(ParticleSet &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BareKineticEnergy</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a1fd415d02a337145dda8b1a67eeba061</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a5c48281949f42f6b68e628f33c3ee980</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>registerData</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a9d615d237ace0de1eea40231a399d578</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>updateBuffer</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a7d2310b390776c60d0d41d60e7820cdb</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ac2b64ad7f8a9e83ed74f5ed98efae78c</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyToBuffer</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ad8f6db641b2101970e7c9272f71bfba6</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluatePbyP</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a9959fcb21fe743cd247d88b427df98d1</anchor>
      <arglist>(ParticleSet &amp;P, int active)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae6546e37901ba4bbe82343f0bb0aaa53</anchor>
      <arglist>(xmlNodePtr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8c7995fca4e1c327502fe29d4633430e</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QMCHamiltonianBase</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a3cb2c19ab04aa97e1f292a3de30ca88d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~QMCHamiltonianBase</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a3eb71bc96784372dce0d3f223f27b522</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getMode</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ac094721f2cdad44acf84b6711c83e92c</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addValue</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a31ff8cb908d6772b4b7a664f60076db3</anchor>
      <arglist>(PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addObservables</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aa982ce54a5f45dadb213ac47a17a65b1</anchor>
      <arglist>(PropertySetType &amp;plist, BufferType &amp;collectables)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>registerObservables</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae6040275af4fed9ef9427ba82bdfdd59</anchor>
      <arglist>(vector&lt; observable_helper * &gt; &amp;h5desc, hid_t gid) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>registerCollectables</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a037bce24fb73c7d64564ce48b40f912e</anchor>
      <arglist>(vector&lt; observable_helper * &gt; &amp;h5desc, hid_t gid) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setObservables</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>abbe2be1266b3605ab9ff9f29366a86dc</anchor>
      <arglist>(PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParticlePropertyList</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a0228c113186b877fe0d7f78c594a67d6</anchor>
      <arglist>(PropertySetType &amp;plist, int offset)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHistories</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a6dd411ac9db6f96468d3b56bd5107951</anchor>
      <arglist>(Walker_t &amp;ThisWalker)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Return_t</type>
      <name>rejectedMove</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a29a2e75d3e824a02126687cf9a1f3a03</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Return_t</type>
      <name>getEnsembleAverage</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a3e6206f22181636c68d6efb421ef7119</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRandomGenerator</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>adf63b86888ef62c0a9a033c941f102fe</anchor>
      <arglist>(RandomGenerator_t *rng)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add2Hamiltonian</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ab7bcb6df40b2bc23cf600948bdab2b72</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;targetH)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setComputeForces</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ace78b6ebb12e99862c0980012184756f</anchor>
      <arglist>(bool compute)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>acceptMove</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a92d7e6c204e34ba67dc9766ebfee132c</anchor>
      <arglist>(int active)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rejectMove</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aafba47d0feb4add817984ea561e366e1</anchor>
      <arglist>(int active)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>SameMass</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a60dcff0e5bf58011cfc2ccd96f48df94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>M</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae5f3bdd417022ffe7c0853abbf604eda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>OneOver2M</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a3c2f0235e54e7f63ef5fe32bf05731e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; T &gt;</type>
      <name>MinusOver2M</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ab16d0063e6298596792b402f644102b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>Gtmp</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a32b837fe83f3cfd2334cf35b3fe28439</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleLaplacian_t</type>
      <name>Ltmp</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aff73be70b7336be6537a4ec16cb4e10e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bitset&lt; 8 &gt;</type>
      <name>UpdateMode</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a0b5fb017eae4eaac9949ab8040c10820</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>myIndex</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a144cfe5f3188584af7abb73a8689d92c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Dependants</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ab15b97d0c10861f598bbf57b92c5e6ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Value</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a962d8f6c5cbe32ebf28422eff61a23cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>NewValue</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ac75d1ea7374600135be22c0f18e19f65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticlePos_t</type>
      <name>IonForce</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a2dbc9451c8a2dd6ca461d80b6bb2d175</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Walker_t *</type>
      <name>tWalker</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae5dda4fbf54a1cd6a69913a352575d8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>myName</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a026e4fb2d632d768135cab0a3fb48cc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>depName</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a5c1e69b0efcf25bfa6c921c60b0b5a95</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PRIMARY</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af3520ff6d43011872bab77edd27d4de3a5ce2e4adeaefc771566d91471561dba4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>OPTIMIZABLE</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af3520ff6d43011872bab77edd27d4de3aff15735815010f4a650ebc01e87e6345</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RATIOUPDATE</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af3520ff6d43011872bab77edd27d4de3a5b95d345946f7e064dee30c9b55ce477</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PHYSICAL</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af3520ff6d43011872bab77edd27d4de3a1212ef902b38594c5e3a18a86ec90edc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>COLLECTABLE</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af3520ff6d43011872bab77edd27d4de3aafde8ec11e65058763c3daa782c8ed8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealType</type>
      <name>Return_t</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a3b99d9856b2bd79686973ed20f1b57d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleSet::Buffer_t</type>
      <name>BufferType</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aea8a04736b6896133231a0cc151f6c6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleSet::Walker_t</type>
      <name>Walker_t</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>abbc77657579efa0cd83de2b985f92476</anchor>
      <arglist></arglist>
    </member>
  <compound kind="struct">
    <name>qmcplusplus::BareKineticEnergy</name>
    <filename>a00032.html</filename>
    <anchor>a01431</anchor>
    <templarg></templarg>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <base>qmcplusplus::ForceBase</base>
    <member kind="typedef">
      <type>LRCoulombSingleton::LRHandlerType</type>
      <name>LRHandlerType</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8067976403b820c1de438b7ae6c830ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LRCoulombSingleton::GridType</type>
      <name>GridType</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a9fe512f54f433fd3e9e1047ff3454db5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LRCoulombSingleton::RadFunctorType</type>
      <name>RadFunctorType</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8142ab4aadc20734e945cff7c95c7595</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>QMCTraits::RealType</type>
      <name>real_type</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a7db9388c565de1400f96882483eae0c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CoulombPBCAA</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae72817b5a4577557b0a3987463a7218d</anchor>
      <arglist>(ParticleSet &amp;ref, bool active, bool computeForces=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CoulombPBCAA</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ab3019d8e5ade12c8a39077bbedbc7606</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a2ef77486457bacb9ce0ae09b7f45ccb5</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>registerData</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a21af508c328edbf2714d67373cf289a0</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>updateBuffer</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a3fac2097f012dce70cc445c50851029b</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a873b86d22a6078397525e16eae04ed7c</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyToBuffer</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ac7353636f007e8997714e3dc28001db4</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluatePbyP</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a2405db8e474f071c169cc93d8ccb9f76</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af32a5a4016a4cef2e4ebd4962a91ea64</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8c7995fca4e1c327502fe29d4633430e</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initBreakup</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a3830d6c9cec4b51ecb47cf561606901e</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evalSR</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a29b43d80abc11f75db91d1bdcdf3e800</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evalLR</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a11bf12c29e011bfe1a774de3edd77f01</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evalSRwithForces</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a63bc6a4a21495d89b933544b8c0bafce</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evalLRwithForces</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a75d4c61ae7df6a7eb2911953bded2547</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evalConsts</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae4c0b81c4b90b622750ce47c34d17edb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluateForPbyP</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a0f66e0d9a60fa4e230784ab6faf62392</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObservables</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a2a1ba7447d76a7353df776e71e48ed0b</anchor>
      <arglist>(PropertySetType &amp;plist, BufferType &amp;collectables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObservables</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae4b206ae54a98a3af6952165d2b61fc6</anchor>
      <arglist>(PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticlePropertyList</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a7a51ebc855f558bb099e23fc3386fd0d</anchor>
      <arglist>(PropertySetType &amp;plist, int offset)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>g</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a352aec4fcbd26f382f2ce3d7ccc71844</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVarReduction</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>ac5b5f49eff0082938d077c3b866616eb</anchor>
      <arglist>(real_type Rcut, int m, int numFuncs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForceBase</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a2eeac85b63ffeb0efaa8b4f6b70d944f</anchor>
      <arglist>(ParticleSet &amp;ions, ParticleSet &amp;elns)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ForceBase</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a475cdab3380ce885f7ac68ba5c4d92b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerObservablesF</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a446529f62026bfe567717a0d698a2a68</anchor>
      <arglist>(vector&lt; observable_helper * &gt; &amp;h5list, hid_t gid) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObservablesF</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>af8c7d770e07932e0bb2c5e62fc311c19</anchor>
      <arglist>(QMCTraits::PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObservablesF</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>af3e4f31e79e93d2c0fc13c110970663c</anchor>
      <arglist>(QMCTraits::PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticleSetF</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>aeadd0948c4c389921e9eee14c562a78d</anchor>
      <arglist>(QMCTraits::PropertySetType &amp;plist, int offset)</arglist>
    </member>
    <member kind="variable">
      <type>LRHandlerType *</type>
      <name>AA</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a082cceeff8b5748d2796f7042d57f860</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GridType *</type>
      <name>myGrid</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>acc3ec2d9f5aaef0116f866501d8b483e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RadFunctorType *</type>
      <name>rVs</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a5c10c66c150708fc461cdd9c6809e5f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>is_active</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a407c3efba665d276a38229f905bef352</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>FirstTime</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af1d18579862309ebb383f534ece9efc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumSpecies</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a44c62eda869b510a5d0b3fc8949a5265</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ChargeAttribIndx</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a1a30eec02790e7640f12326bd9b4b5c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>MemberAttribIndx</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a67535b7d01aab00f2ab73ebd13e7cc33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumCenters</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a660b39b9516b5c23ab7bb18a6be11e3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>myConst</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a6fcd0687afb3cfe4c9978944837e5932</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>myRcut</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a9e271efec01b8db7003a313e1567af62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>PtclRefName</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a63b70b33d4921dfa76296d1d585e8114</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Zat</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af7762484a9d91810382fd165c26cfaeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Zspec</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a983570ddbde484313fb74a37cb04169b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>NofSpecies</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a83b88e44b6f26f60fe7af93a52b484ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>SpeciesID</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aa3243b56fcf357b2d597c2e85c0cda41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; RealType &gt;</type>
      <name>SR2</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a2736d057d1ca7aa3ed885c2629e48f93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; RealType &gt;</type>
      <name>dSR</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a1e35878139cf8c270d7658f49eb085d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; ComplexType &gt;</type>
      <name>del_eikr</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aab7bb178eef72f9a151f57650e6a6c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>ComputeForces</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae0779aaf6de2e75977dcebeff494a280</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>MC0</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ad397c6b22d15acf5290c95abf3498c05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>FirstForceIndex</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>ac4a13c02f485e8d826c2bc4d29cbbb39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>myTableIndex</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>aa0e1a164ff81fc42ab4f688c6aeca19e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Nnuc</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a528d8272fc1bb454a4b7b22d09569a4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Nel</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a08a6a04e7b5620a6128074d5d35f7a9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>tries</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a04cecf6708b77deed43900afdf14e8d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>FirstTime</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>af1d18579862309ebb383f534ece9efc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>addionion</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a9ec80deb108156e8475facee7e38a6e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet &amp;</type>
      <name>Ions</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a95121fc6648a0bf2e00f464dd40f5ddd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticlePos_t</type>
      <name>forces</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a2bd161ed042541d87de802cdab12b581</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticlePos_t</type>
      <name>forces_IonIon</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>ae9f5c8cf6876a98497d7442e59419f78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>prefix</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>ab7b6fb49a3a178b1628690ad0f00927d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>pairName</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a572a00e468b815d682a2cd3481e494db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Rcut</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>ad73c36a2b679e0a0a5e1f1f840862a0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a742204794ea328ba293fe59cec79b990</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; real_type &gt;</type>
      <name>ck</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a36580e57fe4527b9b02d5453dbd917a8</anchor>
      <arglist></arglist>
    </member>
  <compound kind="struct">
    <name>qmcplusplus::CoulombPBCAA</name>
    <filename>a00032.html</filename>
    <anchor>a01435</anchor>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <base>qmcplusplus::ForceBase</base>
    <member kind="typedef">
      <type>LRCoulombSingleton::LRHandlerType</type>
      <name>LRHandlerType</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8067976403b820c1de438b7ae6c830ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LRCoulombSingleton::GridType</type>
      <name>GridType</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a9fe512f54f433fd3e9e1047ff3454db5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LRCoulombSingleton::RadFunctorType</type>
      <name>RadFunctorType</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8142ab4aadc20734e945cff7c95c7595</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CoulombPBCAB</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af206a7b62e12cb79495ee2e563068335</anchor>
      <arglist>(ParticleSet &amp;ions, ParticleSet &amp;elns, bool computeForces=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CoulombPBCAB</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ac61dfaaa5cd148aa0f52e31a6f03e648</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ad53521be36750e42c8807d785fbebcb6</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>registerData</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a1c0015b58dda38f97e808319f29213ca</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>updateBuffer</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aee4f2b5c6cd3c264bf6c62213489bf4c</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a873b86d22a6078397525e16eae04ed7c</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyToBuffer</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ac7353636f007e8997714e3dc28001db4</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluatePbyP</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a6028ce8f285375361753db0e32115690</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af32a5a4016a4cef2e4ebd4962a91ea64</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a5df09e537c6e0e8ecb15a64f5d244510</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initBreakup</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a3830d6c9cec4b51ecb47cf561606901e</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evalSR</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8117b4fc6b292f17c546f112b224a4ec</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evalLR</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a5ba40087397407d13bda26e5d3365db5</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evalSRwithForces</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aab10c1a4583e3c066f9611af2e266e46</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evalLRwithForces</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae8a547002a8d0df68a296939cea61bd6</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evalConsts</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aa4ea42807bc7df3f247992b791556e37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluateForPyP</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a0f32150704cdbde59f8d1cb074b5e65a</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a63e64ef7d869b88ab26fe3e3f78707b6</anchor>
      <arglist>(int groupID, RadFunctorType *ppot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObservables</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a2a1ba7447d76a7353df776e71e48ed0b</anchor>
      <arglist>(PropertySetType &amp;plist, BufferType &amp;collectables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObservables</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae4b206ae54a98a3af6952165d2b61fc6</anchor>
      <arglist>(PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticlePropertyList</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a7a51ebc855f558bb099e23fc3386fd0d</anchor>
      <arglist>(PropertySetType &amp;plist, int offset)</arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet &amp;</type>
      <name>PtclA</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>afaea7708371d25f6ec6258cd0b6b2af6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LRHandlerType *</type>
      <name>AB</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a62558270ca7affee833047af6a98d37b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>myTableIndex</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aa0e1a164ff81fc42ab4f688c6aeca19e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumSpeciesA</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aa96ee703bff3896d7bb56f80f38aa0e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumSpeciesB</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a2ca837c506c64cdf91d4e665218caeff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NptclA</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ad38c1afe67eded7de9e6e84f7fda9fe4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NptclB</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae13c3d8436b04c152745d0a10579ea6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>myConst</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a6fcd0687afb3cfe4c9978944837e5932</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>myRcut</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a9e271efec01b8db7003a313e1567af62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GridType *</type>
      <name>myGrid</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>acc3ec2d9f5aaef0116f866501d8b483e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RadFunctorType *</type>
      <name>V0</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aa09479bc496b2e524ab3208af8d8f5f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>ComputeForces</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae0779aaf6de2e75977dcebeff494a280</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>MaxGridPoints</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a2d02c7c89eb85f564974742bc85d536a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>NofSpeciesA</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a7773537c622ef37e3f205fb31ba191a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>NofSpeciesB</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a87454f488a0886cfcdd00e441d7dda25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Zat</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af7762484a9d91810382fd165c26cfaeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Qat</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aa09b3da8e46d41f36b7da0745f28c9f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Zspec</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a983570ddbde484313fb74a37cb04169b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Qspec</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ac90e9cb703f10ba18fa658449afd696d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RadFunctorType * &gt;</type>
      <name>Vat</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ac7f50bf13f6975f330cddf6ff060d4d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RadFunctorType * &gt;</type>
      <name>Vspec</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a9418308169e94e6fec4146a0eba9e33f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>kcdifferent</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a15be5cacf40f6b59d2d48acf6128c2d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>minkc</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a196f17371ca03d0a9affa1a3dafeb69e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>SRtmp</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a3dbb76f6d9ee89a1fa0b24979fc40e05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>LRtmp</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8db99ac60316652f746d826be15b3f3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; RealType &gt;</type>
      <name>SRpart</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8fcb82cb5933ec80f6da381f79987d56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; RealType &gt;</type>
      <name>LRpart</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a50c917306b2c09eb407715756b07e019</anchor>
      <arglist></arglist>
    </member>
  <compound kind="struct">
    <name>qmcplusplus::CoulombPBCAB</name>
    <filename>a00032.html</filename>
    <anchor>a01436</anchor>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>GaussianPot</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>acc339cb3ad5f1391dae29bb773867dbb</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GaussianPot</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a9c539aaac4a084c5873af956ebdc06bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a5c48281949f42f6b68e628f33c3ee980</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>registerData</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a9d615d237ace0de1eea40231a399d578</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>updateBuffer</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a7d2310b390776c60d0d41d60e7820cdb</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ac2b64ad7f8a9e83ed74f5ed98efae78c</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyToBuffer</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ad8f6db641b2101970e7c9272f71bfba6</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluatePbyP</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a9959fcb21fe743cd247d88b427df98d1</anchor>
      <arglist>(ParticleSet &amp;P, int active)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8c7995fca4e1c327502fe29d4633430e</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Centers</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a3143780108649c426c1eceba038963b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>d</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a2f446d1f47978bfb6422eef720c72d30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Q</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a9d2fc465bef5d0e2ec7223cd6259f7af</anchor>
      <arglist></arglist>
    </member>
  <compound kind="struct">
    <name>qmcplusplus::GaussianPot</name>
    <filename>a00032.html</filename>
    <anchor>a01461</anchor>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>HardSphere</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a0070909b48292d969e4c7297c2eada6f</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HardSphere</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a031f45f2c308db105d712fedfd5b3fcd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a5c48281949f42f6b68e628f33c3ee980</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>registerData</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a9d615d237ace0de1eea40231a399d578</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>updateBuffer</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a7d2310b390776c60d0d41d60e7820cdb</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ac2b64ad7f8a9e83ed74f5ed98efae78c</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyToBuffer</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ad8f6db641b2101970e7c9272f71bfba6</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluatePbyP</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a9959fcb21fe743cd247d88b427df98d1</anchor>
      <arglist>(ParticleSet &amp;P, int active)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8c7995fca4e1c327502fe29d4633430e</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Centers</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a3143780108649c426c1eceba038963b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>d</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a2f446d1f47978bfb6422eef720c72d30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Q</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a9d2fc465bef5d0e2ec7223cd6259f7af</anchor>
      <arglist></arglist>
    </member>
  <compound kind="struct">
    <name>qmcplusplus::HardSphere</name>
    <filename>a00032.html</filename>
    <anchor>a01464</anchor>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>HeePotential</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8ce8e29370b3d50fe247b44a013d2d79</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet &amp;I)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HeePotential</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a40e35815e63f458a347d818357395401</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a5c48281949f42f6b68e628f33c3ee980</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8c7995fca4e1c327502fe29d4633430e</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObservables</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8abdf7e1d1af61133e6ebb7b46c53aa1</anchor>
      <arglist>(PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObservables</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae4b206ae54a98a3af6952165d2b61fc6</anchor>
      <arglist>(PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Return_t</type>
      <name>registerData</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a44e7899b5e095d2aa409598cf39bbd73</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Return_t</type>
      <name>updateBuffer</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a80ac899364f64d5a145c5d7b91be1dcd</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a9c3a0f63d4afec74c7b0d7a94ab67b06</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyToBuffer</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ad6ab5443a8380f2cececc401d3897470</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Return_t</type>
      <name>evaluatePbyP</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ab1d01a7cf50babe56ea6365bf4e1173f</anchor>
      <arglist>(ParticleSet &amp;P, int active)</arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>rc</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a593b036963410724983f3866f0a6cc04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>A</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a43f9ae5209ae697071ea7abdfeafedb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>B</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a00e3f111f4413f16e85f70db2dc28176</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>C</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aced919beea31c6c167b5ab8db2d1d935</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>trunc</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a67da4a00424ef76fc7c832c1d5f942d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>TCValue</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8d0098d6a1a6f9adbbb9cfc1587448bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a859bc2c01e2beb7537cd83f0b9e88921</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet *</type>
      <name>PtclRef</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a810b9c6f4d1683f2d98db6a6ef6659c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet</type>
      <name>IRef</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a870da089fa8ac8f440fd9ff1c75c058e</anchor>
      <arglist></arglist>
    </member>
  <compound kind="struct">
    <name>qmcplusplus::HeePotential</name>
    <filename>a00032.html</filename>
    <anchor>a01465</anchor>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>HeePotential_tail</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a450e0432505ba6003159e5a4e10660e6</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HeePotential_tail</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a55bf59646e412b06958c503f734f5ecf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a5c48281949f42f6b68e628f33c3ee980</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_TC</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a5b7bda671a29f4c721a3d70d3f6c4de6</anchor>
      <arglist>(Return_t TCorr)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8c7995fca4e1c327502fe29d4633430e</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObservables</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8abdf7e1d1af61133e6ebb7b46c53aa1</anchor>
      <arglist>(PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet *</type>
      <name>PtclRef</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a810b9c6f4d1683f2d98db6a6ef6659c5</anchor>
      <arglist></arglist>
    </member>
  <compound kind="struct">
    <name>qmcplusplus::HeePotential_tail</name>
    <filename>a00032.html</filename>
    <anchor>a01466</anchor>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>HePressure</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a9893861ab9673996839a59f3e2c149db</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HePressure</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af3ce82884c8670067485f916f82ada0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a5c48281949f42f6b68e628f33c3ee980</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8c7995fca4e1c327502fe29d4633430e</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObservables</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8abdf7e1d1af61133e6ebb7b46c53aa1</anchor>
      <arglist>(PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObservables</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae4b206ae54a98a3af6952165d2b61fc6</anchor>
      <arglist>(PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticlePropertyList</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a7a51ebc855f558bb099e23fc3386fd0d</anchor>
      <arglist>(PropertySetType &amp;plist, int offset)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>A</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a2941385b1be5280d3b1f546356f7ec99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>alpha</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a20f4c4490bc8ecbdd1ffcb79acce6035</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>c0</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a1d23aed57ae21b2856939bd1b932763f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>c1</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8a289ed190008419ee49288535be093d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>c2</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a3d7054db04feaba66495dccf1a8ce86c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>c3</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a0d1d46b5c820d4787cec9b22690d15eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>c1p</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a5f8a819dadaf026f1914157fc06929aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>c2p</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a0dd999af2d72c90d867a5f1b34482a8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>c3p</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a1e19ba8a8179c6292c8ca25b96e41d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>D</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ad8657a5ec76e12f3066fb4b4eb75ace9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>rdV</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8f2688ba4c90ff5f1a5b6680a1e45cd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>dV</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a7d37d2b57d250f90a90a7deebf15ec95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>dVnorm</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>afde30ab912c8ffa957947a3923080172</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>pNorm</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a20638a5193a9ec1fdfb88a4185eb419c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>tailcorr</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aa7ed5a2749fe26a90b7809e562b8897c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>rcutoff</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a72c6aa321456949b33b4c70fd05774eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>kNorm</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a358dd4236e5f5b3ca8f43f33df87aa99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>ZV</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae801f1ef2319a4e44373a4d8c3e4585b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>ZB</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>afbc411c4c5980d855ca8f120a6eff935</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet *</type>
      <name>sourcePtcl</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ab08c7c37a309154c823dcce3178ee902</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a859bc2c01e2beb7537cd83f0b9e88921</anchor>
      <arglist></arglist>
    </member>
  <compound kind="struct">
    <name>qmcplusplus::HePressure</name>
    <filename>a00032.html</filename>
    <anchor>a01468</anchor>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>HeSAPT_smoothed_phy</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af79e1728eb9addacb132827e129e3453</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HeSAPT_smoothed_phy</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a3868c5c25b3eccde54f59c9d262b210f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a3337a854db2e9cd73c025ef1fa951406</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>damp</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a177a66cb0884305cf42b484beb5f6550</anchor>
      <arglist>(int n, Return_t r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add2Hamiltonian</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ac17d25b61e4b177db330edb929cb3cd8</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;targetH)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCorrection</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af6186444fa3406f12529938322d20498</anchor>
      <arglist>(QMCHamiltonian &amp;targetH)</arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8c7995fca4e1c327502fe29d4633430e</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObservables</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8abdf7e1d1af61133e6ebb7b46c53aa1</anchor>
      <arglist>(PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObservables</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae4b206ae54a98a3af6952165d2b61fc6</anchor>
      <arglist>(PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="variable">
      <type>Return_t</type>
      <name>rc</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af3ed15115c0e0af389e4e581202b7c9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Return_t</type>
      <name>mirrorshift</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a79afa27e383d5633caffccceb290f4d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Return_t</type>
      <name>smooth</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af1928d0d3d583b22f7ada801180ff428</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a859bc2c01e2beb7537cd83f0b9e88921</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet *</type>
      <name>PtclRef</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a810b9c6f4d1683f2d98db6a6ef6659c5</anchor>
      <arglist></arglist>
    </member>
  <compound kind="struct">
    <name>qmcplusplus::HeSAPT_smoothed_phy</name>
    <filename>a00032.html</filename>
    <anchor>a01470</anchor>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>HeSAPT_smoothed_aux</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>adcd061640a6bece98d4e0c5cd364b8bd</anchor>
      <arglist>(const HeSAPT_smoothed_phy *orig)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HeSAPT_smoothed_aux</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a2b443e290cdd36748748b80769e758d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a5c48281949f42f6b68e628f33c3ee980</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8c7995fca4e1c327502fe29d4633430e</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="variable">
      <type>const HeSAPT_smoothed_phy *</type>
      <name>phyH</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a5574d6114029c32d584515730d4f9c7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Return_t</type>
      <name>tailcorr</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a3f201591bcd57b8015c636eaef3f90ec</anchor>
      <arglist></arglist>
    </member>
  <compound kind="struct">
    <name>qmcplusplus::HeSAPT_smoothed_aux</name>
    <filename>a00032.html</filename>
    <anchor>a01469</anchor>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>~HFDBHE_smoothed_phy</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a22efbfed49ddfc62cc65032d3d2b605f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ad24606e4f19c28c4f79fc1b6c3fd08d2</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>dampF</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a367752116d205eb78b4c145d953acd9f</anchor>
      <arglist>(Return_t r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add2Hamiltonian</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ac17d25b61e4b177db330edb929cb3cd8</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;targetH)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCorrection</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af6186444fa3406f12529938322d20498</anchor>
      <arglist>(QMCHamiltonian &amp;targetH)</arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8c7995fca4e1c327502fe29d4633430e</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObservables</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8abdf7e1d1af61133e6ebb7b46c53aa1</anchor>
      <arglist>(PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObservables</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae4b206ae54a98a3af6952165d2b61fc6</anchor>
      <arglist>(PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="variable">
      <type>Return_t</type>
      <name>rc</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af3ed15115c0e0af389e4e581202b7c9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Return_t</type>
      <name>mirrorshift</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a79afa27e383d5633caffccceb290f4d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Return_t</type>
      <name>smooth</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af1928d0d3d583b22f7ada801180ff428</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a859bc2c01e2beb7537cd83f0b9e88921</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet *</type>
      <name>PtclRef</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a810b9c6f4d1683f2d98db6a6ef6659c5</anchor>
      <arglist></arglist>
    </member>
  <compound kind="struct">
    <name>qmcplusplus::HFDBHE_smoothed_phy</name>
    <filename>a00032.html</filename>
    <anchor>a01472</anchor>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>HFDBHE_smoothed_aux</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a92eb5becb33bc49465a44a647a5e21a2</anchor>
      <arglist>(const HFDBHE_smoothed_phy *orig)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HFDBHE_smoothed_aux</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>adc918f00c020a4a491a9a90d3e20e563</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a5c48281949f42f6b68e628f33c3ee980</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8c7995fca4e1c327502fe29d4633430e</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="variable">
      <type>const HFDBHE_smoothed_phy *</type>
      <name>phyH</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a02956be46acb2db91392ed620dff3bc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Return_t</type>
      <name>tailcorr</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a3f201591bcd57b8015c636eaef3f90ec</anchor>
      <arglist></arglist>
    </member>
  <compound kind="struct">
    <name>qmcplusplus::HFDBHE_smoothed_aux</name>
    <filename>a00032.html</filename>
    <anchor>a01471</anchor>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>HFDHE2_Moroni1995_phy</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a4baf1dcda1af47dd3d4e490912e80a4b</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HFDHE2_Moroni1995_phy</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a844263f70655f8d2c127ceaee6b4a2c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a5a307f940eee534c78732442da5262e4</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>dampF</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a367752116d205eb78b4c145d953acd9f</anchor>
      <arglist>(Return_t r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add2Hamiltonian</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ac17d25b61e4b177db330edb929cb3cd8</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;targetH)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCorrection</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af6186444fa3406f12529938322d20498</anchor>
      <arglist>(QMCHamiltonian &amp;targetH)</arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8c7995fca4e1c327502fe29d4633430e</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObservables</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8abdf7e1d1af61133e6ebb7b46c53aa1</anchor>
      <arglist>(PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObservables</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae4b206ae54a98a3af6952165d2b61fc6</anchor>
      <arglist>(PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="variable">
      <type>Return_t</type>
      <name>rc</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af3ed15115c0e0af389e4e581202b7c9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Return_t</type>
      <name>A</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a3a1f026f7d9d3c3743b3c181c3d0e408</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Return_t</type>
      <name>alpha</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae514054983948a2f5ab6f6d53579b039</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Return_t</type>
      <name>c1</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>afaf2bf1e7c84075299cc4f0fdb3736c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Return_t</type>
      <name>c2</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a506728376b81d2d9b65e3a9a21826cfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Return_t</type>
      <name>c3</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a882eda8e679b08cd9d3a2f3e4ed35d0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Return_t</type>
      <name>D</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ac44ee8b4c01872ff3c74542b41ea86a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Return_t</type>
      <name>mirrorshift</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a79afa27e383d5633caffccceb290f4d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Return_t</type>
      <name>smooth</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af1928d0d3d583b22f7ada801180ff428</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a859bc2c01e2beb7537cd83f0b9e88921</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet *</type>
      <name>PtclRef</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a810b9c6f4d1683f2d98db6a6ef6659c5</anchor>
      <arglist></arglist>
    </member>
  <compound kind="struct">
    <name>qmcplusplus::HFDHE2_Moroni1995_phy</name>
    <filename>a00032.html</filename>
    <anchor>a01473</anchor>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>HFDHE2Potential</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aa50dad61f7def24e35e5ffbd94e3a0d9</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HFDHE2Potential</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a4364b5504aab90b1a475f67955e74b54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeDependants</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a65b6e059d2f047f20fed7a6fe2c2457d</anchor>
      <arglist>(ParticleSet &amp;qp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ab178070e138929a86e1f82709f34c75e</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>dampF</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a367752116d205eb78b4c145d953acd9f</anchor>
      <arglist>(Return_t r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8c7995fca4e1c327502fe29d4633430e</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObservables</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8abdf7e1d1af61133e6ebb7b46c53aa1</anchor>
      <arglist>(PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObservables</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae4b206ae54a98a3af6952165d2b61fc6</anchor>
      <arglist>(PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HFDHE2Potential</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aa50dad61f7def24e35e5ffbd94e3a0d9</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HFDHE2Potential</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a4364b5504aab90b1a475f67955e74b54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a5c48281949f42f6b68e628f33c3ee980</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>dampF</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a367752116d205eb78b4c145d953acd9f</anchor>
      <arglist>(Return_t r)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>mycorrection</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a0ccb39a40c038d3864dca47de1ff1725</anchor>
      <arglist>(Return_t r1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add2Hamiltonian</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ac17d25b61e4b177db330edb929cb3cd8</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;targetH)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCorrection</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af6186444fa3406f12529938322d20498</anchor>
      <arglist>(QMCHamiltonian &amp;targetH)</arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8c7995fca4e1c327502fe29d4633430e</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObservables</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8abdf7e1d1af61133e6ebb7b46c53aa1</anchor>
      <arglist>(PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObservables</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae4b206ae54a98a3af6952165d2b61fc6</anchor>
      <arglist>(PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="variable">
      <type>Return_t</type>
      <name>tailcorr</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a3f201591bcd57b8015c636eaef3f90ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Return_t</type>
      <name>TCValue</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a7d630bc1e3111e080815c7499471b8ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Return_t</type>
      <name>rc</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af3ed15115c0e0af389e4e581202b7c9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Return_t</type>
      <name>A</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a3a1f026f7d9d3c3743b3c181c3d0e408</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Return_t</type>
      <name>alpha</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae514054983948a2f5ab6f6d53579b039</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Return_t</type>
      <name>c1</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>afaf2bf1e7c84075299cc4f0fdb3736c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Return_t</type>
      <name>c2</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a506728376b81d2d9b65e3a9a21826cfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Return_t</type>
      <name>c3</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a882eda8e679b08cd9d3a2f3e4ed35d0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Return_t</type>
      <name>D</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ac44ee8b4c01872ff3c74542b41ea86a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a859bc2c01e2beb7537cd83f0b9e88921</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet *</type>
      <name>PtclRef</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a810b9c6f4d1683f2d98db6a6ef6659c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HFDHE2Potential_tail *</type>
      <name>TCorr</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a86efa0610706a4773c140b5b3a1722a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Return_t</type>
      <name>kpre_factor</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a12905d8f7addd44fc426859e1e92a33f</anchor>
      <arglist></arglist>
    </member>
  <compound kind="struct">
    <name>qmcplusplus::HFDHE2Potential</name>
    <filename>a00032.html</filename>
    <anchor>a01474</anchor>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>HFDHE2Potential_tail</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a50eb47b8daf177f7072e3afdfe3ac225</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HFDHE2Potential_tail</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a6418a6a105d8e22a55a0c46de441072b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a5c48281949f42f6b68e628f33c3ee980</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_TC</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a5b7bda671a29f4c721a3d70d3f6c4de6</anchor>
      <arglist>(Return_t TCorr)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8c7995fca4e1c327502fe29d4633430e</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObservables</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8abdf7e1d1af61133e6ebb7b46c53aa1</anchor>
      <arglist>(PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObservables</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae4b206ae54a98a3af6952165d2b61fc6</anchor>
      <arglist>(PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticlePropertyList</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a7a51ebc855f558bb099e23fc3386fd0d</anchor>
      <arglist>(PropertySetType &amp;plist, int offset)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HFDHE2Potential_tail</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>abfba2cb292bb17b2b9c0dc20745a28ba</anchor>
      <arglist>(const HFDHE2Potential *org)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HFDHE2Potential_tail</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a6418a6a105d8e22a55a0c46de441072b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a5c48281949f42f6b68e628f33c3ee980</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8c7995fca4e1c327502fe29d4633430e</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerObservables</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a2a9137abf45ebb2c9a31255f063723f9</anchor>
      <arglist>(vector&lt; observable_helper * &gt; &amp;h5list, hid_t gid) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObservables</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8abdf7e1d1af61133e6ebb7b46c53aa1</anchor>
      <arglist>(PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObservables</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae4b206ae54a98a3af6952165d2b61fc6</anchor>
      <arglist>(PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticlePropertyList</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a7a51ebc855f558bb099e23fc3386fd0d</anchor>
      <arglist>(PropertySetType &amp;plist, int offset)</arglist>
    </member>
    <member kind="variable">
      <type>Return_t</type>
      <name>tailcorr</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a3f201591bcd57b8015c636eaef3f90ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Return_t</type>
      <name>rc</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af3ed15115c0e0af389e4e581202b7c9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Return_t</type>
      <name>A</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a3a1f026f7d9d3c3743b3c181c3d0e408</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Return_t</type>
      <name>alpha</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae514054983948a2f5ab6f6d53579b039</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Return_t</type>
      <name>c1</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>afaf2bf1e7c84075299cc4f0fdb3736c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Return_t</type>
      <name>c2</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a506728376b81d2d9b65e3a9a21826cfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Return_t</type>
      <name>c3</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a882eda8e679b08cd9d3a2f3e4ed35d0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Return_t</type>
      <name>D</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ac44ee8b4c01872ff3c74542b41ea86a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Return_t</type>
      <name>KValue</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8b4b4151d969c5da6048f0c0386d1c8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Return_t</type>
      <name>Kpre</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a0b93d36ed9d3fd4df9af51a214cd1298</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a859bc2c01e2beb7537cd83f0b9e88921</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet *</type>
      <name>PtclRef</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a810b9c6f4d1683f2d98db6a6ef6659c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const HFDHE2Potential *</type>
      <name>phyH</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a7f849a68b29deb8c2bc361cd1b18d6d6</anchor>
      <arglist></arglist>
    </member>
  <compound kind="struct">
    <name>qmcplusplus::HFDHE2Potential_tail</name>
    <filename>a00032.html</filename>
    <anchor>a01475</anchor>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>HusePot</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ad809c1d42cc419140ded9ef1340794c6</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HusePot</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a469eac2f48b2ba67b6790becbe0b1966</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a5c48281949f42f6b68e628f33c3ee980</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>registerData</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a9d615d237ace0de1eea40231a399d578</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>updateBuffer</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a7d2310b390776c60d0d41d60e7820cdb</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ac2b64ad7f8a9e83ed74f5ed98efae78c</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyToBuffer</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ad8f6db641b2101970e7c9272f71bfba6</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluatePbyP</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a9959fcb21fe743cd247d88b427df98d1</anchor>
      <arglist>(ParticleSet &amp;P, int active)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>f</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ad481984d584b564a41468fe752034ba9</anchor>
      <arglist>(Return_t r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8c7995fca4e1c327502fe29d4633430e</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>m</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aa93a342cbad26deeb992159fc322a969</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>V</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ab9981e719630f04de8be5b81b0013620</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>pf</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af80ec620de353689d9a94fbc91937828</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>K</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a97a80c6f06cf7647ad50fdc9c94f6487</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>L</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aeefa608b4b9d37246136fba867a89ecf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>root3</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8c6e309676cb19cec5f44e8badc6acdb</anchor>
      <arglist></arglist>
    </member>
  <compound kind="struct">
    <name>qmcplusplus::HusePot</name>
    <filename>a00032.html</filename>
    <anchor>a01476</anchor>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>JelliumPotential</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a0b1dcab3dc12bea37a942513df6861cc</anchor>
      <arglist>(ParticleSet &amp;ions, ParticleSet &amp;els)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~JelliumPotential</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>acb9425da38eadaf151ace66a1fab0a45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a5c48281949f42f6b68e628f33c3ee980</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>registerData</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a9d615d237ace0de1eea40231a399d578</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>updateBuffer</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a7d2310b390776c60d0d41d60e7820cdb</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ac2b64ad7f8a9e83ed74f5ed98efae78c</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyToBuffer</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ad8f6db641b2101970e7c9272f71bfba6</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluatePbyP</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a9959fcb21fe743cd247d88b427df98d1</anchor>
      <arglist>(ParticleSet &amp;P, int active)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8c7995fca4e1c327502fe29d4633430e</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Centers</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a3143780108649c426c1eceba038963b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet &amp;</type>
      <name>sourcePtcl</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a521b26e24d441b710c7b5668002ed60f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a859bc2c01e2beb7537cd83f0b9e88921</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Z</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a9ca2a1b76c4636f27f3c9a6e15b81c7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>RC</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aea1f86a5567a94ef67152b42b4d69280</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>RS</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8140f36415c20911e0ea815cf53d9ec5</anchor>
      <arglist></arglist>
    </member>
  <compound kind="struct">
    <name>qmcplusplus::JelliumPotential</name>
    <filename>a00032.html</filename>
    <anchor>a01478</anchor>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>LennardJones_smoothed_phy</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a0cdd8f4c73775625c249053c369aea1a</anchor>
      <arglist>(ParticleSet &amp;P, RealType e=3.23648511e-5, RealType s=4.830139998)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LennardJones_smoothed_phy</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a947329dd005bba287287f00841a7ee29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a641272732893b6246db2f514f01739e0</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add2Hamiltonian</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ac17d25b61e4b177db330edb929cb3cd8</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;targetH)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCorrection</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af6186444fa3406f12529938322d20498</anchor>
      <arglist>(QMCHamiltonian &amp;targetH)</arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8c7995fca4e1c327502fe29d4633430e</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObservables</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8abdf7e1d1af61133e6ebb7b46c53aa1</anchor>
      <arglist>(PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>epsilon</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a568b7872850f67f2fc79f76472a7c0fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>sigma</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a2962b56ed0ef5b202465bdf196a6697b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>s6</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a7c8db818b17b72bfa7557fa7bd934bbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>rc</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a593b036963410724983f3866f0a6cc04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>mirrorshift</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aa05e7f6d10eb9c784f7de15279b99c5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>smooth</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ab105b2a4677b82d9ef7229bae8c813f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a859bc2c01e2beb7537cd83f0b9e88921</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet *</type>
      <name>PtclRef</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a810b9c6f4d1683f2d98db6a6ef6659c5</anchor>
      <arglist></arglist>
    </member>
  <compound kind="struct">
    <name>qmcplusplus::LennardJones_smoothed_phy</name>
    <filename>a00032.html</filename>
    <anchor>a01481</anchor>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>LennardJones_smoothed_aux</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ad93bf963fea955815c6b4c4e7ee0fa23</anchor>
      <arglist>(const LennardJones_smoothed_phy *orig, RealType e=3.23648511e-5, RealType s=4.830139998)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LennardJones_smoothed_aux</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a4c9cdf7aada69175bf44e66ac0556e4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a5c48281949f42f6b68e628f33c3ee980</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8c7995fca4e1c327502fe29d4633430e</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="variable">
      <type>const LennardJones_smoothed_phy *</type>
      <name>phyH</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af6d766ee223e80de493a14dac4091af3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>epsilon</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a568b7872850f67f2fc79f76472a7c0fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>sigma</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a2962b56ed0ef5b202465bdf196a6697b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>tailcorr</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a2682536fbdb93f7fddd4a9fb326fbb6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>rc</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a593b036963410724983f3866f0a6cc04</anchor>
      <arglist></arglist>
    </member>
  <compound kind="struct">
    <name>qmcplusplus::LennardJones_smoothed_aux</name>
    <filename>a00032.html</filename>
    <anchor>a01480</anchor>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>LocalCorePolPotential</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a825c7ed512d050682df72026ed5d1c3f</anchor>
      <arglist>(ParticleSet &amp;ions, ParticleSet &amp;els)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LocalCorePolPotential</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae9a52ad920f4af4612a384e8010d8df5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a5b676726c357a7fb6f3fb925536d75c6</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a5df09e537c6e0e8ecb15a64f5d244510</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>FirstTime</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af1d18579862309ebb383f534ece9efc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nCenters</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ace24f184d258e150be4c88c4e34678f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nParticles</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a9e239b576529625f9b2f05c84b12b4a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>eCoreCore</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a3206e1e169e4e334c30186ee736edb04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet &amp;</type>
      <name>IonConfig</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ab51ad40a8b273686e431512ed4e127eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>d_ie</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a255242b1c7eb57514fc7b824b943da9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>d_ii</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a95f345e5bb7c1607a113e2fd9c351f69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; CPP_Param * &gt;</type>
      <name>InpCPP</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a10eb4018950d5f3835677bc6a184339e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; CPP_Param * &gt;</type>
      <name>Centers</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a435b6aa2a5343c83d276901bb9d14f55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; PosType &gt;</type>
      <name>CoreCoreDipole</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a987cc9df755100f80413caf81d0ccc5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; PosType &gt;</type>
      <name>CoreElDipole</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ad99cb6942a3fd95d9c1fa02ecd88e11e</anchor>
      <arglist></arglist>
    </member>
  <compound kind="struct">
    <name>qmcplusplus::LocalCorePolPotential</name>
    <filename>a00032.html</filename>
    <anchor>a01482</anchor>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="typedef">
      <type>OneDimGridBase&lt; RealType &gt;</type>
      <name>GridType</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a745182251a5921e2f8f532450e336c81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimCubicSpline&lt; RealType &gt;</type>
      <name>RadialPotentialType</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a9568909f21bd7d7c0012dad6f467f0b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalECPotential</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aa21b9055b4fa0ead1b179fcbf32a4c40</anchor>
      <arglist>(const ParticleSet &amp;ions, ParticleSet &amp;els)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LocalECPotential</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ad455a699aca68b3b5ce1161946222b83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>afa9943e7f027eac6892c836419f5ba06</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>registerData</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a2040a75f8e06bf0e5d68363a7f08d81d</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>updateBuffer</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a16f30a08cbda0d34c24ae23794ced744</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a873b86d22a6078397525e16eae04ed7c</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyToBuffer</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ac7353636f007e8997714e3dc28001db4</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluatePbyP</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ab0c8c63ffab2cb709034bb526f0f8eea</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af32a5a4016a4cef2e4ebd4962a91ea64</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a5df09e537c6e0e8ecb15a64f5d244510</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>acea11be9ab28f0b2a3a26baf54ebdbfd</anchor>
      <arglist>(int groupID, RadialPotentialType *ppot, RealType z)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluateForPbyP</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a7de8c442e91d528c85548ae61c93053d</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="variable">
      <type>const ParticleSet &amp;</type>
      <name>IonConfig</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a0ab4899d675a35178be10d1fdbb7566b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumIons</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aeb5b7c1abcc170df95212c6521e6139b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>myTableIndex</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aa0e1a164ff81fc42ab4f688c6aeca19e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>PPtmp</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aa053101b90dae677018807a9a3fd85d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RadialPotentialType * &gt;</type>
      <name>PPset</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aa95e6c0a6070755cc4a4dd9a751f5296</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RadialPotentialType * &gt;</type>
      <name>PP</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a6bfebbd5af7e37856b7d73fd295c76f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Zeff</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a9704b80bbdb1a4bb8d6226d94842050b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>gZeff</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a463d872f7013977274a254806df7a679</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; RealType &gt;</type>
      <name>PPart</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a75220cfdec70dfb4388ddc8b1756aecf</anchor>
      <arglist></arglist>
    </member>
  <compound kind="struct">
    <name>qmcplusplus::LocalECPotential</name>
    <filename>a00032.html</filename>
    <anchor>a01483</anchor>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="typedef">
      <type>OneDimGridBase&lt; ValueType &gt;</type>
      <name>GridType</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a1c8e514331ce5fc136f0ec87c276f536</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimGridFunctor&lt; ValueType &gt;</type>
      <name>LocalPotentialType</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af3b457a5364e1372963312a512ceef2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalPPotential</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ab2be705b0709f158537d6699997e1bda</anchor>
      <arglist>(ParticleSet &amp;ions, ParticleSet &amp;els)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LocalPPotential</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a88f4feb923cf0550f6b6be8e567db3d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a5c48281949f42f6b68e628f33c3ee980</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ab15b21e79332cb44a36055f19b793c39</anchor>
      <arglist>(ParticleSet &amp;P)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>get</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ad0b6cb26975a05448fd162db85a6e1c5</anchor>
      <arglist>(std::ostream &amp;os) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a95edcb251240c87d4382c37bd5d2cf4e</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)=0</arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a859bc2c01e2beb7537cd83f0b9e88921</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RadialPotentialSet * &gt;</type>
      <name>PP</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af75fd04fb14e045eff32e4a792488624</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ParticleSet::ParticleIndex_t &amp;</type>
      <name>Centers</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aa5963eaf1917cd3de68308007334ccc7</anchor>
      <arglist></arglist>
    </member>
  <compound kind="struct">
    <name>qmcplusplus::LocalPPotential</name>
    <filename>a00032.html</filename>
    <anchor>a01484</anchor>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>ModPoschlTeller</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a566b00d5fb8b95f4dc8dd57f7a7dae2f</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ModPoschlTeller</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a5ae0dafbdba5f24d58d9c8a10791d07b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a5c48281949f42f6b68e628f33c3ee980</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>registerData</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a9d615d237ace0de1eea40231a399d578</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>updateBuffer</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a7d2310b390776c60d0d41d60e7820cdb</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ac2b64ad7f8a9e83ed74f5ed98efae78c</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyToBuffer</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ad8f6db641b2101970e7c9272f71bfba6</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluatePbyP</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a9959fcb21fe743cd247d88b427df98d1</anchor>
      <arglist>(ParticleSet &amp;P, int active)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8c7995fca4e1c327502fe29d4633430e</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Centers</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a3143780108649c426c1eceba038963b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>d</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a2f446d1f47978bfb6422eef720c72d30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Q</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a9d2fc465bef5d0e2ec7223cd6259f7af</anchor>
      <arglist></arglist>
    </member>
  <compound kind="struct">
    <name>qmcplusplus::ModPoschlTeller</name>
    <filename>a00032.html</filename>
    <anchor>a01489</anchor>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>MPC</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>abcb8a8281aac24b780656af1182153e5</anchor>
      <arglist>(ParticleSet &amp;ref, double cutoff)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MPC</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ab03b492c016e900de9a7b90ed4785463</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8ea5c2c52a81a368bf4f04eb8307cc0a</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a5df09e537c6e0e8ecb15a64f5d244510</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initBreakup</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae8ad6c45b7a6df8339bd2760d0622ab6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet *</type>
      <name>PtclRef</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a810b9c6f4d1683f2d98db6a6ef6659c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>d_aa</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ad98a49c7a88540b0482501b8512b2751</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; ComplexType &gt;</type>
      <name>RhoAvg_G</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aa91001ecbe107baa935288fe4ffccf3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>f_G</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a4340802cd1b033dc9c637b0f1f83db07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>f_0</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>adaef892144de1929095d0ec469c0cd51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>FirstTime</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af1d18579862309ebb383f534ece9efc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumSpecies</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a44c62eda869b510a5d0b3fc8949a5265</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ChargeAttribIndx</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a1a30eec02790e7640f12326bd9b4b5c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>MemberAttribIndx</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a67535b7d01aab00f2ab73ebd13e7cc33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NParticles</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aca640094df1f420012c0bc4fa919c8e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>myConst</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a6fcd0687afb3cfe4c9978944837e5932</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>myRcut</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a9e271efec01b8db7003a313e1567af62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Zat</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af7762484a9d91810382fd165c26cfaeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Zspec</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a983570ddbde484313fb74a37cb04169b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>NofSpecies</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a83b88e44b6f26f60fe7af93a52b484ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>compute_g_G</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ab9d00fe06dd571de09ccbeca697d5dd1</anchor>
      <arglist>(double &amp;g_0_N, vector&lt; double &gt; &amp;g_G_N, int N)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init_gvecs</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aaad135ee3a307d22b015e691cd2b0e9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init_f_G</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a19a1d148ed10d94a2706b92cd548c445</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init_spline</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a38adbedd8dd7daaecb60babd535dd7b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Return_t</type>
      <name>evalSR</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a9178ee275261549472183d225942fd7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Return_t</type>
      <name>evalLR</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a951e404879b6b85ebd298379254dace3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UBspline_3d_d *</type>
      <name>VlongSpline</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a9dc67b97d148bbdd382f58e11f5ed4ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UBspline_3d_d *</type>
      <name>DensitySpline</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ab2ef52a6fa67bf6b8b4fc311ad7db9cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>Vconst</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a39b388b29ded1ab0bfbc08f9de4d166e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>Ecut</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a7f59d557c0e9d2ec2ba2a9c4941ef7a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; TinyVector&lt; int, OHMMS_DIM &gt; &gt;</type>
      <name>Gints</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aa235b9347eb98616900f58ebf742806c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; PosType &gt;</type>
      <name>Gvecs</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae1a2524115a519327066c554c07ed4c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; ComplexType &gt;</type>
      <name>Rho_G</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ab89647fb2703b96b76d65bb579dbee9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TinyVector&lt; int, OHMMS_DIM &gt;</type>
      <name>SplineDim</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae3a59ab04358c9707082ceb85797cb8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>MaxDim</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a011d3fd8350502e4b827a23dbb993ce8</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::MPC</name>
    <filename>a00032.html</filename>
    <anchor>a01490</anchor>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <base>qmcplusplus::ForceBase</base>
    <member kind="function">
      <type></type>
      <name>NonLocalECPotential</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ab27c8a05885dabee507239878590efa8</anchor>
      <arglist>(ParticleSet &amp;ions, ParticleSet &amp;els, TrialWaveFunction &amp;psi, bool computeForces=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NonLocalECPotential</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ad88cedaa2e6da6f518c385ab515789d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aa32e341208143278228d1978d23e87fb</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a32e0d05aea21ebc4ec0e7945ffd756ea</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a5df09e537c6e0e8ecb15a64f5d244510</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a321647fe787937b98be7f7a9293a6dee</anchor>
      <arglist>(int groupID, NonLocalECPComponent *pp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomGenerator</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a85d63360998b0f9233e8ee0d68bb94da</anchor>
      <arglist>(RandomGenerator_t *rng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObservables</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a2a1ba7447d76a7353df776e71e48ed0b</anchor>
      <arglist>(PropertySetType &amp;plist, BufferType &amp;collectables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObservables</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae4b206ae54a98a3af6952165d2b61fc6</anchor>
      <arglist>(PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticlePropertyList</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a7a51ebc855f558bb099e23fc3386fd0d</anchor>
      <arglist>(PropertySetType &amp;plist, int offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerObservables</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a2a9137abf45ebb2c9a31255f063723f9</anchor>
      <arglist>(vector&lt; observable_helper * &gt; &amp;h5list, hid_t gid) const </arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumIons</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aeb5b7c1abcc170df95212c6521e6139b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a859bc2c01e2beb7537cd83f0b9e88921</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; NonLocalECPComponent * &gt;</type>
      <name>PP</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae6c6b362ccd344b7d6a9ec31bea4f533</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; NonLocalECPComponent * &gt;</type>
      <name>PPset</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a24a81133933560e9641449af6c2804e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet &amp;</type>
      <name>IonConfig</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ab51ad40a8b273686e431512ed4e127eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TrialWaveFunction &amp;</type>
      <name>Psi</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ad34f7fe2e50d37f4e8459655408d2ab5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>ComputeForces</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae0779aaf6de2e75977dcebeff494a280</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticlePos_t</type>
      <name>PulayTerm</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a7723494209c07a40feadb97b76033cd5</anchor>
      <arglist></arglist>
    </member>
  <compound kind="struct">
    <name>qmcplusplus::NonLocalECPotential</name>
    <filename>a00032.html</filename>
    <anchor>a01496</anchor>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>OscillatoryPotential</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ac910b88362a66a0cc1aafb9508b2b9f0</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OscillatoryPotential</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ac8a35aee59711a1e5f6a2fe7aab90ef3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a5c48281949f42f6b68e628f33c3ee980</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>registerData</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a9d615d237ace0de1eea40231a399d578</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>updateBuffer</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a7d2310b390776c60d0d41d60e7820cdb</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ac2b64ad7f8a9e83ed74f5ed98efae78c</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyToBuffer</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ad8f6db641b2101970e7c9272f71bfba6</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluatePbyP</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a9959fcb21fe743cd247d88b427df98d1</anchor>
      <arglist>(ParticleSet &amp;P, int active)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8c7995fca4e1c327502fe29d4633430e</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>v0</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aaf15eae6433ee363167fb7f368388b58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>k0</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a372d55ca16e70bb26365ef9d9a9c8098</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>r0</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a259e186ea884797f25b2b03ab3b81d1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>r1</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a1f91cc16c9b3807d7085039efa2f5b97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>rm0</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a4c1028626b6f044426f8c74ead319e6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>rm1</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a87b8c9308ca81974dfd33cd1e772a210</anchor>
      <arglist></arglist>
    </member>
  <compound kind="struct">
    <name>qmcplusplus::OscillatoryPotential</name>
    <filename>a00032.html</filename>
    <anchor>a01501</anchor>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>Pressure</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae6b06d217e0cfcc808043bd8705ebf6b</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Pressure</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a1ed0a0e7fad5a07c3f2a238de32d2f48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a5c48281949f42f6b68e628f33c3ee980</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8c7995fca4e1c327502fe29d4633430e</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>pNorm</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a20638a5193a9ec1fdfb88a4185eb419c</anchor>
      <arglist></arglist>
    </member>
  <compound kind="struct">
    <name>qmcplusplus::Pressure</name>
    <filename>a00032.html</filename>
    <anchor>a01504</anchor>
    <base>qmcplusplus::QMCTraits</base>
    <member kind="function" virtualness="pure">
      <type>virtual Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>abe73a9af3a0a87fb1c580f05e0ac77e2</anchor>
      <arglist>(ParticleSet &amp;P)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ab6bd3526064344ff55aa43dc49e90ad3</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>put</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ad5f66fd1dbe5e3c62ee5f7f326446dee</anchor>
      <arglist>(xmlNodePtr cur)=0</arglist>
    </member>
  <compound kind="struct">
    <name>qmcplusplus::QMCHamiltonianBase</name>
    <filename>a00032.html</filename>
    <anchor>a01514</anchor>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>VHXC</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a3f2a84667a799290738eaa7acda3cca5</anchor>
      <arglist>(ParticleSet &amp;ref)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VHXC</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae067511167da907b1544f7c3a2802a51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae5a7124657883e5b88af70e24536afc7</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a5df09e537c6e0e8ecb15a64f5d244510</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet *</type>
      <name>PtclRef</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a810b9c6f4d1683f2d98db6a6ef6659c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>FirstTime</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af1d18579862309ebb383f534ece9efc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumSpecies</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a44c62eda869b510a5d0b3fc8949a5265</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ChargeAttribIndx</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a1a30eec02790e7640f12326bd9b4b5c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>MemberAttribIndx</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a67535b7d01aab00f2ab73ebd13e7cc33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NParticles</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aca640094df1f420012c0bc4fa919c8e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Zat</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af7762484a9d91810382fd165c26cfaeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Zspec</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a983570ddbde484313fb74a37cb04169b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>NofSpecies</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a83b88e44b6f26f60fe7af93a52b484ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>init_spline</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a38adbedd8dd7daaecb60babd535dd7b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>UBspline_3d_d *</type>
      <name>VSpline</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a30731e1132b0d90c3a4d0da75e63eca5</anchor>
      <arglist>[2]</arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::VHXC</name>
    <filename>a00032.html</filename>
    <anchor>a01541</anchor>
  </compound>
  <compound kind="group">
    <name>QMCDrivers</name>
    <title>QMC Driver group</title>
    <filename>a00112.html</filename>
    <class kind="class">qmcplusplus::CSVMC</class>
    <class kind="class">qmcplusplus::CSVMCUpdateAll</class>
    <class kind="class">qmcplusplus::CSVMCUpdatePbyP</class>
    <class kind="class">qmcplusplus::DMC</class>
    <class kind="class">qmcplusplus::DMCcuda</class>
    <class kind="class">qmcplusplus::DMCOMP</class>
    <class kind="class">qmcplusplus::DMCOMPOPT</class>
    <class kind="class">qmcplusplus::DMCPeta</class>
    <class kind="class">qmcplusplus::DummyQMC</class>
    <class kind="class">qmcplusplus::QMCCorrelatedSamplingLinearOptimize</class>
    <class kind="class">qmcplusplus::QMCCostFunctionBase</class>
    <class kind="class">qmcplusplus::QMCCostFunctionCUDA</class>
    <class kind="class">qmcplusplus::QMCCostFunctionOMP</class>
    <class kind="class">qmcplusplus::QMCCSLinearOptimizeWFmanagerOMP</class>
    <class kind="class">qmcplusplus::QMCDriver</class>
    <class kind="class">qmcplusplus::QMCFixedSampleLinearOptimize</class>
    <class kind="class">qmcplusplus::QMCLinearOptimize</class>
    <class kind="class">qmcplusplus::QMCOptimize</class>
    <class kind="class">qmcplusplus::RMCSingleOMP</class>
    <class kind="class">qmcplusplus::RMCUpdateAllWithDrift</class>
    <class kind="class">qmcplusplus::RMCUpdatePbyPWithDrift</class>
    <class kind="class">qmcplusplus::VMCcuda</class>
    <class kind="class">qmcplusplus::VMCLinearOptOMP</class>
    <class kind="class">qmcplusplus::VMCMultipleWarp</class>
    <class kind="class">qmcplusplus::VMCPbyPMultiple</class>
    <class kind="class">qmcplusplus::VMCPbyPMultiWarp</class>
    <class kind="class">qmcplusplus::VMCSingleOMP</class>
    <class kind="class">qmcplusplus::VMCUpdateAll</class>
    <class kind="class">qmcplusplus::VMCUpdateAllWithDrift</class>
    <class kind="class">qmcplusplus::VMCUpdatePbyP</class>
    <class kind="class">qmcplusplus::VMCUpdatePbyPWithDrift</class>
    <class kind="class">qmcplusplus::VMCUpdatePbyPWithDriftFast</class>
    <class kind="class">qmcplusplus::VMCUpdateRenyiWithDriftFast</class>
    <base>qmcplusplus::QMCDriver</base>
    <member kind="function">
      <type></type>
      <name>CSVMC</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a358dba89321dfa934533764bd4f9ab47</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, WaveFunctionPool &amp;ppool)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QMCDriver</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a7c7eba9913afecfc0be9a3b3cb774240</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, WaveFunctionPool &amp;ppool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~QMCDriver</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ab5f74ee6bf45e3dfcd978718066636d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>current</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a40e7fa09b7b40063ee0b890874b7d235</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpdateMode</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a1552962e2746b84ae7b928ee126c7ca6</anchor>
      <arglist>(bool pbyp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStatus</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a902c877b87115da6a3ba3a5283c92fa2</anchor>
      <arglist>(const string &amp;aname, const string &amp;h5name, bool append)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_H_and_Psi</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a141c22fdf17304e9d917330f5b11c96e</anchor>
      <arglist>(QMCHamiltonian *h, TrialWaveFunction *psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>process</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a7b0e8dda627c1705afd47e93e737f454</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>xmlNodePtr</type>
      <name>getQMCNode</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>acdd0efd6289da64931f274ba0d29d7a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putWalkers</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a6885ce6d44fe3e82a20941774e43e5d7</anchor>
      <arglist>(vector&lt; xmlNodePtr &gt; &amp;wset)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>getEngineName</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a594f3858b64850df2638904b2c880828</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a5f5e781064685348fa3c8f960912a50f</anchor>
      <arglist>(const string &amp;aname, PDT x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBranchEngine</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>accf67d11f6f0f37e4ef64f52474a130d</anchor>
      <arglist>(BranchEngineType *be)</arglist>
    </member>
    <member kind="function">
      <type>BranchEngineType *</type>
      <name>getBranchEngine</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>acf3f2b18e76e2c34b8e9f03755589d32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addObservable</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a72070e809a7e084c03c5f18131783552</anchor>
      <arglist>(const string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getObservable</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>acc0b54569f9928c879b72264951f877d</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTau</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a729705eecb7cbb3daa0e73f26b0ac709</anchor>
      <arglist>(RealType i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetComponents</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a163bcc2247c93e5b240683501f051daf</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; RandomGenerator_t * &gt; &amp;</type>
      <name>getRng</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a00095c64881e8badfd222c42eb3e1756</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RandomGenerator_t &amp;</type>
      <name>getRng</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ab28fac29178037a709a21cbf1d77939b</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CSVMC</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a39cdc8604e189ef3ad271520bb624cce</anchor>
      <arglist>(const CSVMC &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>CSVMC &amp;</type>
      <name>operator=</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a12a74afa4a10b83957075a2439d90205</anchor>
      <arglist>(const CSVMC &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>equilBlocks</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>af532625a6c27e2b44504a45aa9048d3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CSEnergyEstimator *</type>
      <name>multiEstimator</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>af65cbcf6786d4fd7d8c0951c9ad369bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CSUpdateBase *</type>
      <name>Mover</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a4255b3aababae5fa310254926f2017b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>QMC_UPDATE_MODE</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a2f80701c36e79c0640d91c788feee0b3acba0c089efab72de1d5a649cd1d6d000</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>QMC_MULTIPLE</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a2f80701c36e79c0640d91c788feee0b3a0c60339767d7b91f672c269a62cb4fcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>QMC_OPTIMIZE</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a2f80701c36e79c0640d91c788feee0b3a065c4c34d236182f0e81e1391677d8f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>QMC_WARMUP</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a2f80701c36e79c0640d91c788feee0b3a50279b072c1e6bde5be50ef0824044e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MCWalkerConfiguration::Walker_t</type>
      <name>Walker_t</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ac075f56c393d5ec9a998ec36c58ad7d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Walker_t::Buffer_t</type>
      <name>Buffer_t</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a690ee5b8c98bdd61fd8fe757016b0dd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SimpleFixedNodeBranch</type>
      <name>BranchEngineType</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>acf2a097fb72ce57ceac9b2c26ab89bad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bitset&lt; 4 &gt;</type>
      <name>QMCDriverMode</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a57d0b7403e3f3678dd8ecc22ddacaea6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EstimatorManager *</type>
      <name>Estimators</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a8f364f7ecb931509a05ca9bc0914ee39</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>QMCDriver</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a92c83374463b6136c047e648d9068f2f</anchor>
      <arglist>(const QMCDriver &amp;a)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>putQMCInfo</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a3ce2b7ea2621d1028b8435547b1ace3b</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addWalkers</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ad307427c9d13e3e9c3060ca68726038b</anchor>
      <arglist>(int nwalkers)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>recordBlock</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a8322bb5275f516b69c0728161e4a4917</anchor>
      <arglist>(int block)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>finalize</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ad4ac37057c1a83bb75dea21d340bd2c3</anchor>
      <arglist>(int block, bool dumpwalkers=true)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BranchEngineType *</type>
      <name>branchEngine</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aecc5822e89237b846f8934e8d1f7b75a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>ResetRandom</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a63879647eae2460284edb2d37d237656</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>AppendRun</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a8553797f317211ab0072e4a6ab372da3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>DumpConfig</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa7541acff28b1115531253ad5d85f54c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>ConstPopulation</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a98e631742da8bb955da4caaaac34891d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>MyCounter</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a1657c34e5477a5f4c41ce46dce4b00b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>RollBackBlocks</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a7c478763e2221c7995fd0b70e68e349a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>Period4CheckPoint</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a45ebc842a75dda015d528ab63aa57306</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>storeConfigs</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ac59016b206f716337f4d5e9d91eb6f28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>Period4CheckProperties</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a518648f93ccde63b338cae55484cfa11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>Period4WalkerDump</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a2bbef8fc404cc9a0a16c233d63655dfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>Period4ConfigDump</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a922c73667f055dafa523ecd2eaec9143</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexType</type>
      <name>CurrentStep</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a7f939c4c9f6e5b16c5e326e30b2e8c32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexType</type>
      <name>nBlocks</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ad79979c7f38673c27f7ece58e01fca21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexType</type>
      <name>nSteps</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa50fd39e20d8028c3c27da359460c80d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexType</type>
      <name>nSubSteps</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a9a8f58cdc97bcd593a4f9652dbf9bb21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexType</type>
      <name>nWarmupSteps</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a97e5b918213c6c95a3437888c687cc4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexType</type>
      <name>nAccept</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>abdd263a279ef9d586f4905d9b3405fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexType</type>
      <name>nReject</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a8b6764019d450a57d58f08ee5090960a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexType</type>
      <name>nTargetWalkers</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>af39f3afec8b08609873757984d474f8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexType</type>
      <name>nTargetSamples</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a664b85dfe43bd825a09cabc5a5545678</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexType</type>
      <name>nStepsBetweenSamples</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ab983f5dfb40a80f223e761d5e6c7a5e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>nSamplesPerThread</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a4085b014e0dbe7682024990b37f903f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>nTargetPopulation</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>af383980c275e2e39dc32bc1d332c6d45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>Tau</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a66fea1c65ee2dcf846ac7ec81f6b255c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>MaxCPUSecs</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aedb0df235617e5e6e14e9ba31594a5bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>m_oneover2tau</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a1a305c29f3fdab6ab9fc7ff4f391f4fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>m_sqrttau</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a5deb668c54acabd68e5c8a7de98f00e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>xmlNodePtr</type>
      <name>qmcNode</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa2c495864d96cd7b5e2301f29845ee5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>string</type>
      <name>QMCType</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a3ac4500423ac69c5a73ae55da3a252e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>string</type>
      <name>h5FileRoot</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a2d74d854e1dbf5fda9e057fba2c5b16c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>string</type>
      <name>RootName</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a4280eb5c7f0d275dce96a4f1083c5cf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParameterSet</type>
      <name>m_param</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ac32cb2af3a464bc66f40d4e335d87f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HDFWalkerOutput *</type>
      <name>wOut</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a7a96d1f7fce2178f748b6b482d3e1885</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MCWalkerConfiguration &amp;</type>
      <name>W</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ae7cc267f0c9018e7975d78d07e7e2061</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TrialWaveFunction &amp;</type>
      <name>Psi</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ad34f7fe2e50d37f4e8459655408d2ab5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>WaveFunctionPool &amp;</type>
      <name>psiPool</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a554c8502a62c5c6245e1a528ce921c8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QMCHamiltonian &amp;</type>
      <name>H</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a20f9366b9f2826911ca89ebaa012c0d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; TrialWaveFunction * &gt;</type>
      <name>Psi1</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ab559c0baf87bd186372538f91ac06824</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; QMCHamiltonian * &gt;</type>
      <name>H1</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a374f56d4ca1b2cf8f03eea659d884350</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; RandomGenerator_t * &gt;</type>
      <name>Rng</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a6b44e326aaa7b1ebb4161b4369e87884</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; xmlNodePtr &gt;</type>
      <name>mcwalkerNodePtr</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ade7891e7753e9235ddbb4fccd3b49fe4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; NewTimer * &gt;</type>
      <name>myTimers</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a7f1b158b9dd94f7e78276fafc68f365a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleSet::ParticlePos_t</type>
      <name>drift</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ae8dcdefc6b1ba8de3c005b4ff34e82d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleSet::ParticlePos_t</type>
      <name>deltaR</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a2b5b7b957146b0b7d152d3dd2d934796</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::CSVMC</name>
    <filename>a00112.html</filename>
    <anchor>a01437</anchor>
    <base>qmcplusplus::CSUpdateBase</base>
    <member kind="function">
      <type></type>
      <name>CSVMCUpdateAll</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a41386dbe1b6b4743a434b2080f8d40fa</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, RandomGenerator_t &amp;rg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceWalkers</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a4919bb20b7460bf920e666565262855b</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end, bool measure)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CSUpdateBase</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a004922507c145bf1ff9ad3ab5940c87a</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, RandomGenerator_t &amp;rg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CSUpdateBase</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a3a49759ecbfbd252d6caec63d19b3c5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeWorkSpace</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a267f021c13feea795acf26f2127977d9</anchor>
      <arglist>(int nw, int nptcls)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateNorms</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a257813116c06d83f4dc2a974a80ed466</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initCSWalkers</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>ab91eb34944f5efde2a4cb29205705a61</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end, bool resetNorms)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initCSWalkersForPbyP</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a73c65f232c51b11de793e182499dd7f4</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end, bool resetNorms)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateCSWalkers</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>ab6fd28009f941deb19dc176da1d4cc15</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QMCUpdateBase</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>addc73e24ac82b5f4bd78fbc94f80ad3c</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, RandomGenerator_t &amp;rg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QMCUpdateBase</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>aed9e9e5d387bea4a5814f6600da5b04a</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, TrialWaveFunction &amp;guide, QMCHamiltonian &amp;h, RandomGenerator_t &amp;rg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~QMCUpdateBase</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>aad5f34ddda616847466ffd4fb7d9085a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>acceptRatio</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>a262d2853f0dd717c2903559f85e641c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetRun</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>aaec598e49fc4c56c2e57e15d1b531254</anchor>
      <arglist>(BranchEngineType *brancher, EstimatorManager *est)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getTau</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>a5cae7dfd0b38536d2ca925163f95038f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTau</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>a729705eecb7cbb3daa0e73f26b0ac709</anchor>
      <arglist>(RealType i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getLogs</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>afb1aef11f759414a72f39a0c99dbb601</anchor>
      <arglist>(std::vector&lt; RealType &gt; &amp;logs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startRun</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>ac56c057390609a862c746d2f7f2ce0d2</anchor>
      <arglist>(int blocks, bool record)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopRun</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>aca1358cfcf601a31050c3cc6aa5c3f55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetEtrial</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>a65ddea020d9b24b5f0b129347f03d426</anchor>
      <arglist>(RealType et)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startBlock</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>a1f4809822b1e48094faa72ace7ce60dc</anchor>
      <arglist>(int steps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopBlock</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>aa52461a6a01e9af942e12101ddd02e1f</anchor>
      <arglist>(bool collectall=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMultiplicity</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>a145034283e9c0769ec56fc4c5b1a45f8</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReleasedNodeMultiplicity</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>a91b0a8ac0d2ea54469610610453b8079</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initWalkersForPbyP</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>acba2ad4bbd4a6fec7b8e8b8c4d64a6e5</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initWalkers</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>a61b616551167796ebba41a70b8026590</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateWalkers</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>a5176d30e9a77d6818392b20b1ed7a529</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>benchMark</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>ae970bce140f88b5b3880f24ac0c2b3c3</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end, int ip)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>a5998d35e0dae022f27666f05c2533222</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceWalker</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>a7b43376fea8b01681e474fff11d4a7e2</anchor>
      <arglist>(Walker_t &amp;thisWalker)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advancePbyP</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>a0f80e46ded643bfb5e42662cdf70a393</anchor>
      <arglist>(Walker_t &amp;thisWalker)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealType</type>
      <name>advanceWalkerForEE</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>a1dcf67736474cd66b639c62840617e2f</anchor>
      <arglist>(Walker_t &amp;w1, vector&lt; PosType &gt; &amp;dR, vector&lt; int &gt; &amp;iats, vector&lt; int &gt; &amp;rs, vector&lt; RealType &gt; &amp;ratios)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLogEpsilon</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>adef3ffdfdc2d7f182169b7ccac5fdd35</anchor>
      <arglist>(RealType eps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>RMC_checkIndex</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>a259c707f6f0dd8ef4c57c0be1c265e14</anchor>
      <arglist>(int N, int NMax)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RMC_checkWalkerBounds</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>a5d5e5e51d2eece1cf3ca7ccf5f923df7</anchor>
      <arglist>(WalkerIter_t &amp;it, WalkerIter_t first, WalkerIter_t last)</arglist>
    </member>
    <member kind="typedef">
      <type>MCWalkerConfiguration::Walker_t</type>
      <name>Walker_t</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>ac075f56c393d5ec9a998ec36c58ad7d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MCWalkerConfiguration::iterator</type>
      <name>WalkerIter_t</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>af47868b1428ec9e8cb6f713f3c05a397</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SimpleFixedNodeBranch</type>
      <name>BranchEngineType</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>acf2a097fb72ce57ceac9b2c26ab89bad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nPsi</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a69d64d239308fa583b91ca359b187f76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>useDrift</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>acbf5cb348907dffd7f6c45a3ab37b010</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>logpsi</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a66e4624c29e830c947ac79ee76cd2e3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>sumratio</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>ab6002ef91b14de0cfaf1e16b36863897</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>invsumratio</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>ad5dab4b5f9ea92709042794cbcf04ebf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>avgNorm</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a765a071a4711dbf875a52c83a2c5390c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>logNorm</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a5a2f2869ea769cdf974324aac2f6e905</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>cumNorm</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a89b50e25a1047b36ba5a094a0c2680ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>instRij</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a0b6397c669c4e52639843d48722eae21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; RealType &gt;</type>
      <name>ratioIJ</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a256ca1c6a16e5a082bcb6bb869b49194</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>useDriftOption</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>aafa040d26796d1b785ad3727998ebedc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CSEnergyEstimator *</type>
      <name>multiEstimator</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>af65cbcf6786d4fd7d8c0951c9ad369bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; TrialWaveFunction * &gt;</type>
      <name>Psi1</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>ab559c0baf87bd186372538f91ac06824</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; QMCHamiltonian * &gt;</type>
      <name>H1</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a374f56d4ca1b2cf8f03eea659d884350</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; ParticleSet::ParticleGradient_t * &gt;</type>
      <name>G1</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>ade6d8cacc86207b1e692ac9511556646</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; ParticleSet::ParticleLaplacian_t * &gt;</type>
      <name>L1</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a9662613e03841a6048f1d792124571cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>RealType</type>
      <name>getNodeCorrection</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>a76534334cc61356376a92ffb9fdf5ff9</anchor>
      <arglist>(const ParticleSet::ParticleGradient_t &amp;g, ParticleSet::ParticlePos_t &amp;gscaled)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>QMCUpdateBase</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>ab20873189681d8ee0c577ef45153dee8</anchor>
      <arglist>(const QMCUpdateBase &amp;a)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>randomize</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>a88165b0b04639e989328286d3436b6c9</anchor>
      <arglist>(Walker_t &amp;awalker)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>UpdatePbyP</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>aa30d600660a72812e5aeeaf30ea8ad8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>UseTMove</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>a092a4de037290144954444be479d41c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexType</type>
      <name>NumPtcl</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>a34fd7cc5dc2f8dbc8fb5b1c6e844f7e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>m_oneover2tau</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>a1a305c29f3fdab6ab9fc7ff4f391f4fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>m_sqrttau</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>a5deb668c54acabd68e5c8a7de98f00e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>m_tauovermass</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>a40a121bc98f666aa27811160f4a6d227</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>m_r2max</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>a111865b2f17d2f03ffb18c39417b205e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MCWalkerConfiguration &amp;</type>
      <name>W</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>ae7cc267f0c9018e7975d78d07e7e2061</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TrialWaveFunction &amp;</type>
      <name>Psi</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>ad34f7fe2e50d37f4e8459655408d2ab5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TrialWaveFunction &amp;</type>
      <name>Guide</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>a9d785f1e7ee4b6c2e6c2626f2346b3d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QMCHamiltonian &amp;</type>
      <name>H</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>a20f9366b9f2826911ca89ebaa012c0d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RandomGenerator_t &amp;</type>
      <name>RandomGen</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>a91d09c3841ccf52b6ac18f89f66fef74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BranchEngineType *</type>
      <name>branchEngine</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>aecc5822e89237b846f8934e8d1f7b75a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EstimatorManager *</type>
      <name>Estimators</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>a8f364f7ecb931509a05ca9bc0914ee39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParameterSet</type>
      <name>myParams</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>a4360a936a44fb9fbc8414ff45a61e998</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NonLocalTOperator</type>
      <name>nonLocalOps</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>a6e08e76556f5d09e8d2e06fa9a4595a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleSet::ParticlePos_t</type>
      <name>drift</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>ae8dcdefc6b1ba8de3c005b4ff34e82d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleSet::ParticlePos_t</type>
      <name>deltaR</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>a2b5b7b957146b0b7d152d3dd2d934796</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>G</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>a2e80ca05de55af93652e6a81ef04d683</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>dG</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>a1ac3bc9c38dee3a46f134d94f653fef4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleSet::ParticleLaplacian_t</type>
      <name>L</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>ad63a0bd353ede51d1f82c52e40822874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleSet::ParticleLaplacian_t</type>
      <name>dL</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>ad515bddd0bd26565398ff83fd432e766</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::CSVMCUpdateAll</name>
    <filename>a00112.html</filename>
    <anchor>a01438</anchor>
    <base>qmcplusplus::CSUpdateBase</base>
    <member kind="function">
      <type></type>
      <name>CSVMCUpdatePbyP</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aea32dd8747e220e2b4b51438ad32602d</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, RandomGenerator_t &amp;rg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CSVMCUpdatePbyP</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a34a20a4d9391848c22d27d0c01bdb011</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceWalkers</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a4919bb20b7460bf920e666565262855b</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end, bool measure)</arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::CSVMCUpdatePbyP</name>
    <filename>a00112.html</filename>
    <anchor>a01439</anchor>
    <base>qmcplusplus::QMCDriver</base>
    <member kind="function">
      <type></type>
      <name>DMC</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a29a176bc52aee2e3daaeacb0e6b40df9</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>resetUpdateEngine</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ab75724ed405a9e8b59ba4ee2512dbc10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DMC</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>abdfd8261e087de03c992b8139150a92a</anchor>
      <arglist>(const DMC &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>DMC &amp;</type>
      <name>operator=</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a7f253ff4e1bf7c738714caa40044b760</anchor>
      <arglist>(const DMC &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>KillNodeCrossing</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>adbf522e65ce8f313966acd66ab0f930a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>BranchInterval</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aae210e1c1aea2d669ae62a5ae9dd4a98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>BranchInfo</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a1f8ba0c21d7b891e7a5daeb271ecaa83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>KillWalker</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa9b956eaa38f9b7b0d006d83b81126f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>SwapWalkers</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ae1319d4716ea3468db523cc3b241dd84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>Reconfiguration</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>acec5e816be574555ae08fa68c5d8941a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>NonLocalMove</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a1f89316087c541e877f44635bc10b6d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>BenchMarkRun</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>afafbdaec3b806401c26872e558e24848</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>QMCUpdateBase *</type>
      <name>Mover</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a96ee2c70c6fe96cfd6a008645cd2f099</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::DMC</name>
    <filename>a00112.html</filename>
    <anchor>a01446</anchor>
    <base>qmcplusplus::QMCDriver</base>
    <member kind="function">
      <type></type>
      <name>DMCcuda</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aaeeb9d5dac90c0bc75f6a1d548c25328</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, WaveFunctionPool &amp;ppool)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>runWithNonlocal</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a05c7e1e177c0a8919c5416d1484a3284</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetUpdateEngine</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ab75724ed405a9e8b59ba4ee2512dbc10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DMCcuda</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a7382bb4f6324f974d9fb2fd9bba21dea</anchor>
      <arglist>(const DMCcuda &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>checkBounds</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ab2f2360bab847721f7cafeff0e6be8f1</anchor>
      <arglist>(const PosType &amp;newpos)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkBounds</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ad2813af47604174912a077e6f494f7af</anchor>
      <arglist>(vector&lt; PosType &gt; &amp;newpos, vector&lt; bool &gt; &amp;valid)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>DMCcuda &amp;</type>
      <name>operator=</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a8a302e14ce16d06638b52fd9e4f68df3</anchor>
      <arglist>(const DMCcuda &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>resetRun</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a442218b0310c97f8426d1df4e14764d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>NonLocalMove</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a1f89316087c541e877f44635bc10b6d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>ScaleWeight</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a1489900595ca907b7dd109a820195ecf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>m_tauovermass</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a40a121bc98f666aa27811160f4a6d227</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>myWarmupSteps</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a8fd5cf0c5e83b6741e1384309153eb1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>myPeriod4WalkerDump</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a3ecec8c07c1cd1f74fefa36980d7cbb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>QMCUpdateBase *</type>
      <name>Mover</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a96ee2c70c6fe96cfd6a008645cd2f099</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NonLocalTOperator</type>
      <name>NLop</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a51e7eeb96bcfc8f4708fd3ea9624d741</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NewTimer</type>
      <name>ResizeTimer</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>af48b04127f654b21a29f3507e444aa94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NewTimer</type>
      <name>DriftDiffuseTimer</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a25f361eb0ad8132038eccada3593275e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NewTimer</type>
      <name>BranchTimer</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a89684545929ef63dbcd9b9c97628eace</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NewTimer</type>
      <name>HTimer</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>abbc42c775bf78ce26f85a5544bcc1927</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::DMCcuda</name>
    <filename>a00112.html</filename>
    <anchor>a01447</anchor>
    <base>qmcplusplus::QMCDriver</base>
    <base>qmcplusplus::CloneManager</base>
    <member kind="function">
      <type></type>
      <name>DMCOMP</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a433f4e6a84eacfe02fd9eda7725c868a</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, HamiltonianPool &amp;hpool, WaveFunctionPool &amp;ppool)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTau</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a729705eecb7cbb3daa0e73f26b0ac709</anchor>
      <arglist>(RealType i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetComponents</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a3b43ab522de0bb55970a5d3d5257fa0d</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CloneManager</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a19e22089641198d423c9636f8a87318f</anchor>
      <arglist>(HamiltonianPool &amp;hpool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CloneManager</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>adac6c2085f6dd0e78f66ac03f7e8007f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeClones</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a1552fc653523c9ccca74d11e32ed5412</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;ham)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeClones_new</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>ac1be3d5ab1192772cfad3b80c8b820dd</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;ham)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeClones</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a7788993ae0dd8380230f23bdff3f5cd5</anchor>
      <arglist>(MCWalkerConfiguration &amp;wg, TrialWaveFunction &amp;guide)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeClones</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a58b2c1f8fbb35823fad979f0ec533a17</anchor>
      <arglist>(TrialWaveFunction &amp;guide)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>acceptRatio</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a262d2853f0dd717c2903559f85e641c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>resetUpdateEngines</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a495fa79d708efeb55b3e671fadb33536</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>benchMark</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ab3192d97ba570e545be284bf8252a584</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DMCOMP</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ac6ae601396a04e24574cb9517ef6275d</anchor>
      <arglist>(const DMCOMP &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>DMCOMP &amp;</type>
      <name>operator=</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a8d999d40b12d34d71d145074e5e4ef3e</anchor>
      <arglist>(const DMCOMP &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>KillNodeCrossing</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>adbf522e65ce8f313966acd66ab0f930a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>BranchInterval</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aae210e1c1aea2d669ae62a5ae9dd4a98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>BranchInfo</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a1f8ba0c21d7b891e7a5daeb271ecaa83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>KillWalker</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa9b956eaa38f9b7b0d006d83b81126f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>SwapWalkers</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ae1319d4716ea3468db523cc3b241dd84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>Reconfiguration</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>acec5e816be574555ae08fa68c5d8941a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>NonLocalMove</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a1f89316087c541e877f44635bc10b6d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>BenchMarkRun</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>afafbdaec3b806401c26872e558e24848</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>UseFastGrad</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a7c6e6a6bbf02bf59447e9fecb455d41c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>mover_MaxAge</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a0d79bb1f0d81e04aa2bb475d83990680</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HamiltonianPool &amp;</type>
      <name>cloneEngine</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a60613b189a6bf039b7182dcd94736ace</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexType</type>
      <name>NumThreads</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>ae44ef8f7a34bb9216a06725a67b71c57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; QMCUpdateBase * &gt;</type>
      <name>Movers</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a9acc2fca44f04522f4c9f5d9f773fdbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; EstimatorManager * &gt;</type>
      <name>estimatorClones</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>ace5c100ffb799ec8a5482fc378efb749</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; SimpleFixedNodeBranch * &gt;</type>
      <name>branchClones</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a4db531fa459114ff075c03491d4395c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; int &gt;</type>
      <name>wPerNode</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>aff7bf7883860c9d2b2a3ded93686427a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static vector&lt; MCWalkerConfiguration * &gt;</type>
      <name>wClones</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>aefee6f278044b1f08fdd16898ae007fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static vector&lt; MCWalkerConfiguration * &gt;</type>
      <name>wgClones</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a69736dfa7364aa3878c47c31a7c38b9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static vector&lt; TrialWaveFunction * &gt;</type>
      <name>psiClones</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>aa42b1254d07d4feff078e912696fdf60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static vector&lt; TrialWaveFunction * &gt;</type>
      <name>guideClones</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a00397e6f19daae34ca99af0b53c74901</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static vector&lt; QMCHamiltonian * &gt;</type>
      <name>hClones</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>af5de5f545e4d9c4f5d9201869e22fa41</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::DMCOMP</name>
    <filename>a00112.html</filename>
    <anchor>a01448</anchor>
    <base>qmcplusplus::QMCDriver</base>
    <base>qmcplusplus::CloneManager</base>
    <member kind="function">
      <type></type>
      <name>DMCOMPOPT</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ae5235c35f3f5b730060bbaeb722385b8</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, HamiltonianPool &amp;hpool, WaveFunctionPool &amp;ppool)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTau</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a729705eecb7cbb3daa0e73f26b0ac709</anchor>
      <arglist>(RealType i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillVectors</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a06d1873c61d9eeeb14790249059c61b1</anchor>
      <arglist>(std::vector&lt; RealType &gt; &amp;d, std::vector&lt; RealType &gt; &amp;hd, RealType &amp;e, Matrix&lt; RealType &gt; &amp;olp)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>resetUpdateEngines</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a495fa79d708efeb55b3e671fadb33536</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>benchMark</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ab3192d97ba570e545be284bf8252a584</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DMCOMPOPT</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a88a39ea37d03c6325bac29afa4a201a7</anchor>
      <arglist>(const DMCOMPOPT &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>DMCOMPOPT &amp;</type>
      <name>operator=</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a143bf3c614aa143d8aa292d4f1dabc17</anchor>
      <arglist>(const DMCOMPOPT &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>clearComponentMatrices</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>add928e97a0df382ea9ae59f9f66a4f11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>resizeForOpt</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a0b1e1b9ee111293e2ecf0847fd789c38</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>fillComponentMatrices</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a3fc6b0e5aa4851a40501e64f28b1f6da</anchor>
      <arglist>(std::vector&lt; RealType &gt; &amp;d, std::vector&lt; RealType &gt; &amp;hd, Walker_t &amp;w)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>KillNodeCrossing</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>adbf522e65ce8f313966acd66ab0f930a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>BranchInterval</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aae210e1c1aea2d669ae62a5ae9dd4a98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>BranchInfo</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a1f8ba0c21d7b891e7a5daeb271ecaa83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>KillWalker</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa9b956eaa38f9b7b0d006d83b81126f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>SwapWalkers</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ae1319d4716ea3468db523cc3b241dd84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>Reconfiguration</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>acec5e816be574555ae08fa68c5d8941a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>NonLocalMove</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a1f89316087c541e877f44635bc10b6d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>BenchMarkRun</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>afafbdaec3b806401c26872e558e24848</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>UseFastGrad</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a7c6e6a6bbf02bf59447e9fecb455d41c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>mover_MaxAge</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a0d79bb1f0d81e04aa2bb475d83990680</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumOptimizables</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a11c2e632bfaeac7ea06deaae05b79fa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>E_avg</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>af3de6436def182faea1cfcaf0e77e475</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>V_avg</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a3f7bb4473a8a10f09208ece7c63215c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>t</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>af45c6640f1d637c1f215e13d32f1dfeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; RealType &gt;</type>
      <name>D_E</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aabbebd4c01c23a8e1bf416cd15f17c76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; RealType &gt;</type>
      <name>D2</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a1881a678e16cb82a923ad1fb19fded39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; RealType &gt;</type>
      <name>D</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a42fc8eef16b48473edf489e958942d56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; RealType &gt;</type>
      <name>DT</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>adb0485ce049cf4f3e8cf80824b36454c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; RealType &gt;</type>
      <name>HD</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ac0f674953749abf04e8acc3a7ca37416</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; RealType &gt;</type>
      <name>Overlap</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a080ccf4b041413ad584299ebf046d5a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>sE</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a62ec12c3520c562ae5ca97fd5c08651d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>sE2</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a19d16f9b5a8b81f722a4eb5c6d59dfd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>ssE</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aad272b3340bc56108bb7bbacf379795b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>sN</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a39d29c38f744f98392f0fdff77c91749</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>sW</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a684c41435582cecb9db7ea1272f48cb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>smW</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a838d7761627b4205618d9443c506e206</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>myPeriod4WalkerDump</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a3ecec8c07c1cd1f74fefa36980d7cbb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>wlen</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a197b3ac5bd933185b774a8385c857f8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>Eindx</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ab8ac86712ec13e87fb68927aff0fff46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>samples_this_node</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ae91be6dc0a6de42c1ced7f4f403accdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>firsttime</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a641c834af44b6b03fe05dd29fb463065</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>printderivs</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a05a19cd426de2ab300cb04e4330fc774</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; opt_variables_type &gt;</type>
      <name>dummyOptVars</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a5776cedcdf25305b658235e2a910af65</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::DMCOMPOPT</name>
    <filename>a00112.html</filename>
    <anchor>a01449</anchor>
    <base>qmcplusplus::QMCDriver</base>
    <member kind="function">
      <type></type>
      <name>DMCPeta</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ac6c4f1799db97856f721001d491e5448</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>resetUpdateEngine</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ab75724ed405a9e8b59ba4ee2512dbc10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DMCPeta</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a1363c5cf7b920481e513497a446b223d</anchor>
      <arglist>(const DMCPeta &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>DMCPeta &amp;</type>
      <name>operator=</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a88be311f87d8de52574e607d08c1b49f</anchor>
      <arglist>(const DMCPeta &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>KillNodeCrossing</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>adbf522e65ce8f313966acd66ab0f930a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>BranchInterval</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aae210e1c1aea2d669ae62a5ae9dd4a98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>BranchInfo</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a1f8ba0c21d7b891e7a5daeb271ecaa83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>KillWalker</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa9b956eaa38f9b7b0d006d83b81126f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>SwapWalkers</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ae1319d4716ea3468db523cc3b241dd84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>Reconfiguration</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>acec5e816be574555ae08fa68c5d8941a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>NonLocalMove</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a1f89316087c541e877f44635bc10b6d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>BenchMarkRun</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>afafbdaec3b806401c26872e558e24848</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>QMCUpdateBase *</type>
      <name>Mover</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a96ee2c70c6fe96cfd6a008645cd2f099</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::DMCPeta</name>
    <filename>a00112.html</filename>
    <anchor>a01450</anchor>
    <base>qmcplusplus::QMCDriver</base>
    <member kind="function">
      <type></type>
      <name>DummyQMC</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a0b269dc33738dee788bc72c05295ffa9</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DummyQMC</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a787fe5490e11cb77da229a6656b30c08</anchor>
      <arglist>(const DummyQMC &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>DummyQMC &amp;</type>
      <name>operator=</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a778a36eba72305496abf1d47a7b59ef7</anchor>
      <arglist>(const DummyQMC &amp;)</arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::DummyQMC</name>
    <filename>a00112.html</filename>
    <anchor>a01454</anchor>
    <base>qmcplusplus::QMCLinearOptimize</base>
    <member kind="function">
      <type></type>
      <name>QMCCorrelatedSamplingLinearOptimize</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ae5332d162fc1188387ddee609df9d2e1</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, HamiltonianPool &amp;hpool, WaveFunctionPool &amp;ppool)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~QMCCorrelatedSamplingLinearOptimize</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aef0305acd9fef28ff19ada6c10d5fd5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>Func</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a600b22b9d9019cf03d5c1f84c54302b2</anchor>
      <arglist>(Return_t dl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QMCLinearOptimize</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a1c6a1ae977864ca853b7e62877b622b3</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, HamiltonianPool &amp;hpool, WaveFunctionPool &amp;ppool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~QMCLinearOptimize</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>adf2848f14ef1881e35d384632baa17a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetComponents</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a3b43ab522de0bb55970a5d3d5257fa0d</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConfiguration</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ad266fa1b99e3d57fe8ea469893f24362</anchor>
      <arglist>(const string &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWaveFunctionNode</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a9391d14a4c7330ef78282e2adfc2aee8</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tooLow</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aaed1a0a3e3a75dd32404bec66b6b4d47</anchor>
      <arglist>(RealType safeValue, RealType CurrentValue)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fitMappedStabilizers</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a32d9daa3f7e99489f8e8283e2f24259b</anchor>
      <arglist>(vector&lt; std::pair&lt; RealType, RealType &gt; &gt; &amp;mappedStabilizers, RealType &amp;XS, RealType &amp;val, RealType tooBig)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CubicFormula</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ae58834c105bd687202edfb3fe9f45266</anchor>
      <arglist>(double a, double b, double c, double d, double &amp;x1, double &amp;x2, double &amp;x3)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>QuarticMinimum</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a524859a24351194dfec7611c005ae071</anchor>
      <arglist>(vector&lt; RealType &gt; &amp;coefs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start_optimize</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>adbfb4992c8f7324dce89863826e5d966</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish_optimize</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ad7aeee5cf0cdd728309b107cbc7eca9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getLowestEigenvector</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>abfae471bd024c21a3da85e6bc2cf1d93</anchor>
      <arglist>(Matrix&lt; RealType &gt; &amp;A, Matrix&lt; RealType &gt; &amp;B, vector&lt; RealType &gt; &amp;ev)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getLowestEigenvector</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a7fb664e2e934d8f374085714a9793b2f</anchor>
      <arglist>(Matrix&lt; RealType &gt; &amp;A, vector&lt; RealType &gt; &amp;ev)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getSplitEigenvectors</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a2e28fac179b7440eec38aedb0a7c5a50</anchor>
      <arglist>(int first, int last, Matrix&lt; RealType &gt; &amp;FullLeft, Matrix&lt; RealType &gt; &amp;FullRight, vector&lt; RealType &gt; &amp;FullEV, vector&lt; RealType &gt; &amp;LocalEV, string CSF_Option, bool &amp;CSF_scaled)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getNonLinearRange</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa4f14466e8dd00475f5ab717a71c09c9</anchor>
      <arglist>(int &amp;first, int &amp;last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>orthoScale</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a30233b1e1c4f49ead63c5c0f9d9b311a</anchor>
      <arglist>(std::vector&lt; RealType &gt; &amp;dP, Matrix&lt; RealType &gt; &amp;S)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nonLinearRescale</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a54b4b5db1cf9d9d53111d316bf130bea</anchor>
      <arglist>(vector&lt; RealType &gt; &amp;dP, Matrix&lt; RealType &gt; &amp;S)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getNonLinearRescale</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aaaa66c640d4d2c31d01070c6ce0a35bc</anchor>
      <arglist>(vector&lt; RealType &gt; &amp;dP, Matrix&lt; RealType &gt; &amp;S)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateSamples</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a499488c176c6ff99a5955c72e2d9ae8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_timers</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a9ce9dd83b11c30d1db6e1838c396b9c2</anchor>
      <arglist>(vector&lt; NewTimer * &gt; &amp;timers)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>ValidCostFunction</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a5c367d80a0ba58540fe529a090e0d696</anchor>
      <arglist>(bool valid)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>VMCLinearOptOMP *</type>
      <name>vmcCSEngine</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a960f5d8361f3d8ffe0b0854321b5db6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumOfVMCWalkers</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a82ff359a70054e6a82c68f402b2c7322</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>Max_iterations</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a5802bb0d26fbb24a243cc79cb987934c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nstabilizers</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aede234b6723139ee4cf51708d37a9f85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>stabilizerScale</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ad6077d21da07058c676f456531d9d5b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>bigChange</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>abb77f5229ba32a508422a51f64dbe3d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>exp0</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a0ee68b087e51c6c0a90f9292ccfac92f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>exp1</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a848ecd349654687db69519de7a591a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>stepsize</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa294758fdde8ab77d31d4cb2a0a06bcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>savedQuadstep</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a62559c488e25e71ff905a60c8cecbfed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>MinMethod</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>adc01de755d0160e3738b6d63784f1781</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>GEVtype</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a3f8d1c920922961c596b565f9eee855e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>StabilizerMethod</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ab7dc6f05821ea33a29b0e9345c25021d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>GEVSplit</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a2e244e3991306aba6f4a0b5d207353e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>w_beta</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a7829566d6f37a9b320643bdb8045390e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>eigCG</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aff9052bcb67e9e0981b03b08ac8f61df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>TotalCGSteps</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a31996dfc8ca1f07f8e6d59d5ef4d7ea7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>PartID</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a4bc0457f8caa0d67bbfec3580efd8aa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumParts</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a5afe47622388de0b2fdbcd657f451d0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>WarmupBlocks</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a183e8c2698ee9226c6e78c2b5c38453c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumOfVMCWalkers</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a82ff359a70054e6a82c68f402b2c7322</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Max_iterations</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a5802bb0d26fbb24a243cc79cb987934c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>N</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a7722c8ecbb62d99aee7ce68b1752f337</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numParams</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a729dc25fb74e3e87f98e2bffffa46a5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>param_tol</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>af15ebaa5cea1f34854f8d02201a34094</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HamiltonianPool &amp;</type>
      <name>hamPool</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>acf4970f816b00ad6ac97b093652e00bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>QMCCostFunctionBase *</type>
      <name>optTarget</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a8a34bf582ebb7d1f379573386e1a22f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>QMCDriver *</type>
      <name>vmcEngine</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a81f43ce86cfe5c18950322d77ed4f7f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>xmlNodePtr</type>
      <name>wfNode</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a063e8b1b955f339eda1440b6a1d41b2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>xmlNodePtr</type>
      <name>optNode</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a490d4b858a7a3418f0ff6bed620ccad5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>optdir</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a42a62201883835dcf260685d2d08bf69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>optparm</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>abcbd19109e858b364d35564aa91c881e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; string &gt;</type>
      <name>ConfigFile</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aff6cf7912ecf765a41c4b559e2ac71b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; NewTimer * &gt;</type>
      <name>myTimers</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a7f1b158b9dd94f7e78276fafc68f365a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Timer</type>
      <name>t1</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a74d173c849a1e11b1c864cdaae6989a7</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::QMCCorrelatedSamplingLinearOptimize</name>
    <filename>a00112.html</filename>
    <anchor>a01507</anchor>
    <base>qmcplusplus::MPIObjectBase</base>
    <member kind="enumeration">
      <type></type>
      <name>FieldIndex_OPT</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a9978c8d025621ff8b09c606b29279c6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOGPSI_FIXED</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a9978c8d025621ff8b09c606b29279c6badd54e769445e73b5c39f9cd4634792f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOGPSI_FREE</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a9978c8d025621ff8b09c606b29279c6ba93822dfe24de90390858a3a8e9c28844</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENERGY_TOT</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a9978c8d025621ff8b09c606b29279c6bab62cd60b853261b4a115ad44164ac4c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENERGY_FIXED</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a9978c8d025621ff8b09c606b29279c6bac0f83d690ad5ce1dfaf6fde26477e005</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENERGY_NEW</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a9978c8d025621ff8b09c606b29279c6baeca78bb6b7d9eb77ad5af2204f087155</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REWEIGHT</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a9978c8d025621ff8b09c606b29279c6baef23e8286c59b52ae5017749ed2c6518</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LOGPSI_FIXED</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a9978c8d025621ff8b09c606b29279c6badd54e769445e73b5c39f9cd4634792f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LOGPSI_FREE</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a9978c8d025621ff8b09c606b29279c6ba93822dfe24de90390858a3a8e9c28844</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ENERGY_TOT</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a9978c8d025621ff8b09c606b29279c6bab62cd60b853261b4a115ad44164ac4c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ENERGY_FIXED</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a9978c8d025621ff8b09c606b29279c6bac0f83d690ad5ce1dfaf6fde26477e005</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ENERGY_NEW</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a9978c8d025621ff8b09c606b29279c6baeca78bb6b7d9eb77ad5af2204f087155</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REWEIGHT</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a9978c8d025621ff8b09c606b29279c6baef23e8286c59b52ae5017749ed2c6518</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SumIndex_OPT</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa3f063849ce357e4daec08cb17f583cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUM_E_BARE</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa3f063849ce357e4daec08cb17f583cfaa7e6b99774408993784fa409c03a0e8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUM_ESQ_BARE</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa3f063849ce357e4daec08cb17f583cfa2d6e0f559ac894ff96128fdc57691ed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUM_ABSE_BARE</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa3f063849ce357e4daec08cb17f583cfa014fd878edbab3af614ef9e8c9d40a0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUM_E_WGT</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa3f063849ce357e4daec08cb17f583cfa70d2c7eb5132343913ffaa1fedb2912c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUM_ESQ_WGT</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa3f063849ce357e4daec08cb17f583cfa6cf741bd9e5ad1e4f94f628ffbbbdd99</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUM_ABSE_WGT</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa3f063849ce357e4daec08cb17f583cfaf03c285821d6ce026e1a4d673771ecd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUM_WGT</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa3f063849ce357e4daec08cb17f583cfafddd3a046553b78ceeb589b42d76f51b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUM_WGTSQ</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa3f063849ce357e4daec08cb17f583cfa75d094ac18753a26400c11d48bd578e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUM_INDEX_SIZE</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa3f063849ce357e4daec08cb17f583cfacc0ed0303eb5593cc487c5afb3ca9375</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SUM_E_BARE</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa3f063849ce357e4daec08cb17f583cfaa7e6b99774408993784fa409c03a0e8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SUM_ESQ_BARE</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa3f063849ce357e4daec08cb17f583cfa2d6e0f559ac894ff96128fdc57691ed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SUM_ABSE_BARE</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa3f063849ce357e4daec08cb17f583cfa014fd878edbab3af614ef9e8c9d40a0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SUM_E_WGT</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa3f063849ce357e4daec08cb17f583cfa70d2c7eb5132343913ffaa1fedb2912c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SUM_ESQ_WGT</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa3f063849ce357e4daec08cb17f583cfa6cf741bd9e5ad1e4f94f628ffbbbdd99</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SUM_ABSE_WGT</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa3f063849ce357e4daec08cb17f583cfaf03c285821d6ce026e1a4d673771ecd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SUM_WGT</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa3f063849ce357e4daec08cb17f583cfafddd3a046553b78ceeb589b42d76f51b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SUM_WGTSQ</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa3f063849ce357e4daec08cb17f583cfa75d094ac18753a26400c11d48bd578e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SUM_INDEX_SIZE</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa3f063849ce357e4daec08cb17f583cfacc0ed0303eb5593cc487c5afb3ca9375</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QMCCostFunctionBase</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ab98ce41761a5c415cbc07f50c8e88e2c</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~QMCCostFunctionBase</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a4090a3d5ad5e53b38e202981a6aa64f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetCostFunction</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a291476ba9ab01eefccf22e5cd060e7e5</anchor>
      <arglist>(vector&lt; xmlNodePtr &gt; &amp;cset)</arglist>
    </member>
    <member kind="function">
      <type>Return_t &amp;</type>
      <name>Params</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ae87b52cdc640aa11165afeb1cea11431</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>Params</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>adb7164dbf4ec03e5a98ecae792dd6215</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getType</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a0f28ce64a75e5de6dbb4a3fbb77e0bbb</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>Cost</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa0f735cdec93d6f9e4e60b455520adcb</anchor>
      <arglist>(bool needGrad=true)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>computedCost</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a0116f36f58aed74a5907d7396813d416</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printEstimates</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a0f04685137a0ed75f808cd6705f44f86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GradCost</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a90131aad02159d47b84866599028ffc8</anchor>
      <arglist>(vector&lt; Return_t &gt; &amp;PGradient, const vector&lt; Return_t &gt; &amp;PM, Return_t FiniteDiff=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumParams</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a8373e0cbad128094da8039f0b52147a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSamples</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ae891646012df78ed6bcbb08887afa334</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resetPsi</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a4b6e51d6a6058ae77959ddf7a9d7b41c</anchor>
      <arglist>(bool final_reset=false)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resetWalkers</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>abee48e449ffdd92901a4795565d968b4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getParameterTypes</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa81ad6a03c403f5d8abf265fca62d416</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;types)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Report</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a72a38005ff37cabbe6b05655ac298839</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportParameters</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a71a0b5251a9d42f93047c93012de8592</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getReportCounter</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a0bdc0337e7dc98e7d2df66db83205ed4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWaveFunctionNode</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a9391d14a4c7330ef78282e2adfc2aee8</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recordParametersToPsi</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a4dc95d7474fef2c0f7923724301efc5b</anchor>
      <arglist>(Return_t e, Return_t v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAvgParameters</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a9c72769f91701ebecf7ca73ef7d67c42</anchor>
      <arglist>(int N)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTargetEnergy</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a99a7be9534e9e7cc70cc0413816eb49f</anchor>
      <arglist>(Return_t et)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRootName</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ab67082f6d9e7bc52e6ace0742de15d7f</anchor>
      <arglist>(const string &amp;aroot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStream</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a1d632597dfb1b9257aa648e8193f37de</anchor>
      <arglist>(ostream *os)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCoefficients</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ac7e47469a1029494a044086125d0e9df</anchor>
      <arglist>(xmlXPathContextPtr acontext, const char *cname)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lineoptimization</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>adcf29e2991b15d010ac201ea4a431ced</anchor>
      <arglist>(const vector&lt; Return_t &gt; &amp;x0, const vector&lt; Return_t &gt; &amp;gr, Return_t val0, Return_t &amp;dl, Return_t &amp;val_proj, Return_t &amp;lambda_max)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Return_t</type>
      <name>fillOverlapHamiltonianMatrices</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>acbc9a20cb2c9a9b8f46c64b726e26b8c</anchor>
      <arglist>(Matrix&lt; Return_t &gt; &amp;H2, Matrix&lt; Return_t &gt; &amp;Hamiltonian, Matrix&lt; Return_t &gt; &amp;Variance, Matrix&lt; Return_t &gt; &amp;Overlap)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Return_t</type>
      <name>fillOverlapHamiltonianMatrices</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aff53ac1967f3a9975a4f49031c29bab7</anchor>
      <arglist>(Matrix&lt; Return_t &gt; &amp;Left, Matrix&lt; Return_t &gt; &amp;Right, Matrix&lt; Return_t &gt; &amp;Overlap)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getConfigurations</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aae11159bf3881439e5ad889b217fd2bb</anchor>
      <arglist>(const string &amp;aroot)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>checkConfigurations</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a85f914e8bcbf3d1e372961ff917676f9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRng</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>af0aef49077812af6e9a2f8ca35afafe3</anchor>
      <arglist>(vector&lt; RandomGenerator_t * &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setneedGrads</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a3146e55694f35f3d055db4bf5bf8a959</anchor>
      <arglist>(bool tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDMC</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>adc7d8f57597bd4bac7d2e0873aac7b70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>ParticleGradient_t</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>abb2171fb3c9d4522fc7c1c9697ad5c97</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ParticleSet::ParticleLaplacian_t</type>
      <name>ParticleLaplacian_t</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>af2ea7ca4e5137b23312b319ecaa75f61</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkParameters</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ac7c48bb935e3f7d37d3b4b2be30b916d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateXmlNodes</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a98f90fd4d5cc0bf659f24e1c56b8b9f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual Return_t</type>
      <name>correlatedSampling</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a8fbac6c6e9a6f04e2b8c0c406283220f</anchor>
      <arglist>(bool needGrad=true)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MCWalkerConfiguration &amp;</type>
      <name>W</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ae7cc267f0c9018e7975d78d07e7e2061</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TrialWaveFunction &amp;</type>
      <name>Psi</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ad34f7fe2e50d37f4e8459655408d2ab5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QMCHamiltonian &amp;</type>
      <name>H</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a20f9366b9f2826911ca89ebaa012c0d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>needBuffering</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a1081810915c4faea47618d6f712fa044</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>hamiltonianNeedRatio</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aaa19539345e4a69b55532b51f8842d8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>Write2OneXml</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a182b23a0ae4a8fda5dd17b5aeba7a4b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>PowerE</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a75937b10a273a518bed79a1e18b32dcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumCostCalls</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a69957532ac1e2e374558e1c5bfbf1887</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumSamples</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a709013662102f5580b414769882fe36d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumOptimizables</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a11c2e632bfaeac7ea06deaae05b79fa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ReportCounter</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a89ba960b77c4c32e24d625bc43f60379</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Return_t</type>
      <name>w_en</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>afe0dd371ca290cfdd633bf5c7912ac00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Return_t</type>
      <name>w_var</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ad0122dce2d5498e9d00a1caa1dadb947</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Return_t</type>
      <name>w_abs</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a979fbd75648285d4a5c85fbbb8338255</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Return_t</type>
      <name>w_w</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ae8ebf10b58bb80e397fb7810666df64e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Return_t</type>
      <name>CostValue</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ae7a9fd2d9af2253308771bf277b1107c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Return_t</type>
      <name>Etarget</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ab5221127f8548735462d19decaef787f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Return_t</type>
      <name>EtargetEff</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ade154e6131cab4913dd339c655db1166</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Return_t</type>
      <name>NumWalkersEff</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>af9057f5c09797c71a34c37bcc5fd2d42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Return_t</type>
      <name>MinNumWalkers</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a3ad103787ce2df9af025b557efa134c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Return_t</type>
      <name>MaxWeight</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a6a22141d216868e786e0a1fd735c0f6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Return_t</type>
      <name>curAvg</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ac524fc1cc1961b95d8c5f957c6a6f1a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Return_t</type>
      <name>curVar</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ac076a54e83e8b84e1dbfd2baa21d5888</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Return_t</type>
      <name>curAvg_w</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa3612b1e5bbc13003629636566e31105</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Return_t</type>
      <name>curVar_w</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a5ad3cbdcec0c3a26196819c1533d36be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Return_t</type>
      <name>curVar_abs</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aaa502e0eefd9af1d9773ea29eb9762f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Return_t</type>
      <name>SmallWeight</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a55731ae14a4fe3828d56023538ee9aa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Return_t</type>
      <name>w_beta</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ad0d165da03bc496fec659626f6cb46cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>string</type>
      <name>GEVType</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>acfc0a8277c16d7fc1a92c8f4dd761446</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Return_t</type>
      <name>vmc_or_dmc</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a560955b4def499b64950852dd9cdd506</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>needGrads</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ac3ed88242b60872f9d2017fa23e1adc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Return_t</type>
      <name>CorrelationFactor</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a47471d362e44eaa80bc15594cec921b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opt_variables_type</type>
      <name>OptVariables</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a9ec4c4d447a98bc575737d504fceb289</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opt_variables_type</type>
      <name>OptVariablesForPsi</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a64dc6bd0fae241610fe2cf809fa96ca1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; TinyVector&lt; int, 2 &gt; &gt;</type>
      <name>equalVarMap</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ac6300e8adf3e2e7ecdc289a9bebfcaa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; TinyVector&lt; int, 2 &gt; &gt;</type>
      <name>negateVarMap</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a84376b9458499c48499782b86310bfe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ostream *</type>
      <name>msg_stream</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa6721a43e37f53f1eb6e2b9fcda42b00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>xmlNodePtr</type>
      <name>m_wfPtr</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ab6adbbe80be2e60fdce8f45cbfbbe1b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>xmlDocPtr</type>
      <name>m_doc_out</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a8a733d55abf468739993739026e16bf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; string, xmlNodePtr &gt;</type>
      <name>paramNodes</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ada00dc4c52381ae776cea50c6f69cf34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; string, xmlNodePtr &gt;</type>
      <name>coeffNodes</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a028017ad36c1986978dee2f2d5ba7c89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; string, pair&lt; xmlNodePtr, string &gt; &gt;</type>
      <name>attribNodes</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa233e9995b2822b94aca689a8b187f5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>string</type>
      <name>RootName</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a4280eb5c7f0d275dce96a4f1083c5cf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QMCHamiltonian</type>
      <name>H_KE</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ac8576d1f3a110c0e60cb37921e955301</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; RandomGenerator_t * &gt;</type>
      <name>RngSaved</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a764fdb81e76e3c55a7c7948b620814cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; RandomGenerator_t * &gt;</type>
      <name>MoverRng</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>afbb8e0e60a8ffc1a3a6b0bc45d67620c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>string</type>
      <name>includeNonlocalH</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a297046ef7dd1f72b50a348684f4df1c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Return_t &gt;</type>
      <name>SumValue</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a44c872f26a1d912bbb174118135105a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix&lt; Return_t &gt;</type>
      <name>Records</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a44b955268f83749d299d5d12b37770ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>string</type>
      <name>usebuffer</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a3b263cd79bd60077061c1bdad54f16f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>StoreDerivInfo</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a0653113c1ed2f2ed6f7e822a26260cfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>DerivStorageLevel</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aadb45355b719019ca218ed0383d90b93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; ParticleGradient_t * &gt;</type>
      <name>dLogPsi</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a0d6ea513277ab4323150cfbbaa4bfb05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; ParticleLaplacian_t * &gt;</type>
      <name>d2LogPsi</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>af8491a8ae14431d909865258fd0644d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ostream *</type>
      <name>debug_stream</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ad57d2224a636139e11b8e0e9e287e7a4</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::QMCCostFunctionBase</name>
    <filename>a00112.html</filename>
    <anchor>a01508</anchor>
    <base>qmcplusplus::QMCCostFunctionBase</base>
    <base>qmcplusplus::CloneManager</base>
    <member kind="typedef">
      <type>MCWalkerConfiguration::Walker_t</type>
      <name>Walker_t</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ac075f56c393d5ec9a998ec36c58ad7d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QMCCostFunctionCUDA</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a1ba3b6346d46d68e4ab9e3f394302798</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, HamiltonianPool &amp;hpool)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~QMCCostFunctionCUDA</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a70dd3f851271576a2570cf32195c93c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getConfigurations</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aad9763d3785e6a06f3c919859e512e82</anchor>
      <arglist>(const string &amp;aroot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkConfigurations</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a0ad4f6452b3ad8de9e45a592f555f3f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetWalkers</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa8362e825c11639cbe04a1cf41430de1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GradCost</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a5ebf16d7ad56628d30671779b13e4a9e</anchor>
      <arglist>(vector&lt; Return_t &gt; &amp;PGradient, const vector&lt; Return_t &gt; &amp;PM, Return_t FiniteDiff=0)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>fillOverlapHamiltonianMatrices</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ab3b0d8b58c353de1a701a6e98c3de29c</anchor>
      <arglist>(Matrix&lt; Return_t &gt; &amp;H2, Matrix&lt; Return_t &gt; &amp;Hamiltonian, Matrix&lt; Return_t &gt; &amp;Variance, Matrix&lt; Return_t &gt; &amp;Overlap)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>fillOverlapHamiltonianMatrices</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ab96cf54e77134d4e5751efd5edb7bc00</anchor>
      <arglist>(Matrix&lt; Return_t &gt; &amp;Left, Matrix&lt; Return_t &gt; &amp;Right)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>fillOverlapHamiltonianMatrices</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ad6bfb4f3c6ca294c77928e616fdf5832</anchor>
      <arglist>(Matrix&lt; Return_t &gt; &amp;Left, Matrix&lt; Return_t &gt; &amp;Right, Matrix&lt; Return_t &gt; &amp;Overlap)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>TrialWaveFunction::ValueMatrix_t</type>
      <name>ValueMatrix_t</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a43d9a873212b3545626e9dc8c8e0dbe0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>TrialWaveFunction::GradMatrix_t</type>
      <name>GradMatrix_t</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a658ca3b7b48f9898a0d6943d3c3b9cb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resetPsi</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>acb9619d4e90064d5033e60be27165368</anchor>
      <arglist>(bool final_reset=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Return_t</type>
      <name>correlatedSampling</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a4682e0521db911cceff64538cd23bd8c</anchor>
      <arglist>(bool needDerivs)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix&lt; Return_t &gt;</type>
      <name>Records</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a44b955268f83749d299d5d12b37770ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; vector&lt; Return_t &gt; &gt;</type>
      <name>TempDerivRecords</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a7dc804d6736abf95f9fcb744bfaf347d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; vector&lt; Return_t &gt; &gt;</type>
      <name>TempHDerivRecords</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a3ca4a3ad0168826e18f6d02c96e76813</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueMatrix_t</type>
      <name>LogPsi_Derivs</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ade36395974339907b22aadc2a3b09af0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueMatrix_t</type>
      <name>LocE_Derivs</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a13354fbf3ce892abaf9a8a62ac6fc27b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueMatrix_t</type>
      <name>d2logPsi_opt</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa9620aa5edbfa4db66311fcd394d352e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueMatrix_t</type>
      <name>d2logPsi_fixed</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ae15043d9bf7d7e341a46d772d98fd131</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GradMatrix_t</type>
      <name>dlogPsi_opt</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aac3332d2ce6d8ebbddd60dd4811ae9d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GradMatrix_t</type>
      <name>dlogPsi_fixed</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aaa1e634a1c63423bb91fa289a95e0d16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; Matrix&lt; Return_t &gt; * &gt;</type>
      <name>RecordsOnNode</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ad32b452de1bb9dc25fd561ba9bab6761</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; Matrix&lt; Return_t &gt; * &gt;</type>
      <name>DerivRecords</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a1d3712299e2b5b10d7a7ee6c5ce446f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; Matrix&lt; Return_t &gt; * &gt;</type>
      <name>HDerivRecords</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aeb43d35f7916d7adc48c27a1617650f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nVMCWalkers</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>afb3722def23e5e9a20c1b15c5364c888</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Return_t</type>
      <name>CSWeight</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a2d45a065ebb8f0e2c292c21fde4e3bbc</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::QMCCostFunctionCUDA</name>
    <filename>a00112.html</filename>
    <anchor>a01509</anchor>
    <base>qmcplusplus::QMCCostFunctionBase</base>
    <base>qmcplusplus::CloneManager</base>
    <member kind="function">
      <type></type>
      <name>QMCCostFunctionOMP</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aaa260eb221d842221bcf88d4b7d5f93e</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, HamiltonianPool &amp;hpool)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~QMCCostFunctionOMP</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a5718e595e5ac4aa2633e2cc82f713132</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getConfigurations</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aad9763d3785e6a06f3c919859e512e82</anchor>
      <arglist>(const string &amp;aroot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkConfigurations</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a0ad4f6452b3ad8de9e45a592f555f3f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetPsi</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>acb9619d4e90064d5033e60be27165368</anchor>
      <arglist>(bool final_reset=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetWalkers</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa8362e825c11639cbe04a1cf41430de1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GradCost</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a5ebf16d7ad56628d30671779b13e4a9e</anchor>
      <arglist>(vector&lt; Return_t &gt; &amp;PGradient, const vector&lt; Return_t &gt; &amp;PM, Return_t FiniteDiff=0)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>fillOverlapHamiltonianMatrices</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa7b9f9d6f1c7573af14c30baf9530196</anchor>
      <arglist>(Matrix&lt; Return_t &gt; &amp;H2, Matrix&lt; Return_t &gt; &amp;Hamiltonian, Matrix&lt; Return_t &gt; &amp;Variance, Matrix&lt; Return_t &gt; &amp;Overlap)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>fillOverlapHamiltonianMatrices</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a5df9e7ec312a382a3e13a38a7c1fdd98</anchor>
      <arglist>(Matrix&lt; Return_t &gt; &amp;Left, Matrix&lt; Return_t &gt; &amp;Right, Matrix&lt; Return_t &gt; &amp;Overlap)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Return_t</type>
      <name>correlatedSampling</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a17e039c230f57926037357912c4037ef</anchor>
      <arglist>(bool needGrad=true)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; QMCHamiltonian * &gt;</type>
      <name>H_KE_Node</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a418af1b30461b0008d3da6a1c9f3b920</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; Matrix&lt; Return_t &gt; * &gt;</type>
      <name>RecordsOnNode</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ad32b452de1bb9dc25fd561ba9bab6761</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; Matrix&lt; Return_t &gt; * &gt;</type>
      <name>DerivRecords</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a1d3712299e2b5b10d7a7ee6c5ce446f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; Matrix&lt; Return_t &gt; * &gt;</type>
      <name>HDerivRecords</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aeb43d35f7916d7adc48c27a1617650f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Return_t</type>
      <name>CSWeight</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a2d45a065ebb8f0e2c292c21fde4e3bbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; int &gt;</type>
      <name>nVMCWalkers</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a36de07da0f41d537311e854a0e9db8e5</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::QMCCostFunctionOMP</name>
    <filename>a00112.html</filename>
    <anchor>a01510</anchor>
    <base>qmcplusplus::QMCCostFunctionBase</base>
    <base>qmcplusplus::CloneManager</base>
    <member kind="function">
      <type></type>
      <name>QMCCSLinearOptimizeWFmanagerOMP</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ae62463d53a3f401049326f460d4299ed</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, HamiltonianPool &amp;hpool)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~QMCCSLinearOptimizeWFmanagerOMP</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a117552ce919a9444b555152fa7dab4f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getConfigurations</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aad9763d3785e6a06f3c919859e512e82</anchor>
      <arglist>(const string &amp;aroot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkConfigurations</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a0ad4f6452b3ad8de9e45a592f555f3f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startOptimization</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a8bb40d70af3f37d16a3e8f6d9db65522</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetPsi</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>acb9619d4e90064d5033e60be27165368</anchor>
      <arglist>(bool final_reset=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GradCost</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a5ebf16d7ad56628d30671779b13e4a9e</anchor>
      <arglist>(vector&lt; Return_t &gt; &amp;PGradient, const vector&lt; Return_t &gt; &amp;PM, Return_t FiniteDiff=0)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>fillOverlapHamiltonianMatrices</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a96b2fdcbb93d6af9cd2a69fbc7f91a89</anchor>
      <arglist>(Matrix&lt; Return_t &gt; &amp;H2, Matrix&lt; Return_t &gt; &amp;Hamiltonian, Matrix&lt; Return_t &gt; &amp;Variance, Matrix&lt; Return_t &gt; &amp;Overlap)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Return_t</type>
      <name>correlatedSampling</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>abfc0a04839ba2a1278c3f6b255484335</anchor>
      <arglist>(bool needGrad=true)</arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::QMCCSLinearOptimizeWFmanagerOMP</name>
    <filename>a00112.html</filename>
    <anchor>a01511</anchor>
    <base>qmcplusplus::QMCTraits</base>
    <base>qmcplusplus::MPIObjectBase</base>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>run</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a819646ee5d77f3209ee8d1f36bdaf5ce</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>put</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ad5f66fd1dbe5e3c62ee5f7f326446dee</anchor>
      <arglist>(xmlNodePtr cur)=0</arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::QMCDriver</name>
    <filename>a00112.html</filename>
    <anchor>a01512</anchor>
    <base>qmcplusplus::QMCLinearOptimize</base>
    <member kind="function">
      <type></type>
      <name>QMCFixedSampleLinearOptimize</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a13f6cd9215a7cfd2b3d080d9d2941ffd</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, HamiltonianPool &amp;hpool, WaveFunctionPool &amp;ppool)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~QMCFixedSampleLinearOptimize</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ae23f2b19d1c58080d3c61071b2f56c15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>Func</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ae3dd2e660423c1baccd3b020a6e7e09e</anchor>
      <arglist>(Return_t dl)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>ValidCostFunction</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a5c367d80a0ba58540fe529a090e0d696</anchor>
      <arglist>(bool valid)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumOfVMCWalkers</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a82ff359a70054e6a82c68f402b2c7322</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>Max_iterations</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a5802bb0d26fbb24a243cc79cb987934c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nstabilizers</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aede234b6723139ee4cf51708d37a9f85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>stabilizerScale</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ad6077d21da07058c676f456531d9d5b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>bigChange</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>abb77f5229ba32a508422a51f64dbe3d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>exp0</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a0ee68b087e51c6c0a90f9292ccfac92f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>exp1</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a848ecd349654687db69519de7a591a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>stepsize</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa294758fdde8ab77d31d4cb2a0a06bcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>savedQuadstep</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a62559c488e25e71ff905a60c8cecbfed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>MinMethod</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>adc01de755d0160e3738b6d63784f1781</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>GEVtype</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a3f8d1c920922961c596b565f9eee855e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>StabilizerMethod</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ab7dc6f05821ea33a29b0e9345c25021d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>GEVSplit</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a2e244e3991306aba6f4a0b5d207353e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>w_beta</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a7829566d6f37a9b320643bdb8045390e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>eigCG</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aff9052bcb67e9e0981b03b08ac8f61df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>TotalCGSteps</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a31996dfc8ca1f07f8e6d59d5ef4d7ea7</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::QMCFixedSampleLinearOptimize</name>
    <filename>a00112.html</filename>
    <anchor>a01513</anchor>
    <base>qmcplusplus::QMCDriver</base>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>run</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a819646ee5d77f3209ee8d1f36bdaf5ce</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>put</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::QMCLinearOptimize</name>
    <filename>a00112.html</filename>
    <anchor>a01516</anchor>
    <base>qmcplusplus::QMCDriver</base>
    <member kind="function">
      <type></type>
      <name>QMCOptimize</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a71505eb9091a00708142ac9508c6e2f8</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, HamiltonianPool &amp;hpool, WaveFunctionPool &amp;ppool)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~QMCOptimize</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a24e69bf34f43c9efe7597a2d8381ecf8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConfiguration</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ad266fa1b99e3d57fe8ea469893f24362</anchor>
      <arglist>(const string &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWaveFunctionNode</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a9391d14a4c7330ef78282e2adfc2aee8</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>QMCOptimize</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a8e162fb97449d40d6d54572f5d1c471a</anchor>
      <arglist>(const QMCOptimize &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>QMCOptimize &amp;</type>
      <name>operator=</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ae2843d2c62bcd63f28d3cc2f6011f8fe</anchor>
      <arglist>(const QMCOptimize &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>generateSamples</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a499488c176c6ff99a5955c72e2d9ae8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>PartID</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a4bc0457f8caa0d67bbfec3580efd8aa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumParts</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a5afe47622388de0b2fdbcd657f451d0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>WarmupBlocks</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a183e8c2698ee9226c6e78c2b5c38453c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumOfVMCWalkers</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a82ff359a70054e6a82c68f402b2c7322</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>SkipSampleGeneration</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a82399f860415e3dad38719c72720498e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>HamiltonianPool &amp;</type>
      <name>hamPool</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>acf4970f816b00ad6ac97b093652e00bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>QMCCostFunctionBase *</type>
      <name>optTarget</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a8a34bf582ebb7d1f379573386e1a22f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MinimizerBase&lt; RealType &gt; *</type>
      <name>optSolver</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a30beb13c89981efdbc0afeb7c2dfba8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>QMCDriver *</type>
      <name>vmcEngine</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a81f43ce86cfe5c18950322d77ed4f7f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>xmlNodePtr</type>
      <name>wfNode</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a063e8b1b955f339eda1440b6a1d41b2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>xmlNodePtr</type>
      <name>optNode</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a490d4b858a7a3418f0ff6bed620ccad5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>optmethod</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>af13ddeb93fd331e71681c425980d63df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; string &gt;</type>
      <name>ConfigFile</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aff6cf7912ecf765a41c4b559e2ac71b0</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::QMCOptimize</name>
    <filename>a00112.html</filename>
    <anchor>a01518</anchor>
    <base>qmcplusplus::QMCDriver</base>
    <base>qmcplusplus::CloneManager</base>
    <member kind="typedef">
      <type>PtclAttribTraits::ParticlePos_t</type>
      <name>ParticlePos_t</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a0f92a1f77f8abad9aa8644574d8dbabe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RMCSingleOMP</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a1526ca27a7804105fb46c0a48245d04e</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, HamiltonianPool &amp;hpool, WaveFunctionPool &amp;ppool)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>resetRun</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a442218b0310c97f8426d1df4e14764d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>RMCSingleOMP</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a21b98a670fded08467fbd8643606a535</anchor>
      <arglist>(const RMCSingleOMP &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>RMCSingleOMP &amp;</type>
      <name>operator=</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>af6db058c01406b7ed19c6fa544f4b637</anchor>
      <arglist>(const RMCSingleOMP &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>myPeriod4WalkerDump</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a3ecec8c07c1cd1f74fefa36980d7cbb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>rescaleDrift</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a81b0cd01b4af14327b2f5944ebd083a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>beads</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a0a32fc31675ca82e88bb6dad85bf13d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>resizeReptile</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ad2e5fcd5beaede896f88bd06c4adf1b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>beta</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>acee6bdb163d31cb1a7565e1e91ac67b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>Action</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a9ed1865a0ee1c0c9f2dfbabeba9d9724</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>TransProb</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a2e611a81e747b72472e9b1d91bba867b</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::RMCSingleOMP</name>
    <filename>a00112.html</filename>
    <anchor>a01523</anchor>
    <base>qmcplusplus::QMCUpdateBase</base>
    <member kind="enumvalue">
      <type>@</type>
      <name>SYM_ACTION</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a531c35e38ede3ea4e5ba5afb24b29493a2b806b0d610e8dc9554c71106b407899</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DMC_ACTION</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a531c35e38ede3ea4e5ba5afb24b29493a4d84e9df89de54391777b8ffd898add5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RMCUpdateAllWithDrift</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa062a455f7a0f265778a6b35b9bf963d</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, RandomGenerator_t &amp;rg, std::vector&lt; int &gt; act, std::vector&lt; int &gt; tp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RMCUpdateAllWithDrift</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>acdc4b7ad3679bbc18493269b15371e36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceWalkers</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a4919bb20b7460bf920e666565262855b</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end, bool measure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkReptile</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>adc00d0b3c1954f8a4c557aeeef6c7730</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initWalkers</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a61b616551167796ebba41a70b8026590</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ad3a7a4bbdc4392ba870adc82a2764ef1</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>RMCUpdateAllWithDrift</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a556b2e783d386f57b221960766584ded</anchor>
      <arglist>(const RMCUpdateAllWithDrift &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>RMCUpdateAllWithDrift &amp;</type>
      <name>operator=</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a31e905b4214f3b761736f1e73a5663d5</anchor>
      <arglist>(const RMCUpdateAllWithDrift &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>Action</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a9ed1865a0ee1c0c9f2dfbabeba9d9724</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>TransProb</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a2e611a81e747b72472e9b1d91bba867b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>scaleDrift</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ac16e7e4ec8f63f602a25f7b30e9b0237</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>actionType</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a02965d6ca5bb664b2696c2a9c40d78c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>BadState</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>af0278c9d7805c0e50ad46c318931fd60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nSubSteps</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>a0e0c407229cff008d822c2323b0589cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>MaxAge</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>a5839f9f8e92a3c07730a3a0fdf9b0323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>nAccept</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>abdd263a279ef9d586f4905d9b3405fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>nReject</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>a8b6764019d450a57d58f08ee5090960a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>nAllRejected</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>a6f3ee3f4fc8490fb9cc7c447fd9e172a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>nNodeCrossing</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>a0de29a15f2e9478f8a2b29093fcb12e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>NonLocalMoveAccepted</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>a00ce96df44902206155a298aea3d8aa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Tau</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>a66fea1c65ee2dcf846ac7ec81f6b255c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>csoffset</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>ad9dce9550c770c5a8baa4e7647cb6ac4</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::RMCUpdateAllWithDrift</name>
    <filename>a00112.html</filename>
    <anchor>a01524</anchor>
    <base>qmcplusplus::QMCUpdateBase</base>
    <member kind="enumvalue">
      <type>@</type>
      <name>SYM_ACTION</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a9334a5b9057f32da96db9b5c6a045d67a2b806b0d610e8dc9554c71106b407899</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DMC_ACTION</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a9334a5b9057f32da96db9b5c6a045d67a4d84e9df89de54391777b8ffd898add5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RMCUpdatePbyPWithDrift</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aebdc84a52d8ce9163d2f2942183428b4</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, RandomGenerator_t &amp;rg, std::vector&lt; int &gt; act, std::vector&lt; int &gt; tp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RMCUpdatePbyPWithDrift</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a724057848dd548e6e4cfb30de556af90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceWalkers</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a4919bb20b7460bf920e666565262855b</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end, bool measure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initWalkersForPbyP</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>acba2ad4bbd4a6fec7b8e8b8c4d64a6e5</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initWalkers</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a61b616551167796ebba41a70b8026590</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ad3a7a4bbdc4392ba870adc82a2764ef1</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>RMCUpdatePbyPWithDrift</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a264fff2e0b3cd374f8b331330f15a9b3</anchor>
      <arglist>(const RMCUpdatePbyPWithDrift &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>RMCUpdatePbyPWithDrift &amp;</type>
      <name>operator=</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a33f9cd477a5ed3714fcd02b159b5299c</anchor>
      <arglist>(const RMCUpdatePbyPWithDrift &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>Action</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a9ed1865a0ee1c0c9f2dfbabeba9d9724</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>TransProb</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a2e611a81e747b72472e9b1d91bba867b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>scaleDrift</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ac16e7e4ec8f63f602a25f7b30e9b0237</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>actionType</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a02965d6ca5bb664b2696c2a9c40d78c1</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::RMCUpdatePbyPWithDrift</name>
    <filename>a00112.html</filename>
    <anchor>a01525</anchor>
    <base>qmcplusplus::QMCDriver</base>
    <member kind="function">
      <type></type>
      <name>VMCcuda</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a6a7380e0d08903f550a169d949c04ce6</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, WaveFunctionPool &amp;ppool)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>runWithDrift</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ac916e4c76a0b54fba410b62ca48a0913</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>fillOverlapHamiltonianMatrices</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ada017ca8a7770898fcc0e8b0098b8fc3</anchor>
      <arglist>(Matrix&lt; RealType &gt; &amp;LeftM, Matrix&lt; RealType &gt; &amp;RightM)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpt</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aaac711e05fabf42acbe83e6afc70f7de</anchor>
      <arglist>(bool o)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>VMCcuda</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a5a857f921cc23cbf6e298a3cb502b171</anchor>
      <arglist>(const VMCcuda &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>VMCcuda &amp;</type>
      <name>operator=</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>abeaaf33c83f740d89d82f0a3e879622f</anchor>
      <arglist>(const VMCcuda &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>checkBounds</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a74d998cfe82a95221897e414183eb68a</anchor>
      <arglist>(vector&lt; PosType &gt; &amp;newpos, vector&lt; bool &gt; &amp;valid)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>resetRun</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a442218b0310c97f8426d1df4e14764d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>clearComponentMatrices</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>add928e97a0df382ea9ae59f9f66a4f11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>resizeForOpt</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a0b1e1b9ee111293e2ecf0847fd789c38</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>m_tauovermass</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a40a121bc98f666aa27811160f4a6d227</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>UseDrift</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>af19e401dbbdb6d49aa75354cb7d72a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>myPeriod4WalkerDump</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a3ecec8c07c1cd1f74fefa36980d7cbb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>opt_variables_type</type>
      <name>dummy</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ab0eff26fc8e6b2602bc14e494fae2ad7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numParams</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a729dc25fb74e3e87f98e2bffffa46a5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; ValueType &gt;</type>
      <name>d_logpsi_dalpha</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ad96d17e2048ee39bacdd8e7cd3e63b7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; ValueType &gt;</type>
      <name>d_hpsioverpsi_dalpha</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ae88cdfd4bb30f5d85c717914b7babb81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>w_beta</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a7829566d6f37a9b320643bdb8045390e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>w_alpha</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ae184cb6bd1f53fdde51e2cff03e08423</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>E_avg</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>af3de6436def182faea1cfcaf0e77e475</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>V_avg</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a3f7bb4473a8a10f09208ece7c63215c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>GEVtype</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a3f8d1c920922961c596b565f9eee855e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>forOpt</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a1ee9f97b58fa557c28eec22c41fd0bd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; RealType &gt;</type>
      <name>Olp</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ac2cd94adfb5a823b68f3ac3605d9c936</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; RealType &gt;</type>
      <name>Ham</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ab227ff668c8f221e9208bbf34ae870e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; RealType &gt;</type>
      <name>Ham2</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a25e210be4de14f8947a173cce07e4320</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; RealType &gt;</type>
      <name>D_E</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aabbebd4c01c23a8e1bf416cd15f17c76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; RealType &gt;</type>
      <name>HD2</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ab8898923f192fffc5f16407dc1ad8987</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; RealType &gt;</type>
      <name>HD</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ac0f674953749abf04e8acc3a7ca37416</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; RealType &gt;</type>
      <name>D</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a42fc8eef16b48473edf489e958942d56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>sE</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a62ec12c3520c562ae5ca97fd5c08651d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>sE2</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a19d16f9b5a8b81f722a4eb5c6d59dfd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>sE4</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a0f448773e92375b0f5e226252182c8a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>sW</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a684c41435582cecb9db7ea1272f48cb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>sN</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a39d29c38f744f98392f0fdff77c91749</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::VMCcuda</name>
    <filename>a00112.html</filename>
    <anchor>a01542</anchor>
    <base>qmcplusplus::QMCDriver</base>
    <base>qmcplusplus::CloneManager</base>
    <member kind="function">
      <type></type>
      <name>VMCLinearOptOMP</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a329953eac029f6d4e97615e34ed59fc1</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, HamiltonianPool &amp;hpool, WaveFunctionPool &amp;ppool)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VMCLinearOptOMP</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a6a0b987dcdbc7a10acf26f85d3b3bfe3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>fillOverlapHamiltonianMatrices</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa988ef57c5b2852e67007e2d2354fa77</anchor>
      <arglist>(Matrix&lt; RealType &gt; &amp;LeftM, Matrix&lt; RealType &gt; &amp;RightM)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearComponentMatrices</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>add928e97a0df382ea9ae59f9f66a4f11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>resetRun</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a442218b0310c97f8426d1df4e14764d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>VMCLinearOptOMP</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a2005dd573459c777e8734e70f2a094ce</anchor>
      <arglist>(const VMCLinearOptOMP &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>VMCLinearOptOMP &amp;</type>
      <name>operator=</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>af7405e5101fd0aaa74089283a2be01f7</anchor>
      <arglist>(const VMCLinearOptOMP &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>resizeForOpt</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a0b1e1b9ee111293e2ecf0847fd789c38</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>RealType</type>
      <name>fillComponentMatrices</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a88e26b235d6f164c5918be229f936660</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>myPeriod4WalkerDump</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a3ecec8c07c1cd1f74fefa36980d7cbb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>UseDrift</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>af19e401dbbdb6d49aa75354cb7d72a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumOptimizables</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a11c2e632bfaeac7ea06deaae05b79fa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>w_beta</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a7829566d6f37a9b320643bdb8045390e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>w_alpha</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ae184cb6bd1f53fdde51e2cff03e08423</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>E_avg</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>af3de6436def182faea1cfcaf0e77e475</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>V_avg</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a3f7bb4473a8a10f09208ece7c63215c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>GEVtype</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a3f8d1c920922961c596b565f9eee855e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RandomGenerator_t &gt;</type>
      <name>RngSaved</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a81ec6c0a5519894bc8d3f4c87b98bf9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; RealType &gt;</type>
      <name>Ham</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ab227ff668c8f221e9208bbf34ae870e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; RealType &gt;</type>
      <name>Ham2</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a25e210be4de14f8947a173cce07e4320</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; RealType &gt;</type>
      <name>Olp</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ac2cd94adfb5a823b68f3ac3605d9c936</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; RealType &gt;</type>
      <name>m_vec</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aae1c769d398fe917aeb1dac838a5ac28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; RealType &gt;</type>
      <name>s_vec</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a1159fb8f1bc085ef1649d64ed24987f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>printderivs</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a05a19cd426de2ab300cb04e4330fc774</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; RealType &gt;</type>
      <name>DerivRecords</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a06c99d7e78a7feb3deb6fada651bd1ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; RealType &gt;</type>
      <name>HDerivRecords</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa662ce3cdbf2596e53579b08f1e8f87c</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::VMCLinearOptOMP</name>
    <filename>a00112.html</filename>
    <anchor>a01543</anchor>
    <base>qmcplusplus::QMCDriver</base>
    <member kind="function">
      <type></type>
      <name>VMCMultipleWarp</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a33fae40a26f954ee37d498c94d7597a1</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, ParticleSetPool &amp;ptclPool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceWalkerByWalker</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a55a44d689126bdab38c90a1b88738cac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>VMCMultipleWarp</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a063dd9c71c75d61df61bb84fa033b742</anchor>
      <arglist>(const VMCMultipleWarp &amp;a, ParticleSetPool &amp;ptclPool)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>VMCMultipleWarp &amp;</type>
      <name>operator=</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ae4a4ba24b0df34feaf8c52847a84f8b1</anchor>
      <arglist>(const VMCMultipleWarp &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSetPool &amp;</type>
      <name>PtclPool</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a39b16d3a235f8d1a9149373a05cddeed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MultipleEnergyEstimator *</type>
      <name>multiEstimator</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a1ced9eb86759aa1c860bde76548d009d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>refSetName</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ac32a30ae7881969cceb9695ad3bcfb37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SpaceWarp</type>
      <name>PtclWarp</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a8594b1994f01af209ca95c8b571e40d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nPsi</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a69d64d239308fa583b91ca359b187f76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>equilBlocks</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>af532625a6c27e2b44504a45aa9048d3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nptcl</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a4c2c6e7361b4c13b50abb715fbd0c71a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>JACOBIAN</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa0f8f76b47b86b48c12546d3ea98bb17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>logpsi</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a66e4624c29e830c947ac79ee76cd2e3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>sumratio</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ab6002ef91b14de0cfaf1e16b36863897</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>invsumratio</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ad5dab4b5f9ea92709042794cbcf04ebf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>Jacobian</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a887f29ae0a4df6b08e309dd5895454ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>Norm</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a1185a6705bbe204f0251be0c4fbcfd58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; ParticleSet * &gt;</type>
      <name>WW</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a6a245d023962ca0fb13ba9527ee7ad01</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::VMCMultipleWarp</name>
    <filename>a00112.html</filename>
    <anchor>a01544</anchor>
    <base>qmcplusplus::QMCDriver</base>
    <member kind="function">
      <type></type>
      <name>VMCPbyPMultiple</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aac56eae32ba45cefc1d9603a959888d6</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VMCPbyPMultiple</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ab89c3b8292eef33d9ea7de1da269a2f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>ParticleGradient_t</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>abb2171fb3c9d4522fc7c1c9697ad5c97</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ParticleSet::ParticleLaplacian_t</type>
      <name>ParticleLaplacian_t</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>af2ea7ca4e5137b23312b319ecaa75f61</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a37a21e1fc22df0441e3028873d32c1e1</anchor>
      <arglist>(int ncopy, int nptcls)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>VMCPbyPMultiple</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aaac25f927a9058d4d5ac3aba7144cd46</anchor>
      <arglist>(const VMCPbyPMultiple &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>VMCPbyPMultiple &amp;</type>
      <name>operator=</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a64007864ef79762e7c5966923df7f7b0</anchor>
      <arglist>(const VMCPbyPMultiple &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nPsi</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a69d64d239308fa583b91ca359b187f76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>equilBlocks</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>af532625a6c27e2b44504a45aa9048d3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>useDrift</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>acbf5cb348907dffd7f6c45a3ab37b010</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>useDriftOpt</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>abca436a4829b8eb563da5e842f0ea0fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleGradient_t</type>
      <name>dG</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa02c08c2342c5640c1b74696b6e7b4ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; ParticleGradient_t * &gt;</type>
      <name>G</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>af47212ce8217d73a5a0a29f5cbd1efd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; ParticleLaplacian_t * &gt;</type>
      <name>dL</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>af13db98f8a0b72828d679720d2d1790b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>ratio</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a83e1c016981e473178e8f80b6662a095</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>ratioij</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a28fcb9bca62f8ff7c4cdc85cc85175b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>logpsi2</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a376f84037bce5b853ea58edc7cdda0a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>UmbrellaWeight</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a744aa1b8b8e8c43f1d3c00b241279d66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>sumratio</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ab6002ef91b14de0cfaf1e16b36863897</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>invsumratio</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ad5dab4b5f9ea92709042794cbcf04ebf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MultipleEnergyEstimator *</type>
      <name>multiEstimator</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a1ced9eb86759aa1c860bde76548d009d</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::VMCPbyPMultiple</name>
    <filename>a00112.html</filename>
    <anchor>a01545</anchor>
    <base>qmcplusplus::QMCDriver</base>
    <member kind="function">
      <type></type>
      <name>VMCPbyPMultiWarp</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a3cc4a77797c6c27274aad2bc2f493563</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, ParticleSetPool &amp;ptclPool)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VMCPbyPMultiWarp</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a0823806b2c4aad443bf68f26e52ee72c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>ParticleGradient_t</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>abb2171fb3c9d4522fc7c1c9697ad5c97</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ParticleSet::ParticleLaplacian_t</type>
      <name>ParticleLaplacian_t</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>af2ea7ca4e5137b23312b319ecaa75f61</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>VMCPbyPMultiWarp</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a2641f76531dae044e14e2d1c68b214ea</anchor>
      <arglist>(const VMCPbyPMultiWarp &amp;a, ParticleSetPool &amp;ptclPool)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>VMCPbyPMultiWarp &amp;</type>
      <name>operator=</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ad0e77cf1f76d1d341d320d2a828a57c7</anchor>
      <arglist>(const VMCPbyPMultiWarp &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a37a21e1fc22df0441e3028873d32c1e1</anchor>
      <arglist>(int ncopy, int nptcls)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSetPool &amp;</type>
      <name>PtclPool</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a39b16d3a235f8d1a9149373a05cddeed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nPsi</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a69d64d239308fa583b91ca359b187f76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nptcl</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a4c2c6e7361b4c13b50abb715fbd0c71a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>JACOBIAN</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa0f8f76b47b86b48c12546d3ea98bb17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>equilBlocks</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>af532625a6c27e2b44504a45aa9048d3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleGradient_t</type>
      <name>dG</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aa02c08c2342c5640c1b74696b6e7b4ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; ParticleGradient_t * &gt;</type>
      <name>G</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>af47212ce8217d73a5a0a29f5cbd1efd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; ParticleLaplacian_t * &gt;</type>
      <name>dL</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>af13db98f8a0b72828d679720d2d1790b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>ratio</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a83e1c016981e473178e8f80b6662a095</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>ratioij</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a28fcb9bca62f8ff7c4cdc85cc85175b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>logpsi2</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a376f84037bce5b853ea58edc7cdda0a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>UmbrellaWeight</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a744aa1b8b8e8c43f1d3c00b241279d66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>sumratio</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ab6002ef91b14de0cfaf1e16b36863897</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>invsumratio</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ad5dab4b5f9ea92709042794cbcf04ebf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; ParticleSet * &gt;</type>
      <name>WW</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a6a245d023962ca0fb13ba9527ee7ad01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MultipleEnergyEstimator *</type>
      <name>multiEstimator</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a1ced9eb86759aa1c860bde76548d009d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>refSetName</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ac32a30ae7881969cceb9695ad3bcfb37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SpaceWarp</type>
      <name>PtclWarp</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a8594b1994f01af209ca95c8b571e40d0</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::VMCPbyPMultiWarp</name>
    <filename>a00112.html</filename>
    <anchor>a01546</anchor>
    <base>qmcplusplus::QMCDriver</base>
    <base>qmcplusplus::CloneManager</base>
    <member kind="function">
      <type></type>
      <name>VMCSingleOMP</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a239e920aae0608a30588bf509d62e356</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, HamiltonianPool &amp;hpool, WaveFunctionPool &amp;ppool)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>resetRun</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a442218b0310c97f8426d1df4e14764d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>VMCSingleOMP</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ac2bdcbe32e6561a064ad7914152e025b</anchor>
      <arglist>(const VMCSingleOMP &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>VMCSingleOMP &amp;</type>
      <name>operator=</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a04735682a6198cbb627c3f963e5272bb</anchor>
      <arglist>(const VMCSingleOMP &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>UseDrift</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>af19e401dbbdb6d49aa75354cb7d72a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>logoffset</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a73e19c94818a748a232a3442320fb1c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>logepsilon</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a01ba2b9c3721cede54bde80e95ff44e3</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::VMCSingleOMP</name>
    <filename>a00112.html</filename>
    <anchor>a01547</anchor>
    <base>qmcplusplus::QMCUpdateBase</base>
    <member kind="function">
      <type></type>
      <name>VMCUpdateAll</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a6c6649f951ade78230e560aefa1ce47d</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, RandomGenerator_t &amp;rg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VMCUpdateAll</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a1a68e09f19eb2139d12d19c026859088</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceWalkers</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a4919bb20b7460bf920e666565262855b</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end, bool measure)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>VMCUpdateAll</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a5a3c91acfe45ed7630f46104c85b0dba</anchor>
      <arglist>(const VMCUpdateAll &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>VMCUpdateAll &amp;</type>
      <name>operator=</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a0912723c4c8bf35885a8de4ba6112c2e</anchor>
      <arglist>(const VMCUpdateAll &amp;)</arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::VMCUpdateAll</name>
    <filename>a00112.html</filename>
    <anchor>a01548</anchor>
    <base>qmcplusplus::QMCUpdateBase</base>
    <member kind="function">
      <type></type>
      <name>VMCUpdateAllWithDrift</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a2446b0ce80299efc4f8a7a0aa9bc4bf2</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, RandomGenerator_t &amp;rg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VMCUpdateAllWithDrift</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ab07473994ef89e0686a22488e93842de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceWalkers</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a4919bb20b7460bf920e666565262855b</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end, bool measure)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>advanceWalkerForEE</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a9b6fe669bdcf3de0ef230c0602663fd6</anchor>
      <arglist>(Walker_t &amp;w1, vector&lt; PosType &gt; &amp;dR, vector&lt; int &gt; &amp;iats, vector&lt; int &gt; &amp;rs, vector&lt; RealType &gt; &amp;ratios)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>VMCUpdateAllWithDrift</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a4e8f5fad989c6e5f8a7f8a1244e99aa8</anchor>
      <arglist>(const VMCUpdateAllWithDrift &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>VMCUpdateAllWithDrift &amp;</type>
      <name>operator=</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a3fca816f8e3895484ad190c24f3d2185</anchor>
      <arglist>(const VMCUpdateAllWithDrift &amp;)</arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::VMCUpdateAllWithDrift</name>
    <filename>a00112.html</filename>
    <anchor>a01549</anchor>
    <base>qmcplusplus::QMCUpdateBase</base>
    <member kind="function">
      <type></type>
      <name>VMCUpdatePbyP</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a5f99696bc5b72ad1fc717f9e35df0f13</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, RandomGenerator_t &amp;rg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VMCUpdatePbyP</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a48ef323f15e386fb121d1f389e413aca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceWalkers</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a4919bb20b7460bf920e666565262855b</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end, bool measure)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>advanceWalkerForEE</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a8324ddbb65338b2ffa128bb349fa804e</anchor>
      <arglist>(Walker_t &amp;w1, vector&lt; PosType &gt; &amp;dR, vector&lt; int &gt; &amp;iats, vector&lt; int &gt; &amp;rs, vector&lt; RealType &gt; &amp;ratios)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; NewTimer * &gt;</type>
      <name>myTimers</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a7f1b158b9dd94f7e78276fafc68f365a</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::VMCUpdatePbyP</name>
    <filename>a00112.html</filename>
    <anchor>a01550</anchor>
    <base>qmcplusplus::QMCUpdateBase</base>
    <member kind="function">
      <type></type>
      <name>VMCUpdatePbyPWithDrift</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a090f309edd37d813782a13b160cb9a97</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, RandomGenerator_t &amp;rg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VMCUpdatePbyPWithDrift</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a8226204f7f1299f043e30b5c1bc20c1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceWalkers</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a4919bb20b7460bf920e666565262855b</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end, bool measure)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; NewTimer * &gt;</type>
      <name>myTimers</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a7f1b158b9dd94f7e78276fafc68f365a</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::VMCUpdatePbyPWithDrift</name>
    <filename>a00112.html</filename>
    <anchor>a01551</anchor>
    <base>qmcplusplus::QMCUpdateBase</base>
    <member kind="function">
      <type></type>
      <name>VMCUpdatePbyPWithDriftFast</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a60abec11a0cafd7c0cb4edb2a254745a</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, RandomGenerator_t &amp;rg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VMCUpdatePbyPWithDriftFast</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a0c1cf14f2341ddfc99d4abb04d21278f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceWalkers</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a4919bb20b7460bf920e666565262855b</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end, bool measure)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>advanceWalkerForEE</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a0f1f3a9b9a233561c3f8e4945775b402</anchor>
      <arglist>(Walker_t &amp;w1, vector&lt; PosType &gt; &amp;dR, vector&lt; int &gt; &amp;iats, vector&lt; int &gt; &amp;rs, vector&lt; RealType &gt; &amp;ratios)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; NewTimer * &gt;</type>
      <name>myTimers</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a7f1b158b9dd94f7e78276fafc68f365a</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::VMCUpdatePbyPWithDriftFast</name>
    <filename>a00112.html</filename>
    <anchor>a01552</anchor>
    <base>qmcplusplus::QMCUpdateBase</base>
    <member kind="function">
      <type></type>
      <name>VMCUpdateRenyiWithDriftFast</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a6a4c4e43c8934ed5daa4601a8d8c55d4</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, RandomGenerator_t &amp;rg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VMCUpdateRenyiWithDriftFast</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a1d265d322e12c46c5ee2e910366c0b4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceWalkers</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a4919bb20b7460bf920e666565262855b</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end, bool measure)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; NewTimer * &gt;</type>
      <name>myTimers</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a7f1b158b9dd94f7e78276fafc68f365a</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::VMCUpdateRenyiWithDriftFast</name>
    <filename>a00112.html</filename>
    <anchor>a01553</anchor>
  </compound>
  <compound kind="group">
    <name>WalkerByWalker</name>
    <title>QMC Drivers using walker-by-walker update</title>
    <filename>a01420.html</filename>
    <class kind="class">qmcplusplus::CSVMC</class>
    <class kind="class">qmcplusplus::CSVMCUpdateAll</class>
    <class kind="class">qmcplusplus::VMCMultipleWarp</class>
    <base>qmcplusplus::QMCDriver</base>
  <compound kind="class">
    <name>qmcplusplus::CSVMC</name>
    <filename>a00112.html</filename>
    <anchor>a01437</anchor>
    <base>qmcplusplus::CSUpdateBase</base>
  <compound kind="class">
    <name>qmcplusplus::CSVMCUpdateAll</name>
    <filename>a00112.html</filename>
    <anchor>a01438</anchor>
    <base>qmcplusplus::QMCDriver</base>
  <compound kind="class">
    <name>qmcplusplus::VMCMultipleWarp</name>
    <filename>a00112.html</filename>
    <anchor>a01544</anchor>
  </compound>
  <compound kind="group">
    <name>ParticleByParticle</name>
    <title>QMC Drivers using particle-by-particle update</title>
    <filename>a01421.html</filename>
    <class kind="class">qmcplusplus::CSVMCUpdatePbyP</class>
    <class kind="class">qmcplusplus::RMCSingleOMP</class>
    <class kind="class">qmcplusplus::RMCUpdateAllWithDrift</class>
    <class kind="class">qmcplusplus::RMCUpdatePbyPWithDrift</class>
    <class kind="class">qmcplusplus::VMCLinearOptOMP</class>
    <class kind="class">qmcplusplus::VMCPbyPMultiple</class>
    <class kind="class">qmcplusplus::VMCPbyPMultiWarp</class>
    <class kind="class">qmcplusplus::VMCSingleOMP</class>
    <class kind="class">qmcplusplus::VMCUpdateAll</class>
    <class kind="class">qmcplusplus::VMCUpdateAllWithDrift</class>
    <class kind="class">qmcplusplus::VMCUpdatePbyP</class>
    <class kind="class">qmcplusplus::VMCUpdatePbyPWithDrift</class>
    <class kind="class">qmcplusplus::VMCUpdatePbyPWithDriftFast</class>
    <class kind="class">qmcplusplus::VMCUpdateRenyiWithDriftFast</class>
    <base>qmcplusplus::CSUpdateBase</base>
  <compound kind="class">
    <name>qmcplusplus::CSVMCUpdatePbyP</name>
    <filename>a00112.html</filename>
    <anchor>a01439</anchor>
    <base>qmcplusplus::QMCDriver</base>
    <base>qmcplusplus::CloneManager</base>
  <compound kind="class">
    <name>qmcplusplus::RMCSingleOMP</name>
    <filename>a00112.html</filename>
    <anchor>a01523</anchor>
    <base>qmcplusplus::QMCUpdateBase</base>
  <compound kind="class">
    <name>qmcplusplus::RMCUpdateAllWithDrift</name>
    <filename>a00112.html</filename>
    <anchor>a01524</anchor>
    <base>qmcplusplus::QMCUpdateBase</base>
  <compound kind="class">
    <name>qmcplusplus::RMCUpdatePbyPWithDrift</name>
    <filename>a00112.html</filename>
    <anchor>a01525</anchor>
    <base>qmcplusplus::QMCDriver</base>
    <base>qmcplusplus::CloneManager</base>
  <compound kind="class">
    <name>qmcplusplus::VMCLinearOptOMP</name>
    <filename>a00112.html</filename>
    <anchor>a01543</anchor>
    <base>qmcplusplus::QMCDriver</base>
  <compound kind="class">
    <name>qmcplusplus::VMCPbyPMultiple</name>
    <filename>a00112.html</filename>
    <anchor>a01545</anchor>
    <base>qmcplusplus::QMCDriver</base>
  <compound kind="class">
    <name>qmcplusplus::VMCPbyPMultiWarp</name>
    <filename>a00112.html</filename>
    <anchor>a01546</anchor>
    <base>qmcplusplus::QMCDriver</base>
    <base>qmcplusplus::CloneManager</base>
  <compound kind="class">
    <name>qmcplusplus::VMCSingleOMP</name>
    <filename>a00112.html</filename>
    <anchor>a01547</anchor>
    <base>qmcplusplus::QMCUpdateBase</base>
  <compound kind="class">
    <name>qmcplusplus::VMCUpdateAll</name>
    <filename>a00112.html</filename>
    <anchor>a01548</anchor>
    <base>qmcplusplus::QMCUpdateBase</base>
  <compound kind="class">
    <name>qmcplusplus::VMCUpdateAllWithDrift</name>
    <filename>a00112.html</filename>
    <anchor>a01549</anchor>
    <base>qmcplusplus::QMCUpdateBase</base>
  <compound kind="class">
    <name>qmcplusplus::VMCUpdatePbyP</name>
    <filename>a00112.html</filename>
    <anchor>a01550</anchor>
    <base>qmcplusplus::QMCUpdateBase</base>
  <compound kind="class">
    <name>qmcplusplus::VMCUpdatePbyPWithDrift</name>
    <filename>a00112.html</filename>
    <anchor>a01551</anchor>
    <base>qmcplusplus::QMCUpdateBase</base>
  <compound kind="class">
    <name>qmcplusplus::VMCUpdatePbyPWithDriftFast</name>
    <filename>a00112.html</filename>
    <anchor>a01552</anchor>
    <base>qmcplusplus::QMCUpdateBase</base>
  <compound kind="class">
    <name>qmcplusplus::VMCUpdateRenyiWithDriftFast</name>
    <filename>a00112.html</filename>
    <anchor>a01553</anchor>
  </compound>
  <compound kind="group">
    <name>MultiplePsi</name>
    <title>QMC Drivers for energy differences</title>
    <filename>a01422.html</filename>
    <class kind="class">qmcplusplus::CSVMC</class>
    <class kind="class">qmcplusplus::CSVMCUpdateAll</class>
    <class kind="class">qmcplusplus::CSVMCUpdatePbyP</class>
    <class kind="class">qmcplusplus::VMCMultipleWarp</class>
    <class kind="class">qmcplusplus::VMCPbyPMultiple</class>
    <class kind="class">qmcplusplus::VMCPbyPMultiWarp</class>
    <base>qmcplusplus::QMCDriver</base>
  <compound kind="class">
    <name>qmcplusplus::CSVMC</name>
    <filename>a00112.html</filename>
    <anchor>a01437</anchor>
    <base>qmcplusplus::CSUpdateBase</base>
  <compound kind="class">
    <name>qmcplusplus::CSVMCUpdateAll</name>
    <filename>a00112.html</filename>
    <anchor>a01438</anchor>
    <base>qmcplusplus::CSUpdateBase</base>
  <compound kind="class">
    <name>qmcplusplus::CSVMCUpdatePbyP</name>
    <filename>a00112.html</filename>
    <anchor>a01439</anchor>
    <base>qmcplusplus::QMCDriver</base>
  <compound kind="class">
    <name>qmcplusplus::VMCMultipleWarp</name>
    <filename>a00112.html</filename>
    <anchor>a01544</anchor>
    <base>qmcplusplus::QMCDriver</base>
  <compound kind="class">
    <name>qmcplusplus::VMCPbyPMultiple</name>
    <filename>a00112.html</filename>
    <anchor>a01545</anchor>
    <base>qmcplusplus::QMCDriver</base>
  <compound kind="class">
    <name>qmcplusplus::VMCPbyPMultiWarp</name>
    <filename>a00112.html</filename>
    <anchor>a01546</anchor>
  </compound>
  <compound kind="group">
    <name>qmcapp</name>
    <title>QMC Application Group</title>
    <filename>a00255.html</filename>
    <file>qmcapp.cpp</file>
    <class kind="class">qmcplusplus::HamiltonianPool</class>
    <class kind="class">qmcplusplus::ParticleSetPool</class>
    <class kind="class">qmcplusplus::QMCAppBase</class>
    <class kind="class">qmcplusplus::QMCInterface</class>
    <class kind="class">qmcplusplus::QMCMain</class>
    <class kind="class">qmcplusplus::WaveFunctionPool</class>
    <base>qmcplusplus::MPIObjectBase</base>
    <member kind="typedef">
      <type>std::map&lt; std::string, HamiltonianFactory * &gt;</type>
      <name>PoolType</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a382af37d4899a0735b8cf20e08978876</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HamiltonianPool</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a4a3eac76d69ffea423d7199215607bfe</anchor>
      <arglist>(Communicate *c, const char *aname=&quot;hamiltonian&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>ac6e61de369e994009e36f344f99c15ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonian *</type>
      <name>getPrimary</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a01ae33d4915cff13e46245734a41580a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonian *</type>
      <name>getHamiltonian</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a9f3b15392008090b1f8147dfaab5d0af</anchor>
      <arglist>(const std::string &amp;pname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDocument</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>ac3cbc079ab501567b908919ca386330b</anchor>
      <arglist>(Libxml2Document *doc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticleSetPool</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>ab249d5e96bb30a252335444a349dd66d</anchor>
      <arglist>(ParticleSetPool *pset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWaveFunctionPool</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>ac3eaa98c8693f6c569b4dcd99e6a42be</anchor>
      <arglist>(WaveFunctionPool *pset)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>QMCHamiltonian *</type>
      <name>primaryH</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a8ee23e938faa157d52fd5fe373ecd7a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>QMCHamiltonian *</type>
      <name>curH</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a3bd28ee6602d7f2fe28b94fe1c603836</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSetPool *</type>
      <name>ptclPool</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a7ce6a484ce14fd57c87e21944c125a84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>WaveFunctionPool *</type>
      <name>psiPool</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>aa6142f30453046152a34fbe08e15cdf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Libxml2Document *</type>
      <name>curDoc</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a7fb382392329d43ca1d476cc32b36afb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PoolType</type>
      <name>myPool</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a389765f0266c8885b5c44932b3349b7f</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::HamiltonianPool</name>
    <filename>a00255.html</filename>
    <anchor>a01463</anchor>
    <base>qmcplusplus::MPIObjectBase</base>
    <member kind="typedef">
      <type>map&lt; string, ParticleSet * &gt;</type>
      <name>PoolType</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a025249e675a998bcd1d2f2cfecb4994e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParticleSetPool</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a1c0a21873547eb247e5a6eee6291af55</anchor>
      <arglist>(Communicate *c, const char *aname=&quot;particleset&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a60f38e88f022e1576397285ce140ede2</anchor>
      <arglist>(ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putTileMatrix</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a83d49f6cc3edc66c7689a1d060138698</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putLattice</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>acd59f671c7316257c4fffac5375acd4f</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>ac6e61de369e994009e36f344f99c15ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addParticleSet</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>af2ba8091911a0b02328c60de2a16f549</anchor>
      <arglist>(ParticleSet *p)</arglist>
    </member>
    <member kind="function">
      <type>ParticleSet *</type>
      <name>getParticleSet</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a306e881817fa876b2e0a2908aa5a4af2</anchor>
      <arglist>(const string &amp;pname)</arglist>
    </member>
    <member kind="function">
      <type>MCWalkerConfiguration *</type>
      <name>getWalkerSet</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a73f7f24838fc124ab078db99b6545353</anchor>
      <arglist>(const string &amp;pname)</arglist>
    </member>
    <member kind="function">
      <type>PoolType &amp;</type>
      <name>getPool</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a63c9bbc4b59bcd40146a67976c1e75d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ParticleSet *</type>
      <name>createESParticleSet</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>ab6e540557e74f67304cb4991fb8b507b</anchor>
      <arglist>(xmlNodePtr cur, const string &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>randomize</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a83c832496374390c11c825cfb9500c87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet::ParticleLayout_t *</type>
      <name>SimulationCell</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a5c4cef2548e71d9d48cccaa498e56dbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Tensor&lt; int, OHMMS_DIM &gt;</type>
      <name>TileMatrix</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a3edee8e28de6b0ea1861f37395324ea5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, ParticleSet * &gt;</type>
      <name>myPool</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a272aa931810cc5871a30c7578c1e73eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; xmlNodePtr &gt;</type>
      <name>randomize_nodes</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a8610424740549027c4c92204d36a41cf</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::ParticleSetPool</name>
    <filename>a00255.html</filename>
    <anchor>a01503</anchor>
    <member kind="function">
      <type></type>
      <name>QMCAppBase</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>ab878e346c27fa6c5be91994d22ce75e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~QMCAppBase</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a1bf10b5aece89a53aefad4287fd5b784</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parse</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>ab8967e1ebc89d90e7f91b822b1ec4558</anchor>
      <arglist>(const string &amp;infile)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveXml</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a038ca03638dab593c49d7c8a9df9cba0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>validateXML</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a69600dba9ca44f6bf01dd04c9d5bc169</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>execute</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a6a2fecba3df663a5e8d1c371795e3763</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>pushDocument</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a16a745bf7637c6c5763a81a99776e60b</anchor>
      <arglist>(const string &amp;infile)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>popDocument</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a72d391a3249842f17945774991ac81af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::stack&lt; Libxml2Document * &gt;</type>
      <name>XmlDocStack</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a4c887021c8664c4bbb865a9c8b837dd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ProjectData</type>
      <name>myProject</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a6d715be350d206bb2d1d5ec59df3de87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RandomNumberControl</type>
      <name>myRandomControl</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>ab384bd4adc98fc8503eba18f7bfd83e2</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::QMCAppBase</name>
    <filename>a00255.html</filename>
    <anchor>a01506</anchor>
    <base>qmcplusplus::QMCDriverFactory</base>
    <base>qmcplusplus::QMCAppBase</base>
    <member kind="function">
      <type></type>
      <name>QMCInterface</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a162dbfded6ba44ee56ade02f508758a4</anchor>
      <arglist>(Communicate *c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~QMCInterface</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a96c80db8046d7fc1bd6aebbaabef9ac6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validateXML</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a1839eba3d93c783b2a13f69be0d9c24b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>afba379172f49ec105f65515d1b5f6e73</anchor>
      <arglist>(int myProc, int numProcs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SetVMC</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a0ff0f48bc17992a05044b4b36733a0c0</anchor>
      <arglist>(double dt, int w, int steps, int nblocks)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SetVMCMultiple</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a4db92a34822b0e16b2a1269538692ddc</anchor>
      <arglist>(double dt, int w, int steps, int nblocks)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SetRQMCMultiple</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a3f999a90118b4f3e149fdfb5f8d77b57</anchor>
      <arglist>(double dt, int chains, int steps, int nblocks)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>process</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>af268a62c13246b74b5428a296cdf714a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>ae006844a02161d12182ab372ca5c257b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPtclPos</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a63379409a1312855d312068843cf23a6</anchor>
      <arglist>(int id, double *newR)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPtclPos</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>aec6cbd9fa116eeebcaf63dd7c7c67e8f</anchor>
      <arglist>(string set, int id, double *newR)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QMCDriverFactory</name>
      <anchorfile>a00496.html</anchorfile>
      <anchor>a54bda45b735649d2991d107314196eed</anchor>
      <arglist>(Communicate *c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putCommunicator</name>
      <anchorfile>a00496.html</anchorfile>
      <anchor>af214574d148ef83d81230d6ecd8d061f</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setQMCDriver</name>
      <anchorfile>a00496.html</anchorfile>
      <anchor>a5835bb6be8c457dc0845e7348bc3a941</anchor>
      <arglist>(int curSeries, xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createQMCDriver</name>
      <anchorfile>a00496.html</anchorfile>
      <anchor>ae73fb410227b9595fed919c8a92e7382</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~QMCDriverFactory</name>
      <anchorfile>a00496.html</anchorfile>
      <anchor>a4203507e69e548809ed5a317a1ff2323</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>runQMC</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>aa419ac43c87a990936da856eef91732f</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>setMCWalkers</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>ae2142e4fd7bc50844d1c35194bad7cbd</anchor>
      <arglist>(xmlXPathContextPtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>processPWH</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a8683a8ea5a0c6a428c8e03c1cad23a11</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>xmlNodePtr</type>
      <name>runInfoNode</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a3bcb043c6f4227fe077e8f0df762687d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>FirstQMC</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a74108f2eece12bfb3dbc7c784405cf14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>PrevConfigFile</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a322f35897d136c6651e2327a8bd1851b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; xmlNodePtr &gt;</type>
      <name>m_walkerset</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a61226e1ce207d8e45883011af8a05732</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; xmlNodePtr &gt;</type>
      <name>m_walkerset_in</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>aa43749093485f405d366b4037c79ff95</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>QMCRunType</name>
      <anchorfile>a00496.html</anchorfile>
      <anchor>ae737a73792cdf19eda4c9ffc9bce3941</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DUMMY_RUN</name>
      <anchorfile>a00496.html</anchorfile>
      <anchor>ae737a73792cdf19eda4c9ffc9bce3941af41145db6fee33c716ef839e8c5f9eaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VMC_RUN</name>
      <anchorfile>a00496.html</anchorfile>
      <anchor>ae737a73792cdf19eda4c9ffc9bce3941a1b79626daced5495ee2b82c508e9ee78</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DMC_RUN</name>
      <anchorfile>a00496.html</anchorfile>
      <anchor>ae737a73792cdf19eda4c9ffc9bce3941a38078df0d6c1a03315c0cbe1b758eacd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RMC_RUN</name>
      <anchorfile>a00496.html</anchorfile>
      <anchor>ae737a73792cdf19eda4c9ffc9bce3941a883ceea7b4598613053023458a52069b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMIZE_RUN</name>
      <anchorfile>a00496.html</anchorfile>
      <anchor>ae737a73792cdf19eda4c9ffc9bce3941a49e18609e6a9b6f32b588fe795dcfcb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VMC_OPT_RUN</name>
      <anchorfile>a00496.html</anchorfile>
      <anchor>ae737a73792cdf19eda4c9ffc9bce3941ae25dda0029fbfa9afecacb7436055ca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINEAR_OPTIMIZE_RUN</name>
      <anchorfile>a00496.html</anchorfile>
      <anchor>ae737a73792cdf19eda4c9ffc9bce3941a5d39e268112fc71819843e1a653e2c19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CS_LINEAR_OPTIMIZE_RUN</name>
      <anchorfile>a00496.html</anchorfile>
      <anchor>ae737a73792cdf19eda4c9ffc9bce3941ae8a25fdeb5e41804ddedbacad970572b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DUMMY_RUN</name>
      <anchorfile>a00496.html</anchorfile>
      <anchor>ae737a73792cdf19eda4c9ffc9bce3941af41145db6fee33c716ef839e8c5f9eaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VMC_RUN</name>
      <anchorfile>a00496.html</anchorfile>
      <anchor>ae737a73792cdf19eda4c9ffc9bce3941a1b79626daced5495ee2b82c508e9ee78</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DMC_RUN</name>
      <anchorfile>a00496.html</anchorfile>
      <anchor>ae737a73792cdf19eda4c9ffc9bce3941a38078df0d6c1a03315c0cbe1b758eacd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RMC_RUN</name>
      <anchorfile>a00496.html</anchorfile>
      <anchor>ae737a73792cdf19eda4c9ffc9bce3941a883ceea7b4598613053023458a52069b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>OPTIMIZE_RUN</name>
      <anchorfile>a00496.html</anchorfile>
      <anchor>ae737a73792cdf19eda4c9ffc9bce3941a49e18609e6a9b6f32b588fe795dcfcb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VMC_OPT_RUN</name>
      <anchorfile>a00496.html</anchorfile>
      <anchor>ae737a73792cdf19eda4c9ffc9bce3941ae25dda0029fbfa9afecacb7436055ca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LINEAR_OPTIMIZE_RUN</name>
      <anchorfile>a00496.html</anchorfile>
      <anchor>ae737a73792cdf19eda4c9ffc9bce3941a5d39e268112fc71819843e1a653e2c19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CS_LINEAR_OPTIMIZE_RUN</name>
      <anchorfile>a00496.html</anchorfile>
      <anchor>ae737a73792cdf19eda4c9ffc9bce3941ae8a25fdeb5e41804ddedbacad970572b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>QMCModeEnum</name>
      <anchorfile>a00496.html</anchorfile>
      <anchor>aee5a476114ff681ed7223280da8843c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UPDATE_MODE</name>
      <anchorfile>a00496.html</anchorfile>
      <anchor>aee5a476114ff681ed7223280da8843c8af53c893c398ac3f629cf3302cb36e9b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MULTIPLE_MODE</name>
      <anchorfile>a00496.html</anchorfile>
      <anchor>aee5a476114ff681ed7223280da8843c8abe4d3fbc26f7356f2425a909b426745a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPACEWARP_MODE</name>
      <anchorfile>a00496.html</anchorfile>
      <anchor>aee5a476114ff681ed7223280da8843c8adbbf6c08535ff531a81fc40815107755</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALTERNATE_MODE</name>
      <anchorfile>a00496.html</anchorfile>
      <anchor>aee5a476114ff681ed7223280da8843c8a85cb283c939b200a34273fd08e41e107</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GPU_MODE</name>
      <anchorfile>a00496.html</anchorfile>
      <anchor>aee5a476114ff681ed7223280da8843c8a0b5ee5e90bb225a562d92e4078ad9728</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>QMC_MODE_MAX</name>
      <anchorfile>a00496.html</anchorfile>
      <anchor>aee5a476114ff681ed7223280da8843c8ae70bb0ef841761661c117d0330f8b273</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UPDATE_MODE</name>
      <anchorfile>a00496.html</anchorfile>
      <anchor>aee5a476114ff681ed7223280da8843c8af53c893c398ac3f629cf3302cb36e9b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MULTIPLE_MODE</name>
      <anchorfile>a00496.html</anchorfile>
      <anchor>aee5a476114ff681ed7223280da8843c8abe4d3fbc26f7356f2425a909b426745a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SPACEWARP_MODE</name>
      <anchorfile>a00496.html</anchorfile>
      <anchor>aee5a476114ff681ed7223280da8843c8adbbf6c08535ff531a81fc40815107755</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ALTERNATE_MODE</name>
      <anchorfile>a00496.html</anchorfile>
      <anchor>aee5a476114ff681ed7223280da8843c8a85cb283c939b200a34273fd08e41e107</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>GPU_MODE</name>
      <anchorfile>a00496.html</anchorfile>
      <anchor>aee5a476114ff681ed7223280da8843c8a0b5ee5e90bb225a562d92e4078ad9728</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>QMC_MODE_MAX</name>
      <anchorfile>a00496.html</anchorfile>
      <anchor>aee5a476114ff681ed7223280da8843c8ae70bb0ef841761661c117d0330f8b273</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>curQmcMode</name>
      <anchorfile>a00496.html</anchorfile>
      <anchor>a1f5c14382187d4ee5a2ae89c079ef4df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::bitset&lt; QMC_MODE_MAX &gt;</type>
      <name>curQmcModeBits</name>
      <anchorfile>a00496.html</anchorfile>
      <anchor>a4562f4494253d980aa6db07ddb81c75b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>QMCRunType</type>
      <name>curRunType</name>
      <anchorfile>a00496.html</anchorfile>
      <anchor>a56c2f5b4491cc3262b56754aa4f420a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>curMethod</name>
      <anchorfile>a00496.html</anchorfile>
      <anchor>a33d4574dbc3501f6192516b145ab5d3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MCWalkerConfiguration *</type>
      <name>qmcSystem</name>
      <anchorfile>a00496.html</anchorfile>
      <anchor>af54ca9e0b5d8496ed5596168c1baed0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>QMCDriver *</type>
      <name>qmcDriver</name>
      <anchorfile>a00496.html</anchorfile>
      <anchor>aa1c1e8ab4e50f5c559d4607802be87f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSetPool *</type>
      <name>ptclPool</name>
      <anchorfile>a00496.html</anchorfile>
      <anchor>a7ce6a484ce14fd57c87e21944c125a84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>WaveFunctionPool *</type>
      <name>psiPool</name>
      <anchorfile>a00496.html</anchorfile>
      <anchor>aa6142f30453046152a34fbe08e15cdf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HamiltonianPool *</type>
      <name>hamPool</name>
      <anchorfile>a00496.html</anchorfile>
      <anchor>accbbcf4854fc2f360bc0915d059bc71c</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::QMCInterface</name>
    <filename>a00255.html</filename>
    <anchor>a01515</anchor>
    <base>qmcplusplus::QMCDriverFactory</base>
    <base>qmcplusplus::QMCAppBase</base>
    <member kind="function">
      <type></type>
      <name>QMCMain</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>af100436d2596a9998674a8de6a2a83bf</anchor>
      <arglist>(Communicate *c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~QMCMain</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>ac93fc55c1f87bbd23c1dae43e5b21ba8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validateXML</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a1839eba3d93c783b2a13f69be0d9c24b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>ae006844a02161d12182ab372ca5c257b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>runQMC</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>aa419ac43c87a990936da856eef91732f</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>setMCWalkers</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>ae2142e4fd7bc50844d1c35194bad7cbd</anchor>
      <arglist>(xmlXPathContextPtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>processPWH</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>aeb94ec7f706e133e94ebaed4681aa883</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>executeLoop</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>ae61aab00292df4b72bb985f41ceb48cb</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>executeQMCSection</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>ad441beaceb6218152d076f7bf9fb7046</anchor>
      <arglist>(xmlNodePtr cur, bool noloop=true)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>FirstQMC</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a74108f2eece12bfb3dbc7c784405cf14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>PrevConfigFile</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a322f35897d136c6651e2327a8bd1851b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; xmlNodePtr &gt;</type>
      <name>m_walkerset</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a61226e1ce207d8e45883011af8a05732</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; xmlNodePtr &gt;</type>
      <name>m_walkerset_in</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>aa43749093485f405d366b4037c79ff95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; pair&lt; xmlNodePtr, bool &gt; &gt;</type>
      <name>m_qmcaction</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>afaaae48b91113af88352a84018234021</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>xmlNodePtr</type>
      <name>lastInputNode</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>afdb1cb0012c1358263c6bdcaf7f7d4a1</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::QMCMain</name>
    <filename>a00255.html</filename>
    <anchor>a01517</anchor>
    <base>qmcplusplus::MPIObjectBase</base>
    <member kind="typedef">
      <type>std::map&lt; std::string, WaveFunctionFactory * &gt;</type>
      <name>PoolType</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a8485c2841b9e37c8285a89b155caa813</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WaveFunctionPool</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>afe227fa0eeb3c611df8aa9a43d89a457</anchor>
      <arglist>(Communicate *c, const char *aname=&quot;wavefunction&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~WaveFunctionPool</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a21a5a98ef6f437ca3243c85c9fd245a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>ac6e61de369e994009e36f344f99c15ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TrialWaveFunction *</type>
      <name>getPrimary</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a43b0bd44495c103051a6a0e0eb4a49e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TrialWaveFunction *</type>
      <name>getWaveFunction</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a2a224c5fe4ed87d88d49ceed1d4ea8f0</anchor>
      <arglist>(const std::string &amp;pname)</arglist>
    </member>
    <member kind="function">
      <type>WaveFunctionFactory *</type>
      <name>getWaveFunctionFactory</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>afaa757de358fd5e10e81989a32c994a4</anchor>
      <arglist>(const std::string &amp;pname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticleSetPool</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>ab249d5e96bb30a252335444a349dd66d</anchor>
      <arglist>(ParticleSetPool *pset)</arglist>
    </member>
    <member kind="function">
      <type>xmlNodePtr</type>
      <name>getWaveFunctionNode</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a846dec321743d3fa53ed65747bd55fc8</anchor>
      <arglist>(const std::string &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>PoolType &amp;</type>
      <name>getPool</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a63c9bbc4b59bcd40146a67976c1e75d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFactory</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a022f707960e730f829892c0efcedd359</anchor>
      <arglist>(WaveFunctionFactory *psifac)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TrialWaveFunction *</type>
      <name>primaryPsi</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>ac34ccbb7700cf19a36089e5cbea92fab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PoolType</type>
      <name>myPool</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a389765f0266c8885b5c44932b3349b7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSetPool *</type>
      <name>ptclPool</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a7ce6a484ce14fd57c87e21944c125a84</anchor>
      <arglist></arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::WaveFunctionPool</name>
    <filename>a00255.html</filename>
    <anchor>a01554</anchor>
  </compound>
  <compound kind="struct">
    <name>accumulator_set</name>
    <filename>a00002.html</filename>
    <templarg>T</templarg>
    <member kind="enumvalue">
      <type>@</type>
      <name>VALUE</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ae8a3b6a5d0d3244ed73924ab2421a0d0ad3a10aa8b647d6a6db651ef882ff8bff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VALUESQ</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ae8a3b6a5d0d3244ed73924ab2421a0d0ab82520b38309a628c3522d78e3366375</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WEIGHT</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ae8a3b6a5d0d3244ed73924ab2421a0d0a9747ee647b4e8f6329a394f45e4e92aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CAPACITY</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ae8a3b6a5d0d3244ed73924ab2421a0d0ab7dda006facfb86f75aa6e0210a77448</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a265a253612b46abed17c61b0a5e5ce30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>return_type</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ae962c2da0b87113859dead0a8e30aa80</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>accumulator_set</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a4cb20ef4ea5d73e14616cc92f55807b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>aaf1156a58082046e521927eb35c30fc5</anchor>
      <arglist>(value_type x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>aabbd65712a9f5761044304f55c16947b</anchor>
      <arglist>(value_type x, value_type w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ac0e2be766a7ba87950499d7893462c95</anchor>
      <arglist>(value_type v, value_type vv, value_type w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a476d66c143e302d925046336223e3ed1</anchor>
      <arglist>(value_type x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>good</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ad2e41c8280b6cdf93d39e1135d2abdf7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>bad</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ae5145c481e0280c8b6b365e616058d36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>return_type</type>
      <name>result</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a916d8d8d63eef896f4f274a8f20eb3b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>return_type</type>
      <name>result2</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a1e946cff007b54eb9837cfbd599445b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>return_type</type>
      <name>count</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>acc3f7a8489126ea8a2a6dac138f9aa45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>pair&lt; return_type, return_type &gt;</type>
      <name>mean_and_variance</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a4a98d4deef737b97c6a4dd85da2cff2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>return_type</type>
      <name>mean</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a406b30a363aebf086b590fc998783262</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>return_type</type>
      <name>mean2</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a985c1f0ed3b4f05a34ba983dda2c63f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>return_type</type>
      <name>variance</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>af4af49546018dd1ead2cb46287e86be5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>properties</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>aa2f05ad75345dc73b7e4b3bcb38adf82</anchor>
      <arglist>[CAPACITY]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Any2Slater</name>
    <filename>a00009.html</filename>
    <member kind="typedef">
      <type>OneDimGridFunctor&lt; scalar &gt;</type>
      <name>SourceType</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a97990c5141b667b47bd6551a84c3b3be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LogGrid&lt; scalar &gt;</type>
      <name>GridType</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>ade730e2759418717ed55f87050624503</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Any2Slater</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a22a458a443cc6bf7206c307209585b9d</anchor>
      <arglist>(SourceType &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumParams</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a8373e0cbad128094da8039f0b52147a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>scalar &amp;</type>
      <name>Params</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a4650c6968897250c495aa58849c7e20f</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>Params</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a422a9f106d64465a306600ad6260cf4b</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>Cost</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>ab27d0f5b7bb52309db546ec6f9990345</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WriteStuff</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>ad7f6fa810534f994622e5bc22492a277</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>optimize</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a6dd4245880a3f938630405eb1db98f00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SourceType &amp;</type>
      <name>Source</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>ab4df27b2e48b37660b4598e8b852a098</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>scalar</type>
      <name>cg_tolerance</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a0ed5f1b03f97a147ed1a0a0ee3af3f1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>scalar</type>
      <name>cg_stepsize</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a414c14287740bbed95a18a9051b9edbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>scalar</type>
      <name>cg_epsilon</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a6a5b2623c8b735d6933cd5aa5f9ece84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>minIndex</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a765880a75562678e4cbd6f74e8e3ef3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>xmlNodePtr</type>
      <name>mPtr</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>ab44a54a2e1a49e3df04ebdfbf5f51d42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GenericSTO&lt; scalar &gt;</type>
      <name>Target</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>aef275061cb9d1cc9af698d884dbbb586</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; scalar &gt;</type>
      <name>OptParams</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>ac05b88869efc03f9bb6bd0cada994c78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; scalar &gt;</type>
      <name>psi_sq</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a57eab6470e245f9465e00030c7d23549</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; scalar &gt;</type>
      <name>psi_norm</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a65780f795ebca7cffdec979833d945af</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Array</name>
    <filename>a00015.html</filename>
    <templarg>T</templarg>
    <templarg>D</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Type_t</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aace3424f71d53a9b6be8d37bc35cecd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>vector&lt; T &gt;</type>
      <name>Container_t</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a2413d56557a75f48a045c338e3d47b31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array&lt; T, D &gt;</type>
      <name>This_t</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a3f6cd320486fc6a6031c1864f3e1c374</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>af9474cac29f3177edf5e8d72ea4a440c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aa915a3f514898139dfaeb131b2f80762</anchor>
      <arglist>(const Array&lt; T, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a8ad4d8065873b5d33499f6937b64fc1b</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a9dbb09a6d2fc44767961b17ce3b1ee34</anchor>
      <arglist>(size_t n, size_t m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a5411055642a6041cd115f0626e384ff6</anchor>
      <arglist>(size_t l, size_t m, size_t n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>af587f600b1cb4430838d29c495a713d1</anchor>
      <arglist>(size_t l, size_t m, size_t n, size_t o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Array</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a9338ffdafb6c90a0d192ade96b24550a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aac782da1f912bceb5d8ad00c8dc892ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ad7900bccc9571d431ce51d738993bd5c</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>Container_t &amp;</type>
      <name>storage</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a7c2290378eb4bf8c5a10c455d08253be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a0ed26d0d6f14c68a093aa9f1df7cbc93</anchor>
      <arglist>(ST1 *newdims)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a572d8018b3c8e381d4a8c924bfae3bc6</anchor>
      <arglist>(size_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aa4d3517d2f731ae2943983293a5b1103</anchor>
      <arglist>(size_t, size_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a54a483a32e9ff24feee96ec1cce3c59d</anchor>
      <arglist>(size_t, size_t, size_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ac1ed407113144415592df39d308658cc</anchor>
      <arglist>(size_t, size_t, size_t, size_t)</arglist>
    </member>
    <member kind="function">
      <type>Container_t::iterator</type>
      <name>begin</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a936690cdbd209118fd4d9a7146376809</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Container_t::iterator</type>
      <name>end</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a0fec9d94d01702cb6ae5c79431e43ad3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Container_t::const_iterator</type>
      <name>begin</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a6d0d97fe6036b547416941d27ac5da17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Container_t::const_iterator</type>
      <name>end</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a1f167bcf304a1bc04d81779801e5da9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Type_t *</type>
      <name>data</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aa9e021db1037f42c07ed6efb005f17ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Type_t *</type>
      <name>data</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>adc105523e0aa5a5c591a078ff5aeb85f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Type_t *</type>
      <name>first_address</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a69395620b9e5f24e49041f06d01196bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Type_t *</type>
      <name>last_address</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a84c8ad07c5be157adfcc71ca38295d31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Type_t *</type>
      <name>first_address</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a706933ea201433a310df98db84b405f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Type_t *</type>
      <name>last_address</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a457cf7c9a0ae67236ef886a5d94b4f93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>This_t &amp;</type>
      <name>operator=</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a9726a13acbc55d800f7d53a1b22fca7e</anchor>
      <arglist>(const T &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator()</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a9b16dd5a78057c57271c15b8b864a0fb</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator()</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a6bf2fcb53169927bc430cb418eade897</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator()</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ac1061df0ebe6789bfee47311717f03cf</anchor>
      <arglist>(size_t i, size_t j)</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator()</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ae252f1084c96dfde30e610d0b03be2b0</anchor>
      <arglist>(size_t i, size_t j) const </arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator()</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a2b550cd69466461218194032716e21a5</anchor>
      <arglist>(size_t i, size_t j, size_t k)</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator()</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a420c4425a0872bd2ef79a0166a52d2b3</anchor>
      <arglist>(size_t i, size_t j, size_t k) const </arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator()</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a710ddfcd9bbf01c13497362ed3054c63</anchor>
      <arglist>(size_t i, size_t j, size_t k, size_t l)</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator()</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a2320417599f0545ceb695f4b868090e6</anchor>
      <arglist>(size_t i, size_t j, size_t k, size_t l) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>Length</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aadbf4fe82850f935c417193a8ef3ff8d</anchor>
      <arglist>[D]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Container_t</type>
      <name>X</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>add6c36324dbe075ad4ac91b95845e703</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BLAS</name>
    <filename>a00042.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>axpy</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>ac6d28d6b452e19b1fbce1f7edc929bce</anchor>
      <arglist>(int n, double x, const double *a, double *b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>axpy</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a9fd2b4ebf48c0ee780d53490a46b84b5</anchor>
      <arglist>(int n, double x, const double *a, int incx, double *b, int incy)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>axpy</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>ad9ca792d7c00a037dfa8475bf4107119</anchor>
      <arglist>(int n, const double *a, double *b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>axpy</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>aa92b405446d650cd2a1aaf2046e36985</anchor>
      <arglist>(int n, float x, const float *a, int incx, float *b, int incy)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>axpy</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>aff5fe5d233573991ffaceded6137fcdc</anchor>
      <arglist>(int n, const complex&lt; double &gt; x, const complex&lt; double &gt; *a, int incx, complex&lt; double &gt; *b, int incy)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>norm2</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>ac3e97af016a4b4000f5fa5ec7fa0eeb0</anchor>
      <arglist>(int n, const double *a, int incx=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>norm2</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a3cbb0e92bc2d56c40d5d842b42c4ec3f</anchor>
      <arglist>(int n, const complex&lt; double &gt; *a, int incx=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>norm2</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a8a2387eafda10b0f49c2b8582f09b159</anchor>
      <arglist>(int n, const float *a, int incx=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>scal</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a556f64d70db5f3a4873d99f948740e58</anchor>
      <arglist>(int n, double alpha, double *x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>gemv</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>ab19cab00d8adc7cdfc81ab28fe2802c9</anchor>
      <arglist>(int n, int m, const double *restrict amat, const double *restrict x, double *restrict y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>gemv_trans</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>ab56e3b4c17bdc5c1c0447a4e1868dd8a</anchor>
      <arglist>(int n, int m, const double *restrict amat, const double *restrict x, double *restrict y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>gemv_trans</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>af6a851f5e4bd6320a8cfcbc6241d9df7</anchor>
      <arglist>(int n, int m, const std::complex&lt; double &gt; *restrict amat, const std::complex&lt; double &gt; *restrict x, std::complex&lt; double &gt; *restrict y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>gemv</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a1689e7a15ee35e8a8bb6b9ec89f68b31</anchor>
      <arglist>(int n, int m, const std::complex&lt; double &gt; *restrict amat, const std::complex&lt; double &gt; *restrict x, std::complex&lt; double &gt; *restrict y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>gemv</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>aeca9f279d36bf402a8fb1f9aa554e136</anchor>
      <arglist>(char trans_in, int n, int m, double alpha, const double *restrict amat, int lda, const double *x, int incx, double beta, double *y, int incy)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>gemv</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>acdff42ae19d903193c5967b20b5f543f</anchor>
      <arglist>(char trans_in, int n, int m, const complex&lt; double &gt; &amp;alpha, const complex&lt; double &gt; *restrict amat, int lda, const complex&lt; double &gt; *restrict x, int incx, const complex&lt; double &gt; &amp;beta, complex&lt; double &gt; *y, int incy)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>gemm</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a6ca999b7618a4cf0fbfef44cad0c7932</anchor>
      <arglist>(char Atrans, char Btrans, int M, int N, int K, double alpha, const double *A, int lda, const double *restrict B, int ldb, double beta, double *restrict C, int ldc)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>gemm</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>afe57c4341dfe6f3445504301e7be1479</anchor>
      <arglist>(char Atrans, char Btrans, int M, int N, int K, complex&lt; double &gt; alpha, const complex&lt; double &gt; *A, int lda, const complex&lt; double &gt; *restrict B, int ldb, complex&lt; double &gt; beta, complex&lt; double &gt; *restrict C, int ldc)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>dot</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a62494824ba4a627f620912eae52a1cd3</anchor>
      <arglist>(int n, const double *restrict a, const int incx, const double *restrict b, const int incy)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static complex&lt; double &gt;</type>
      <name>dot</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>ad72f9a09094ff6b9b657c128f6f79461</anchor>
      <arglist>(int n, const complex&lt; double &gt; *restrict a, const int incx, const complex&lt; double &gt; *restrict b, const int incy)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>dot</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>ab2150ac307fb74ce12932edcb1b60a16</anchor>
      <arglist>(int n, const T *restrict a, const T *restrict b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static complex&lt; T &gt;</type>
      <name>dot</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a5b8ff1bdc2b684a5e63b557484e54a53</anchor>
      <arglist>(int n, const complex&lt; T &gt; *restrict a, const T *restrict b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static complex&lt; T &gt;</type>
      <name>dot</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a73b46ad40c576f6b003536746928e8eb</anchor>
      <arglist>(int n, const complex&lt; T &gt; *restrict a, const complex&lt; T &gt; *restrict b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static complex&lt; T &gt;</type>
      <name>dot</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a8048b733e344697ccf4f0791609fb835</anchor>
      <arglist>(int n, const T *restrict a, const complex&lt; T &gt; *restrict b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copy</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>ae18525679ad8dfac8f67f882c00ea963</anchor>
      <arglist>(int n, const T *restrict a, T *restrict b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copy</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>af5fd9e9bdb7a24c7ba22ff993a74a707</anchor>
      <arglist>(T *restrict target, const T *restrict source, int n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copy</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a7c7342426759421af73e759e7b7d5384</anchor>
      <arglist>(int n, const complex&lt; T &gt; *restrict a, T *restrict b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copy</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>af5801963ef280361206cbc2c277e5279</anchor>
      <arglist>(int n, const T *restrict a, complex&lt; T &gt; *restrict b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copy</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a6c79209944145d3b93275e6dda93363f</anchor>
      <arglist>(int n, const T *restrict x, int incx, T *restrict y, int incy)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>ger</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>abbc9c448baa2ec72054ab0057ccb35e7</anchor>
      <arglist>(int m, int n, double alpha, const double *x, int incx, const double *y, int incy, double *a, int lda)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>ger</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a0f805cfed01dcacdeb80a8e98a945a42</anchor>
      <arglist>(int m, int n, const complex&lt; double &gt; &amp;alpha, const complex&lt; double &gt; *x, int incx, const complex&lt; double &gt; *y, int incy, complex&lt; double &gt; *a, int lda)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>INCX</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a5dc736f5e6e5d3fa0430308ceda527e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>INCY</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a128e75edc523bca81384f1cac9fd0f4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>UPLO</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>af7b53e13c005777b1b5acb096390dd70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>TRANS</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a00608d3402162737da6620f4afa8cf08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>NOTRANS</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a2513f608e35d77871d745f3d9170dffc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const float</type>
      <name>sone</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a3d443ec96ae51a6179f1039fe4739d47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const float</type>
      <name>szero</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a21cd473a13b7724efa08a1125e592244</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>done</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a1aa1d47cf212247ed65f0990aeb8fbc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>dzero</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a5401c23a36087276668207662a82b0d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const complex&lt; float &gt;</type>
      <name>cone</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a6fac35d5279a1d3b40b4b1b592587775</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const complex&lt; float &gt;</type>
      <name>czero</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a58920ec9319c404af394959370563fc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const complex&lt; double &gt;</type>
      <name>zone</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a449bdad0f2aadbd7f740fa18b325c8ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const complex&lt; double &gt;</type>
      <name>zzero</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>ab1b99d49246f6e7244b68270489477ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BlockHistogram</name>
    <filename>a00043.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a265a253612b46abed17c61b0a5e5ce30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>reference</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a9b1a63f171d76a7a3995b6858e99f2ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::deque&lt; T &gt;::size_type</type>
      <name>size_type</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a11c1b09de1e1b720f11ba097b9824baf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::deque&lt; T &gt;::iterator</type>
      <name>iterator</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>adfb5532fa4cb526b2903cd2e0f30b505</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::deque&lt; T &gt;::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a143f2417998498853190187e682cd8e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlockHistogram</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a3ede9a739ba6c355c34f2567acdb32d6</anchor>
      <arglist>(size_type n=100)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a0d71139fd1c382afa687d2224d2cc1fa</anchor>
      <arglist>(size_type n, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a562f7b24b47d3e7632a9896935c14d8b</anchor>
      <arglist>(size_type n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>mean</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>aecb9a296d90ca151f3262dd92a743648</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>result</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a656095adb17f343622edd9d3b5461f2c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a503ab01f6c0142145d3434f6924714e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>ae4de976019de176a35caaee74aba826f</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>maxSize</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a29ff2b09e8e184170f61316769b5404a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>mySum</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>ad431a91cc1ee11cf30e5a4a6dcda18b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>myWeightInv</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a3bf651d0c4bfd0e010dec7280562ef55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::deque&lt; T &gt;</type>
      <name>myData</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>ac6e795dcb9cf5b6f2bdf48f7ec8362ac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BoostRandom</name>
    <filename>a00044.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>result_type</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>ab774fc5d25855517e772c39f7d9d5f09</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RNG</type>
      <name>generator_type</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>aaa33cd7348e720c1aa56898f1533e421</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>generator_type::result_type</type>
      <name>uint_type</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>acdb3e1589cde2f1abcbbe11b0634346e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::variate_generator&lt; generator_type, boost::uniform_real&lt; T &gt; &gt;</type>
      <name>uniform_generator_type</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a07b3478fb82f45d789822695079220d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoostRandom</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>af0d4a170b29da86a3a0537117b791f84</anchor>
      <arglist>(uint_type iseed=911, const std::string &amp;aname=&quot;mt19937&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoostRandom</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a1498b06a271082f2868713b31bd87079</anchor>
      <arglist>(const BoostRandom &amp;rng)</arglist>
    </member>
    <member kind="function">
      <type>BoostRandom&lt; T, RNG &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a420a1a667e073d7b14b1035289253e4e</anchor>
      <arglist>(const BoostRandom &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BoostRandom</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a36fe1754dcc083c7e2109aae452b6c08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a0431895c216721129933b30d65481919</anchor>
      <arglist>(int i, int nstr, int iseed_in, uint_type offset=1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>offset</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>aaa02ea556dee3025f49406b9d3fb662c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>offset</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>af9f849313df81eb0b2c13dea66eb07c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seed</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>af8a7987f2213212b7a9ea5d05158902f</anchor>
      <arglist>(uint_type aseed)</arglist>
    </member>
    <member kind="function">
      <type>uniform_generator_type &amp;</type>
      <name>engine</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>af012bd4115e801c34a2e4c4b85bb72b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>rand</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a96a178ad4d15bde123e2fb7b30eeb48a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>aaaead712fe7dc29c1799e7d8f77d1cfb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint_type</type>
      <name>irand</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a347cff850abebfec4d03490bf20121c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>state_size</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>af346c232bed607304e56457c06d834d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a3a5850f223852888735a74ed4a2af157</anchor>
      <arglist>(std::istream &amp;rin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a1ac4fdb1e1af2ee3fdf1ec6a05f2f06c</anchor>
      <arglist>(std::ostream &amp;rout) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>ab779666b7898ce7e79f1245afc3ff247</anchor>
      <arglist>(std::vector&lt; uint_type &gt; &amp;curstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a404afac62f0ce8d65bc8da65f9410186</anchor>
      <arglist>(const std::vector&lt; uint_type &gt; &amp;newstate)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>ClassName</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a995b081a11fae5fed318f8d6afa2dc99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>EngineName</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a75194cbbaccca8368ddebfd8c2810734</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>myContext</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>afc93a1d32cd658cae503207115ed421f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nContexts</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a43c65b80c956e839a01103ac7d19f905</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>baseOffset</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>abbd274b906551107e7200c3cc076ae63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uniform_generator_type</type>
      <name>uni</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>ac099759d7c8d6851839bc0e31a3e9630</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CartesianTensor</name>
    <filename>a00060.html</filename>
    <templarg>T</templarg>
    <templarg>Point_t</templarg>
    <templarg>Tensor_t</templarg>
    <templarg>GGG_t</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a265a253612b46abed17c61b0a5e5ce30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Point_t</type>
      <name>pos_type</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a0df5886798572c08a1897eeaf6e92471</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tensor_t</type>
      <name>hess_type</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a141e337003244812ec238c66e7d0eab2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GGG_t</type>
      <name>ggg_type</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>aeb5f9517cd0f9eb9bdd74127ba7c4c58</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CartesianTensor&lt; T, Point_t, Tensor_t &gt;</type>
      <name>This_t</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>af552bc0d5503d507da760d41e8d5e675</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CartesianTensor</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>af4b1b147684a4214469884843751a517</anchor>
      <arglist>(const int l_max)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a5a9eaa5ced1f9e3a15729fee5a472214</anchor>
      <arglist>(const Point_t &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateAll</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a7d091cead81977b48856424b4e0e4b99</anchor>
      <arglist>(const Point_t &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateTest</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a0f62fdb9460c8c2209194db613daf573</anchor>
      <arglist>(const Point_t &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateWithHessian</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a956884db9aa3795942559a55735c79d8</anchor>
      <arglist>(const Point_t &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateWithThirdDeriv</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a8505f08b30beacc9545b07d65cefe9bd</anchor>
      <arglist>(const Point_t &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateThirdDerivOnly</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>ac6d03d2965f5af1e08e50a595a257f35</anchor>
      <arglist>(const Point_t &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getYlm</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>aa59133a1e45c64c9ec1d4b61ed7ed47d</anchor>
      <arglist>(int lm) const </arglist>
    </member>
    <member kind="function">
      <type>Point_t</type>
      <name>getGradYlm</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>ae6f9c530e9a2c33262f6f7286feff1c6</anchor>
      <arglist>(int lm) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getLaplYlm</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a02f5622fa228b7973412d91e2427358f</anchor>
      <arglist>(int lm) const </arglist>
    </member>
    <member kind="function">
      <type>Tensor_t</type>
      <name>getHessYlm</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a685366e6dd9653a8e135a0f0a67f6604</anchor>
      <arglist>(int lm) const </arglist>
    </member>
    <member kind="function">
      <type>GGG_t</type>
      <name>getGGGYlm</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a4913b8aa21a0aa0610c0cb1fb3b6c980</anchor>
      <arglist>(int lm) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>ab8e4e3e2a7bf18888b71bdf9dda0770b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lmax</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a3ee05af3d2969fdfa9dae867f93aa381</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getABC</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>abc46a38bbd97a859e73aa1a90e7c6da6</anchor>
      <arglist>(int n, int &amp;a, int &amp;b, int &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>DFactorial</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>af1c2a4551e142d26240720ffdda78d94</anchor>
      <arglist>(int num)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Lmax</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a66220f2712ab879767e2b0b1f3e79c1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; value_type &gt;</type>
      <name>XYZ</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a7b11777add201e52cce1a822fd194dc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; value_type &gt;</type>
      <name>NormFactor</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>aaa46903f1b3c12af1f00fde378e3c8f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Point_t &gt;</type>
      <name>gradXYZ</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a144357ea2c29e0771eb9a7da5260eb05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; value_type &gt;</type>
      <name>laplXYZ</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a2f72c4243221b77ec2e25e3253a510a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; hess_type &gt;</type>
      <name>hessXYZ</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a9299b0cfc9df011e24d195b7071289a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; ggg_type &gt;</type>
      <name>gggXYZ</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>ab5bde0a095c3bf90a22eb6c29480b652</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CasinoParser</name>
    <filename>a00061.html</filename>
    <base>QMCGaussianParserBase</base>
    <base>OhmmsAsciiParser</base>
    <member kind="function">
      <type></type>
      <name>CasinoParser</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a458a19dc7ec4a52a75bdd93ed6538ec7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CasinoParser</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>aa190280e54e52eef93437f196d934fc2</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>aeec255ceac2f406ae1ca8d47f18d4762</anchor>
      <arglist>(const std::string &amp;fname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGeometry</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a3af2c5781e73ffc06800ae7c8a526c8c</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGaussianCenters</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a1805a6be3818f6482bace5db5e0d696e</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getNumberOfAtoms</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>ab60c5dcc500341abc9707324950e3649</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAtomicPositions</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>ab1c11780d5344d3587a7cd3ea796c2d5</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAtomicNumbers</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a34eebf4e03f7f2a1c003ae819531f238</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValenceCharges</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a6a5c182410be31741e0edbeb48f936a6</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>contractionCorrection</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a0af17ded425066b917bc9281b4375209</anchor>
      <arglist>(int shell_id, double alpha)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeCorrections</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a6d2542e957536cf611a03d8ffe7a4b1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QMCGaussianParserBase</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>adbfbb371ba67eb76e37318515dc42828</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QMCGaussianParserBase</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a441439ce7f902a4023fe6f106a5db359</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOccupationNumbers</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a19ecdd2585544d90f9835a9eded99bd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createGridNode</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a57299eb5c9478bf04436f8b013275315</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createSPOSets</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a2ddaf7690f01ffa75f1a0580e2552d69</anchor>
      <arglist>(xmlNodePtr, xmlNodePtr)</arglist>
    </member>
    <member kind="function">
      <type>xmlNodePtr</type>
      <name>createElectronSet</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a5def0f1b27f91c1d4e67f48239265d41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>xmlNodePtr</type>
      <name>createIonSet</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>aede21dcb405fc934b7ee1533901300eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>xmlNodePtr</type>
      <name>createBasisSet</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>acc538266e497821f62d1d63eb8001472</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>xmlNodePtr</type>
      <name>createCenter</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a23a6df41e15b852d8538e1165c233c79</anchor>
      <arglist>(int iat, int _off)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createShell</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a9f16902a4471ba35d7535307851e1d55</anchor>
      <arglist>(int n, int ig, int off_, xmlNodePtr abasis)</arglist>
    </member>
    <member kind="function">
      <type>xmlNodePtr</type>
      <name>createDeterminantSet</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a9836a14f9aaced445ed4825b3e2d008f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>xmlNodePtr</type>
      <name>createMultiDeterminantSet</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>ab5155d4a9cf74f6f7955eabebcc22079</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>xmlNodePtr</type>
      <name>createDeterminantSetWithHDF5</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>ab25c2391337a9a9a4fd164028d7b6c6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>xmlNodePtr</type>
      <name>createJ2</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a9276b0edc43bb21078b9f6f273ed94d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>xmlNodePtr</type>
      <name>createJ1</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a404b31235cb17edebaae4da714abd68e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfExcitationsCSF</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a03f8e840e8116179c4865b83139eb6cb</anchor>
      <arglist>(string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>map2GridFunctors</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a8e451f7c7c384b6ab1b72cbfd94369bf</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>ac5ef81b4700ace5adf010e9e5af2a91b</anchor>
      <arglist>(const string &amp;psi_tag, const string &amp;ion_tag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>skiplines</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>a9df2c4baa61e004d0adc016618b66a59</anchor>
      <arglist>(std::istream &amp;is, int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>a113e41407720ca4dd0d510d23e207595</anchor>
      <arglist>(std::istream &amp;is, T &amp;aval)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>ad81b680bb5c1875d7cd3527b8701c0be</anchor>
      <arglist>(std::istream &amp;is, T1 &amp;aval, T2 &amp;bval)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValues</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>aff77d3c77cb97fe75da9c93fed0980e6</anchor>
      <arglist>(std::istream &amp;is, IT first, IT last)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>search</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>a90f6ed637329005ab02f7e897bdd524c</anchor>
      <arglist>(std::istream &amp;is, const std::string &amp;keyword)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>search</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>a6c19ac9be678c790204f5a7c29158298</anchor>
      <arglist>(std::istream &amp;is, const std::string &amp;keyword, std::string &amp;the_line)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lookFor</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>a450063742747fe220e88eae8602b5108</anchor>
      <arglist>(std::istream &amp;is, const std::string &amp;keyword)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lookFor</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>a7d2766b63f2a28324e6bc0b92aa56c7c</anchor>
      <arglist>(std::istream &amp;is, const std::string &amp;keyword, std::string &amp;the_line)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>BasisCorrection</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>ab3e2101a92e764d1cd6c6200aa91f190</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>value_type</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>aba0996e183cdbebc61c5cbdcccf9da15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleSet::SingleParticlePos_t</type>
      <name>SingleParticlePos_t</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>aeb239b8fae268cc7b5e84298e3787763</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>init</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>multideterminant</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a725f9d5a46fa58254d5d95176e746b34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>BohrUnit</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a0354a07da2da83d609edc3c969939e0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>SpinRestricted</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a5daff0bd1c3264ca9ed72a1dcc61f6f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Periodicity</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a63dd7362c6f79c9eb0554758940d5d6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>UseHDF5</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a6320b626d25b28b804535a5576f1f5ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>zeroCI</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a29cd5fe49298b783a0421ad63bb45de7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>orderByExcitation</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a14b7d451799ab637c29a1ffea0093a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>addJastrow</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a5bd7180ba6d938d0459a15ab8d5043a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>IonChargeIndex</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>ae1c37fe800a91bccb72e1313f5b300b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ValenceChargeIndex</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a30e256b3c75aaba6e59b1cdcfc02f22c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>AtomicNumberIndex</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>ab9170d57ce394c0aa4cc9c2d2a50ebb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumberOfAtoms</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>add3d5309ff83c366d9a202ae648e9be4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumberOfEls</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a1403d99fba99db2e13f81ea3582f1b3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>SpinMultiplicity</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a7888fe904c48bcb62866bd36f70861de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumberOfAlpha</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>ac1737f8c6c3f682a74f4adc370231951</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumberOfBeta</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a7d4e39e1412219e4fd68deea863c9eb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>SizeOfBasisSet</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a6080a19ffff0389862d91d424b6ce931</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numMO</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a09817a3b5ed222a9898a24c8105497c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>readNO</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>afcd68f6e7d305ea9375796806ce52f8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>readGuess</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>aeca984cb47b10f2d24a768df4278855c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>Title</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>ae60b44c8073a4c7220e985e93a8d9fee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>basisType</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a8df68cbdb5b36bc5cc01b57c1ba99f2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>basisName</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a223911e3d85fb6e03c9f55163b4783fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>Normalized</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a26e2ef63731dddeb45b94af66bedea62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>CurrentCenter</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a744e559f0292f1a0f1abd1170d2aed34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>outputFile</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a2c9d331a74b913ac81e57934e6ba2646</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>angular_type</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a6ae5c2f58646cb89d46738b280943b59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet</type>
      <name>IonSystem</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a90c37dedfa010926301ce97b15b89782</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; string &gt;</type>
      <name>GroupName</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a96f8a2a1e337554d5af198f25c737aa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>gShell</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a2bd19a40fce9097ff6bcd181483cc8d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>gNumber</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a10487f6137a185078e5c1fa9d905f053</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>gBound</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>ad8317d87041293146d308b505db1a96f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>Occ_alpha</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a9efb3f4ee8429e8f36df06425c2d8f94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>Occ_beta</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a2e6680ae8f2c0eaaa5d0a581ee75d519</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; value_type &gt;</type>
      <name>Qv</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>af5b69a5d4dd17c95bc1636f698ec00fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; value_type &gt;</type>
      <name>gExp</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a79fb7717bb110f0982d325fb5b01612e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; value_type &gt;</type>
      <name>gC0</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>af0d618f2727dae7d866ae50d62671899</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; value_type &gt;</type>
      <name>gC1</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>aa52f2cbe2dbe65c90a2ec055794f1ab4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; value_type &gt;</type>
      <name>EigVal_alpha</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a18bee1f0a517fbdf0dcb013454cda5ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; value_type &gt;</type>
      <name>EigVal_beta</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>ac00e36e237a9d4a11dedf89682ea0678</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; value_type &gt;</type>
      <name>EigVec</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a74e30c7a9c9a5585adfd6bb654c2d86e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>xmlNodePtr</type>
      <name>gridPtr</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a7db2a9db97e53a650a916bd1de700e5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>CIalpha</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a1058b6a29a038fe719ed953dd504660b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>CIbeta</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>ae18e2e29cc0ef994da62a6d4af84171b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>CSFocc</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a314aaee985ae8d4cfd8affbb4048daeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; vector&lt; std::string &gt; &gt;</type>
      <name>CSFalpha</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a847f5060b21aa267b398c562bee72c70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; vector&lt; std::string &gt; &gt;</type>
      <name>CSFbeta</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a74db97d008e6500277b7d0b5f6e4109e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; vector&lt; double &gt; &gt;</type>
      <name>CSFexpansion</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a2064f924f7ab432e55bc0d40a4aba694</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>CIcoeff</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a63d484f6e75dddaf10e269a1a4342abb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>CIexcitLVL</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>ad51f93805928520a94509ea4212ae903</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ci_size</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a81845dfc065514b69619a82f5fbb57c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ci_nca</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a39d0aa006fde08407b0914e471214a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ci_ncb</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>aa9b0e72bf8304d20542358f29a751e49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ci_nea</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a1a92c5c5d6bb4e0341ab5915daa3d0a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ci_neb</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>ae0579c66aaf02e64bc2c2995733bb957</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ci_nstates</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a5f39cd5f2cbda5226410fa9a5ff696ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>ci_threshold</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a42484614273187759ec5a086d5e3e7ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>usingCSF</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>acab6a40b3eaf10e5fd343cef3b69fbb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; pair&lt; int, double &gt; &gt;</type>
      <name>coeff2csf</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>af39405ac5263772b4bb45c3977b4453c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>dbuffer</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>ad8d43d3fe7f96c7bd6312328adbf2a43</anchor>
      <arglist>[bufferSize]</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>currentWords</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>a2ca92c4a6d6f253297676ddb52bc9dc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::map&lt; int, std::string &gt;</type>
      <name>IonName</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>a0be4f31422ba76dd37a44942d0949b82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::vector&lt; std::string &gt;</type>
      <name>gShellType</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>adc4695c2d2741105164c3881a55a58b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::vector&lt; int &gt;</type>
      <name>gShellID</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>aa1057aab681ea6d52f6df39f6a0c6c4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>bufferSize</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>a4cb7aa26412b9517e92b492fa0386879</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ChebyshevFunctor</name>
    <filename>a00063.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ChebyshevFunctor</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>ae101db9072dfd4cf81d18bc936ff8f13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>af73131dd06c93a34e709511ea9783b10</anchor>
      <arglist>(vector&lt; T &gt; a)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a07ea37347c4f289500a39d4c12edca78</anchor>
      <arglist>(T r, T &amp;dudr, T &amp;d2udr2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a619cd19317b7088aa727c48a020b40c3</anchor>
      <arglist>(xmlNodePtr cur, VarRegistry&lt; T1 &gt; &amp;vlist)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>B</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a36ac3b56b0a126ba5671bc0b7c80e20d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>L</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a690c9ef343b108154227f7c125ef08c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>lmax</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a880eb260d9da52a83b315907eef5a40f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; T &gt;</type>
      <name>alpha</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a14cd80857bc0bc21faca7d0016a81b34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; T &gt;</type>
      <name>TT</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a8528cea3748915be92aa03a139f1a888</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; T &gt;</type>
      <name>dTT</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a6c250eb0a3f10f73a7a5126ff9d36ed9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; T &gt;</type>
      <name>d2TT</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a4a6124acd989b32ed5d818c032580d08</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Clebsch_Gordan</name>
    <filename>a00073.html</filename>
    <member kind="function">
      <type></type>
      <name>Clebsch_Gordan</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a26d84474a182f3094d49705f7c24c2d4</anchor>
      <arglist>(const int lmax)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Clebsch_Gordan</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>aa69a58211daa5da6cfbd28c92bf3b8a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a6315b02a01b1e6297ad5229a499e9c96</anchor>
      <arglist>(int l1, int l2, int l3, int m1, int m2) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cg</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>aa6d79cad5e60aeb6e3db999a56ab2b4b</anchor>
      <arglist>(int l1, int l2, int l3, int m1, int m2) const </arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>CG_coeff</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a665419b4ba6b97750ed5bf51acc3dad4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Clebsch_Gordan</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>ae3abd4930fbc68c74150d144dbddce66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>Lmax</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a66220f2712ab879767e2b0b1f3e79c1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>L1max</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a989e01d507346209ae2cf08a29bb74dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>L2max</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>ae511905b283791e0d58dc758f0e35ec4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ComboFunc</name>
    <filename>a00078.html</filename>
    <member kind="function">
      <type></type>
      <name>ComboFunc</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>a5e9de405f96df9d1eabe96eda74ff282</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>ae288768eefd1474c75812ae1bd7cf686</anchor>
      <arglist>(double c, TestFunc *fn)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>f</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>ab20289e280d19ad17873627a807fd641</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>d2f</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>a91e1d1101189d3ceb204659f69093be7</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>f</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>a5828cf5306c49f6caf33ffcff8c5932f</anchor>
      <arglist>(const TinyVector&lt; double, 3 &gt; &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>d2f</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>a06bac30b8a512891336206cc12720f09</anchor>
      <arglist>(const TinyVector&lt; double, 3 &gt; &amp;pos)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>a7a13c6886afe82da55588f528325dbc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; TestFunc * &gt;</type>
      <name>F</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>a9d67ed5d108d3910f4e20d6e0e106930</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Communicate</name>
    <filename>a00082.html</filename>
    <base>CommunicatorTraits</base>
    <member kind="function">
      <type></type>
      <name>Communicate</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a497179332935e824a83d222e347df1f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Communicate</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>afc50482148691c6ae9f9362689b15012</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Communicate</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>aff88cd28d3ca6a1fe1a1fc0cbae8c93d</anchor>
      <arglist>(const Communicate &amp;comm, int nparts)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Communicate</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a4db00237d99a9b4974220cc0e64b6e66</anchor>
      <arglist>(const Communicate &amp;comm, const std::vector&lt; int &gt; &amp;jobs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Communicate</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a1716012fb574bd749b710a2d786e765e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>aa59e6c054035dcb57a8791f2b326b925</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a32d626626eee0bc4ade146973f6abb1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abort</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ac54f53dc342019e8db34f4aa581a5792</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abort</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a7e95782856a4980dc73c3c8bd9ebd376</anchor>
      <arglist>(const char *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_world</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ad3d727e82899b88406fdd8288a8b8b59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mpi_comm_type</type>
      <name>getMPI</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>afe69d318caf6545548fa9658ab9e1284</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>intra_comm_type &amp;</type>
      <name>getComm</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a32d6ecfd72fbc804735b5be2d10097ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const intra_comm_type &amp;</type>
      <name>getComm</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>af4cabbc5243edeccfae169e31769752c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rank</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ae59754aa54d2ee843c39aebc1de9cfb1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ab8e4e3e2a7bf18888b71bdf9dda0770b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGroupID</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a3f86cb4ce4f7b1107c8d40f61e5696a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGroupSize</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a6bb9806ceaa13ce4907a2d64d82fc61d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cleanupMessage</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a83f5e999664e3c1231fee1fa25d8b054</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodeID</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>aa5159cffdbd7db7089c40bab94df66ea</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumNodes</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a6400cbf4d7d84dd2b589393a10be1bdd</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>barrier</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>adf7af4310553ab5974c9292a34680ce7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a82bfc253de38cf96831473fb10689d2e</anchor>
      <arglist>(const std::string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a8382bbe4394bd74b30c600308a2194cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allreduce</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>abd8b65b210cad04e788d2fbfe938e1d2</anchor>
      <arglist>(T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reduce</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a7da2a772facd99ec865fae39520b4da1</anchor>
      <arglist>(T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reduce</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a21bdcc5d78a56f4654125ed0c155c372</anchor>
      <arglist>(T *restrict, T *restrict, int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bcast</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a0564e1a7fd53bc7d7a6ccc9a2c8e8adb</anchor>
      <arglist>(T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bcast</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a93eb9dd474a2b9e42fed545f836707f3</anchor>
      <arglist>(T *restrict, int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a3f86c9306906ca601dd0a6f1aac25898</anchor>
      <arglist>(int dest, int tag, T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gather</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a4cd8c9bc1c7a836fa6738f3771d32347</anchor>
      <arglist>(T &amp;sb, T &amp;rb, int dest=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gatherv</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>adc8ce5ed34e81b9e09b9f5fa86d222ee</anchor>
      <arglist>(T &amp;sb, T &amp;rb, IT &amp;counts, IT &amp;displ, int dest=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allgather</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a02905a01cad834c5b1b2b01628fcdcce</anchor>
      <arglist>(T &amp;sb, T &amp;rb, int count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allgatherv</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ae39b087411837fdd346afd982cd6c8b5</anchor>
      <arglist>(T &amp;sb, T &amp;rb, IT &amp;counts, IT &amp;displ)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scatter</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a23de0794b61d143591ecfa9332860a91</anchor>
      <arglist>(T &amp;sb, T &amp;rb, int dest=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scatterv</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ac62e248a6d4b0e117d59b286ff036a2e</anchor>
      <arglist>(T &amp;sb, T &amp;rb, IT &amp;counts, IT &amp;displ, int source=0)</arglist>
    </member>
    <member kind="function">
      <type>request</type>
      <name>irecv</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ad7fe652bda8e179c4f92737b45d76f6b</anchor>
      <arglist>(int source, int tag, T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>request</type>
      <name>isend</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a190519f056d92cf4474f93a7c37fe47e</anchor>
      <arglist>(int dest, int tag, T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>request</type>
      <name>irecv</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>af27c64de490e241ca20aac5b79f8dd8b</anchor>
      <arglist>(int source, int tag, T *, int n)</arglist>
    </member>
    <member kind="function">
      <type>request</type>
      <name>isend</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a05b86880ea1a7e7059e5db3bc55d3e48</anchor>
      <arglist>(int dest, int tag, T *, int n)</arglist>
    </member>
    <member kind="function">
      <type>Communicate::request</type>
      <name>irecv</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a807d58fd5cef8b0fc21f119436a282b4</anchor>
      <arglist>(int source, int tag, T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Communicate::request</type>
      <name>isend</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a2aa5c8865ee147fb22d1ca0431a4e719</anchor>
      <arglist>(int dest, int tag, T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Communicate::request</type>
      <name>irecv</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>aba784f294890ec539cba8be156077524</anchor>
      <arglist>(int source, int tag, T *, int n)</arglist>
    </member>
    <member kind="function">
      <type>Communicate::request</type>
      <name>isend</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a474843650d715b87c344124a997a4cb9</anchor>
      <arglist>(int dest, int tag, T *, int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allreduce</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a5e5c12ad1c1c79f4e8be5d96a3c583f3</anchor>
      <arglist>(int &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allreduce</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a651d8ec419ad2760e87d845c149a34de</anchor>
      <arglist>(long &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allreduce</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a2f62b58c5790943c50c21b7831a6e7bb</anchor>
      <arglist>(double &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allreduce</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a0b909a26be23e46f7a8139526cb0f078</anchor>
      <arglist>(qmcplusplus::TinyVector&lt; double, OHMMS_DIM &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allreduce</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a8edec7d5956ad23aa846498a7cff3912</anchor>
      <arglist>(qmcplusplus::TinyVector&lt; int, OHMMS_DIM &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allreduce</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a412b0750e35b8750a79ea87c97320e2f</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allreduce</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a6c02943d4e527832a9b3c0871f42d820</anchor>
      <arglist>(std::vector&lt; long &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allreduce</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a5f9aa2b2b97ff35e743c9e6583e9f188</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allreduce</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a592c0ca384e6ce82f671a5855d98a5c1</anchor>
      <arglist>(PooledData&lt; double &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reduce</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>afe0decd1bd1cad6c41db070d4da93af9</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allreduce</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a1ce2133d88cc50b618937cba819d76d2</anchor>
      <arglist>(qmcplusplus::Matrix&lt; double &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reduce</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ac8a1058722df68d890761598c00a1cde</anchor>
      <arglist>(int *restrict g, int *restrict res, int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reduce</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a531ce1cf858694e193da2f32048a6b79</anchor>
      <arglist>(double *restrict g, double *restrict res, int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bcast</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a6e50c8a3b38351fc1b337ec458b98c8c</anchor>
      <arglist>(int &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bcast</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ae2129737fcc9cde15cb40c3e8b192f75</anchor>
      <arglist>(uint32_t &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bcast</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a53f88ae91312e573613b52988e0ddedb</anchor>
      <arglist>(double &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bcast</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a0f644c04d61dca584631283530b0cebf</anchor>
      <arglist>(float &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bcast</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a7ff4d10e824b53d00272e2be1ae4c0c5</anchor>
      <arglist>(bool &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bcast</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a2d21b4a127f40f9c216ccdb586cbdef4</anchor>
      <arglist>(qmcplusplus::TinyVector&lt; double, 2 &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bcast</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>af900df0828ea9c4e4a811bc178463f33</anchor>
      <arglist>(qmcplusplus::TinyVector&lt; int, 2 &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bcast</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a02ff081dd03c669b38840735be68e86d</anchor>
      <arglist>(qmcplusplus::TinyVector&lt; int, 3 &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bcast</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a29359ecc2105643ec22db0a41ac59f2d</anchor>
      <arglist>(vector&lt; qmcplusplus::TinyVector&lt; int, 3 &gt; &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bcast</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a618854fb088ba65f750657025126dfe1</anchor>
      <arglist>(qmcplusplus::TinyVector&lt; double, 3 &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bcast</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a961af9fce748fb45560db6a3e689ef00</anchor>
      <arglist>(qmcplusplus::TinyVector&lt; float, 3 &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bcast</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a750c90c419a679244fa54f93098a0363</anchor>
      <arglist>(qmcplusplus::TinyVector&lt; double, 4 &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bcast</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ae11f33fe3d7c425d9740f5e53b3aa0bc</anchor>
      <arglist>(qmcplusplus::Tensor&lt; double, 3 &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bcast</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>aa367a6f5e30957aa590cf1aae3b8d69e</anchor>
      <arglist>(qmcplusplus::Vector&lt; double &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bcast</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ac883d49d6a5c02f63c2516a6b0c7e0d0</anchor>
      <arglist>(qmcplusplus::Vector&lt; complex&lt; double &gt; &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bcast</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ad183c2e9f1769d134a3988f2c03ac4e1</anchor>
      <arglist>(qmcplusplus::Vector&lt; int &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bcast</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a172e8d96d74db528b8a0b24d70d787f3</anchor>
      <arglist>(qmcplusplus::Vector&lt; qmcplusplus::TinyVector&lt; double, 2 &gt; &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bcast</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a617db6535bf7941cb7654530911d9517</anchor>
      <arglist>(qmcplusplus::Vector&lt; qmcplusplus::TinyVector&lt; double, 3 &gt; &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bcast</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>af9a326f8c81cee284edc8a40ad12805e</anchor>
      <arglist>(qmcplusplus::Vector&lt; qmcplusplus::TinyVector&lt; float, 3 &gt; &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bcast</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a35ac30c38e0f0b2ae8ef0f8a3ff7f9ef</anchor>
      <arglist>(Array&lt; double, 3 &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bcast</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a9788065136990c07bde4ce3d0e4b9fed</anchor>
      <arglist>(Array&lt; int, 1 &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bcast</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>acd887800659e8cefe60dfbb995d145ae</anchor>
      <arglist>(Array&lt; complex&lt; double &gt;, 1 &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bcast</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a6a88c3dbb074a0223ce81ff3b48fefe6</anchor>
      <arglist>(Array&lt; complex&lt; double &gt;, 2 &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bcast</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>abc0902d1cd66880b04e7d669e9a8bb8a</anchor>
      <arglist>(Array&lt; complex&lt; double &gt;, 3 &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bcast</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a3a90b300df9767a829d7e58d435f9474</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bcast</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>aea51174e9e134fb4f4d34ff5d775fce6</anchor>
      <arglist>(PooledData&lt; double &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bcast</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>abbbbeb45e61af5762d78e709bffc71c3</anchor>
      <arglist>(PooledData&lt; int &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bcast</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>af91891405fef3d8eaf1565404bc09a10</anchor>
      <arglist>(std::vector&lt; qmcplusplus::TinyVector&lt; double, 2 &gt; &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bcast</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ab089ea234811902dc3ac6c3fb5d1cca3</anchor>
      <arglist>(std::vector&lt; qmcplusplus::TinyVector&lt; double, 3 &gt; &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bcast</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a2204c2936278370d703fa990a2b101d9</anchor>
      <arglist>(std::vector&lt; qmcplusplus::TinyVector&lt; float, 3 &gt; &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bcast</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a7198bb5b94b4365d76cb43d4efc624d7</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bcast</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a8abb8bcf7bca01158d47c99adff5a691</anchor>
      <arglist>(std::vector&lt; bool &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bcast</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a013e6f32f09e3798804d70830cdaaf9b</anchor>
      <arglist>(double *restrict x, int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bcast</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ab34bd56fbebad335c90b1dd6866a60a7</anchor>
      <arglist>(float *restrict x, int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bcast</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ae9fbd74db51d34401bb0b15ee24fdda6</anchor>
      <arglist>(int *restrict x, int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bcast</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>af890e0c241784018fc8f0607c7104674</anchor>
      <arglist>(char *restrict x, int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ac05dd54170f20b8397bb6af008a7fe08</anchor>
      <arglist>(int dest, int tag, std::vector&lt; double &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Communicate::request</type>
      <name>isend</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a860b86a742de1f4d3e5281e780653a0c</anchor>
      <arglist>(int dest, int tag, std::vector&lt; double &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Communicate::request</type>
      <name>irecv</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a361bcde6610af0e46640a4b593509c4b</anchor>
      <arglist>(int source, int tag, std::vector&lt; double &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gatherv</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a9b6fa7f52d09f50cc17bc06ab2d2ac14</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;l, std::vector&lt; double &gt; &amp;g, vector&lt; int &gt; &amp;counts, vector&lt; int &gt; &amp;displ, int dest)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gatherv</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a8b4f4da178d8b8c40baf435474c2acf1</anchor>
      <arglist>(std::vector&lt; float &gt; &amp;l, std::vector&lt; float &gt; &amp;g, vector&lt; int &gt; &amp;counts, vector&lt; int &gt; &amp;displ, int dest)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gatherv</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a1f3615535011d1060d56428a9a046fb6</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;l, std::vector&lt; int &gt; &amp;g, std::vector&lt; int &gt; &amp;counts, std::vector&lt; int &gt; &amp;displ, int dest)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allgather</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a61d50d33a07f22e5eb4e4b8e4600dc81</anchor>
      <arglist>(std::vector&lt; char &gt; &amp;sb, std::vector&lt; char &gt; &amp;rb, int count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allgatherv</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>acf05e89198c60585c446ee5ef65be5be</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;l, std::vector&lt; int &gt; &amp;g, std::vector&lt; int &gt; &amp;counts, std::vector&lt; int &gt; &amp;displ)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gatherv</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a974054753040b37f402e28ee8a951615</anchor>
      <arglist>(std::vector&lt; long &gt; &amp;l, std::vector&lt; long &gt; &amp;g, std::vector&lt; int &gt; &amp;counts, std::vector&lt; int &gt; &amp;displ, int dest)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gather</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ab47a4932003315e6e546ecc8c2ddf06c</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;l, std::vector&lt; double &gt; &amp;g, int dest)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gatherv</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a7b51bf08bcc527baecc252eafd5d8805</anchor>
      <arglist>(PooledData&lt; double &gt; &amp;l, PooledData&lt; double &gt; &amp;g, vector&lt; int &gt; &amp;counts, vector&lt; int &gt; &amp;displ, int dest)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gather</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a3fe19fde50fca841e84c152a571d7868</anchor>
      <arglist>(PooledData&lt; double &gt; &amp;l, PooledData&lt; double &gt; &amp;g, int dest)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mpi_comm_type</type>
      <name>myMPI</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a25b0c52b4661bc0432099776fa5987a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>intra_comm_type</type>
      <name>myComm</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ab1c82cec3d5c60f9763ef26ebb3d0d6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myName</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a2b080b4ea635d590ce7028ceda1342de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>d_mycontext</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a99869d55d59e2267839f30736de20a01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>d_ncontexts</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>af929e04be692fb24ea1223ae95e18f1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>d_groupid</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>af4d2b3e469b727d522859a4ca32a4312</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>d_ngroups</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a35e012ffaa7ab31e39c1fb492bc29532</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>mpi_comm_type</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>a0fd38c4b43968c8020fd431796c6ec58</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>status</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>aad64636f401daa123fd5687b599be5a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>request</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>acc5ca984f7dfb460a6618455a69722a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>intra_comm_type</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>aaee4d634369decaf3bdd972581093285</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CommunicateGroup</name>
    <filename>a00083.html</filename>
    <base>Communicate</base>
    <member kind="function">
      <type></type>
      <name>CommunicateGroup</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a3464f1a405a778e28ad6951bc387be58</anchor>
      <arglist>(Communicate &amp;acomm, int ndiv=1)</arglist>
    </member>
    <member kind="variable">
      <type>Communicate &amp;</type>
      <name>parent</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aa6aecd01b60731ac7a52777222dbb90a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CommunicatorTraits</name>
    <filename>a00084.html</filename>
  </compound>
  <compound kind="struct">
    <name>ConstScale</name>
    <filename>a00091.html</filename>
    <member kind="function">
      <type></type>
      <name>ConstScale</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>a0457b6aa811fb58f08221a50b7e9edc2</anchor>
      <arglist>(double c=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConstScale</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>a6cd681d6cbd7f91cdbfe8e5ea9421e8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>a01225abb0d364c4b121ad7136964d723</anchor>
      <arglist>(double r)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>a3dd52edd20b2388aaf6b766458827c1f</anchor>
      <arglist>(double r, double &amp;vr)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>ae5150bf986ac87a6966401c7cf8d0e76</anchor>
      <arglist>(double r, double &amp;vr, double &amp;dvr)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>C</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>a8987032f6f7d7cfaa0ff4e2a62ae08fe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Cosine3D</name>
    <filename>a00096.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a265a253612b46abed17c61b0a5e5ce30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PT</type>
      <name>pos_type</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a52994a8a8a7b19f3c8aa404e9d391fd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cosine3D</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>ac243f83e0e30c2cede27a784b0aea097</anchor>
      <arglist>(value_type kx=0, value_type ky=0, value_type kz=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a704882b05bac9f95e19c09be88d905b9</anchor>
      <arglist>(value_type kx, value_type ky, value_type kz)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>evaluate</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a74c8c7b3b89bb89cba3bab7af57dd0f1</anchor>
      <arglist>(const PT &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>PT</type>
      <name>gradient</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a099d2a8d4319ef5f8565728b3dcbcf79</anchor>
      <arglist>(const PT &amp;r, value_type &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>laplacian</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>ae3f16267cee3b3c5e592a8b76c9606aa</anchor>
      <arglist>(const PT &amp;r, value_type &amp;v, PT &amp;gr)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>laplacian</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>ae442aa1fac8fddd41257fb0c75274547</anchor>
      <arglist>(const PT &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator()</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a9425feb11200855c8fa5e06b1a63f6b9</anchor>
      <arglist>(const PT &amp;r)</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Kx</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a77550850b1cc49ea95407f32c4d8da40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Ky</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a5e4f6e1111525c1ea22623aa98c6bfd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Kz</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a5752bd76445a465f649df20d24916433</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Knorm2</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>afd8e85544478980f7dfec692ae62aa84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Val</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a7a9312a169e356746a56fb0addc3c55f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Lap</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>aee1a2afb5fb91b40412264a4992d4f9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>pos_type</type>
      <name>Grad</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>ac48888307bd56ec19128f9018c290abb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CubicBspline</name>
    <filename>a00113.html</filename>
    <templarg></templarg>
    <templarg>GRIDTYPE</templarg>
    <templarg>BC</templarg>
    <base>CubicBsplineGrid</base>
    <member kind="typedef">
      <type>CubicBsplineGrid&lt; T, GRIDTYPE, BC &gt;::point_type</type>
      <name>point_type</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a7190180c65403bb6223fe35436e251f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CubicBsplineGrid&lt; T, GRIDTYPE, BC &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>ae5a8674f0701beae67f1bf8b1c3f8c9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CubicBsplineGrid&lt; T, GRIDTYPE, BC &gt;::container_type</type>
      <name>container_type</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>aa1c6824d9234cc6f5258a0f5451fa7b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CubicBspline</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a73f5d7c091206f3399a5e0c821efed9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>aad76ef35071d5e072f82d5d4831e10bb</anchor>
      <arglist>(point_type start, point_type end, const container_type &amp;datain, bool closed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a7c5d88bca527334a0ae9522a60150833</anchor>
      <arglist>(point_type start, point_type end, const container_type &amp;datain, bool closed, T yp1, T ypn)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getValue</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a07d57e2cd69ab0cab0f5cee5d07363e8</anchor>
      <arglist>(point_type x)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getDeriv</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a60a9bfbee5527ea2c10cead7ad0b4be9</anchor>
      <arglist>(point_type x)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getDeriv2</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a5b378cece5b8b488e8b7a6ed32b6c9a8</anchor>
      <arglist>(point_type x)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getDeriv3</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>af504a9ebe26c23b9c1e83e51202dfeb2</anchor>
      <arglist>(point_type x)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator()</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a9d5fe009173e5473ec0cb22b240e8e1a</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>splint</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>ad9e06a38aca635f514e9219c2365536d</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>splint</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>aa557fd7ff899a2bd377d9db324fdb51a</anchor>
      <arglist>(point_type x, value_type &amp;dy, value_type &amp;d2y)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>interpolate</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a785418bd8e02d72fc2d7a424d303aa71</anchor>
      <arglist>(value_type p0, value_type p1, value_type p2, value_type p3, value_type &amp;dy, value_type &amp;d2y)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>interpolate0</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a5b8ae1e3754d9eec227e462e6f6c6844</anchor>
      <arglist>(value_type p0, value_type p1, value_type p2, value_type p3)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>interpolate1</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>ad3feb07d980570b3cdc2a9f92ee07dc5</anchor>
      <arglist>(value_type p0, value_type p1, value_type p2, value_type p3)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>interpolate2</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>af7bdf6837a49e4e7ba76bd7329292407</anchor>
      <arglist>(value_type p0, value_type p1, value_type p2, value_type p3)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>i0</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a4ebb6d9fc740933a0f821517ed9af3e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>i1</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>ac1148b6c7c73300331ae93335f42241d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>i2</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a48d37c88961428889f8b283379ab961c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>i3</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a46d0b19c5363d1d6b47ff947ff767ecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>OffSet</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a83e995acc41894f8a85b26c0b0340f86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>A</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>afb1a13ff32928c0c56792678203ecc27</anchor>
      <arglist>[16]</arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>dA</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a96f4ebaf932a25acedeb8784d9ad3969</anchor>
      <arglist>[12]</arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>d2A</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a9e46c8ae7004629f4a0f58ab3645e88c</anchor>
      <arglist>[8]</arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>d3A</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>ad619b51361b1768392b858f2e0e2dd25</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable">
      <type>container_type</type>
      <name>P</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a5de379e54a838b417cab1fbeeb3ea9cb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CubicBsplineGrid</name>
    <filename>a00114.html</filename>
    <templarg></templarg>
    <templarg>GRIDTYPE</templarg>
    <templarg>BC</templarg>
  </compound>
  <compound kind="struct">
    <name>CubicBsplineGrid&lt; T, LINEAR_1DGRID, FIRSTDERIV_CONSTRAINTS &gt;</name>
    <filename>a00115.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>GridTraits&lt; T &gt;::point_type</type>
      <name>point_type</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a8c04563b7c6ca6976f97b2d7d73ba50e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridTraits&lt; T &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>aeaf18ead8b90b5e9655637ea8f35ea9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; T &gt;</type>
      <name>container_type</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>aff6ca3e749b37c361c5bc0d4f1ec5b5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_t</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a852c53980759799f3cc055c395ec9bfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CubicBsplineGrid</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a69115c3a1426ee45391ba01b0053a142</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getGridPoint</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a168799822d4f6c653970ede79fd91e24</anchor>
      <arglist>(point_type x, int &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGrid</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a7156d4952acecb2058f7877290f18c78</anchor>
      <arglist>(point_type start, point_type end, size_t n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a7f1c3afce95e027b8788a6b885a32c4f</anchor>
      <arglist>(point_type start, point_type end, const container_type &amp;data, container_type &amp;p, bool closed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a87a204c7a8287bc0789cce3af5ed4fbf</anchor>
      <arglist>(point_type start, point_type end, value_type startDeriv, value_type endDeriv, const container_type &amp;data, container_type &amp;p)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Npts</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>ae09fde155ef0b14cbc6c5d5412034a84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridStart</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a9521f94d007687440e2b215478cbe978</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridEnd</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a9b3d62aeac0e2713464a63a7d9383ee7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridDelta</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>ac62735ae55fc1ac7fdce97bd0c5d0e5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridDeltaInv</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a1ee1444fed63e9266be25c9ec992e4a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridDeltaInv2</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a9252e64278a5df55d5863b5ca8eda79c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>L</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a54d90fed7893792fab50f8662ed9c0fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>Linv</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>af1c4132c409a3fe79603a402d9b9679c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>tp</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>aad27e9e6eb32f83acd8581dd9a2d7913</anchor>
      <arglist>[4]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CubicBsplineGrid&lt; T, LINEAR_1DGRID, PBC_CONSTRAINTS &gt;</name>
    <filename>a00116.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>GridTraits&lt; T &gt;::point_type</type>
      <name>point_type</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>a8c04563b7c6ca6976f97b2d7d73ba50e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridTraits&lt; T &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>aeaf18ead8b90b5e9655637ea8f35ea9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; T &gt;</type>
      <name>container_type</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>aff6ca3e749b37c361c5bc0d4f1ec5b5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CubicBsplineGrid</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>a69115c3a1426ee45391ba01b0053a142</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getGridPoint</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>a168799822d4f6c653970ede79fd91e24</anchor>
      <arglist>(point_type x, int &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>a7f1c3afce95e027b8788a6b885a32c4f</anchor>
      <arglist>(point_type start, point_type end, const container_type &amp;data, container_type &amp;p, bool closed)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>i0</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>a4ebb6d9fc740933a0f821517ed9af3e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>i1</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>ac1148b6c7c73300331ae93335f42241d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>i2</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>a48d37c88961428889f8b283379ab961c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>i3</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>a46d0b19c5363d1d6b47ff947ff767ecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridStart</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>a9521f94d007687440e2b215478cbe978</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridEnd</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>a9b3d62aeac0e2713464a63a7d9383ee7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridDelta</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>ac62735ae55fc1ac7fdce97bd0c5d0e5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridDeltaInv</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>a1ee1444fed63e9266be25c9ec992e4a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridDeltaInv2</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>a9252e64278a5df55d5863b5ca8eda79c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>L</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>a54d90fed7893792fab50f8662ed9c0fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>Linv</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>af1c4132c409a3fe79603a402d9b9679c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>curPoint</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>af72b087932c306e307c663e074aab7a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>tp</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>aad27e9e6eb32f83acd8581dd9a2d7913</anchor>
      <arglist>[4]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CubicSpline</name>
    <filename>a00118.html</filename>
    <templarg></templarg>
    <templarg>GRIDTYPE</templarg>
    <templarg>BC</templarg>
    <member kind="typedef">
      <type>CubicSplineGrid&lt; T, GRIDTYPE, BC &gt;</type>
      <name>GridType</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>ab729aa3e2dd9ad9097033df8defbde73</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CubicSplineEngine&lt; T, GRIDTYPE, BC &gt;</type>
      <name>SplineEngineType</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>acd56f5ca73c048d2765ada5d113e9852</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridType::point_type</type>
      <name>point_type</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a4681e7d8c54714c82d0365cf64ed08c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridType::value_type</type>
      <name>value_type</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a4175907148e83c7111cc2f6fc9ce433c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridType::container_type</type>
      <name>container_type</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a9e6e08bd4d436fcc26cb513e1151a59e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CubicSpline</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>af064379e1d043ac4ea3f16befce3604b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>ab26d792fa8820f313c5595e4582ec312</anchor>
      <arglist>(point_type start, point_type end, const container_type &amp;datain, bool closed, value_type yp1, value_type ypn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>aad76ef35071d5e072f82d5d4831e10bb</anchor>
      <arglist>(point_type start, point_type end, const container_type &amp;datain, bool closed)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>splint</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a7fc4ad4e14d9b20ba5321514e810fb57</anchor>
      <arglist>(point_type x)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>splint</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>aa557fd7ff899a2bd377d9db324fdb51a</anchor>
      <arglist>(point_type x, value_type &amp;dy, value_type &amp;d2y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CubicSpline</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>af064379e1d043ac4ea3f16befce3604b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CubicSpline</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a332e137ea68f1852001c24e9a5c37e31</anchor>
      <arglist>(const int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a169335ce881495628274687eb043f182</anchor>
      <arglist>(const int n)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a7df33bad89e25ca55768d7567803a199</anchor>
      <arglist>(T x0)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a473314c544b9447067273a4d2b1b7901</anchor>
      <arglist>(T x0, T &amp;yval)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a0ef0a8397ad4d3ca7b54ea468f86e20f</anchor>
      <arglist>(T x0, T &amp;yval, T &amp;yp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>ab8f0efa6d82e1053a6cfc36e70b7c5fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>ab96f79941af41667975ed78005b5866c</anchor>
      <arglist>(const int n, T *x, T *y, const T yp1, const T ypn)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>EndIndex</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>ab57f88e37dad803a0929bb1736f31531</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>ConstValue</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a87da8ee147603f7932bfa6213935726d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GridType</type>
      <name>myGrid</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a44e9d1d96039079fd97a37dd7dee0723</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SplineEngineType</type>
      <name>myEngine</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a192c0d55354c9e799457a755dd1d7a61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>container_type</type>
      <name>P</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a5de379e54a838b417cab1fbeeb3ea9cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>container_type</type>
      <name>auxP</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a2526b190f9be2995587c053f3b3ec12d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Npt</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a33a7837229beb81788dfd5e4095cfe7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Yp1</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>aa483e72268536ddceeb2f099e17c934f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Ypn</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>afa31164e8386b6135dc10ff609d97460</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; T &gt;</type>
      <name>X</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>ad5f7ba27c54b08e8e1df1285c6d3e51c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; T &gt;</type>
      <name>Y</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a24197f79f6a3797ae44fc7e17dce2903</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; T &gt;</type>
      <name>Y2</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>aaf42851cb2ac9029b8640f0325cfff83</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CubicSplineEngine&lt; T, GRIDTYPE, FIRSTDERIV_CONSTRAINTS &gt;</name>
    <filename>a00121.html</filename>
    <templarg></templarg>
    <templarg>GRIDTYPE</templarg>
    <member kind="typedef">
      <type>CubicSplineGrid&lt; T, GRIDTYPE, FIRSTDERIV_CONSTRAINTS &gt;</type>
      <name>GridType</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>a425d0f5b7a5a9512050cececaac482af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridType::point_type</type>
      <name>point_type</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>a4681e7d8c54714c82d0365cf64ed08c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridType::value_type</type>
      <name>value_type</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>a4175907148e83c7111cc2f6fc9ce433c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridType::container_type</type>
      <name>container_type</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>a9e6e08bd4d436fcc26cb513e1151a59e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CubicSplineEngine</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>ac69ede3eaaf4beda2a678bc03be9fc5e</anchor>
      <arglist>(GridType *agrid=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGrid</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>ac7af4f98905aef778ac1710e7ee5d032</anchor>
      <arglist>(GridType *agrid)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLowerGridBound</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>ac608acdf51ee7bcc843f3bd30f750c19</anchor>
      <arglist>(point_type x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLowerGridBound0</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>a7c905dfdb00e1639c85e19cd4961abb0</anchor>
      <arglist>(point_type x)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>interpolate</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>a3a3899426427196355566885ed3b7b71</anchor>
      <arglist>(value_type y1, value_type y2, value_type d2y1, value_type d2y2, value_type &amp;du, value_type &amp;d2u)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>interpolate</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>a0f3d6afafb330b85de8004b08868a927</anchor>
      <arglist>(value_type y1, value_type y2, value_type d2y1, value_type d2y2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>a3384079708eaf5dd48fa0e9ab7897cb5</anchor>
      <arglist>(value_type yp1, value_type ypn, container_type &amp;p, container_type &amp;d2p)</arglist>
    </member>
    <member kind="variable">
      <type>GridType *</type>
      <name>myGrid</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>acc3ec2d9f5aaef0116f866501d8b483e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>cL</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>a98531a0f08dff3f96c4b017684c3e174</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>cR</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>a80b3686bd8611a8cce496ddd7eea159d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>q1</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>ac279006e4686a7c452d19b72b8b8bcec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>q2</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>a3304cbba76d34d6e271284e47c2dd6aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>dq1</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>a202947e5b4bf5b14d3fc4c86ebb5aa2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>dq2</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>a26327fed7bac56bbc9d15ed19456760a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CubicSplineEngine&lt; T, GRIDTYPE, PBC_CONSTRAINTS &gt;</name>
    <filename>a00122.html</filename>
    <templarg></templarg>
    <templarg>GRIDTYPE</templarg>
    <member kind="typedef">
      <type>CubicSplineGrid&lt; T, GRIDTYPE, PBC_CONSTRAINTS &gt;</type>
      <name>GridType</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a214a52f59b93bac8fbdc4285a283ea61</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridType::point_type</type>
      <name>point_type</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a4681e7d8c54714c82d0365cf64ed08c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridType::value_type</type>
      <name>value_type</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a4175907148e83c7111cc2f6fc9ce433c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridType::container_type</type>
      <name>container_type</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a9e6e08bd4d436fcc26cb513e1151a59e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CubicSplineEngine</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>ac69ede3eaaf4beda2a678bc03be9fc5e</anchor>
      <arglist>(GridType *agrid=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGrid</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>ac7af4f98905aef778ac1710e7ee5d032</anchor>
      <arglist>(GridType *agrid)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLowerGridBound</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>ac608acdf51ee7bcc843f3bd30f750c19</anchor>
      <arglist>(point_type x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLowerGridBound0</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a7c905dfdb00e1639c85e19cd4961abb0</anchor>
      <arglist>(point_type x)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>interpolate</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a0e686dfcbdba768944ea0e47d081f2d3</anchor>
      <arglist>(value_type a, value_type b, value_type a1, value_type b1, value_type &amp;du, value_type &amp;d2u)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>interpolate</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a137372e343ec96a57c5c819e9a16175a</anchor>
      <arglist>(value_type a, value_type b, value_type a1, value_type b1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a98e1ef2989d4b82326d2e3f3733ed617</anchor>
      <arglist>(value_type yp1, value_type ypn, container_type &amp;p, container_type &amp;auxp)</arglist>
    </member>
    <member kind="variable">
      <type>GridType *</type>
      <name>myGrid</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>acc3ec2d9f5aaef0116f866501d8b483e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>cL</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a98531a0f08dff3f96c4b017684c3e174</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>cR</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a80b3686bd8611a8cce496ddd7eea159d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>p1</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>ad63e852206363d5f856068462d19631b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>p2</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>ad465e60f1e0bc4f20961c17682f7e11f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>q1</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>ac279006e4686a7c452d19b72b8b8bcec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>q2</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a3304cbba76d34d6e271284e47c2dd6aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>dp1</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>ae4906cbbca4135852102b8a527370efd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>dq1</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a202947e5b4bf5b14d3fc4c86ebb5aa2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>dq2</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a26327fed7bac56bbc9d15ed19456760a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>d2p1</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>ab277e7ccf1442fceee36e7a46934be30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>d2q1</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a4ee24d1f3bc0ce27038c835e1087f5e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>d2q2</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>ad06785a5ab043b531c1401c72e9cc312</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CubicSplineGrid&lt; T, LINEAR_1DGRID, FIRSTDERIV_CONSTRAINTS &gt;</name>
    <filename>a00124.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>GridTraits&lt; T &gt;::point_type</type>
      <name>point_type</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a8c04563b7c6ca6976f97b2d7d73ba50e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridTraits&lt; T &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>aeaf18ead8b90b5e9655637ea8f35ea9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; T &gt;</type>
      <name>container_type</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>aff6ca3e749b37c361c5bc0d4f1ec5b5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CubicSplineGrid</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a8b848379581d95c5431f8593db79ed73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>point_type</type>
      <name>getGridValue</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>ae992369976e78768791dfae20c31e911</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>point_type</type>
      <name>getDelta</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a24ba36dcdd6f4e118c22743f4ad305fa</anchor>
      <arglist>(point_type xIn, int &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>checkGrid</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>ae17b9ba3698a5bbd210816c72f764837</anchor>
      <arglist>(point_type xIn, int &amp;i, point_type &amp;dl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGrid</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>af6d51ebf9c023e1e2b61a3053e33ae98</anchor>
      <arglist>(point_type start, point_type end, int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>aa3c96b77dd3b5d520de2c3b9ad4ad28b</anchor>
      <arglist>(point_type start, point_type end, container_type &amp;p, container_type &amp;d2p, bool closed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a9afed6d1ff36b6677e0416ebd7499b17</anchor>
      <arglist>(point_type start, point_type end, value_type yp1, value_type ypn, container_type &amp;p, container_type &amp;d2p, bool closed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a3384079708eaf5dd48fa0e9ab7897cb5</anchor>
      <arglist>(value_type yp1, value_type ypn, container_type &amp;p, container_type &amp;d2p)</arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>L</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a54d90fed7893792fab50f8662ed9c0fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>Linv</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>af1c4132c409a3fe79603a402d9b9679c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridStart</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a9521f94d007687440e2b215478cbe978</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridEnd</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a9b3d62aeac0e2713464a63a7d9383ee7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridDelta</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>ac62735ae55fc1ac7fdce97bd0c5d0e5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridDeltaInv</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a1ee1444fed63e9266be25c9ec992e4a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridDeltaInv2</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a9252e64278a5df55d5863b5ca8eda79c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>StartDeriv</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a63fddb2fc5a06e8acdebcae8e355552b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>EndDeriv</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a7def573635fce5b60e75ec20f2aeceaa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CubicSplineGrid&lt; T, LINEAR_1DGRID, PBC_CONSTRAINTS &gt;</name>
    <filename>a00125.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>GridTraits&lt; T &gt;::point_type</type>
      <name>point_type</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a8c04563b7c6ca6976f97b2d7d73ba50e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridTraits&lt; T &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>aeaf18ead8b90b5e9655637ea8f35ea9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; T &gt;</type>
      <name>container_type</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>aff6ca3e749b37c361c5bc0d4f1ec5b5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CubicSplineGrid</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a8b848379581d95c5431f8593db79ed73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>point_type</type>
      <name>getGridValue</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>ae992369976e78768791dfae20c31e911</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>point_type</type>
      <name>getDelta</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a24ba36dcdd6f4e118c22743f4ad305fa</anchor>
      <arglist>(point_type xIn, int &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGrid</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>af6d51ebf9c023e1e2b61a3053e33ae98</anchor>
      <arglist>(point_type start, point_type end, int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a971190245e958f16e248ff401dc5dec2</anchor>
      <arglist>(point_type start, point_type end, const container_type &amp;datain, container_type &amp;p, container_type &amp;dp, bool closed)</arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridStart</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a9521f94d007687440e2b215478cbe978</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridEnd</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a9b3d62aeac0e2713464a63a7d9383ee7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridDelta</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>ac62735ae55fc1ac7fdce97bd0c5d0e5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridDeltaInv</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a1ee1444fed63e9266be25c9ec992e4a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridDeltaInv2</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a9252e64278a5df55d5863b5ca8eda79c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>L</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a54d90fed7893792fab50f8662ed9c0fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>Linv</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>af1c4132c409a3fe79603a402d9b9679c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cuda_allocator</name>
    <filename>a00127.html</filename>
    <templarg>T</templarg>
    <class kind="struct">cuda_allocator::rebind</class>
    <member kind="typedef">
      <type>size_t</type>
      <name>size_type</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a49b489a408a211a90e766329c0732d7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>acf947bbb9e09f863cc3572ff8550b183</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>pointer</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a680c78d51cff3fd301666dd75bdbe49d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T *</type>
      <name>const_pointer</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a53d259f0075b22d7646e373816830e8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>reference</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a9b1a63f171d76a7a3995b6858e99f2ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T &amp;</type>
      <name>const_reference</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>af9ba3e25df088c62f7d535b91672cda9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a265a253612b46abed17c61b0a5e5ce30</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cuda_allocator</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>aab130d1425f4c8b795ceab259b636f23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cuda_allocator</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a7c6632fd8792efa3d36d6726fa5a6809</anchor>
      <arglist>(const cuda_allocator &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cuda_allocator</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>ab9b424c4b81549570327fbcbafc16615</anchor>
      <arglist>(const cuda_allocator&lt; U &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~cuda_allocator</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a258e7566e68764c496e693c09b36fcb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>address</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a46db7052ff692664a325eb594926a83c</anchor>
      <arglist>(reference x) const </arglist>
    </member>
    <member kind="function">
      <type>const_pointer</type>
      <name>address</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a13d9fc504a31fccca8214bb58684eea1</anchor>
      <arglist>(const_reference x) const </arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>allocate</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>aa1a9783c4ea96af8ec485f67bf81677d</anchor>
      <arglist>(size_type s, cuda_allocator&lt; void &gt;::const_pointer hint=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocate</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>ae10fea9da390716e733f702f3b1d74cb</anchor>
      <arglist>(pointer p, size_type n)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>max_size</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a0ab5ce862c0331d9e45a6e1774fca131</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a457e3a33cd64fbb19193cceecd607173</anchor>
      <arglist>(pointer p, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>aab1823d742973fba3433309bd3ee03f1</anchor>
      <arglist>(pointer p)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cuda_allocator::rebind</name>
    <filename>a00518.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>cuda_allocator&lt; U &gt;</type>
      <name>other</name>
      <anchorfile>a00518.html</anchorfile>
      <anchor>a9ec34a22517de856268eb0f05517b942</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cuda_allocator&lt; void &gt;</name>
    <filename>a00128.html</filename>
    <class kind="struct">cuda_allocator&lt; void &gt;::rebind</class>
    <member kind="typedef">
      <type>void *</type>
      <name>pointer</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a4f8e3c8dc03b1c750da13bd49ce4c439</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const void *</type>
      <name>const_pointer</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a58604c55563024f0759ac1326733ab80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>value_type</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a9c85f50eb8b41cf8c88aadc67b632316</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cuda_allocator&lt; void &gt;::rebind</name>
    <filename>a00519.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>cuda_allocator&lt; T1 &gt;</type>
      <name>other</name>
      <anchorfile>a00519.html</anchorfile>
      <anchor>ad7e09c4328bbb4216020a55da870bf0b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cuda_vector</name>
    <filename>a00129.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>cuda_vector &amp;</type>
      <name>operator=</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a3008b118d287a21e9de5fcbbfb56004e</anchor>
      <arglist>(const std::vector&lt; T, std::allocator&lt; T &gt; &gt; &amp;vec)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DensityObserver</name>
    <filename>a00139.html</filename>
    <member kind="typedef">
      <type>TinyVector&lt; double, 3 &gt;</type>
      <name>PosType</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>ada8bdc5b1a1a809ab62ecc9ac3044528</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DensityObserver</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a4c13ade406f7457ba61a1acdff5a942f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>aa4d0c6ff3d730866f66c64be16a356c0</anchor>
      <arglist>(const vector&lt; PosType &gt; &amp;pos, int nat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getData</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a6abc577176df61750b68aa6f69436590</anchor>
      <arglist>(const char *fname, int nproc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a1b73d1723583526f3f2988057bfecc0b</anchor>
      <arglist>(const char *fname)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>npts</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a0306378cd06415f84b10cb3d15516ec3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nsamples</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a1d7032fb58a83cdde2d9963a8f76c7d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>rmin</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a6b40e64084cc0e48b7a6be3c8d0c6ee6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>rmax</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a99380f4387c67cd1abe105877d439104</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>delta</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a9ea1a8f5ef3e6d20b362385e1288c72c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>deltainv</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>af112e3b97da575d4e57650d2bb3f51fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; double &gt;</type>
      <name>value</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a43219dec7f0be96e580df606b1d64823</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ECPTest</name>
    <filename>a00193.html</filename>
    <member kind="typedef">
      <type>OneDimGridFactory::RealType</type>
      <name>RealType</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>adb3f0a407f92dfb3fde857c790b4c526</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimGridFactory::GridType</type>
      <name>GridType</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>ab6f587e52c5889d6731917d534fee082</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianTimesRN&lt; RealType &gt;</type>
      <name>InFuncType</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>aca857c32fbc2f042a49d6e19a5b2b3ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimCubicSpline&lt; RealType &gt;</type>
      <name>OutFuncType</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>a7a1d67848024c5e9f1b901253ef7df1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ECPTest</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>a3f9340b38bea210f7c4d700d700ce44a</anchor>
      <arglist>(const string &amp;fname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildSemiLocal</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>a57c4e2b017e04070ac0b3f129c496ae3</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildLocal</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>a67bcf517561cdb413b6ce651ffb8d427</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>Name</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>a7ee9065718e6628dc7791b756fa6c0f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Zeff</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>a3470aa9e44c5c7c4e1105fe3506880bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>EwaldSum</name>
    <filename>a00212.html</filename>
    <templarg>PT</templarg>
    <base>EwaldSumTraits&lt; PT::Scalar_t, false, false &gt;</base>
    <member kind="typedef">
      <type>ParticleBase&lt; PT &gt;</type>
      <name>Particle_t</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a84637b555946dd8dc9cdb08dd809437f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Particle_t::ParticleLayout_t</type>
      <name>ParticleLayout_t</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>ab1a0ace701e84463353d13bb5545c0ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Particle_t::Scalar_t</type>
      <name>Scalar_t</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>ae70a029eb8a43c8791a687772435081e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Particle_t::SingleParticleIndex_t</type>
      <name>SingleParticleIndex_t</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a9631489e400d76c58b30ae126543b92c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Particle_t::SingleParticlePos_t</type>
      <name>SingleParticlePos_t</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>aefb73ab0c09d592c32507cb436a15705</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Particle_t::Tensor_t</type>
      <name>Tensor_t</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a91e61de01e57b188c78d6e99a1884670</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Particle_t::ParticlePos_t</type>
      <name>ParticlePos_t</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a179c41b683210bf36fbcf1add795e903</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Particle_t::ParticleScalar_t</type>
      <name>ParticleScalar_t</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a96a75559b15471d7e1edeae6e85673f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PtclPairListBase&lt; double, 3 &gt;</type>
      <name>PtclPairList_t</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>ad6741a6781c93583341d47960c38a6f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EwaldSum</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a506493cb5a1bc4cb634663d9240d713c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EwaldSum</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a147aeb5686b26f5ae7d6afd0ef9a9519</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>ae977bd6567325b68f3cc2098f8ef1de2</anchor>
      <arglist>(ParticleLayout_t &amp;lat, const ParticleScalar_t &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makecells</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a790d6eb45e6649fd8306fb12c76b538a</anchor>
      <arglist>(const ParticleLayout_t &amp;lattice)</arglist>
    </member>
    <member kind="function">
      <type>Scalar_t</type>
      <name>energyG</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a3b10f2899b55b0c066ce47c9452aebb4</anchor>
      <arglist>(const ParticleLayout_t &amp;lattice, const ParticlePos_t &amp;r, const ParticleScalar_t &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>Scalar_t</type>
      <name>energyR</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a83c7a2b9e241c8396798c19b2b9e2708</anchor>
      <arglist>(const ParticleLayout_t &amp;lattice, const ParticlePos_t &amp;r, const ParticleScalar_t &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>Scalar_t</type>
      <name>energyR</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a948632748c2bee9677946f9ca11e02e3</anchor>
      <arglist>(const PtclPairList_t &amp;nnlist, int first, int last, const ParticleScalar_t &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>Scalar_t</type>
      <name>forcestress</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>afae85210382b974d8bf3d04d25bfbff2</anchor>
      <arglist>(const ParticleLayout_t &amp;lattice, const ParticlePos_t &amp;r, const ParticleScalar_t &amp;q, ParticlePos_t &amp;f, Tensor_t &amp;stress)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a571580ea7471b01a50ca810c0cb59ebc</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>Eps</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a2771f91fe6ce6d7a7f9484ff78b2b5ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>Tr_over_Tg</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>aaf4987432d650f6cd85e92386d66c887</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SingleParticleIndex_t</type>
      <name>maxG</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>afe022493cbc17b8e98f142367df31263</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SingleParticleIndex_t</type>
      <name>maxR</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>aae9b0db4ca5ffa049b0dfa073ef9256d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>Rmax</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>ace7a6366993a3510538b7d46b3e461e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>acclog</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>ae9db46362ce4caadea0df66e011081c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>g2max</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a4f8ffadbfe674d32adb65d624b2deef0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>x2max</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>ad9771503297296048321308f10900c42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>sqeps</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a24cb3a70798967a2e80ff54c7c4ddf08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>gamrec</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a58575284de538d4a9098c65be01d8907</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>gamdir</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>af78608dec9a3eaa8c59c3f2076bf1570</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>s3</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a6082dffe2ffc50b845677603e4f44a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>s4</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a10b16abd5b08f7896bba871b56cd3e99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>Volume</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a2a5130c218b3ab62d29862d6e579a004</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>E0</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>af34397892b6d5c5f0fd5443fefb818dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>Cg</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>ae12628dbdc60f0366d84c39596886bf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>Cr</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a9f73f2a9fad4590f23ebe14d50051c11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; SingleParticleIndex_t &gt;</type>
      <name>RShell</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a237bcb2cd448b6c1d65f35d0af27a4d6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>EwaldSumTraits&lt; T, false, false &gt;</name>
    <filename>a00214.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>EwaldSumTraits</name>
      <anchorfile>a00214.html</anchorfile>
      <anchor>a156f773aee9b416f64ab99092f612578</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>ConvE</name>
      <anchorfile>a00214.html</anchorfile>
      <anchor>a8374ce8a0b4cb843cfb2021af791413b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>ConvF</name>
      <anchorfile>a00214.html</anchorfile>
      <anchor>a7c35d433ffab6e6b4d7647fe4503bef7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>EwaldSumTraits&lt; T, true, true &gt;</name>
    <filename>a00215.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>EwaldSumTraits</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a156f773aee9b416f64ab99092f612578</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>ConvE</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a8374ce8a0b4cb843cfb2021af791413b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>ConvF</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a7c35d433ffab6e6b4d7647fe4503bef7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GamesAsciiParser</name>
    <filename>a00232.html</filename>
    <base>QMCGaussianParserBase</base>
    <base>OhmmsAsciiParser</base>
    <member kind="function">
      <type></type>
      <name>GamesAsciiParser</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>a21174a7273a8d5858ec1728b01fc346c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GamesAsciiParser</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ac7c69c1eec7e26888388d99e0655a62e</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>aeec255ceac2f406ae1ca8d47f18d4762</anchor>
      <arglist>(const std::string &amp;fname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGeometry</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>a3af2c5781e73ffc06800ae7c8a526c8c</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGaussianCenters</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>a1805a6be3818f6482bace5db5e0d696e</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getMO</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>a177c0d514b456808b6628a96371a314a</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCI</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>a204d7a2fb9bc03187c391210a750f913</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getORMAS</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>a5bc4bb626c7d7e4e80a2bd1da7e7e9d7</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCSF</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ab2d3cfeb8907a27ab2312f9a331b19e7</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCSFSign</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>a2053f1d1417bba3f2c90e1f9b217cecd</anchor>
      <arglist>(vector&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="variable">
      <type>streampos</type>
      <name>pivot_begin</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ab1381416296edb597c98f5df33bbfc58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; std::string &gt;</type>
      <name>tags</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>afaa2e42d606bffd75a1c0e33eea46315</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>usingECP</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ab270e6bca7685ac7ccfce98d46347513</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>MOtype</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>a25fa12a59486a69cf5d0ea26644d858e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>readtype</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>a9e47aca8ac763cdd35097f276448f5b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NFZC</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>a155edd87c302ebc50d6902e854fc3dd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NEXT</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>a8b1de0d6cc9256180492426f45809138</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NTOT</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>a459caca3342bee05a2b76c6df3e085f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NAC</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>a0e422b5c2ac536147f73a94800867ae2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GamesXmlParser</name>
    <filename>a00233.html</filename>
    <base>QMCGaussianParserBase</base>
    <base>OhmmsAsciiParser</base>
    <member kind="function">
      <type></type>
      <name>GamesXmlParser</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>afbe30448e75c39dc79dc9690ba90ac28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GamesXmlParser</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a9546a9b0cbab660490914c56f87a2854</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>aeec255ceac2f406ae1ca8d47f18d4762</anchor>
      <arglist>(const std::string &amp;fname)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getGeometry</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>ae4df10a4f808ebf5672cc538c8216a3b</anchor>
      <arglist>(vector&lt; xmlNodePtr &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getGaussianCenters</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>aed232765bab83521d22b94d0186c1c21</anchor>
      <arglist>(vector&lt; xmlNodePtr &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getEigVectors</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a9872f48c290eb6960476d86f711ef843</anchor>
      <arglist>(vector&lt; xmlNodePtr &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getControlParameters</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a8c16f1ae5a715a253e8fa97b4f9714a3</anchor>
      <arglist>(xmlNodePtr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>GaussianCombo</name>
    <filename>a00234.html</filename>
    <templarg>T</templarg>
    <base>OptimizableFunctorBase</base>
    <class kind="struct">GaussianCombo::BasicGaussian</class>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>a265a253612b46abed17c61b0a5e5ce30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>optimize::VariableSet::real_type</type>
      <name>real_type</name>
      <anchorfile>a00446.html</anchorfile>
      <anchor>a63879bf32859613c81ae97ba371b24e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>optimize::VariableSet</type>
      <name>opt_variables_type</name>
      <anchorfile>a00446.html</anchorfile>
      <anchor>a7889af7f2cc8ecdb39b57a278df4d3c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>optimize::VariableSet::variable_map_type</type>
      <name>variable_map_type</name>
      <anchorfile>a00446.html</anchorfile>
      <anchor>afef3bb1526675128213cd4dacc3e789d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianCombo</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>aaf6c3ce6b79ee5f7212459888b880cbc</anchor>
      <arglist>(int l=0, bool normalized=false, const char *node_name=&quot;radfunc&quot;, const char *exp_name=&quot;exponent&quot;, const char *c_name=&quot;contraction&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GaussianCombo</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>aea43708e1a86f9b5a73fa7dca503d616</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OptimizableFunctorBase *</type>
      <name>makeClone</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>a4747acd34f8d2daa0656125f1290e4d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>ab8e4e3e2a7bf18888b71bdf9dda0770b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>a6a91c8094ddd49aa8a2da9df6b439164</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>aff351ffb66160b6458d6057fa6bc2a5f</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>af08f1f70ecd1cddcf7d274cbcad42f40</anchor>
      <arglist>(real_type r, real_type rinv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateAll</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>a1b404b15a77d0f3bd4e6ff6a527a518d</anchor>
      <arglist>(real_type r, real_type rinv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateWithThirdDeriv</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>a34e6026bbb2f2b7932699f15cb2e387a</anchor>
      <arglist>(real_type r, real_type rinv)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putBasisGroup</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>a806f7ea26ab76c46abcf798b5d98c68d</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>DFactorial</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>af1c2a4551e142d26240720ffdda78d94</anchor>
      <arglist>(int num)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptimizableFunctorBase</name>
      <anchorfile>a00446.html</anchorfile>
      <anchor>a3a4df520ebfd9ce0d749f91ddc76dd6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OptimizableFunctorBase</name>
      <anchorfile>a00446.html</anchorfile>
      <anchor>a0439c493f8df5054c1effd2da4fcee6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getIndex</name>
      <anchorfile>a00446.html</anchorfile>
      <anchor>a388226dc75b99262359e59d8083d6ae7</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDensity</name>
      <anchorfile>a00446.html</anchorfile>
      <anchor>af35e4ce8d67b6f546bebf86fd0d14844</anchor>
      <arglist>(real_type n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluateDerivatives</name>
      <anchorfile>a00446.html</anchorfile>
      <anchor>aad983c0184558b41684c297f266743d3</anchor>
      <arglist>(real_type r, std::vector&lt; qmcplusplus::TinyVector&lt; real_type, 3 &gt; &gt; &amp;derivs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setGridManager</name>
      <anchorfile>a00446.html</anchorfile>
      <anchor>aec9d6d4b07f46d6c21a4a0f43595b94f</anchor>
      <arglist>(bool willmanage)</arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Y</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>a8b4dc77b2f75ec3e80eb8987f98db7af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>dY</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>a6a8818d83e16d75f6e13cc9df1e809ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>d2Y</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>ab2751661aab00028080a57c4747bd245</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>d3Y</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>ab1d41da3b5323d7b5813290c2f465e3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Normalized</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>aacbcd3c308ce1771fb38f921fb87a5d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>L</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>a4df6d7cf4cfb207abafefb7efe788f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>NormL</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>ab62ad8e29508d3b136b26895505552ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>NormPow</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>ae6a9215c7baa37ee80da4376109e3bb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>nodeName</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>aab1a064968614e9937da4edb37bebfd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>expName</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>adf12170ede4e9e3a5cc1339bfd5809e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>coeffName</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>ab56bcf463c4e3c19fbc59c515096932e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; BasicGaussian &gt;</type>
      <name>gset</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>a026415eb2540fd6a542dd4a1e516b9a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>cutoff_radius</name>
      <anchorfile>a00446.html</anchorfile>
      <anchor>a794d5142bc5bcf3a1938aacdea50dd99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>opt_variables_type</type>
      <name>myVars</name>
      <anchorfile>a00446.html</anchorfile>
      <anchor>aee7ccfd07712b8606ef965967b67e860</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>GaussianCombo::BasicGaussian</name>
    <filename>a00033.html</filename>
    <member kind="function">
      <type></type>
      <name>BasicGaussian</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a90b4f65defc94a8b1584ef202150ad11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicGaussian</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a4bbacc56b11408e0546de19cff11f406</anchor>
      <arglist>(real_type sig, real_type c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a9d876ee568153bbfc1270422214789ca</anchor>
      <arglist>(real_type sig, real_type c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setgrid</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>afef32e97243d8c3aeb95a6c0702b1535</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a60f6ea28375b5dc42bbb00a96d5a1263</anchor>
      <arglist>(real_type rr) const </arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>ae42d4b75921bd76a7ea235c16655d071</anchor>
      <arglist>(real_type r, real_type rr) const </arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a93bf877afaba7230212f769561e670c3</anchor>
      <arglist>(real_type r, real_type rr, real_type &amp;du, real_type &amp;d2u)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>adca28d5517619b7982c024a2e3ed8e67</anchor>
      <arglist>(real_type r, real_type rr, real_type &amp;du, real_type &amp;d2u, real_type &amp;d3u)</arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Sigma</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a3422e3260aa89eb54a45e561b578b57c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Coeff</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>ae85ee2daebeae15108684fa38c07c146</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>MinusSigma</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>aa2d8cfc9956ec0324296ce44cb99c5c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>CoeffP</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>aad48ed2fb248b3627c9a3be9f13594d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>CoeffPP</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a3847b648b46bb99b504882a72be9580b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>CoeffPPP1</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a8b934af15c7c1985f262e8f88e71f54d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>CoeffPPP2</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>ad25b430b03927e23a6d92369123c9e5f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GaussianFCHKParser</name>
    <filename>a00235.html</filename>
    <base>QMCGaussianParserBase</base>
    <base>OhmmsAsciiParser</base>
    <member kind="function">
      <type></type>
      <name>GaussianFCHKParser</name>
      <anchorfile>a00235.html</anchorfile>
      <anchor>ade566b02f42d9c793aa6a4fa86ff2860</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianFCHKParser</name>
      <anchorfile>a00235.html</anchorfile>
      <anchor>aaa184916ca7d11609aba732edc98fe3c</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse</name>
      <anchorfile>a00235.html</anchorfile>
      <anchor>aeec255ceac2f406ae1ca8d47f18d4762</anchor>
      <arglist>(const std::string &amp;fname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGeometry</name>
      <anchorfile>a00235.html</anchorfile>
      <anchor>a3af2c5781e73ffc06800ae7c8a526c8c</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGaussianCenters</name>
      <anchorfile>a00235.html</anchorfile>
      <anchor>a1805a6be3818f6482bace5db5e0d696e</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>GaussianTimesRN</name>
    <filename>a00237.html</filename>
    <templarg>T</templarg>
    <base>OptimizableFunctorBase</base>
    <class kind="struct">GaussianTimesRN::BasicGaussian</class>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>a265a253612b46abed17c61b0a5e5ce30</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianTimesRN</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>abf17e91ac828aa740aedd56fbef37a1e</anchor>
      <arglist>(const char *node_name=&quot;radfunc&quot;, const char *exp_name=&quot;exponent&quot;, const char *c_name=&quot;contraction&quot;, const char *p_name=&quot;power&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GaussianTimesRN</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>a1354b2714d248a6699da2898aa821a2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OptimizableFunctorBase *</type>
      <name>makeClone</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>a4747acd34f8d2daa0656125f1290e4d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>ab8e4e3e2a7bf18888b71bdf9dda0770b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>a6a91c8094ddd49aa8a2da9df6b439164</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>aff351ffb66160b6458d6057fa6bc2a5f</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>af08f1f70ecd1cddcf7d274cbcad42f40</anchor>
      <arglist>(real_type r, real_type rinv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateAll</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>a1b404b15a77d0f3bd4e6ff6a527a518d</anchor>
      <arglist>(real_type r, real_type rinv)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOptimizables</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>ab2f9dfe45260b011f6fcc8b2d12ee747</anchor>
      <arglist>(VarRegistry&lt; real_type &gt; &amp;vlist)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putBasisGroup</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>aec107b7fa8782e57680d361f7b325d68</anchor>
      <arglist>(xmlNodePtr cur, int baseOff=0)</arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Y</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>a8b4dc77b2f75ec3e80eb8987f98db7af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>dY</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>a6a8818d83e16d75f6e13cc9df1e809ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>d2Y</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>ab2751661aab00028080a57c4747bd245</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>basePower</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>adaaec1a3c81d5a2a82c3987cb6c05897</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>nodeName</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>aab1a064968614e9937da4edb37bebfd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>expName</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>adf12170ede4e9e3a5cc1339bfd5809e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>coeffName</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>ab56bcf463c4e3c19fbc59c515096932e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>powerName</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>a239596c8196a109946401a620b8c9487</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; xmlNodePtr &gt;</type>
      <name>InParam</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>a4489167986bb9aa3aa91a24c18abcaf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; BasicGaussian &gt;</type>
      <name>gset</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>a026415eb2540fd6a542dd4a1e516b9a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>GaussianTimesRN::BasicGaussian</name>
    <filename>a00034.html</filename>
    <member kind="function">
      <type></type>
      <name>BasicGaussian</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a65808c4e452980336ab8f4359f98bd9a</anchor>
      <arglist>(real_type sig=1.0, real_type c=1.0, int p=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetGaussian</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>ac187e6789a60f84ba088db38ebaf440c</anchor>
      <arglist>(real_type sig, real_type c, int p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setgrid</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>afef32e97243d8c3aeb95a6c0702b1535</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>aa2804021d2f0bcff20205a9ae3ebf60d</anchor>
      <arglist>(real_type r, real_type rr)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a5d6f32ebf941be5a8dd4d97e732dc71c</anchor>
      <arglist>(real_type r, real_type rr)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a93bf877afaba7230212f769561e670c3</anchor>
      <arglist>(real_type r, real_type rr, real_type &amp;du, real_type &amp;d2u)</arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Sigma</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a3422e3260aa89eb54a45e561b578b57c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Coeff</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>ae85ee2daebeae15108684fa38c07c146</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Power</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>af86685d260bf1b9f92bec64bdac8df49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>MinusSigma</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>aa2d8cfc9956ec0324296ce44cb99c5c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>CoeffP</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>aad48ed2fb248b3627c9a3be9f13594d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>CoeffPP</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a3847b648b46bb99b504882a72be9580b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>PowerC</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a1423f7525fdab721c6c9468b7ca89e9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>GenericSTO</name>
    <filename>a00240.html</filename>
    <templarg>T</templarg>
    <base>OptimizableFunctorBase</base>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>a265a253612b46abed17c61b0a5e5ce30</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericSTO</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>a2001e2cfe2e8403739528db01532616e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericSTO</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>a517b2cab026b8dbdd8d6a9d571b53560</anchor>
      <arglist>(int power, real_type z, real_type norm=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericSTO</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>a62839bbbcea87479bda8218385d622d1</anchor>
      <arglist>(int n, int l, real_type z)</arglist>
    </member>
    <member kind="function">
      <type>OptimizableFunctorBase *</type>
      <name>makeClone</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>a4747acd34f8d2daa0656125f1290e4d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setgrid</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>afef32e97243d8c3aeb95a6c0702b1535</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>a6a91c8094ddd49aa8a2da9df6b439164</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>aff351ffb66160b6458d6057fa6bc2a5f</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>af08f1f70ecd1cddcf7d274cbcad42f40</anchor>
      <arglist>(real_type r, real_type rinv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateAll</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>a1b404b15a77d0f3bd4e6ff6a527a518d</anchor>
      <arglist>(real_type r, real_type rinv)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>add1dd49e071f7241b0b532dcddb9cce1</anchor>
      <arglist>(real_type r, real_type rinv, real_type &amp;drnl, real_type &amp;d2rnl)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>aa138b0a83829ef7688561bfb044e8eee</anchor>
      <arglist>(real_type r, real_type rinv, real_type &amp;drnl, real_type &amp;d2rnl, real_type &amp;d3rnl)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ID</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>af180e926633cde08a05ccbc3af397ee4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>N</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>a7722c8ecbb62d99aee7ce68b1752f337</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Power</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>af86685d260bf1b9f92bec64bdac8df49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Z</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ae5e9e6fd12eb4c9d629bf9a9dc17ca76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Norm</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>a6ecc2456cf2d5b0324c025b26dcc187e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Y</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>a8b4dc77b2f75ec3e80eb8987f98db7af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>dY</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>a6a8818d83e16d75f6e13cc9df1e809ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>d2Y</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ab2751661aab00028080a57c4747bd245</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>d3Y</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ab1d41da3b5323d7b5813290c2f465e3a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>GofRObserver</name>
    <filename>a00241.html</filename>
    <member kind="function">
      <type></type>
      <name>GofRObserver</name>
      <anchorfile>a00241.html</anchorfile>
      <anchor>a8bd779ec09a5c94ccb717a9e2788ce96</anchor>
      <arglist>(const string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>a00241.html</anchorfile>
      <anchor>a49a8992466e58a9e12965d1850684a64</anchor>
      <arglist>(int count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00241.html</anchorfile>
      <anchor>a36ff55521611228a1256100ea1ed386b</anchor>
      <arglist>(int ns, int nbin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getData</name>
      <anchorfile>a00241.html</anchorfile>
      <anchor>a6abc577176df61750b68aa6f69436590</anchor>
      <arglist>(const char *fname, int nproc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00241.html</anchorfile>
      <anchor>a1b73d1723583526f3f2988057bfecc0b</anchor>
      <arglist>(const char *fname)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumSamples</name>
      <anchorfile>a00241.html</anchorfile>
      <anchor>a709013662102f5580b414769882fe36d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumNodes</name>
      <anchorfile>a00241.html</anchorfile>
      <anchor>a94f403de13048a589418ba65f52f3f17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>DataSetName</name>
      <anchorfile>a00241.html</anchorfile>
      <anchor>acc651529ff4aa6e3ca3d622c34097d6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; double &gt;</type>
      <name>gofr</name>
      <anchorfile>a00241.html</anchorfile>
      <anchor>adc189873b6129cf95dc3704c0d191a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; double &gt;</type>
      <name>gofr2</name>
      <anchorfile>a00241.html</anchorfile>
      <anchor>a0899b979b76afd702aa4139017a1ed47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; double &gt;</type>
      <name>gofr_dat</name>
      <anchorfile>a00241.html</anchorfile>
      <anchor>a96e4aec73c31cb8ac6536663936b0454</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>GridTraits&lt; double &gt;</name>
    <filename>a00246.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>point_type</name>
      <anchorfile>a00246.html</anchorfile>
      <anchor>a2c9032d5bc5e60a0b6548a65c88e9124</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>value_type</name>
      <anchorfile>a00246.html</anchorfile>
      <anchor>aba0996e183cdbebc61c5cbdcccf9da15</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>GridTraits&lt; std::complex&lt; double &gt; &gt;</name>
    <filename>a00247.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>point_type</name>
      <anchorfile>a00247.html</anchorfile>
      <anchor>a2c9032d5bc5e60a0b6548a65c88e9124</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::complex&lt; double &gt;</type>
      <name>value_type</name>
      <anchorfile>a00247.html</anchorfile>
      <anchor>a0fdf03d9426a155431b67c7bef1966c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>GTO2Slater</name>
    <filename>a00250.html</filename>
    <member kind="typedef">
      <type>GaussianCombo&lt; double &gt;</type>
      <name>GTOType</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>a765d64590600d79658f5e48af49d78f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LogGrid&lt; double &gt;</type>
      <name>GridType</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>a2de75db7e7c73cc89cc6cf4e854fd49f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GTO2Slater</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>a3bedac014a82d91010a51d753b81636f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>parse</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>aacb54720c02ba31fc4c5a458092253d4</anchor>
      <arglist>(const char *fname)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>ae6546e37901ba4bbe82343f0bb0aaa53</anchor>
      <arglist>(xmlNodePtr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>optimize</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>aa5f96dceae0a01376ab1001f038abf9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Normalized</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>aacbcd3c308ce1771fb38f921fb87a5d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GridType</type>
      <name>myGrid</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>a44e9d1d96039079fd97a37dd7dee0723</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>xmlNodePtr</type>
      <name>gridPtr</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>a7db2a9db97e53a650a916bd1de700e5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>map&lt; string, xmlNodePtr &gt;</type>
      <name>sPtr</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>add8b9b259dca843385d093db3c00ee95</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>HDFAttribIO&lt; TriCubicSplineT&lt; double &gt; &gt;</name>
    <filename>a00282.html</filename>
    <member kind="typedef">
      <type>TriCubicSplineT&lt; double &gt;</type>
      <name>Data_t</name>
      <anchorfile>a00282.html</anchorfile>
      <anchor>aff9409a9ee3f7aa3c36e23139cdcc525</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>a00282.html</anchorfile>
      <anchor>ad20474398780c76910a45ca6f58f0e9d</anchor>
      <arglist>(Data_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a00282.html</anchorfile>
      <anchor>a9cb9a11595717b99c90268f87ffb530b</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a00282.html</anchorfile>
      <anchor>a2378d66f31e2d3c28eed6a1863e5c5dc</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>Data_t &amp;</type>
      <name>ref</name>
      <anchorfile>a00282.html</anchorfile>
      <anchor>af466cf3a9648e1cb8faa13cc9b45dcc9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Libxml2Document</name>
    <filename>a00341.html</filename>
    <member kind="function">
      <type></type>
      <name>Libxml2Document</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>a2bcc9208f10a18aeaadbe8bcddd2d6a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Libxml2Document</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>a12df0b94b9aeabcefe61ecd494a9d45d</anchor>
      <arglist>(const std::string &amp;fname)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Libxml2Document</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>ab36b09fe10483b2f8a19e4c4db389560</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parse</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>a9fe5ba88426c9aad293de384eb9022f9</anchor>
      <arglist>(const std::string &amp;fname)</arglist>
    </member>
    <member kind="function">
      <type>xmlDocPtr</type>
      <name>getDocument</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>a2110dc70ff46c4f275d25a85e220e65d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>xmlNodePtr</type>
      <name>getRoot</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>ad24e2d983547e2b77c48eb8d4d8dab75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>xmlXPathContextPtr</type>
      <name>getXPathContext</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>a95b4667b9bd54e423f63f13013dd5539</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>afae3355683f725a1af48a3663912f86c</anchor>
      <arglist>(const std::string &amp;newxml)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addChild</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>a2edc4d9651d97185ef6d1ec1e4112654</anchor>
      <arglist>(xmlNodePtr newnode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addChild</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>a613f29495a0df216c7be9ca420ee62ec</anchor>
      <arglist>(const std::string &amp;expression, xmlNodePtr newnode)</arglist>
    </member>
    <member kind="variable">
      <type>xmlDocPtr</type>
      <name>m_doc</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>a3a86b56cb5d8bf74bf9819106f6b75b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>xmlNodePtr</type>
      <name>m_root</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>a838e3c3e2bde6bf8f5abf63e6bb9a05b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>xmlXPathContextPtr</type>
      <name>m_context</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>a0a0e8c94523580eeef057135abbfd436</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>InFileRoot</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>aa6d43447d71e9a05de6bf2a25489e48a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LinearCombinationFunctor</name>
    <filename>a00342.html</filename>
    <templarg>T</templarg>
    <base>OptimizableFunctorBase</base>
    <member kind="typedef">
      <type>OptimizableFunctorBase</type>
      <name>ComponentType</name>
      <anchorfile>a00342.html</anchorfile>
      <anchor>a595003e547cab423b78c2e2924c5463f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearCombinationFunctor</name>
      <anchorfile>a00342.html</anchorfile>
      <anchor>acca99e8aca66d23552f8742b69a4ab64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OptimizableFunctorBase *</type>
      <name>makeClone</name>
      <anchorfile>a00342.html</anchorfile>
      <anchor>a4747acd34f8d2daa0656125f1290e4d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a00342.html</anchorfile>
      <anchor>ab8e4e3e2a7bf18888b71bdf9dda0770b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addComponent</name>
      <anchorfile>a00342.html</anchorfile>
      <anchor>ae18e74d7e721182d7977f3f5dee6b5d1</anchor>
      <arglist>(ComponentType *func, real_type c, std::string &amp;id, bool fixit=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00342.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>a00342.html</anchorfile>
      <anchor>a6a91c8094ddd49aa8a2da9df6b439164</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>a00342.html</anchorfile>
      <anchor>aff351ffb66160b6458d6057fa6bc2a5f</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00342.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00342.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00342.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00342.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumComponents</name>
      <anchorfile>a00342.html</anchorfile>
      <anchor>a0231635f1611ef9001bf553cac03d8eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; bool &gt;</type>
      <name>CanNotChange</name>
      <anchorfile>a00342.html</anchorfile>
      <anchor>aad72f9eb41be93c657b45496573a75a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; real_type &gt;</type>
      <name>C</name>
      <anchorfile>a00342.html</anchorfile>
      <anchor>ac71c81f2764ddf801a64ae2d7fae8752</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; ComponentType * &gt;</type>
      <name>Phi</name>
      <anchorfile>a00342.html</anchorfile>
      <anchor>af493090a8344d407460faa054e46495a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LinearSpline</name>
    <filename>a00344.html</filename>
    <templarg></templarg>
    <templarg>GRIDTYPE</templarg>
    <templarg>BC</templarg>
    <base>LinearSplineGrid</base>
    <member kind="typedef">
      <type>LinearSplineGrid&lt; T, GRIDTYPE, BC &gt;::point_type</type>
      <name>point_type</name>
      <anchorfile>a00344.html</anchorfile>
      <anchor>a5884dc15e6d38f45f44dd34c43da357c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinearSplineGrid&lt; T, GRIDTYPE, BC &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>a00344.html</anchorfile>
      <anchor>ac8419a6c28da491a1e930b8d0f74caf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinearSplineGrid&lt; T, GRIDTYPE, BC &gt;::container_type</type>
      <name>container_type</name>
      <anchorfile>a00344.html</anchorfile>
      <anchor>ae4c1e42052f8b219b963ee6619874027</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearSpline</name>
      <anchorfile>a00344.html</anchorfile>
      <anchor>a6f5cd0ec2d07ec990ac39dc19f431da0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>a00344.html</anchorfile>
      <anchor>a9481b5d7644bb5c4b4630e615896eeeb</anchor>
      <arglist>(T start, T end, const container_type &amp;datain, bool closed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>a00344.html</anchorfile>
      <anchor>ab51e59137659b961162385fa7d604397</anchor>
      <arglist>(const container_type &amp;ng, const container_type &amp;datain, bool closed)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>splint</name>
      <anchorfile>a00344.html</anchorfile>
      <anchor>a7fc4ad4e14d9b20ba5321514e810fb57</anchor>
      <arglist>(point_type x)</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>ConstValue</name>
      <anchorfile>a00344.html</anchorfile>
      <anchor>a87da8ee147603f7932bfa6213935726d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>container_type</type>
      <name>P</name>
      <anchorfile>a00344.html</anchorfile>
      <anchor>a5de379e54a838b417cab1fbeeb3ea9cb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LinearSplineGrid</name>
    <filename>a00345.html</filename>
    <templarg></templarg>
    <templarg>GRIDTYPE</templarg>
    <templarg>BC</templarg>
  </compound>
  <compound kind="struct">
    <name>LinearSplineGrid&lt; T, CUSTOM_1DGRID, FIRSTDERIV_CONSTRAINTS &gt;</name>
    <filename>a00346.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>GridTraits&lt; T &gt;::point_type</type>
      <name>point_type</name>
      <anchorfile>a00346.html</anchorfile>
      <anchor>a8c04563b7c6ca6976f97b2d7d73ba50e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridTraits&lt; T &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>a00346.html</anchorfile>
      <anchor>aeaf18ead8b90b5e9655637ea8f35ea9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; T &gt;</type>
      <name>container_type</name>
      <anchorfile>a00346.html</anchorfile>
      <anchor>aff6ca3e749b37c361c5bc0d4f1ec5b5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGridPoint</name>
      <anchorfile>a00346.html</anchorfile>
      <anchor>a334d90508bf34b86ae3f8f3e43b0a46d</anchor>
      <arglist>(point_type xIn, point_type &amp;dh)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>a00346.html</anchorfile>
      <anchor>a7f1c3afce95e027b8788a6b885a32c4f</anchor>
      <arglist>(point_type start, point_type end, const container_type &amp;data, container_type &amp;p, bool closed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>a00346.html</anchorfile>
      <anchor>a2637b0a85120d204737d0251b889f78a</anchor>
      <arglist>(const container_type &amp;ng, const container_type &amp;data, container_type &amp;p, bool closed)</arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridStart</name>
      <anchorfile>a00346.html</anchorfile>
      <anchor>a9521f94d007687440e2b215478cbe978</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridEnd</name>
      <anchorfile>a00346.html</anchorfile>
      <anchor>a9b3d62aeac0e2713464a63a7d9383ee7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridDelta</name>
      <anchorfile>a00346.html</anchorfile>
      <anchor>ac62735ae55fc1ac7fdce97bd0c5d0e5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridDeltaInv</name>
      <anchorfile>a00346.html</anchorfile>
      <anchor>a1ee1444fed63e9266be25c9ec992e4a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>container_type</type>
      <name>X</name>
      <anchorfile>a00346.html</anchorfile>
      <anchor>acd28f4536810567bfcbef069452eeeb1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LinearSplineGrid&lt; T, LINEAR_1DGRID, FIRSTDERIV_CONSTRAINTS &gt;</name>
    <filename>a00347.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>GridTraits&lt; T &gt;::point_type</type>
      <name>point_type</name>
      <anchorfile>a00347.html</anchorfile>
      <anchor>a8c04563b7c6ca6976f97b2d7d73ba50e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridTraits&lt; T &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>a00347.html</anchorfile>
      <anchor>aeaf18ead8b90b5e9655637ea8f35ea9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; T &gt;</type>
      <name>container_type</name>
      <anchorfile>a00347.html</anchorfile>
      <anchor>aff6ca3e749b37c361c5bc0d4f1ec5b5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGridPoint</name>
      <anchorfile>a00347.html</anchorfile>
      <anchor>a6966c07305c8b86b1c3b4c317784fb36</anchor>
      <arglist>(point_type x, point_type &amp;dh)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>a00347.html</anchorfile>
      <anchor>a7f1c3afce95e027b8788a6b885a32c4f</anchor>
      <arglist>(point_type start, point_type end, const container_type &amp;data, container_type &amp;p, bool closed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>a00347.html</anchorfile>
      <anchor>a1d57e18d7a10c4f1f22be182db991d3d</anchor>
      <arglist>(point_type start, point_type end, const container_type &amp;data, container_type &amp;p, container_type &amp;dp, bool closed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>a00347.html</anchorfile>
      <anchor>a2637b0a85120d204737d0251b889f78a</anchor>
      <arglist>(const container_type &amp;ng, const container_type &amp;data, container_type &amp;p, bool closed)</arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridStart</name>
      <anchorfile>a00347.html</anchorfile>
      <anchor>a9521f94d007687440e2b215478cbe978</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridEnd</name>
      <anchorfile>a00347.html</anchorfile>
      <anchor>a9b3d62aeac0e2713464a63a7d9383ee7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridDelta</name>
      <anchorfile>a00347.html</anchorfile>
      <anchor>ac62735ae55fc1ac7fdce97bd0c5d0e5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridDeltaInv</name>
      <anchorfile>a00347.html</anchorfile>
      <anchor>a1ee1444fed63e9266be25c9ec992e4a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>L</name>
      <anchorfile>a00347.html</anchorfile>
      <anchor>a54d90fed7893792fab50f8662ed9c0fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>Linv</name>
      <anchorfile>a00347.html</anchorfile>
      <anchor>af1c4132c409a3fe79603a402d9b9679c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LinearSplineGrid&lt; T, LINEAR_1DGRID, PBC_CONSTRAINTS &gt;</name>
    <filename>a00348.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>GridTraits&lt; T &gt;::point_type</type>
      <name>point_type</name>
      <anchorfile>a00348.html</anchorfile>
      <anchor>a8c04563b7c6ca6976f97b2d7d73ba50e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridTraits&lt; T &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>a00348.html</anchorfile>
      <anchor>aeaf18ead8b90b5e9655637ea8f35ea9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; T &gt;</type>
      <name>container_type</name>
      <anchorfile>a00348.html</anchorfile>
      <anchor>aff6ca3e749b37c361c5bc0d4f1ec5b5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGridPoint</name>
      <anchorfile>a00348.html</anchorfile>
      <anchor>a6966c07305c8b86b1c3b4c317784fb36</anchor>
      <arglist>(point_type x, point_type &amp;dh)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>a00348.html</anchorfile>
      <anchor>a7f1c3afce95e027b8788a6b885a32c4f</anchor>
      <arglist>(point_type start, point_type end, const container_type &amp;data, container_type &amp;p, bool closed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>a00348.html</anchorfile>
      <anchor>a2637b0a85120d204737d0251b889f78a</anchor>
      <arglist>(const container_type &amp;ng, const container_type &amp;data, container_type &amp;p, bool closed)</arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridStart</name>
      <anchorfile>a00348.html</anchorfile>
      <anchor>a9521f94d007687440e2b215478cbe978</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridEnd</name>
      <anchorfile>a00348.html</anchorfile>
      <anchor>a9b3d62aeac0e2713464a63a7d9383ee7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridDelta</name>
      <anchorfile>a00348.html</anchorfile>
      <anchor>ac62735ae55fc1ac7fdce97bd0c5d0e5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridDeltaInv</name>
      <anchorfile>a00348.html</anchorfile>
      <anchor>a1ee1444fed63e9266be25c9ec992e4a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>L</name>
      <anchorfile>a00348.html</anchorfile>
      <anchor>a54d90fed7893792fab50f8662ed9c0fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>Linv</name>
      <anchorfile>a00348.html</anchorfile>
      <anchor>af1c4132c409a3fe79603a402d9b9679c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>MakeMultiGrid&lt; T, 3 &gt;</name>
    <filename>a00368.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>UniformCartesianGrid&lt; T, 3 &gt;</type>
      <name>ThisGrid_t</name>
      <anchorfile>a00368.html</anchorfile>
      <anchor>a0d2932201c972ade5bd817202b49aa11</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>makeGrid</name>
      <anchorfile>a00368.html</anchorfile>
      <anchor>a8fa737332820228196052e902fef2d8b</anchor>
      <arglist>(ThisGrid_t &amp;grid, int *ng)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>refineGrid</name>
      <anchorfile>a00368.html</anchorfile>
      <anchor>a92e424ab56e84146c7cfbfdde8444b47</anchor>
      <arglist>(ThisGrid_t &amp;subgrid, const ThisGrid_t &amp;biggrid, int *ng)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MatGrid1D</name>
    <filename>a00369.html</filename>
    <member kind="function">
      <type></type>
      <name>MatGrid1D</name>
      <anchorfile>a00369.html</anchorfile>
      <anchor>a9b741f5aee74613b3bfeb17f2a6b2b5d</anchor>
      <arglist>(int nsections)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00369.html</anchorfile>
      <anchor>a8cf1d3147c82d2e2f78402c4b2de934f</anchor>
      <arglist>(const Grid1D &amp;aGrid1D, const std::vector&lt; int &gt; &amp;ix, const std::vector&lt; int &gt; &amp;prior, const std::vector&lt; double &gt; &amp;props)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>prop</name>
      <anchorfile>a00369.html</anchorfile>
      <anchor>ab070307cc7888c1ad42a684c4f325824</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nsecs_m</name>
      <anchorfile>a00369.html</anchorfile>
      <anchor>ab6b458f33ed1515fba20efafac556a85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ix0_m</name>
      <anchorfile>a00369.html</anchorfile>
      <anchor>a689867ae4c89f1010db9b2812e77c0ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>iaxis</name>
      <anchorfile>a00369.html</anchorfile>
      <anchor>aa02fdb6a27f12b0d4416179f591b5207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>d_ivals</name>
      <anchorfile>a00369.html</anchorfile>
      <anchor>a3379d6884f201e4b03c5ee7a33c54f4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>prior_m</name>
      <anchorfile>a00369.html</anchorfile>
      <anchor>a4cd9299bb9c55deac6a7171ea8325003</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>prop_m</name>
      <anchorfile>a00369.html</anchorfile>
      <anchor>a5786cdd3d490ceacfaa1e9cce2b64429</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>dx_ivals</name>
      <anchorfile>a00369.html</anchorfile>
      <anchor>aab7930b208254f2d43a99f30e4bebe66</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MTRand</name>
    <filename>a00390.html</filename>
    <member kind="enumvalue">
      <type>@</type>
      <name>N</name>
      <anchorfile>a00390.html</anchorfile>
      <anchor>a99fb83031ce9923c84392b4e92f956b5a2c63acbe79d9f41ba6bb7766e9c37702</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SAVE</name>
      <anchorfile>a00390.html</anchorfile>
      <anchor>abc6126af1d45847bc59afa0aa3216b04a793562cbf5bffacba71303cee907ef7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint32_t</type>
      <name>uint_type</name>
      <anchorfile>a00390.html</anchorfile>
      <anchor>a033d842f4e01994b8b31b97be56f3b9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MTRand</name>
      <anchorfile>a00390.html</anchorfile>
      <anchor>a264cccad8c3a81df775f14efd86b64e9</anchor>
      <arglist>(const uint_type &amp;oneSeed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MTRand</name>
      <anchorfile>a00390.html</anchorfile>
      <anchor>a7341858b9fd6a9160db1cc51ecfd720d</anchor>
      <arglist>(uint_type *const bigSeed, uint_type const seedLength=N)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MTRand</name>
      <anchorfile>a00390.html</anchorfile>
      <anchor>a86629bf240255e1a4c95fa8994bccb14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rand</name>
      <anchorfile>a00390.html</anchorfile>
      <anchor>a78309d923f245b6acf167260194ba6e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rand</name>
      <anchorfile>a00390.html</anchorfile>
      <anchor>a6b54c1bfd54a46e292478870554eb4d0</anchor>
      <arglist>(const double &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>randExc</name>
      <anchorfile>a00390.html</anchorfile>
      <anchor>adfd027765dc6de35f4305204edf51622</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>randExc</name>
      <anchorfile>a00390.html</anchorfile>
      <anchor>ad9888d54bf71c0c6bb5941394a0e5651</anchor>
      <arglist>(const double &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>randDblExc</name>
      <anchorfile>a00390.html</anchorfile>
      <anchor>a540919a8c8868928fffce58c66d1b91e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>randDblExc</name>
      <anchorfile>a00390.html</anchorfile>
      <anchor>a680cbcf457bdc668d1a4d9a1c8bb882b</anchor>
      <arglist>(const double &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>uint_type</type>
      <name>randInt</name>
      <anchorfile>a00390.html</anchorfile>
      <anchor>a60d35f12a73c210ee9073fd7f983c6fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint_type</type>
      <name>randInt</name>
      <anchorfile>a00390.html</anchorfile>
      <anchor>ad1668177fc248cbe631a0ef137062418</anchor>
      <arglist>(const uint_type &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>a00390.html</anchorfile>
      <anchor>a8ba58318b0e39bc2e453dd4dcac1f00f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rand53</name>
      <anchorfile>a00390.html</anchorfile>
      <anchor>ae021627627a0dbdbd19b503a3955dcc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>randNorm</name>
      <anchorfile>a00390.html</anchorfile>
      <anchor>ae996dcfe8bda4dd8036d441fc20dce30</anchor>
      <arglist>(const double &amp;mean=0.0, const double &amp;variance=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seed</name>
      <anchorfile>a00390.html</anchorfile>
      <anchor>aff125ca3c0ff3df8a8ec467f5a97dea2</anchor>
      <arglist>(const uint_type oneSeed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seed</name>
      <anchorfile>a00390.html</anchorfile>
      <anchor>afd45050873cc33739c7e2ff0cada73c4</anchor>
      <arglist>(uint_type *const bigSeed, const uint_type seedLength=N)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seed</name>
      <anchorfile>a00390.html</anchorfile>
      <anchor>a78c8e327d0192e2a6c1df70828a86ec6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>a00390.html</anchorfile>
      <anchor>aae2992d3eefd595227ac31440035ab45</anchor>
      <arglist>(uint_type *saveArray) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>a00390.html</anchorfile>
      <anchor>a3f03e3b194ea30cda54c1d7fa0287835</anchor>
      <arglist>(uint_type *const loadArray)</arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <type>@</type>
      <name>M</name>
      <anchorfile>a00390.html</anchorfile>
      <anchor>adc29c2ff13d900c2f185ee95427fb06ca51ca6c63d97347ee58cc7da59ab6994b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a00390.html</anchorfile>
      <anchor>aed5d3858782f040a7aab216fc49db8ff</anchor>
      <arglist>(const uint_type oneSeed)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reload</name>
      <anchorfile>a00390.html</anchorfile>
      <anchor>af0de4b4127be745f3a835f316c6d2d03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint_type</type>
      <name>hiBit</name>
      <anchorfile>a00390.html</anchorfile>
      <anchor>abe8d06162405970999f010626eab54b9</anchor>
      <arglist>(const uint_type &amp;u) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint_type</type>
      <name>loBit</name>
      <anchorfile>a00390.html</anchorfile>
      <anchor>a74d8873017743909debd57c9b8d6828a</anchor>
      <arglist>(const uint_type &amp;u) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint_type</type>
      <name>loBits</name>
      <anchorfile>a00390.html</anchorfile>
      <anchor>ae4604b044ca81ba5d2a25f69dc18e22e</anchor>
      <arglist>(const uint_type &amp;u) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint_type</type>
      <name>mixBits</name>
      <anchorfile>a00390.html</anchorfile>
      <anchor>ae415c9eed2f1fc07ecc174239fdb7e59</anchor>
      <arglist>(const uint_type &amp;u, const uint_type &amp;v) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint_type</type>
      <name>twist</name>
      <anchorfile>a00390.html</anchorfile>
      <anchor>a9008ff6db0e6d990d1649389dba552e5</anchor>
      <arglist>(const uint_type &amp;m, const uint_type &amp;s0, const uint_type &amp;s1) const </arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static uint_type</type>
      <name>hash</name>
      <anchorfile>a00390.html</anchorfile>
      <anchor>a62f37e4d76da30ce3ec4351e38bd8919</anchor>
      <arglist>(time_t t, clock_t c)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint_type</type>
      <name>state</name>
      <anchorfile>a00390.html</anchorfile>
      <anchor>a97a8e20578dcc8a626ea7bbaa9712a62</anchor>
      <arglist>[N]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint_type *</type>
      <name>pNext</name>
      <anchorfile>a00390.html</anchorfile>
      <anchor>ac4fd8f95a1f4817d49677c1e8e2f5ac0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>left</name>
      <anchorfile>a00390.html</anchorfile>
      <anchor>ad8f5e19e19f12974c9713e920ec54331</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00390.html</anchorfile>
      <anchor>a059061d50a1e54ee3067d4e1dbdd7c64</anchor>
      <arglist>(std::ostream &amp;os, const MTRand &amp;mtrand)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00390.html</anchorfile>
      <anchor>a45b02a702835a3be42171c5c2dc79b2d</anchor>
      <arglist>(std::istream &amp;is, MTRand &amp;mtrand)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultiGridParticleLayout</name>
    <filename>a00393.html</filename>
    <templarg></templarg>
    <templarg>D</templarg>
    <member kind="typedef">
      <type>UniformCartesianGrid&lt; T, D &gt;</type>
      <name>PtclGrid_t</name>
      <anchorfile>a00393.html</anchorfile>
      <anchor>ab12feb659c4287e7095c622e10eb9b4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiGridParticleLayout</name>
      <anchorfile>a00393.html</anchorfile>
      <anchor>a0cb82973956e70b4d0b0bcbe7f43e3b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MultiGridParticleLayout</name>
      <anchorfile>a00393.html</anchorfile>
      <anchor>ab6f72eff060b5e67b35227a6d637e121</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PtclGrid_t *</type>
      <name>getGrid</name>
      <anchorfile>a00393.html</anchorfile>
      <anchor>a494e9728787f30095934e4e118afb84d</anchor>
      <arglist>(int level) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>makeGrid</name>
      <anchorfile>a00393.html</anchorfile>
      <anchor>a3fcd527ec9cb53fc0e938c4fbf192874</anchor>
      <arglist>(int *grid, int igrid=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetGrid</name>
      <anchorfile>a00393.html</anchorfile>
      <anchor>a1d834a807d7495329febf4be2414248f</anchor>
      <arglist>(int igrid, int *grid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printGrid</name>
      <anchorfile>a00393.html</anchorfile>
      <anchor>ad79f281393a7c76ea49f82440f214e38</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00393.html</anchorfile>
      <anchor>a8af2b4667a7a29928f73f8a668a106a2</anchor>
      <arglist>(P *, int)</arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; PtclGrid_t * &gt;</type>
      <name>dGrid</name>
      <anchorfile>a00393.html</anchorfile>
      <anchor>ad6885205376ff0667703fef54a18b887</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>NormRandomSeq&lt; TinyVector&lt; double, 3 &gt;, RNG &gt;</name>
    <filename>a00414.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>TinyVector&lt; double, 3 &gt;</type>
      <name>Return_t</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>a7ab7530ccc6ddb2bb13a7cece1c5691c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Return_t</type>
      <name>get</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>abb3c9988cde8e70f1f7f146422dc35ca</anchor>
      <arglist>(RNG &amp;rng)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>NormRandomSeq&lt; TinyVector&lt; T, D &gt;, RNG &gt;</name>
    <filename>a00415.html</filename>
    <templarg></templarg>
    <templarg>D</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>TinyVector&lt; double, D &gt;</type>
      <name>Return_t</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>a2bcfd930ac5ff8223fb9106d875ba0a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Return_t</type>
      <name>get</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>abb3c9988cde8e70f1f7f146422dc35ca</anchor>
      <arglist>(RNG &amp;rng)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ObservableFile</name>
    <filename>a00421.html</filename>
    <member kind="function">
      <type></type>
      <name>ObservableFile</name>
      <anchorfile>a00421.html</anchorfile>
      <anchor>a624dbdc743e419b13990a147a5baa199</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dump_averages</name>
      <anchorfile>a00421.html</anchorfile>
      <anchor>a8d135c47021f241e3a38b78540540aea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate_n</name>
      <anchorfile>a00421.html</anchorfile>
      <anchor>a69bdfb78973989dd87f9b75ac45b6098</anchor>
      <arglist>(IT first, IT last, IT result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale_n</name>
      <anchorfile>a00421.html</anchorfile>
      <anchor>a4620608815cb53aa4506e107df1cb76b</anchor>
      <arglist>(IT first, IT last, T fac)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>first_block</name>
      <anchorfile>a00421.html</anchorfile>
      <anchor>a205b534aee4fd8cc65b043701ae46a05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>h5name</name>
      <anchorfile>a00421.html</anchorfile>
      <anchor>a6cc6761df7d96f109d0bd778374d90c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; string &gt;</type>
      <name>olist</name>
      <anchorfile>a00421.html</anchorfile>
      <anchor>aa91adfa066277c6c67cd768bd98c483a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OhmmsAsciiParser</name>
    <filename>a00422.html</filename>
  </compound>
  <compound kind="struct">
    <name>OhmmsAttributeSet</name>
    <filename>a00423.html</filename>
    <member kind="typedef">
      <type>std::map&lt; std::string, OhmmsElementBase * &gt;</type>
      <name>Container_t</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ae412ec61e063aef8399c293a94db0ae5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container_t::iterator</type>
      <name>iterator</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>a7d1bb323b6d972f619c609d698e938b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container_t::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>a7d7695e77d1310d350346758afb3481e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OhmmsAttributeSet</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ac35a223361936570da1e64cd92aa1be6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OhmmsAttributeSet</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>a4457eebcf9c4c3e113d85935295e9e7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ae0cadb78b5c0e2b40f147eeed585e748</anchor>
      <arglist>(PDT &amp;aparam, const std::string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>xmlNodePtr</type>
      <name>myNode</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ade03b7f5a1fd4d07359c6e19af6db843</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Container_t</type>
      <name>m_param</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>a8301aebf804a2e7257b7189b05cddd66</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OhmmsElementBase</name>
    <filename>a00424.html</filename>
    <member kind="enumvalue">
      <type>@</type>
      <name>useLIBXML</name>
      <anchorfile>a00424.html</anchorfile>
      <anchor>a94798fdadfbf49a7c658ace669a1d310a0c1369bf58afba29a19b930f3c66e9f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>useLIBXMLPP</name>
      <anchorfile>a00424.html</anchorfile>
      <anchor>a94798fdadfbf49a7c658ace669a1d310adb23ee09399e15b99a996f58563b4153</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>usePLAIN</name>
      <anchorfile>a00424.html</anchorfile>
      <anchor>a94798fdadfbf49a7c658ace669a1d310a5a2b172e10d3455a7adb2416e5eb42c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OhmmsElementBase</name>
      <anchorfile>a00424.html</anchorfile>
      <anchor>a428fa18a9359c4377442c998706128ad</anchor>
      <arglist>(const char *aname=&quot;none&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OhmmsElementBase</name>
      <anchorfile>a00424.html</anchorfile>
      <anchor>ae163c8f56f2a3e6814abea393f07375f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>a00424.html</anchorfile>
      <anchor>a8382bbe4394bd74b30c600308a2194cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>a00424.html</anchorfile>
      <anchor>a82bfc253de38cf96831473fb10689d2e</anchor>
      <arglist>(const std::string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIOMode</name>
      <anchorfile>a00424.html</anchorfile>
      <anchor>accd8ed8495ed4665c57033924f11ad83</anchor>
      <arglist>(int imode)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>get</name>
      <anchorfile>a00424.html</anchorfile>
      <anchor>a4dcd3f8f649e384b7664b18e69af4cc3</anchor>
      <arglist>(std::ostream &amp;) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>put</name>
      <anchorfile>a00424.html</anchorfile>
      <anchor>aaaedf20d7a19c3c7a617b5c2560aa1c2</anchor>
      <arglist>(std::istream &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>put</name>
      <anchorfile>a00424.html</anchorfile>
      <anchor>ad5f66fd1dbe5e3c62ee5f7f326446dee</anchor>
      <arglist>(xmlNodePtr cur)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>a00424.html</anchorfile>
      <anchor>a20dcbdfbd0ec77afc802522bb7e379c1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>add</name>
      <anchorfile>a00424.html</anchorfile>
      <anchor>ac609c4c0691ed2c2943719823d6b11aa</anchor>
      <arglist>(xmlNodePtr parent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>a00424.html</anchorfile>
      <anchor>ab4bbba876660ee9060c6700b18f37de9</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>begin_node</name>
      <anchorfile>a00424.html</anchorfile>
      <anchor>abfa1c867f63f3f7164ffa8e288064f81</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>end_node</name>
      <anchorfile>a00424.html</anchorfile>
      <anchor>a2a7cb5abd0db7c5d2980b80588cd62ae</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myIOMode</name>
      <anchorfile>a00424.html</anchorfile>
      <anchor>a5df8eb3559c6fd8de15567111353e494</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myName</name>
      <anchorfile>a00424.html</anchorfile>
      <anchor>a2b080b4ea635d590ce7028ceda1342de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OhmmsInfo</name>
    <filename>a00425.html</filename>
    <member kind="function">
      <type></type>
      <name>OhmmsInfo</name>
      <anchorfile>a00425.html</anchorfile>
      <anchor>a3ee433385c9f7e5a7e0b9988146d27af</anchor>
      <arglist>(int argc, char **argv, int master=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OhmmsInfo</name>
      <anchorfile>a00425.html</anchorfile>
      <anchor>ab20e760b9b6423bb56b9ec8c1feb9ea5</anchor>
      <arglist>(const std::string &amp;fin_name, int rank=0, int gid=0, int num_groups=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OhmmsInfo</name>
      <anchorfile>a00425.html</anchorfile>
      <anchor>a93ee9df290b260bede76609d74510968</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initialize</name>
      <anchorfile>a00425.html</anchorfile>
      <anchor>a2aa8c8e203fe0bc25c31734a9d5d7bcd</anchor>
      <arglist>(const char *froot, int master)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>die</name>
      <anchorfile>a00425.html</anchorfile>
      <anchor>a363ae7b35a07daeca974c86d1c39b732</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>flush</name>
      <anchorfile>a00425.html</anchorfile>
      <anchor>adac116554b543b7c4228c018a85882f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static bool</type>
      <name>Writeable</name>
      <anchorfile>a00425.html</anchorfile>
      <anchor>a3bd8d7390ce52c910209c15629fa8c3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static OhmmsInform *</type>
      <name>Debug</name>
      <anchorfile>a00425.html</anchorfile>
      <anchor>acdf2c5a1d6a8286d9f9b6ed159da72be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static OhmmsInform *</type>
      <name>Warn</name>
      <anchorfile>a00425.html</anchorfile>
      <anchor>a71f19cd8c8c19eb70f9365d79e8111f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static OhmmsInform *</type>
      <name>Error</name>
      <anchorfile>a00425.html</anchorfile>
      <anchor>a0a6b671bae6ee5b3bdbf25eb73f95ba8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static OhmmsInform *</type>
      <name>Log</name>
      <anchorfile>a00425.html</anchorfile>
      <anchor>a05f3c41eabca5767136d1d70a319cc94</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>OhmmsInfo</name>
      <anchorfile>a00425.html</anchorfile>
      <anchor>a51200ce93ff5d67bee47aa6ce3a3ee00</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OhmmsInform</name>
    <filename>a00426.html</filename>
    <member kind="enumvalue">
      <type>@</type>
      <name>OVERWRITE</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>a61dadd085c1777f559549e05962b2c9ea5d8c28daa563cffcab51f34a0bec098d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>APPEND</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>a61dadd085c1777f559549e05962b2c9eaf38784ef4b08f294d4a78f62181729a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OhmmsInform</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>a6595de5b0f9d486d3aab45c37145b44d</anchor>
      <arglist>(bool allcanwrite=true, bool writenode=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OhmmsInform</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>ae0725d7ded1de67ea711687fce3801cd</anchor>
      <arglist>(const char *prompt, bool allcanwrite=true, bool writenode=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OhmmsInform</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>ae2547e67e1699e90b9a4250b719cd991</anchor>
      <arglist>(const char *prompt, const char *fname, int appmode=OVERWRITE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OhmmsInform</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>aab221b954169c347c5b37099f1a7e9c2</anchor>
      <arglist>(const char *prompt, std::ostream &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OhmmsInform</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>a04c94281a5c12d608d24be8679f4d962</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>a54d8d7e5a31b777adfa04e8dd6b00008</anchor>
      <arglist>(const char *fname, int appmode=OVERWRITE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>ad4684825030a1c30e022ae73330af0cb</anchor>
      <arglist>(OhmmsInform &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>acca53503073a4115bcb54d6fdbbd9d80</anchor>
      <arglist>(OhmmsInform &amp;, const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPrompt</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>a9ee2829380b05d17d1a42649f92499d0</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>adac116554b543b7c4228c018a85882f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>getStream</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>a5e90542955b14ae92788569c08625c50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStdError</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>a2f2d179a6e64dcc2187bf4553c51cb49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushd</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>ab4908130618a4e2d2682daf526c09e41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>popd</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>ac08a65e568c62665ef09651dedb7698a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>turnoff</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>a11585dc88b1366a0d406197f83857a54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>OwnStream</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>a67d67233a217a9edd42b69d915bf5259</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>Blanks</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>a28debd41fa44aebf8909f757ba7cea40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::ostream *</type>
      <name>myStream</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>ab3f7a50836bc3fe985ebee0a4907bb1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::ostream *</type>
      <name>bgStream</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>a7223dec2a007fe9310e97f3922064d15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>myPrompt</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>ae332bc40934d137ee444366519eca5e9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OhmmsIOBase</name>
    <filename>a00427.html</filename>
    <member kind="function">
      <type></type>
      <name>OhmmsIOBase</name>
      <anchorfile>a00427.html</anchorfile>
      <anchor>a1777f9de5964f8b0033e1f29bf5c7512</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>open</name>
      <anchorfile>a00427.html</anchorfile>
      <anchor>a649ea4c7120d428d8343b0336f1dbd7b</anchor>
      <arglist>(const char *, ios_base::openmode iomode)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>a00427.html</anchorfile>
      <anchor>af6ee7eacbde6b379b68d954e44f6e549</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>flush</name>
      <anchorfile>a00427.html</anchorfile>
      <anchor>a50ab71f4bc571f6e246b20db4b3dd131</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>a00427.html</anchorfile>
      <anchor>a2eeeaebe7e52f5d842385ce0b177150d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>write</name>
      <anchorfile>a00427.html</anchorfile>
      <anchor>aecdce4d8df5959f560998191a0988f51</anchor>
      <arglist>(int iter)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ios_base::openmode</type>
      <name>Mode</name>
      <anchorfile>a00427.html</anchorfile>
      <anchor>aa2dbcd50eb5a037f5f45c223b5c0a07e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>stride</name>
      <anchorfile>a00427.html</anchorfile>
      <anchor>a08f66a6870d87afcd5dc1b60d1019692</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>OhmmsIOBase</name>
      <anchorfile>a00427.html</anchorfile>
      <anchor>a5062b34ba5a9abf6ba5fb9d8d591d76b</anchor>
      <arglist>(OhmmsIOBase &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OhmmsObject</name>
    <filename>a00428.html</filename>
    <base>OhmmsElementBase</base>
    <member kind="function">
      <type></type>
      <name>OhmmsObject</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a9c2534c422663b22333b97b1763b43d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OhmmsObject</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a2843c3d6de1bfc715f41ab3e713e4538</anchor>
      <arglist>(const std::string &amp;tname, const std::string &amp;oname)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OhmmsObject</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a9f7b02dce59cf7e26de380fabea79a6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ae0c063cfb2479f614be43b9d2f92ba63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setID</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>aaba7e9756a1134bf88a746225e38ead8</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>elementByteSize</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a2d1c03435c432b1b27f796d16facac1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTypeName</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a7e1b86b47db16f022ad795ceb3ab5c11</anchor>
      <arglist>(const std::string &amp;tname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObjName</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>aa502c5c30a71263f546fd7ba8b8c7ed7</anchor>
      <arglist>(const std::string &amp;oname)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>typeName</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>af81f47476cbeb9f6439ad35c01d5b321</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>objName</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a24d3de56dfdf630a4d3fdfb9c6d4e4a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>TypeName</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>af954043fbb59d30dd27bd22b82955091</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ObjectID</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ad3dd56d4c1f959b17a4f73c23324d67c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ElementByteSize</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a4cc9321950cb20ef60af8cb836edb6be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static int</type>
      <name>ObjectCounter</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a50d86d060e65ca0c96064a4968f4a6b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OhmmsParameter</name>
    <filename>a00429.html</filename>
    <templarg>T</templarg>
    <base>OhmmsElementBase</base>
    <member kind="function">
      <type></type>
      <name>OhmmsParameter</name>
      <anchorfile>a00429.html</anchorfile>
      <anchor>a30a847842b83abc3e7a703bcec298cdd</anchor>
      <arglist>(T &amp;a, const char *aname, const char *uname=&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00429.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00429.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00429.html</anchorfile>
      <anchor>a344f0b89ae376f79ee25adb51168d1f0</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add</name>
      <anchorfile>a00429.html</anchorfile>
      <anchor>a97846b0aba946df05110ab0c3bc5cea3</anchor>
      <arglist>(xmlNodePtr parent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00429.html</anchorfile>
      <anchor>ae0439137e368d8e17437979fb8899ddc</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00429.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T &amp;</type>
      <name>ref_</name>
      <anchorfile>a00429.html</anchorfile>
      <anchor>aca9486967090e05a18a9932e13ad394a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>unit_</name>
      <anchorfile>a00429.html</anchorfile>
      <anchor>ac8a13816da7aeb34578ad0af3f910b14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>xmlNodePtr</type>
      <name>node_</name>
      <anchorfile>a00429.html</anchorfile>
      <anchor>a37136f671d3ef7dbdce9d2c91863542a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OhmmsParameter&lt; bool &gt;</name>
    <filename>a00430.html</filename>
    <base>OhmmsElementBase</base>
    <member kind="function">
      <type></type>
      <name>OhmmsParameter</name>
      <anchorfile>a00430.html</anchorfile>
      <anchor>a974f6923f1f620df83c694b2a1bd94e7</anchor>
      <arglist>(bool &amp;a, const char *aname, const char *uname=&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00430.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00430.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00430.html</anchorfile>
      <anchor>af4d972105930defc479b4f506262ab9e</anchor>
      <arglist>(bool x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00430.html</anchorfile>
      <anchor>a344f0b89ae376f79ee25adb51168d1f0</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add</name>
      <anchorfile>a00430.html</anchorfile>
      <anchor>a97846b0aba946df05110ab0c3bc5cea3</anchor>
      <arglist>(xmlNodePtr parent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00430.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool &amp;</type>
      <name>ref_</name>
      <anchorfile>a00430.html</anchorfile>
      <anchor>abf8a424fd6d71aebdca1826d7c1d6eb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>unit_</name>
      <anchorfile>a00430.html</anchorfile>
      <anchor>ac8a13816da7aeb34578ad0af3f910b14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>xmlNodePtr</type>
      <name>node_</name>
      <anchorfile>a00430.html</anchorfile>
      <anchor>a37136f671d3ef7dbdce9d2c91863542a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OhmmsXPathObject</name>
    <filename>a00431.html</filename>
    <member kind="function">
      <type></type>
      <name>OhmmsXPathObject</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>abcf985273f59542fff26fb9a919b165a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OhmmsXPathObject</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a26e3038fef1d908d3b5b431a33fa6705</anchor>
      <arglist>(const char *expression, xmlXPathContextPtr context)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OhmmsXPathObject</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>af66c6353aec8d0f71f4dc90c7d9f9954</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a95f1c6f0f7a5931d3fc76d175c434c73</anchor>
      <arglist>(const char *expression, xmlXPathContextPtr context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a3f37b042a1e7cd4bd38fc564de81f0da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>af4b57d21919c42d55af03391f91a1c08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>xmlNodePtr</type>
      <name>operator[]</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>aa66f5adc12665a5f79ec8c385c8d090d</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumObjects</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a0877d9d27d0d7e91db3216d3923c20a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>xmlXPathObjectPtr</type>
      <name>result</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a55bc039f5b1d991bcdce863baf8b17b0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OptimizableFunctorBase</name>
    <filename>a00446.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>checkInVariables</name>
      <anchorfile>a00446.html</anchorfile>
      <anchor>adc2681d8748c0b42a2ffa45d21c7b466</anchor>
      <arglist>(opt_variables_type &amp;active)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00446.html</anchorfile>
      <anchor>aa3438cc415984cdefb08b05f9ba36bc3</anchor>
      <arglist>(const opt_variables_type &amp;active)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resetParameters</name>
      <anchorfile>a00446.html</anchorfile>
      <anchor>a8c0c8f47cc4e0adc97b2a42f11223257</anchor>
      <arglist>(const opt_variables_type &amp;active)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual OptimizableFunctorBase *</type>
      <name>makeClone</name>
      <anchorfile>a00446.html</anchorfile>
      <anchor>a58c887cc013416decc7fd21746824f7b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>a00446.html</anchorfile>
      <anchor>a20dcbdfbd0ec77afc802522bb7e379c1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual real_type</type>
      <name>f</name>
      <anchorfile>a00446.html</anchorfile>
      <anchor>ade4146d8e219dcda8847df4ddd12b593</anchor>
      <arglist>(real_type r)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual real_type</type>
      <name>df</name>
      <anchorfile>a00446.html</anchorfile>
      <anchor>aca0e2e8287055530c4700fdd424792f0</anchor>
      <arglist>(real_type r)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>put</name>
      <anchorfile>a00446.html</anchorfile>
      <anchor>ad5f66fd1dbe5e3c62ee5f7f326446dee</anchor>
      <arglist>(xmlNodePtr cur)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ParameterSet</name>
    <filename>a00458.html</filename>
    <base>OhmmsElementBase</base>
    <member kind="typedef">
      <type>std::map&lt; std::string, OhmmsElementBase * &gt;</type>
      <name>Container_t</name>
      <anchorfile>a00458.html</anchorfile>
      <anchor>ae412ec61e063aef8399c293a94db0ae5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container_t::iterator</type>
      <name>iterator</name>
      <anchorfile>a00458.html</anchorfile>
      <anchor>a7d1bb323b6d972f619c609d698e938b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container_t::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00458.html</anchorfile>
      <anchor>a7d7695e77d1310d350346758afb3481e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParameterSet</name>
      <anchorfile>a00458.html</anchorfile>
      <anchor>ae8b49925c7bc56cdcb5de076bf9a12e6</anchor>
      <arglist>(const char *aname=&quot;parameter&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ParameterSet</name>
      <anchorfile>a00458.html</anchorfile>
      <anchor>a1a674ffeabc26c3f0c2cae1124374181</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00458.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00458.html</anchorfile>
      <anchor>a344f0b89ae376f79ee25adb51168d1f0</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00458.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00458.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00458.html</anchorfile>
      <anchor>ac4d92922c8002282b2476697330f053e</anchor>
      <arglist>(PDT &amp;aparam, const char *aname, const char *uname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00458.html</anchorfile>
      <anchor>a24a470bc97b1073b0cd26fcbaa10dc3a</anchor>
      <arglist>(const std::string &amp;aname, PDT aval)</arglist>
    </member>
    <member kind="variable">
      <type>Container_t</type>
      <name>m_param</name>
      <anchorfile>a00458.html</anchorfile>
      <anchor>a8301aebf804a2e7257b7189b05cddd66</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ParticleTags</name>
    <filename>a00464.html</filename>
    <member kind="enumvalue">
      <type>@</type>
      <name>PA_IndexType</name>
      <anchorfile>a00464.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7a73d1d4486be0d752fb39174fd2b05d9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PA_ScalarType</name>
      <anchorfile>a00464.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7ae2fe3bbf687498b8bd0453a271e6d9e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PA_StringType</name>
      <anchorfile>a00464.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7a4a7d699a9533a70fc10e519eaf7e4db2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PA_PositionType</name>
      <anchorfile>a00464.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7a98ef0b03338125e6c61a64aab08b7be7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PA_TensorType</name>
      <anchorfile>a00464.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7a445d65c702a8261bbce79137a19fc6d9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PointerPool</name>
    <filename>a00466.html</filename>
    <templarg>CONT</templarg>
    <member kind="typedef">
      <type>CONT</type>
      <name>buffer_type</name>
      <anchorfile>a00466.html</anchorfile>
      <anchor>a85ffeb5e13a972aa806f279114161a82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CONT::pointer</type>
      <name>pointer</name>
      <anchorfile>a00466.html</anchorfile>
      <anchor>a712a6bfed9d8ac988c868b37766480ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>getPointer</name>
      <anchorfile>a00466.html</anchorfile>
      <anchor>ac2170382e2d8b636398c44fc2dc612e7</anchor>
      <arglist>(int index, buffer_type &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocate</name>
      <anchorfile>a00466.html</anchorfile>
      <anchor>a194a946296c62b92b98f0c571e220a50</anchor>
      <arglist>(buffer_type &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>reserve</name>
      <anchorfile>a00466.html</anchorfile>
      <anchor>ae193d9ac67ab5bc0be78dfd497562fda</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00466.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getTotalSize</name>
      <anchorfile>a00466.html</anchorfile>
      <anchor>aa8a5d9a1f2d54089bd7fc38f0e95ede9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointerPool</name>
      <anchorfile>a00466.html</anchorfile>
      <anchor>aae2639b3fb979e4dc77935b86184f907</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>totalSize</name>
      <anchorfile>a00466.html</anchorfile>
      <anchor>aae4c52e1189ca9f1ca3e93f50c165bb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; size_t &gt;</type>
      <name>offsets</name>
      <anchorfile>a00466.html</anchorfile>
      <anchor>a7603a5b89bb2a1e956ccc53f1451b0cc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>PooledData</name>
    <filename>a00474.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>a00474.html</anchorfile>
      <anchor>a265a253612b46abed17c61b0a5e5ce30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; T &gt;::size_type</type>
      <name>size_type</name>
      <anchorfile>a00474.html</anchorfile>
      <anchor>aaa038aa21a8a97ba832ef22aab0d4fd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PooledData</name>
      <anchorfile>a00474.html</anchorfile>
      <anchor>ada49a65a4a249603c8f3dd4ad4288f94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PooledData</name>
      <anchorfile>a00474.html</anchorfile>
      <anchor>a6c821a8dd1ddb800283a73cb2d7dffbb</anchor>
      <arglist>(size_type n)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a00474.html</anchorfile>
      <anchor>a503ab01f6c0142145d3434f6924714e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>current</name>
      <anchorfile>a00474.html</anchorfile>
      <anchor>adf3ca987cdd0fa95361728f86733c8d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rewind</name>
      <anchorfile>a00474.html</anchorfile>
      <anchor>a9b61787aac58f5f2a6d1e741b0b9330a</anchor>
      <arglist>(size_type cur=0)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt;::iterator</type>
      <name>begin</name>
      <anchorfile>a00474.html</anchorfile>
      <anchor>ae49c361f230a136b5b1221631fc48727</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt;::iterator</type>
      <name>end</name>
      <anchorfile>a00474.html</anchorfile>
      <anchor>ad2020c437b7b1e81d6f191d31ae8a2e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00474.html</anchorfile>
      <anchor>a5cba26abeacf2a452167183da4d63522</anchor>
      <arglist>(T1 x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00474.html</anchorfile>
      <anchor>a280f2f21d67cb0811ccc97df80f1291e</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00474.html</anchorfile>
      <anchor>a6170b94bcd0ccc80f2edc9c5d4b50ed6</anchor>
      <arglist>(complex&lt; T &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00474.html</anchorfile>
      <anchor>ab8577da8248d1fe6daf5b1c5055956c7</anchor>
      <arglist>(_InputIterator first, _InputIterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00474.html</anchorfile>
      <anchor>a43d0552c5045f6def3de41597b1c8ee5</anchor>
      <arglist>(std::complex&lt; T &gt; *first, std::complex&lt; T &gt; *last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get</name>
      <anchorfile>a00474.html</anchorfile>
      <anchor>aaee0f07674b2c50acfbe158dec3a2446</anchor>
      <arglist>(T1 &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get</name>
      <anchorfile>a00474.html</anchorfile>
      <anchor>a3ae5425289aad3095ec14a0e866ea5d3</anchor>
      <arglist>(T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get</name>
      <anchorfile>a00474.html</anchorfile>
      <anchor>a3cea413a869a5aed85d8b416190f9aa2</anchor>
      <arglist>(std::complex&lt; T &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get</name>
      <anchorfile>a00474.html</anchorfile>
      <anchor>a48fa3b35980174a45244930e19ade28d</anchor>
      <arglist>(_OutputIterator first, _OutputIterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get</name>
      <anchorfile>a00474.html</anchorfile>
      <anchor>af8fedd2b984b2512926b4258a54a392b</anchor>
      <arglist>(std::complex&lt; T &gt; *first, std::complex&lt; T &gt; *last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>a00474.html</anchorfile>
      <anchor>a8abb49ceb1b1223852a8af6f9a6a07d6</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>a00474.html</anchorfile>
      <anchor>a084dca402ed3aa7a5e06a30b29a94d4f</anchor>
      <arglist>(std::complex&lt; T &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>a00474.html</anchorfile>
      <anchor>a624a99a3e6e374a4564663887caf4312</anchor>
      <arglist>(_InputIterator first, _InputIterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>a00474.html</anchorfile>
      <anchor>a202d3ac962a9bae6446b1cde2e8c41ee</anchor>
      <arglist>(std::complex&lt; T &gt; *first, std::complex&lt; T &gt; *last)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>data</name>
      <anchorfile>a00474.html</anchorfile>
      <anchor>a1699472936b80a88d3fc8096975d21b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00474.html</anchorfile>
      <anchor>aa0c53387f47a46bf4c549b8f3bc6a941</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>Msg &amp;</type>
      <name>putMessage</name>
      <anchorfile>a00474.html</anchorfile>
      <anchor>a66f0d1c9f6ad548215e0304258871ae8</anchor>
      <arglist>(Msg &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Msg &amp;</type>
      <name>getMessage</name>
      <anchorfile>a00474.html</anchorfile>
      <anchor>a8bdf97e232512163287ab211f21d92c8</anchor>
      <arglist>(Msg &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>PooledData&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00474.html</anchorfile>
      <anchor>a941a822fd4ad0feacd39924bc723273e</anchor>
      <arglist>(const PooledData&lt; T &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>PooledData&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00474.html</anchorfile>
      <anchor>a6d7455f633b8505ecf203285daf6a730</anchor>
      <arglist>(T scale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00474.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a00474.html</anchorfile>
      <anchor>a562f7b24b47d3e7632a9896935c14d8b</anchor>
      <arglist>(size_type n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00474.html</anchorfile>
      <anchor>a0ee78f84abf601e802b40b3f19edbb20</anchor>
      <arglist>(size_type n, T val=T())</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>a00474.html</anchorfile>
      <anchor>aeb4257c0dfeedfa89d833321fd86f2da</anchor>
      <arglist>(size_type i) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00474.html</anchorfile>
      <anchor>aaf110a30188ca6828ea3bef2fda558cf</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="variable">
      <type>size_type</type>
      <name>Current</name>
      <anchorfile>a00474.html</anchorfile>
      <anchor>a0c4973df6eafdf73b5db3945c0bcee9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; T &gt;</type>
      <name>myData</name>
      <anchorfile>a00474.html</anchorfile>
      <anchor>a5ae3b0361ddb14a70b6e4bd78b4ef148</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>PrimeConstants</name>
    <filename>a00478.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>PrimeConstants&lt; uint32_t &gt;</name>
    <filename>a00479.html</filename>
    <member kind="enumvalue">
      <type>@</type>
      <name>max_prime</name>
      <anchorfile>a00479.html</anchorfile>
      <anchor>a726ca809ffd3d67ab4b8476646f26635aba3f130b86a89a7e905de13a13de9f6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>min_num_primes</name>
      <anchorfile>a00479.html</anchorfile>
      <anchor>a726ca809ffd3d67ab4b8476646f26635af8c0735e7758dcacfb729c77dda009de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>max_prime_offset</name>
      <anchorfile>a00479.html</anchorfile>
      <anchor>a726ca809ffd3d67ab4b8476646f26635a774ce398b7e3ac653cb10ba7c41f8f8f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>PrimeConstants&lt; uint64_t &gt;</name>
    <filename>a00480.html</filename>
    <member kind="enumvalue">
      <type>@</type>
      <name>max_prime</name>
      <anchorfile>a00480.html</anchorfile>
      <anchor>a0411cd49bb5b71852cecd93bcbf0ca2daba3f130b86a89a7e905de13a13de9f6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>min_num_primes</name>
      <anchorfile>a00480.html</anchorfile>
      <anchor>a0411cd49bb5b71852cecd93bcbf0ca2daf8c0735e7758dcacfb729c77dda009de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>max_prime_offset</name>
      <anchorfile>a00480.html</anchorfile>
      <anchor>a0411cd49bb5b71852cecd93bcbf0ca2da774ce398b7e3ac653cb10ba7c41f8f8f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>PrimeNumberSet</name>
    <filename>a00481.html</filename>
    <templarg>UIntType</templarg>
    <base>PrimeConstants</base>
    <member kind="typedef">
      <type>UIntType</type>
      <name>result_type</name>
      <anchorfile>a00481.html</anchorfile>
      <anchor>af84bee77f57cfa653def580be1bb00b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrimeNumberSet</name>
      <anchorfile>a00481.html</anchorfile>
      <anchor>a08f38e32ade053a574bcc31febaff4e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator[]</name>
      <anchorfile>a00481.html</anchorfile>
      <anchor>a2e3fa408544879caaa5c5664bbb3d813</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a00481.html</anchorfile>
      <anchor>aac782da1f912bceb5d8ad00c8dc892ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00481.html</anchorfile>
      <anchor>ada84d0558c7517efb7bc77c933efc2af</anchor>
      <arglist>(UIntType offset, int n, std::vector&lt; UIntType &gt; &amp;primes_add)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; UIntType &gt;</type>
      <name>primes</name>
      <anchorfile>a00481.html</anchorfile>
      <anchor>ab9a9d6d3376c7cbeab9e3fd575fbcbde</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>QMCGaussianParserBase</name>
    <filename>a00497.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>a00497.html</anchorfile>
      <anchor>ac6f3cbe6d8dfffdde97684888acf0b27</anchor>
      <arglist>(const std::string &amp;fname)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RadialGaussian</name>
    <filename>a00501.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>RadialGaussian</name>
      <anchorfile>a00501.html</anchorfile>
      <anchor>aefcc2da88656f3e32346d1ea025247d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RadialGaussian</name>
      <anchorfile>a00501.html</anchorfile>
      <anchor>ad1a9f7fc82c335ce5a52929ac3ee3b3f</anchor>
      <arglist>(int l, T sig, T norm=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setgrid</name>
      <anchorfile>a00501.html</anchorfile>
      <anchor>a8dd7d31d1c0e255354998fec1ff3a9bd</anchor>
      <arglist>(T r)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>a00501.html</anchorfile>
      <anchor>a46e10ea2e8c2b43c8395c279b0a20ee5</anchor>
      <arglist>(T r, T rinv, T &amp;drnl, T &amp;d2rnl)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>L</name>
      <anchorfile>a00501.html</anchorfile>
      <anchor>a61b43f3326e96036caf1c76875b794cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Sigma</name>
      <anchorfile>a00501.html</anchorfile>
      <anchor>a8c9844e263b1c5960c8183fda13bd59c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Norm</name>
      <anchorfile>a00501.html</anchorfile>
      <anchor>a6277d62a3e4e8f3d754c9aea40c5961c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RadialOrbitalBase</name>
    <filename>a00502.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>RadialOrbitalBase</name>
      <anchorfile>a00502.html</anchorfile>
      <anchor>a1af31baf18f790c8d4acf2ee840a6ebd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RadialOrbitalBase</name>
      <anchorfile>a00502.html</anchorfile>
      <anchor>a809935c214e1e6eb23a74db315e86cb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual T</type>
      <name>f</name>
      <anchorfile>a00502.html</anchorfile>
      <anchor>abd665b1bf6cdea9fe41d1552d6687bbe</anchor>
      <arglist>(T r) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual T</type>
      <name>df</name>
      <anchorfile>a00502.html</anchorfile>
      <anchor>aba878717354a5c8e34ad193d53355958</anchor>
      <arglist>(T r) const =0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RadialOrbitalSet</name>
    <filename>a00503.html</filename>
    <templarg></templarg>
    <base>RadialOrbitalBase</base>
    <member kind="function">
      <type></type>
      <name>~RadialOrbitalSet</name>
      <anchorfile>a00503.html</anchorfile>
      <anchor>a6b773271467e1ab25e7f4a9e3780b9f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRadialOrbital</name>
      <anchorfile>a00503.html</anchorfile>
      <anchor>a1cda5810a1ff13f2143beee063ed6e01</anchor>
      <arglist>(RadialOrbitalBase&lt; T &gt; *arad)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>f</name>
      <anchorfile>a00503.html</anchorfile>
      <anchor>a4dde68acc65c4bf2e02a7a9021308ad9</anchor>
      <arglist>(T r) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>df</name>
      <anchorfile>a00503.html</anchorfile>
      <anchor>a03de1c7dbe31e9ca006168c9258705a9</anchor>
      <arglist>(T r) const </arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; RadialOrbitalBase&lt; T &gt; * &gt;</type>
      <name>InFunc</name>
      <anchorfile>a00503.html</anchorfile>
      <anchor>a5afd438a232965d880ab6993b218ee7c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RadialSTO</name>
    <filename>a00505.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>real_type</name>
      <anchorfile>a00505.html</anchorfile>
      <anchor>a1f2faa6ae2aa39fe17a15a986364f6ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RadialSTO</name>
      <anchorfile>a00505.html</anchorfile>
      <anchor>a4a3779f1bc848f7aac545480816ca68a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RadialSTO</name>
      <anchorfile>a00505.html</anchorfile>
      <anchor>a42a8f301bec496781732178a292a45ae</anchor>
      <arglist>(int n, double z, double norm=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setgrid</name>
      <anchorfile>a00505.html</anchorfile>
      <anchor>a8dd7d31d1c0e255354998fec1ff3a9bd</anchor>
      <arglist>(T r)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>f</name>
      <anchorfile>a00505.html</anchorfile>
      <anchor>a4dde68acc65c4bf2e02a7a9021308ad9</anchor>
      <arglist>(T r) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>df</name>
      <anchorfile>a00505.html</anchorfile>
      <anchor>a03de1c7dbe31e9ca006168c9258705a9</anchor>
      <arglist>(T r) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>a00505.html</anchorfile>
      <anchor>a4f1a74fb2f3b5105863fdc9c929aaebc</anchor>
      <arglist>(T r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateAll</name>
      <anchorfile>a00505.html</anchorfile>
      <anchor>a7371225226843e90e7f870882bf1c175</anchor>
      <arglist>(T r, T rinv)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>a00505.html</anchorfile>
      <anchor>a46e10ea2e8c2b43c8395c279b0a20ee5</anchor>
      <arglist>(T r, T rinv, T &amp;drnl, T &amp;d2rnl)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NminusOne</name>
      <anchorfile>a00505.html</anchorfile>
      <anchor>a4728f8d675dda216b7a0b1df9b687eb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Z</name>
      <anchorfile>a00505.html</anchorfile>
      <anchor>a9c8f3e46c50f11ed9329632cbebfd595</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Norm</name>
      <anchorfile>a00505.html</anchorfile>
      <anchor>a6277d62a3e4e8f3d754c9aea40c5961c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Y</name>
      <anchorfile>a00505.html</anchorfile>
      <anchor>ad7f9ad10f0b32c428a51bfcd6c031452</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>dY</name>
      <anchorfile>a00505.html</anchorfile>
      <anchor>a20431e82f7aad18f8ca382ee2ca6b0a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>d2Y</name>
      <anchorfile>a00505.html</anchorfile>
      <anchor>aca859058d879b723e901b0bead3326dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RandomSeq&lt; TinyVector&lt; double, 3 &gt;, RNG &gt;</name>
    <filename>a00510.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>TinyVector&lt; double, 3 &gt;</type>
      <name>Return_t</name>
      <anchorfile>a00510.html</anchorfile>
      <anchor>a7ab7530ccc6ddb2bb13a7cece1c5691c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Return_t</type>
      <name>get</name>
      <anchorfile>a00510.html</anchorfile>
      <anchor>abb3c9988cde8e70f1f7f146422dc35ca</anchor>
      <arglist>(RNG &amp;rng)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RandomSeq&lt; TinyVector&lt; T, D &gt;, RNG &gt;</name>
    <filename>a00511.html</filename>
    <templarg></templarg>
    <templarg>D</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>TinyVector&lt; double, D &gt;</type>
      <name>Return_t</name>
      <anchorfile>a00511.html</anchorfile>
      <anchor>a2bcfd930ac5ff8223fb9106d875ba0a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Return_t</type>
      <name>get</name>
      <anchorfile>a00511.html</anchorfile>
      <anchor>abb3c9988cde8e70f1f7f146422dc35ca</anchor>
      <arglist>(RNG &amp;rng)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RandomSequence&lt; vector&lt; double &gt;, RNG &gt;</name>
    <filename>a00512.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>a44ff039f8c917b89d8668d904c5b24e4</anchor>
      <arglist>(vector&lt; double &gt; &amp;s, RNG &amp;rnd)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RandomSequence&lt; vector&lt; T &gt;, RNG &gt;</name>
    <filename>a00513.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a00513.html</anchorfile>
      <anchor>a16d21a723f7f61002f37dc0ee90ef8c9</anchor>
      <arglist>(vector&lt; T &gt; &amp;v, RandomVector&lt; T, RNG &gt; &amp;rnd)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RandomUniformPos&lt; TinyVector&lt; double, 2 &gt;, RNG &gt;</name>
    <filename>a00514.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>TinyVector&lt; double, 2 &gt;</type>
      <name>Return_t</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>adf3240493c3ac9da801f3f693a5c9601</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandomUniformPos</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>ae08983137b4797bfc5ce1dda631bc7a1</anchor>
      <arglist>(RNG &amp;rg)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>operator()</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>af1c7ae0f64e46e640885b1ec757f487e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RNG &amp;</type>
      <name>d_engine</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>afe72e16116d7ac9d73ab1ef791e46435</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RandomUniformPos&lt; TinyVector&lt; double, 3 &gt;, RNG &gt;</name>
    <filename>a00515.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>TinyVector&lt; double, 3 &gt;</type>
      <name>Return_t</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>a7ab7530ccc6ddb2bb13a7cece1c5691c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandomUniformPos</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>ae08983137b4797bfc5ce1dda631bc7a1</anchor>
      <arglist>(RNG &amp;rg)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>operator()</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>af1c7ae0f64e46e640885b1ec757f487e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RNG &amp;</type>
      <name>d_engine</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>afe72e16116d7ac9d73ab1ef791e46435</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RandRandom</name>
    <filename>a00516.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>Return_t</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>aa7f3644023aeacb181617a38dca05af3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandRandom</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ab070ffe6283550dab21df6bf72869b90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandRandom</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>a26b8886899de206d02ba7a1664f111de</anchor>
      <arglist>(int i, int nstr, int iseed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RandRandom</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>acf9cac5b7ad2abb72d4b86d12711ad99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>a1d51de075488a33859010296e02e1b2f</anchor>
      <arglist>(int i=0, int nstr=1, int iseed=-1)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>getRandom</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>a2342aab9509f9d65c1d4a65342067cc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>operator()</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>af1c7ae0f64e46e640885b1ec757f487e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>irand</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>a9881a50bfa25a581a0f8b96db5877fd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bivariate</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>a9ab2777e47e9d6fffa4d54fdd6524eec</anchor>
      <arglist>(Return_t &amp;g1, Return_t &amp;g2)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>thisStreamID</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>a78695e681a5fb98c53f57b42af6a7aad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nStreams</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>a8efb9916c7a923b8d30c7c5e45671713</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>thisSeed</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>a630689dc1681376afb6c518718adf80c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const Return_t</type>
      <name>rand_max_inv</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>a15ee8ef8b3093cb83f1abcfd8f00458c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RecordNamedProperty</name>
    <filename>a00520.html</filename>
    <templarg>T</templarg>
    <base>RecordProperty</base>
    <member kind="function">
      <type></type>
      <name>RecordNamedProperty</name>
      <anchorfile>a00520.html</anchorfile>
      <anchor>aac7c0f43fb164e212b3d0e0137af12d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RecordNamedProperty</name>
      <anchorfile>a00520.html</anchorfile>
      <anchor>a2403c5a74594ae86b27e23b3b9f7483c</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RecordNamedProperty</name>
      <anchorfile>a00520.html</anchorfile>
      <anchor>a4682fe10b7dd4154e9b416e050085215</anchor>
      <arglist>(const RecordNamedProperty&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RecordNamedProperty</name>
      <anchorfile>a00520.html</anchorfile>
      <anchor>a3ec25e76a3837688279bf4eec30d1a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00520.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>a00520.html</anchorfile>
      <anchor>a8b36789e9ecc47ad57fc55d85015651d</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00520.html</anchorfile>
      <anchor>a0534e977fc9fee424b3ef94f27a9ed61</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt;::iterator</type>
      <name>begin</name>
      <anchorfile>a00520.html</anchorfile>
      <anchor>ae49c361f230a136b5b1221631fc48727</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt;::iterator</type>
      <name>end</name>
      <anchorfile>a00520.html</anchorfile>
      <anchor>ad2020c437b7b1e81d6f191d31ae8a2e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt;::const_iterator</type>
      <name>begin</name>
      <anchorfile>a00520.html</anchorfile>
      <anchor>a8ccbb2fc356d3827e2f691db90fc143a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt;::const_iterator</type>
      <name>end</name>
      <anchorfile>a00520.html</anchorfile>
      <anchor>a69ca673576aad25f37820798001aa1a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>add</name>
      <anchorfile>a00520.html</anchorfile>
      <anchor>a7c95e6cbb053a8f0f4732ea28deae23d</anchor>
      <arglist>(const std::string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>append</name>
      <anchorfile>a00520.html</anchorfile>
      <anchor>ac88bb6ef81f13fde3e95d288841c7323</anchor>
      <arglist>(const std::string &amp;aroot, int first, int last)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a00520.html</anchorfile>
      <anchor>ab8e4e3e2a7bf18888b71bdf9dda0770b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValues</name>
      <anchorfile>a00520.html</anchorfile>
      <anchor>a5d5c6c8f9c735f095991e2cdd195b0c0</anchor>
      <arglist>(T v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00520.html</anchorfile>
      <anchor>a578be9c59132b8633a67a98c39318777</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00520.html</anchorfile>
      <anchor>a0455c6f2d063312e6add1c45ebc99c24</anchor>
      <arglist>(const char *fileroot, bool append=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>report</name>
      <anchorfile>a00520.html</anchorfile>
      <anchor>a56fd44205a63bdff859974f08254d105</anchor>
      <arglist>(int iter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>a00520.html</anchorfile>
      <anchor>a32d626626eee0bc4ade146973f6abb1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00520.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RecordProperty</name>
      <anchorfile>a00521.html</anchorfile>
      <anchor>aae7171818d10e988746cb11ff2be275a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RecordProperty</name>
      <anchorfile>a00521.html</anchorfile>
      <anchor>a5d969bf5f03a2eb687bdf1ebcd34cc7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::ostream *</type>
      <name>OutStream</name>
      <anchorfile>a00520.html</anchorfile>
      <anchor>a24281ba8f141e3c9be4406af9fe9a6fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; T &gt;</type>
      <name>Values</name>
      <anchorfile>a00520.html</anchorfile>
      <anchor>ab49240d38daeae93b235be71d651f37c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>Names</name>
      <anchorfile>a00520.html</anchorfile>
      <anchor>a386ee6e7e844a8f676cd582579561c6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>stride</name>
      <anchorfile>a00521.html</anchorfile>
      <anchor>a08f66a6870d87afcd5dc1b60d1019692</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>FileName</name>
      <anchorfile>a00521.html</anchorfile>
      <anchor>a21d40ee67459129a67fe0d8941c5b7c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RecordProperty</name>
    <filename>a00521.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>a00521.html</anchorfile>
      <anchor>a526834d5687c7810496bc142acc8833d</anchor>
      <arglist>(const char *fileroot, bool append=false)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>report</name>
      <anchorfile>a00521.html</anchorfile>
      <anchor>a8b1b2200363c16e1b8cfc38454726a6b</anchor>
      <arglist>(int i)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>finalize</name>
      <anchorfile>a00521.html</anchorfile>
      <anchor>a5882b5eaf11f8b1561d5bb4ecdc217c3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>put</name>
      <anchorfile>a00521.html</anchorfile>
      <anchor>ad5f66fd1dbe5e3c62ee5f7f326446dee</anchor>
      <arglist>(xmlNodePtr cur)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RecordPropertyList</name>
    <filename>a00522.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; RecordProperty * &gt;</type>
      <name>RecordList_t</name>
      <anchorfile>a00522.html</anchorfile>
      <anchor>ac4677271f3c134d9ff10a5d1210eeb00</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RecordPropertyList</name>
      <anchorfile>a00522.html</anchorfile>
      <anchor>a72bbfa398422732ca8afa086e20f7358</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RecordPropertyList</name>
      <anchorfile>a00522.html</anchorfile>
      <anchor>a7e041a6e724ced62b2298568a39ea867</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRecord</name>
      <anchorfile>a00522.html</anchorfile>
      <anchor>a4cb1f7b6f4ec33a7a492a23fb43eee50</anchor>
      <arglist>(RecordProperty *a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setstride</name>
      <anchorfile>a00522.html</anchorfile>
      <anchor>ad5c031730b360308d863df7ef9b5a6eb</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>report</name>
      <anchorfile>a00522.html</anchorfile>
      <anchor>a56fd44205a63bdff859974f08254d105</anchor>
      <arglist>(int iter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>a00522.html</anchorfile>
      <anchor>a32d626626eee0bc4ade146973f6abb1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00522.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; RecordProperty * &gt;</type>
      <name>Properties</name>
      <anchorfile>a00522.html</anchorfile>
      <anchor>a9a248d372bc07a6dc9eb2a21c7f89bbd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RegCubicSpline</name>
    <filename>a00523.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>RegCubicSpline</name>
      <anchorfile>a00523.html</anchorfile>
      <anchor>a6363e8a1ea970e1b62b800fc52fbd171</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegCubicSpline</name>
      <anchorfile>a00523.html</anchorfile>
      <anchor>ac312630ffe2391610a52a520dd47ad10</anchor>
      <arglist>(const int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00523.html</anchorfile>
      <anchor>a169335ce881495628274687eb043f182</anchor>
      <arglist>(const int n)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>a00523.html</anchorfile>
      <anchor>a7df33bad89e25ca55768d7567803a199</anchor>
      <arglist>(T x0)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>a00523.html</anchorfile>
      <anchor>a473314c544b9447067273a4d2b1b7901</anchor>
      <arglist>(T x0, T &amp;yval)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>a00523.html</anchorfile>
      <anchor>a0ef0a8397ad4d3ca7b54ea468f86e20f</anchor>
      <arglist>(T x0, T &amp;yval, T &amp;yp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>a00523.html</anchorfile>
      <anchor>ab8f0efa6d82e1053a6cfc36e70b7c5fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>a00523.html</anchorfile>
      <anchor>a2aa60ad95798b326bfa0f2e9f9212df8</anchor>
      <arglist>(const int n, const T x0, const T dx, const T yp1, const T ypn, T *y)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>Npt</name>
      <anchorfile>a00523.html</anchorfile>
      <anchor>a33a7837229beb81788dfd5e4095cfe7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>Xmin</name>
      <anchorfile>a00523.html</anchorfile>
      <anchor>aa65701321ab8128aa706408bd580638d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>Xmax</name>
      <anchorfile>a00523.html</anchorfile>
      <anchor>a397cc051de20af9548b87841958ac06a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>Dx</name>
      <anchorfile>a00523.html</anchorfile>
      <anchor>a75f8029101538f99fefd4209a348a610</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>DxInv</name>
      <anchorfile>a00523.html</anchorfile>
      <anchor>ab1ab0cca8abcb2eae7e6b3c2cc3570f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>Yp1</name>
      <anchorfile>a00523.html</anchorfile>
      <anchor>aa483e72268536ddceeb2f099e17c934f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>Ypn</name>
      <anchorfile>a00523.html</anchorfile>
      <anchor>afa31164e8386b6135dc10ff609d97460</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>h2over6</name>
      <anchorfile>a00523.html</anchorfile>
      <anchor>ab08b8c1257f7e2e38a16ee213784499e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; T &gt;</type>
      <name>Y</name>
      <anchorfile>a00523.html</anchorfile>
      <anchor>a24197f79f6a3797ae44fc7e17dce2903</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; T &gt;</type>
      <name>Y2</name>
      <anchorfile>a00523.html</anchorfile>
      <anchor>aaf42851cb2ac9029b8640f0325cfff83</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Region</name>
    <filename>a00524.html</filename>
    <templarg>T</templarg>
    <templarg>D</templarg>
    <member kind="enumvalue">
      <type>@</type>
      <name>DIM</name>
      <anchorfile>a00524.html</anchorfile>
      <anchor>a16af7b253440dadd46a80a4b9fddba4da6c8e5f290be4be86fd5e7048654b4a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Scalar_t</name>
      <anchorfile>a00524.html</anchorfile>
      <anchor>a74ebc0a8ec00a527f379a64ebf24d6de</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Region</name>
      <anchorfile>a00524.html</anchorfile>
      <anchor>ab0affbdd5f40d4d9d7f4cd1fe6d816ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Region</name>
      <anchorfile>a00524.html</anchorfile>
      <anchor>a21270d943ff3a786074914798b067442</anchor>
      <arglist>(const T *r0, const T *dr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Region</name>
      <anchorfile>a00524.html</anchorfile>
      <anchor>a1f9277847ef0076e784d107dcecd1afc</anchor>
      <arglist>(const Region&lt; T, D &gt; &amp;rg)</arglist>
    </member>
    <member kind="function">
      <type>Region&lt; T, D &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00524.html</anchorfile>
      <anchor>a9ff07724d8630108299447c65cb754ea</anchor>
      <arglist>(const Region&lt; T, D &gt; &amp;rg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Region</name>
      <anchorfile>a00524.html</anchorfile>
      <anchor>a6d8426719586b3360f0f089df2d2c4b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00524.html</anchorfile>
      <anchor>af7d8ffb8fe0ff090309c986cdc8d6ebb</anchor>
      <arglist>(const T *r0, const T *dr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inside</name>
      <anchorfile>a00524.html</anchorfile>
      <anchor>aea3bde39c8fd7279f8f1cc18a732412b</anchor>
      <arglist>(const Pos_t &amp;r) const </arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Ri</name>
      <anchorfile>a00524.html</anchorfile>
      <anchor>a2d2a03138c9415461c3106e3c24a5967</anchor>
      <arglist>[D]</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Rf</name>
      <anchorfile>a00524.html</anchorfile>
      <anchor>af6355a54c3efdc6d2f71647a2a05769c</anchor>
      <arglist>[D]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RegMultiGrid</name>
    <filename>a00525.html</filename>
    <templarg></templarg>
    <templarg>D</templarg>
    <member kind="typedef">
      <type>RegMultiGrid&lt; T, D &gt;</type>
      <name>this_t</name>
      <anchorfile>a00525.html</anchorfile>
      <anchor>ad8da205139e7ca46ee3c9ffcdb0ed1da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegMultiGrid</name>
      <anchorfile>a00525.html</anchorfile>
      <anchor>ab25c8410a398f6d737c1788d696af6c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RegMultiGrid</name>
      <anchorfile>a00525.html</anchorfile>
      <anchor>acafd2b825dad6cce1f1869ff8ee5a01b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>root</name>
      <anchorfile>a00525.html</anchorfile>
      <anchor>abb9d6a3cadea27b0e539737e294d6225</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a00525.html</anchorfile>
      <anchor>ac6e61de369e994009e36f344f99c15ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const RegMultiGrid *</type>
      <name>node</name>
      <anchorfile>a00525.html</anchorfile>
      <anchor>a5b059b1181fae1b9db4668d2649053c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const RegMultiGrid *</type>
      <name>child</name>
      <anchorfile>a00525.html</anchorfile>
      <anchor>a2b8979ee87c49e642a5b53928f7731e8</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>a00525.html</anchorfile>
      <anchor>abd1562affe186e62a245d91f90d1ed10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a00525.html</anchorfile>
      <anchor>a1fcb45e5d2428352eb36b487d1d4eea3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>node</name>
      <anchorfile>a00525.html</anchorfile>
      <anchor>a28b6d0877f6297b6aad66402ccd6650e</anchor>
      <arglist>(const pos_t &amp;pos)</arglist>
    </member>
    <member kind="variable">
      <type>Region&lt; T, D &gt;</type>
      <name>R</name>
      <anchorfile>a00525.html</anchorfile>
      <anchor>a21341bb1a18913966e0113eb252350ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>this_t *</type>
      <name>Up</name>
      <anchorfile>a00525.html</anchorfile>
      <anchor>a17789e8031aaf6914de788481ae2049e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; this_t * &gt;</type>
      <name>Down</name>
      <anchorfile>a00525.html</anchorfile>
      <anchor>ad4168086e3479f7f230bb6267ac0f92a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SCTFunctor</name>
    <filename>a00547.html</filename>
    <templarg></templarg>
    <templarg>L</templarg>
    <member kind="typedef">
      <type>SCT::value_type</type>
      <name>value_type</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a74acea39e8b0780e9e457f4ed258a6e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SCT::pos_type</type>
      <name>pos_type</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a88ffca4a1c20d925dbc434165437f608</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4f77d861db1b85c58023bd5771cb48bb</anchor>
      <arglist>(std::vector&lt; value_type &gt; &amp;Ylm, std::vector&lt; pos_type &gt; &amp;gYlm, const pos_type &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SCTFunctor&lt; SCT, 1 &gt;</name>
    <filename>a00548.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>SCT::value_type</type>
      <name>value_type</name>
      <anchorfile>a00548.html</anchorfile>
      <anchor>a74acea39e8b0780e9e457f4ed258a6e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SCT::pos_type</type>
      <name>pos_type</name>
      <anchorfile>a00548.html</anchorfile>
      <anchor>a88ffca4a1c20d925dbc434165437f608</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a00548.html</anchorfile>
      <anchor>a4f77d861db1b85c58023bd5771cb48bb</anchor>
      <arglist>(std::vector&lt; value_type &gt; &amp;Ylm, std::vector&lt; pos_type &gt; &amp;gYlm, const pos_type &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SCTFunctor&lt; SCT, 2 &gt;</name>
    <filename>a00549.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>SCT::value_type</type>
      <name>value_type</name>
      <anchorfile>a00549.html</anchorfile>
      <anchor>a74acea39e8b0780e9e457f4ed258a6e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SCT::pos_type</type>
      <name>pos_type</name>
      <anchorfile>a00549.html</anchorfile>
      <anchor>a88ffca4a1c20d925dbc434165437f608</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a00549.html</anchorfile>
      <anchor>a4f77d861db1b85c58023bd5771cb48bb</anchor>
      <arglist>(std::vector&lt; value_type &gt; &amp;Ylm, std::vector&lt; pos_type &gt; &amp;gYlm, const pos_type &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SCTFunctor&lt; SCT, 3 &gt;</name>
    <filename>a00550.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>SCT::value_type</type>
      <name>value_type</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>a74acea39e8b0780e9e457f4ed258a6e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SCT::pos_type</type>
      <name>pos_type</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>a88ffca4a1c20d925dbc434165437f608</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>a4f77d861db1b85c58023bd5771cb48bb</anchor>
      <arglist>(std::vector&lt; value_type &gt; &amp;Ylm, std::vector&lt; pos_type &gt; &amp;gYlm, const pos_type &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleRandom</name>
    <filename>a00553.html</filename>
    <templarg>ENG</templarg>
    <member kind="typedef">
      <type>ENG</type>
      <name>generator_type</name>
      <anchorfile>a00553.html</anchorfile>
      <anchor>aef4dbb06bd22b23215c88f1f8b7c2c96</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>generator_type::uint_type</type>
      <name>uint_type</name>
      <anchorfile>a00553.html</anchorfile>
      <anchor>a794b2d14099facc959689006728ed9bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>result_type</name>
      <anchorfile>a00553.html</anchorfile>
      <anchor>a32403829e9e5baa60c9fd58375e14842</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleRandom</name>
      <anchorfile>a00553.html</anchorfile>
      <anchor>a46f6b3c9bb95214f68b3b6cb99f0a574</anchor>
      <arglist>(uint_type iseed=911, const std::string &amp;aname=&quot;mtrand&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SimpleRandom</name>
      <anchorfile>a00553.html</anchorfile>
      <anchor>a7127ae59a340b1b0b81ed25774aa2fbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00553.html</anchorfile>
      <anchor>a0431895c216721129933b30d65481919</anchor>
      <arglist>(int i, int nstr, int iseed_in, uint_type offset=1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>offset</name>
      <anchorfile>a00553.html</anchorfile>
      <anchor>aaa02ea556dee3025f49406b9d3fb662c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>offset</name>
      <anchorfile>a00553.html</anchorfile>
      <anchor>af9f849313df81eb0b2c13dea66eb07c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seed</name>
      <anchorfile>a00553.html</anchorfile>
      <anchor>af8a7987f2213212b7a9ea5d05158902f</anchor>
      <arglist>(uint_type aseed)</arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>rand</name>
      <anchorfile>a00553.html</anchorfile>
      <anchor>a96a178ad4d15bde123e2fb7b30eeb48a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>a00553.html</anchorfile>
      <anchor>aaaead712fe7dc29c1799e7d8f77d1cfb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint_type</type>
      <name>irand</name>
      <anchorfile>a00553.html</anchorfile>
      <anchor>a347cff850abebfec4d03490bf20121c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>generator_type &amp;</type>
      <name>engine</name>
      <anchorfile>a00553.html</anchorfile>
      <anchor>afaaf34237fd59ee2c50d15e298029713</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>state_size</name>
      <anchorfile>a00553.html</anchorfile>
      <anchor>af346c232bed607304e56457c06d834d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a00553.html</anchorfile>
      <anchor>a3a5850f223852888735a74ed4a2af157</anchor>
      <arglist>(std::istream &amp;rin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a00553.html</anchorfile>
      <anchor>a8d2f908a0d4d99291122b79c95925d52</anchor>
      <arglist>(std::ostream &amp;rout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>a00553.html</anchorfile>
      <anchor>ab779666b7898ce7e79f1245afc3ff247</anchor>
      <arglist>(std::vector&lt; uint_type &gt; &amp;curstate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>a00553.html</anchorfile>
      <anchor>a9943132f85c457521606d9536f39c9cc</anchor>
      <arglist>(std::vector&lt; uint_type &gt; &amp;newstate)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>ClassName</name>
      <anchorfile>a00553.html</anchorfile>
      <anchor>a995b081a11fae5fed318f8d6afa2dc99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>EngineName</name>
      <anchorfile>a00553.html</anchorfile>
      <anchor>a75194cbbaccca8368ddebfd8c2810734</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>myContext</name>
      <anchorfile>a00553.html</anchorfile>
      <anchor>afc93a1d32cd658cae503207115ed421f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nContexts</name>
      <anchorfile>a00553.html</anchorfile>
      <anchor>a43c65b80c956e839a01103ac7d19f905</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>baseOffset</name>
      <anchorfile>a00553.html</anchorfile>
      <anchor>abbd274b906551107e7200c3cc076ae63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>generator_type</type>
      <name>uni</name>
      <anchorfile>a00553.html</anchorfile>
      <anchor>a8340fb554ea6ea59b2bc935b239ea15e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sine3D</name>
    <filename>a00554.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>a00554.html</anchorfile>
      <anchor>a265a253612b46abed17c61b0a5e5ce30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PT</type>
      <name>pos_type</name>
      <anchorfile>a00554.html</anchorfile>
      <anchor>a52994a8a8a7b19f3c8aa404e9d391fd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Sine3D</name>
      <anchorfile>a00554.html</anchorfile>
      <anchor>ac909428ae55aebd984a3fbd0f2271fe6</anchor>
      <arglist>(value_type kx=0, value_type ky=0, value_type kz=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00554.html</anchorfile>
      <anchor>a704882b05bac9f95e19c09be88d905b9</anchor>
      <arglist>(value_type kx, value_type ky, value_type kz)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>evaluate</name>
      <anchorfile>a00554.html</anchorfile>
      <anchor>a74c8c7b3b89bb89cba3bab7af57dd0f1</anchor>
      <arglist>(const PT &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>evaluate</name>
      <anchorfile>a00554.html</anchorfile>
      <anchor>af7f5e44327e261683274924f9c835e2c</anchor>
      <arglist>(const PT &amp;r, PT &amp;gr, value_type &amp;lap)</arglist>
    </member>
    <member kind="function">
      <type>PT</type>
      <name>gradient</name>
      <anchorfile>a00554.html</anchorfile>
      <anchor>a099d2a8d4319ef5f8565728b3dcbcf79</anchor>
      <arglist>(const PT &amp;r, value_type &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>laplacian</name>
      <anchorfile>a00554.html</anchorfile>
      <anchor>ae442aa1fac8fddd41257fb0c75274547</anchor>
      <arglist>(const PT &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator()</name>
      <anchorfile>a00554.html</anchorfile>
      <anchor>a9425feb11200855c8fa5e06b1a63f6b9</anchor>
      <arglist>(const PT &amp;r)</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Kx</name>
      <anchorfile>a00554.html</anchorfile>
      <anchor>a77550850b1cc49ea95407f32c4d8da40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Ky</name>
      <anchorfile>a00554.html</anchorfile>
      <anchor>a5e4f6e1111525c1ea22623aa98c6bfd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Kz</name>
      <anchorfile>a00554.html</anchorfile>
      <anchor>a5752bd76445a465f649df20d24916433</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Knorm2</name>
      <anchorfile>a00554.html</anchorfile>
      <anchor>afd8e85544478980f7dfec692ae62aa84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Val</name>
      <anchorfile>a00554.html</anchorfile>
      <anchor>a7a9312a169e356746a56fb0addc3c55f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Lap</name>
      <anchorfile>a00554.html</anchorfile>
      <anchor>aee1a2afb5fb91b40412264a4992d4f9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>pos_type</type>
      <name>Grad</name>
      <anchorfile>a00554.html</anchorfile>
      <anchor>ac48888307bd56ec19128f9018c290abb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SlaterCombo</name>
    <filename>a00563.html</filename>
    <templarg>T</templarg>
    <base>OptimizableFunctorBase</base>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>a265a253612b46abed17c61b0a5e5ce30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericSTO&lt; T &gt;</type>
      <name>Component_t</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>ab1c3974313c7709e31cecc63a21671c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SlaterCombo</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>a72c9b38dc5b73d17849b3889a61fb6f9</anchor>
      <arglist>(int l=0, bool normalized=true, const char *node_name=&quot;radfunc&quot;, const char *exp_name=&quot;exponent&quot;, const char *c_name=&quot;contraction&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SlaterCombo</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>ab78f1d1e4760340cfe15b9412fa709a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OptimizableFunctorBase *</type>
      <name>makeClone</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>a4747acd34f8d2daa0656125f1290e4d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>a6a91c8094ddd49aa8a2da9df6b439164</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>aff351ffb66160b6458d6057fa6bc2a5f</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>af08f1f70ecd1cddcf7d274cbcad42f40</anchor>
      <arglist>(real_type r, real_type rinv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateAll</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>a1b404b15a77d0f3bd4e6ff6a527a518d</anchor>
      <arglist>(real_type r, real_type rinv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateWithThirdDeriv</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>a34e6026bbb2f2b7932699f15cb2e387a</anchor>
      <arglist>(real_type r, real_type rinv)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putBasisGroup</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>a806f7ea26ab76c46abcf798b5d98c68d</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>L</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>a61b43f3326e96036caf1c76875b794cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Normalized</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>aacbcd3c308ce1771fb38f921fb87a5d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>nodeName</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>aab1a064968614e9937da4edb37bebfd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>expName</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>adf12170ede4e9e3a5cc1339bfd5809e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>coeffName</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>ab56bcf463c4e3c19fbc59c515096932e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; xmlNodePtr &gt;</type>
      <name>InParam</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>a4489167986bb9aa3aa91a24c18abcaf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Component_t &gt;</type>
      <name>sset</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>afd438373cf2cb9874c8b1c552d8bbcc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Y</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>a8b4dc77b2f75ec3e80eb8987f98db7af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>dY</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>a6a8818d83e16d75f6e13cc9df1e809ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>d2Y</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>ab2751661aab00028080a57c4747bd245</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>d3Y</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>ab1d41da3b5323d7b5813290c2f465e3a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SolveFirstDerivInterp1D&lt; double &gt;</name>
    <filename>a00568.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a00568.html</anchorfile>
      <anchor>a408dae34c7804f49a253279d0290974c</anchor>
      <arglist>(const CT &amp;data, CT &amp;p, int N, double *bcLower, double *bcUpper)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SolveFirstDerivInterp1D&lt; std::complex&lt; double &gt; &gt;</name>
    <filename>a00569.html</filename>
    <member kind="typedef">
      <type>std::complex&lt; double &gt;</type>
      <name>value_type</name>
      <anchorfile>a00569.html</anchorfile>
      <anchor>a0fdf03d9426a155431b67c7bef1966c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>real_type</name>
      <anchorfile>a00569.html</anchorfile>
      <anchor>ac0b09ba58a37f5f3ca415be4a02ec7aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a00569.html</anchorfile>
      <anchor>a408dae34c7804f49a253279d0290974c</anchor>
      <arglist>(const CT &amp;data, CT &amp;p, int N, double *bcLower, double *bcUpper)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SolvePeriodicInterp1D&lt; double &gt;</name>
    <filename>a00570.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a00570.html</anchorfile>
      <anchor>a67bf8a12098ce50fd339fbd799cca23c</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;data, std::vector&lt; double &gt; &amp;p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a00570.html</anchorfile>
      <anchor>a3759d273263485d45fd9c558cc16a30f</anchor>
      <arglist>(const CT &amp;data, CT &amp;p, int N)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SolvePeriodicInterp1D&lt; std::complex&lt; double &gt; &gt;</name>
    <filename>a00571.html</filename>
    <member kind="typedef">
      <type>std::complex&lt; double &gt;</type>
      <name>value_type</name>
      <anchorfile>a00571.html</anchorfile>
      <anchor>a0fdf03d9426a155431b67c7bef1966c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>real_type</name>
      <anchorfile>a00571.html</anchorfile>
      <anchor>ac0b09ba58a37f5f3ca415be4a02ec7aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a00571.html</anchorfile>
      <anchor>a6cb5e973fc32f5f540bf0ee34d7d7d6c</anchor>
      <arglist>(const std::vector&lt; value_type &gt; &amp;data, std::vector&lt; value_type &gt; &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SpeciesBase</name>
    <filename>a00574.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>Scalar_t</name>
      <anchorfile>a00574.html</anchorfile>
      <anchor>ad42aa95ac3874893dfebf3fbdb6f9b50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>vector&lt; Scalar_t &gt;</type>
      <name>SpeciesAttrib_t</name>
      <anchorfile>a00574.html</anchorfile>
      <anchor>acda1a9dbb9d85f5700ff173af91f25bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>vector&lt; SpeciesAttrib_t * &gt;</type>
      <name>AttribList_t</name>
      <anchorfile>a00574.html</anchorfile>
      <anchor>aefa0253d99e6a9c0f2121feb99e57fd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpeciesBase</name>
      <anchorfile>a00574.html</anchorfile>
      <anchor>aaa72c0ba90945d3d11bed47e95e95f11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SpeciesBase</name>
      <anchorfile>a00574.html</anchorfile>
      <anchor>ae6f3ef7798456145c2b1331ce5805504</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>getTotalNum</name>
      <anchorfile>a00574.html</anchorfile>
      <anchor>ae1bef2f247540d913a32c288dbaadaa0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTotalNum</name>
      <anchorfile>a00574.html</anchorfile>
      <anchor>a8b91d9bf409361df3ec65f3729d7c9fa</anchor>
      <arglist>(const unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numAttributes</name>
      <anchorfile>a00574.html</anchorfile>
      <anchor>af31bb94470b7e017d5cc7ecd476d7a21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addAttrib</name>
      <anchorfile>a00574.html</anchorfile>
      <anchor>a33eae98a0529a83178aecaab9904d6bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>a00574.html</anchorfile>
      <anchor>a430268726a5e6695637c5daddb104d56</anchor>
      <arglist>(int i, int j) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>a00574.html</anchorfile>
      <anchor>a0cc1452510c86e885e47693b95c36c89</anchor>
      <arglist>(int i, int j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>a00574.html</anchorfile>
      <anchor>a2d66a21378e0cfcfdac5d0d794a7ad8a</anchor>
      <arglist>(unsigned m)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>find</name>
      <anchorfile>a00574.html</anchorfile>
      <anchor>a9928adb6c39864b4a8765ba047216e16</anchor>
      <arglist>(const string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getName</name>
      <anchorfile>a00574.html</anchorfile>
      <anchor>ac90660308b8a499b66c9dcfa463803bf</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>getSpeciesID</name>
      <anchorfile>a00574.html</anchorfile>
      <anchor>a370464f4f421f254a62881037d85cbdb</anchor>
      <arglist>(const string &amp;name)</arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>TotalNum</name>
      <anchorfile>a00574.html</anchorfile>
      <anchor>a787037efcfd97c528c3a713a17e150f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; string &gt;</type>
      <name>Name</name>
      <anchorfile>a00574.html</anchorfile>
      <anchor>a064e6693099033e201a37469c3c37f57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AttribList_t</type>
      <name>d_attrib</name>
      <anchorfile>a00574.html</anchorfile>
      <anchor>ac22b782532a8a2ed0b7ec733eea06053</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SpeciesSet</name>
    <filename>a00575.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>Scalar_t</name>
      <anchorfile>a00575.html</anchorfile>
      <anchor>ad42aa95ac3874893dfebf3fbdb6f9b50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Scalar_t &gt;</type>
      <name>SpeciesAttrib_t</name>
      <anchorfile>a00575.html</anchorfile>
      <anchor>a0bf10fd9195148d0f8fb2f9f53a86aa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; SpeciesAttrib_t * &gt;</type>
      <name>AttribList_t</name>
      <anchorfile>a00575.html</anchorfile>
      <anchor>ad93ebd7b6417e15c645328c087eeb27f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpeciesSet</name>
      <anchorfile>a00575.html</anchorfile>
      <anchor>a8fd4c734f0f50bdc20b65f6abf3abca3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpeciesSet</name>
      <anchorfile>a00575.html</anchorfile>
      <anchor>a114dc2e90f05bfaf1f25f6e4a99a1780</anchor>
      <arglist>(const SpeciesSet &amp;species)</arglist>
    </member>
    <member kind="function">
      <type>SpeciesSet &amp;</type>
      <name>operator=</name>
      <anchorfile>a00575.html</anchorfile>
      <anchor>af02775bfaefcb594d66c365fe76431df</anchor>
      <arglist>(const SpeciesSet &amp;species)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SpeciesSet</name>
      <anchorfile>a00575.html</anchorfile>
      <anchor>a32a45c8bbd09acd3dbc3da39105a02f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a00575.html</anchorfile>
      <anchor>ab8e4e3e2a7bf18888b71bdf9dda0770b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTotalNum</name>
      <anchorfile>a00575.html</anchorfile>
      <anchor>abd442623fd85f7c5c676a11ab3fdacbf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTotalNum</name>
      <anchorfile>a00575.html</anchorfile>
      <anchor>a8b91d9bf409361df3ec65f3729d7c9fa</anchor>
      <arglist>(const unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numAttributes</name>
      <anchorfile>a00575.html</anchorfile>
      <anchor>af31bb94470b7e017d5cc7ecd476d7a21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addSpecies</name>
      <anchorfile>a00575.html</anchorfile>
      <anchor>a8f535cb9e6f7f8dbfdfd217b6539ad8e</anchor>
      <arglist>(const std::string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addAttribute</name>
      <anchorfile>a00575.html</anchorfile>
      <anchor>ac9e00dae065db7dd07e6914aac919007</anchor>
      <arglist>(const std::string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>a00575.html</anchorfile>
      <anchor>a430268726a5e6695637c5daddb104d56</anchor>
      <arglist>(int i, int j) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>a00575.html</anchorfile>
      <anchor>a0cc1452510c86e885e47693b95c36c89</anchor>
      <arglist>(int i, int j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>a00575.html</anchorfile>
      <anchor>a2d66a21378e0cfcfdac5d0d794a7ad8a</anchor>
      <arglist>(unsigned m)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findSpecies</name>
      <anchorfile>a00575.html</anchorfile>
      <anchor>a0a9fc3420728c6b31c0f89a48d2ca0fc</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>TotalNum</name>
      <anchorfile>a00575.html</anchorfile>
      <anchor>a787037efcfd97c528c3a713a17e150f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>speciesName</name>
      <anchorfile>a00575.html</anchorfile>
      <anchor>a411d4029727f23392f8d44d3c1c8ba8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>attribName</name>
      <anchorfile>a00575.html</anchorfile>
      <anchor>aa78cd33de2437051f30b958cde4421f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AttribList_t</type>
      <name>d_attrib</name>
      <anchorfile>a00575.html</anchorfile>
      <anchor>ac22b782532a8a2ed0b7ec733eea06053</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SphericalTensor</name>
    <filename>a00578.html</filename>
    <templarg>T</templarg>
    <templarg>Point_t</templarg>
    <templarg>Tensor_t</templarg>
    <templarg>GGG_t</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>a00578.html</anchorfile>
      <anchor>a265a253612b46abed17c61b0a5e5ce30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Point_t</type>
      <name>pos_type</name>
      <anchorfile>a00578.html</anchorfile>
      <anchor>a0df5886798572c08a1897eeaf6e92471</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tensor_t</type>
      <name>hess_type</name>
      <anchorfile>a00578.html</anchorfile>
      <anchor>a141e337003244812ec238c66e7d0eab2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GGG_t</type>
      <name>ggg_type</name>
      <anchorfile>a00578.html</anchorfile>
      <anchor>aeb5f9517cd0f9eb9bdd74127ba7c4c58</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphericalTensor&lt; T, Point_t &gt;</type>
      <name>This_t</name>
      <anchorfile>a00578.html</anchorfile>
      <anchor>a96277056c67ac40caf6e17d788d0ef5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SphericalTensor</name>
      <anchorfile>a00578.html</anchorfile>
      <anchor>a22da278c0493447a847b0b3f1e232051</anchor>
      <arglist>(const int l_max, bool addsign=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00578.html</anchorfile>
      <anchor>a5a9eaa5ced1f9e3a15729fee5a472214</anchor>
      <arglist>(const Point_t &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateAll</name>
      <anchorfile>a00578.html</anchorfile>
      <anchor>a7d091cead81977b48856424b4e0e4b99</anchor>
      <arglist>(const Point_t &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateTest</name>
      <anchorfile>a00578.html</anchorfile>
      <anchor>a0f62fdb9460c8c2209194db613daf573</anchor>
      <arglist>(const Point_t &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateWithHessian</name>
      <anchorfile>a00578.html</anchorfile>
      <anchor>a956884db9aa3795942559a55735c79d8</anchor>
      <arglist>(const Point_t &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateThirdDerivOnly</name>
      <anchorfile>a00578.html</anchorfile>
      <anchor>ac6d03d2965f5af1e08e50a595a257f35</anchor>
      <arglist>(const Point_t &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>a00578.html</anchorfile>
      <anchor>aa786fa373d7f56ab0a6618591b2626b2</anchor>
      <arglist>(int l, int m) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getYlm</name>
      <anchorfile>a00578.html</anchorfile>
      <anchor>a4705276a6a1a18303862a950bdc966e4</anchor>
      <arglist>(int l, int m) const </arglist>
    </member>
    <member kind="function">
      <type>Point_t</type>
      <name>getGradYlm</name>
      <anchorfile>a00578.html</anchorfile>
      <anchor>a5c1a3fcbe4435f6c9e663c53af120487</anchor>
      <arglist>(int l, int m) const </arglist>
    </member>
    <member kind="function">
      <type>Tensor_t</type>
      <name>getHessYlm</name>
      <anchorfile>a00578.html</anchorfile>
      <anchor>a9d6fa159bc4329930a9e0635585e340f</anchor>
      <arglist>(int l, int m) const </arglist>
    </member>
    <member kind="function">
      <type>GGG_t</type>
      <name>getGGGYlm</name>
      <anchorfile>a00578.html</anchorfile>
      <anchor>a4913b8aa21a0aa0610c0cb1fb3b6c980</anchor>
      <arglist>(int lm) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getYlm</name>
      <anchorfile>a00578.html</anchorfile>
      <anchor>aa59133a1e45c64c9ec1d4b61ed7ed47d</anchor>
      <arglist>(int lm) const </arglist>
    </member>
    <member kind="function">
      <type>Point_t</type>
      <name>getGradYlm</name>
      <anchorfile>a00578.html</anchorfile>
      <anchor>ae6f9c530e9a2c33262f6f7286feff1c6</anchor>
      <arglist>(int lm) const </arglist>
    </member>
    <member kind="function">
      <type>Tensor_t</type>
      <name>getHessYlm</name>
      <anchorfile>a00578.html</anchorfile>
      <anchor>a685366e6dd9653a8e135a0f0a67f6604</anchor>
      <arglist>(int lm) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a00578.html</anchorfile>
      <anchor>ab8e4e3e2a7bf18888b71bdf9dda0770b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lmax</name>
      <anchorfile>a00578.html</anchorfile>
      <anchor>a3ee05af3d2969fdfa9dae867f93aa381</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Lmax</name>
      <anchorfile>a00578.html</anchorfile>
      <anchor>a66220f2712ab879767e2b0b1f3e79c1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; value_type &gt;</type>
      <name>Ylm</name>
      <anchorfile>a00578.html</anchorfile>
      <anchor>a3b6d9d3282eecf483f0deb52f03ac9f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; value_type &gt;</type>
      <name>NormFactor</name>
      <anchorfile>a00578.html</anchorfile>
      <anchor>aaa46903f1b3c12af1f00fde378e3c8f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; value_type &gt;</type>
      <name>FactorLM</name>
      <anchorfile>a00578.html</anchorfile>
      <anchor>a1ddf423fb066502b29d2ac94a68d8392</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; value_type &gt;</type>
      <name>FactorL</name>
      <anchorfile>a00578.html</anchorfile>
      <anchor>a55e69d02a9e03771454b7d168cffe266</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; value_type &gt;</type>
      <name>Factor2L</name>
      <anchorfile>a00578.html</anchorfile>
      <anchor>ad0755cda260c45ef452575f0d5fe5fc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Point_t &gt;</type>
      <name>gradYlm</name>
      <anchorfile>a00578.html</anchorfile>
      <anchor>a12d2effca8059baa15f056e675c72477</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; hess_type &gt;</type>
      <name>hessYlm</name>
      <anchorfile>a00578.html</anchorfile>
      <anchor>a1fe4d462a75cd0581b0689474f04b161</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; value_type &gt;</type>
      <name>laplYlm</name>
      <anchorfile>a00578.html</anchorfile>
      <anchor>a895476387cd8bd894677464d62b5760d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; ggg_type &gt;</type>
      <name>gggYlm</name>
      <anchorfile>a00578.html</anchorfile>
      <anchor>a7d0a55bf16bc39eb7f93cf8aebe23823</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SprngRandom</name>
    <filename>a00591.html</filename>
    <templarg>RNGT</templarg>
    <member kind="typedef">
      <type>double</type>
      <name>Return_t</name>
      <anchorfile>a00591.html</anchorfile>
      <anchor>aa7f3644023aeacb181617a38dca05af3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SprngRandom</name>
      <anchorfile>a00591.html</anchorfile>
      <anchor>ab39a139cdaca7dd648dd5eb2a7288ec0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SprngRandom</name>
      <anchorfile>a00591.html</anchorfile>
      <anchor>af219ee127848bdfd088a15d7e52f4932</anchor>
      <arglist>(const SprngRandom &amp;rng)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SprngRandom</name>
      <anchorfile>a00591.html</anchorfile>
      <anchor>a6bc363e444e0abceb0c8bc9f2bd25e4b</anchor>
      <arglist>(int i, int nstr, int iseed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SprngRandom</name>
      <anchorfile>a00591.html</anchorfile>
      <anchor>ad085c633875ab1b763eb4fbc375b4541</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00591.html</anchorfile>
      <anchor>ab03a1c2c0dacf5dd4e2f1270043ef80e</anchor>
      <arglist>(int i, int nstr, int iseed)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>getRandom</name>
      <anchorfile>a00591.html</anchorfile>
      <anchor>a2342aab9509f9d65c1d4a65342067cc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>operator()</name>
      <anchorfile>a00591.html</anchorfile>
      <anchor>af1c7ae0f64e46e640885b1ec757f487e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>irand</name>
      <anchorfile>a00591.html</anchorfile>
      <anchor>a9881a50bfa25a581a0f8b96db5877fd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00591.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a00591.html</anchorfile>
      <anchor>a3a5850f223852888735a74ed4a2af157</anchor>
      <arglist>(std::istream &amp;rin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a00591.html</anchorfile>
      <anchor>a1ac4fdb1e1af2ee3fdf1ec6a05f2f06c</anchor>
      <arglist>(std::ostream &amp;rout) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>myContext</name>
      <anchorfile>a00591.html</anchorfile>
      <anchor>afc93a1d32cd658cae503207115ed421f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nContexts</name>
      <anchorfile>a00591.html</anchorfile>
      <anchor>a43c65b80c956e839a01103ac7d19f905</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>baseSeed</name>
      <anchorfile>a00591.html</anchorfile>
      <anchor>afbcbab5a8053b0f52d9af80604acefd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>myStream</name>
      <anchorfile>a00591.html</anchorfile>
      <anchor>afffac68d4e463da629902882303c355c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>STONorm</name>
    <filename>a00595.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>STONorm</name>
      <anchorfile>a00595.html</anchorfile>
      <anchor>a8463a280602bb916e11da19fcda35fae</anchor>
      <arglist>(int nmax=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00595.html</anchorfile>
      <anchor>a0aba1375b66a8d0268ac4469d0e4dd2a</anchor>
      <arglist>(int nmax)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>a00595.html</anchorfile>
      <anchor>a05178f1434405a8e8cdffee8d412d794</anchor>
      <arglist>(int n, T screen)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; T &gt;</type>
      <name>Factorial</name>
      <anchorfile>a00595.html</anchorfile>
      <anchor>aff4314f5a93c8c245c9dab569ae96e69</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StreamIO</name>
    <filename>a00596.html</filename>
    <templarg></templarg>
    <base>OhmmsIOBase</base>
    <member kind="function">
      <type></type>
      <name>StreamIO</name>
      <anchorfile>a00596.html</anchorfile>
      <anchor>a66626681e3f330773a9f40c8162a8055</anchor>
      <arglist>(T &amp;a, ios_base::openmode mode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StreamIO</name>
      <anchorfile>a00596.html</anchorfile>
      <anchor>ada50a7157af5afbe6dfdc3d62c709c8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>open</name>
      <anchorfile>a00596.html</anchorfile>
      <anchor>a0779bd08d8f8d28725888bc0a0cdd7b6</anchor>
      <arglist>(const char *fname, ios_mode::openmode mode)</arglist>
    </member>
    <member kind="function">
      <type>inlin void</type>
      <name>setBuffer</name>
      <anchorfile>a00596.html</anchorfile>
      <anchor>a8ccae645f6679d6dc250692a956b87f1</anchor>
      <arglist>(iostream *ebuffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>a00596.html</anchorfile>
      <anchor>adac116554b543b7c4228c018a85882f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>a00596.html</anchorfile>
      <anchor>a5ae591df94fc66ccb85cbb6565368bca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>a00596.html</anchorfile>
      <anchor>af816873151ddb0126e98bb2f914d8ed5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>a00596.html</anchorfile>
      <anchor>affca47dab6f6f39340a977155de9227e</anchor>
      <arglist>(int iter)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T &amp;</type>
      <name>ref_</name>
      <anchorfile>a00596.html</anchorfile>
      <anchor>aca9486967090e05a18a9932e13ad394a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>iostream *</type>
      <name>m_buffer</name>
      <anchorfile>a00596.html</anchorfile>
      <anchor>a7dee88f83e2304bb439cdb2176ac1f37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>OwnBuffer</name>
      <anchorfile>a00596.html</anchorfile>
      <anchor>ad0f642d7026d216d375dd4b2751c33d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TagMaker</name>
    <filename>a00599.html</filename>
    <member kind="function">
      <type></type>
      <name>TagMaker</name>
      <anchorfile>a00599.html</anchorfile>
      <anchor>a912b9273d126cf7089b5a69c83d8b209</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TagMaker</name>
      <anchorfile>a00599.html</anchorfile>
      <anchor>ad8c2d7dcda79dbccd64991234da8d167</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>a00599.html</anchorfile>
      <anchor>a5c149bd86d27628e5b14862a5df20f88</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>MyTag</name>
      <anchorfile>a00599.html</anchorfile>
      <anchor>a7b77dcbc9c9d2144f839f6332a4668e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static int</type>
      <name>CurrentTag</name>
      <anchorfile>a00599.html</anchorfile>
      <anchor>a489788c91584325651dc90e0d1bbf5c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TestFunc</name>
    <filename>a00601.html</filename>
    <member kind="function">
      <type></type>
      <name>TestFunc</name>
      <anchorfile>a00601.html</anchorfile>
      <anchor>ad48d90af02aab693ef04b48cec7276ff</anchor>
      <arglist>(int nk0=1, int nk1=1, int nk2=1)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>f</name>
      <anchorfile>a00601.html</anchorfile>
      <anchor>a5828cf5306c49f6caf33ffcff8c5932f</anchor>
      <arglist>(const TinyVector&lt; double, 3 &gt; &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>f</name>
      <anchorfile>a00601.html</anchorfile>
      <anchor>ab20289e280d19ad17873627a807fd641</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>d2f</name>
      <anchorfile>a00601.html</anchorfile>
      <anchor>a06bac30b8a512891336206cc12720f09</anchor>
      <arglist>(const TinyVector&lt; double, 3 &gt; &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>d2f</name>
      <anchorfile>a00601.html</anchorfile>
      <anchor>a91e1d1101189d3ceb204659f69093be7</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>k0</name>
      <anchorfile>a00601.html</anchorfile>
      <anchor>a2eae00c779b56e8acbda352b2f814f45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>k1</name>
      <anchorfile>a00601.html</anchorfile>
      <anchor>a830ffdbe06791ff8f55f8070464e5023</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>k2</name>
      <anchorfile>a00601.html</anchorfile>
      <anchor>a5fa2323820f58decc76532df11cd3ab8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>d2factor</name>
      <anchorfile>a00601.html</anchorfile>
      <anchor>ac4e1eeab5dc8ce42f2278b1340093c00</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TextureSpline</name>
    <filename>a00602.html</filename>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00602.html</anchorfile>
      <anchor>a3c54ed391ba576405f5059a97cc8e7cd</anchor>
      <arglist>(float data[], int numPoints, float rmin, float rmax)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00602.html</anchorfile>
      <anchor>a9c607675b5e572d2a360a0f425c71a3e</anchor>
      <arglist>(double data[], int numPoints, double rmin, double rmax)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TextureSpline</name>
      <anchorfile>a00602.html</anchorfile>
      <anchor>aa2c8821e309d8396f42c8d326a29de2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TextureSpline</name>
      <anchorfile>a00602.html</anchorfile>
      <anchor>a787083b103c33d9bf39769e46c7a352b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>rMin</name>
      <anchorfile>a00602.html</anchorfile>
      <anchor>a93121e8630671e12125647cb2f61c1e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>rMax</name>
      <anchorfile>a00602.html</anchorfile>
      <anchor>abe177b92f2171dfb2e8007bfc21b5ebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumPoints</name>
      <anchorfile>a00602.html</anchorfile>
      <anchor>a76122faf62db75c06e32a6aca7ffd666</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>MyTexture</name>
      <anchorfile>a00602.html</anchorfile>
      <anchor>a5aaf0445d4439d7c8fec5e1fa971d186</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cudaArray *</type>
      <name>myArray</name>
      <anchorfile>a00602.html</anchorfile>
      <anchor>ac018c3889251c4188cf9c9e52537ca0a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TriDiagSolver</name>
    <filename>a00611.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>solve</name>
      <anchorfile>a00611.html</anchorfile>
      <anchor>aa2c9bf3cebe5dd5b14ef15b0678eb8ea</anchor>
      <arglist>(const CT &amp;a, const CT &amp;b, const CT &amp;c, const CT &amp;d, CT &amp;p, int n)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>UniformGridConnection&lt; T, 3 &gt;</name>
    <filename>a00620.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>CrystalLattice&lt; T, 3 &gt;</type>
      <name>ParticleLayout_t</name>
      <anchorfile>a00620.html</anchorfile>
      <anchor>a461102d11c2508b4c61600d5668347af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleLayout_t::SingleParticlePos_t</type>
      <name>SingleParticlePos_t</name>
      <anchorfile>a00620.html</anchorfile>
      <anchor>a765468dd500c494a68a7ef317581a6f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UniformGridConnection</name>
      <anchorfile>a00620.html</anchorfile>
      <anchor>a58555b38246b105f17035b3570017b07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>first</name>
      <anchorfile>a00620.html</anchorfile>
      <anchor>a630c7499031da9a977d87af12f24ef19</anchor>
      <arglist>(int ig) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>last</name>
      <anchorfile>a00620.html</anchorfile>
      <anchor>ac984f185b2cb7be10be9400f70603059</anchor>
      <arglist>(int ig) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>a00620.html</anchorfile>
      <anchor>a167dcb2fddba1c669b20b57614432ee1</anchor>
      <arglist>(int j) const </arglist>
    </member>
    <member kind="function">
      <type>SingleParticlePos_t</type>
      <name>bc</name>
      <anchorfile>a00620.html</anchorfile>
      <anchor>a0627294ec0d17f07096da8555cc6a55a</anchor>
      <arglist>(int j) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>connect</name>
      <anchorfile>a00620.html</anchorfile>
      <anchor>aee88f0c96eb754736ee2bfd8b18a2c83</anchor>
      <arglist>(const CrystalLattice&lt; T, 3 &gt; &amp;Lattice, T rmax, int glevel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00620.html</anchorfile>
      <anchor>a571580ea7471b01a50ca810c0cb59ebc</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>M</name>
      <anchorfile>a00620.html</anchorfile>
      <anchor>a5a0985ff672bee47dc7b155123f6390f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>ID</name>
      <anchorfile>a00620.html</anchorfile>
      <anchor>af68f872990b0fa9d4982994d23c67f68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; SingleParticlePos_t &gt;</type>
      <name>BC</name>
      <anchorfile>a00620.html</anchorfile>
      <anchor>accfc7937fd92e0ada3c8361f064fa2da</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>UOverRN</name>
    <filename>a00622.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Rin::value_type</type>
      <name>value_type</name>
      <anchorfile>a00622.html</anchorfile>
      <anchor>a11e406fa9e05e8c38eacdaf654945911</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Rin::point_type</type>
      <name>point_type</name>
      <anchorfile>a00622.html</anchorfile>
      <anchor>acca8c55365e4a793ce1788b22f7f193c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UOverRN</name>
      <anchorfile>a00622.html</anchorfile>
      <anchor>aacdd73c6e523a04361bd3b04995244f8</anchor>
      <arglist>(int x, Rin &amp;u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~UOverRN</name>
      <anchorfile>a00622.html</anchorfile>
      <anchor>adde4879d82beedd52c244ba2950b22ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setgrid</name>
      <anchorfile>a00622.html</anchorfile>
      <anchor>a02816091948d984bb87a47c2ef4a45ed</anchor>
      <arglist>(value_type r)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>f</name>
      <anchorfile>a00622.html</anchorfile>
      <anchor>a8e711a4822f8b9220a436aa499745102</anchor>
      <arglist>(value_type r) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>df</name>
      <anchorfile>a00622.html</anchorfile>
      <anchor>a770834b4da28ae1c3a3458b705ff30be</anchor>
      <arglist>(value_type r) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00622.html</anchorfile>
      <anchor>ac157ed48222619df0f2ea8350b301fcc</anchor>
      <arglist>(value_type r, value_type rinv)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>evaluate</name>
      <anchorfile>a00622.html</anchorfile>
      <anchor>afdd8307146280f0a218492803ce683ce</anchor>
      <arglist>(value_type r, value_type rinv, value_type &amp;drnl, value_type &amp;d2rnl)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>X</name>
      <anchorfile>a00622.html</anchorfile>
      <anchor>a80c0944640e62d3ed6c5419c1bcc0c88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Y</name>
      <anchorfile>a00622.html</anchorfile>
      <anchor>a8d2a59b309eebc2d59b99a23865e67e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>dY</name>
      <anchorfile>a00622.html</anchorfile>
      <anchor>a0199f71a22039479f0c198f8290f135f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>d2Y</name>
      <anchorfile>a00622.html</anchorfile>
      <anchor>a614f551230c22bd91ea75a162ae99162</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Rin &amp;</type>
      <name>U</name>
      <anchorfile>a00622.html</anchorfile>
      <anchor>a359a5fb6a26443108048320773ff9f2f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>OHMMS</name>
    <filename>a01415.html</filename>
    <class kind="struct">OHMMS::PLayoutFunc</class>
  </compound>
  <compound kind="struct">
    <name>OHMMS::PLayoutFunc</name>
    <filename>a00465.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>applyBC</name>
      <anchorfile>a00465.html</anchorfile>
      <anchor>a0b179254fc9d15a509bedacdebe7e2f5</anchor>
      <arglist>(const ParticleLayout_t &amp;Lattice, const ParticlePos_t &amp;pin, ParticlePos_t &amp;pout)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>applyBC</name>
      <anchorfile>a00465.html</anchorfile>
      <anchor>ab68e35395100e8e07d802b0fccbbb61e</anchor>
      <arglist>(const ParticleLayout_t &amp;Lattice, ParticlePos_t &amp;pos)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>qmcplusplus</name>
    <filename>a00008.html</filename>
    <class kind="struct">qmcplusplus::PtclAttribTraits</class>
    <class kind="struct">qmcplusplus::QMCTraits</class>
    <class kind="struct">qmcplusplus::PtclOnLatticeTraits</class>
    <class kind="class">qmcplusplus::NewTimer</class>
    <class kind="struct">qmcplusplus::TimerComparator</class>
    <class kind="class">qmcplusplus::TimerManagerClass</class>
    <class kind="class">qmcplusplus::ReportEngine</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; RandomGenerator_t &gt;</class>
    <class kind="struct">qmcplusplus::Timer</class>
    <class kind="class">qmcplusplus::MPIObjectBase</class>
    <class kind="struct">qmcplusplus::PosUnit</class>
    <class kind="struct">qmcplusplus::CrystalLattice</class>
    <class kind="struct">qmcplusplus::LatticeAnalyzer</class>
    <class kind="struct">qmcplusplus::LatticeAnalyzer&lt; T, 3 &gt;</class>
    <class kind="struct">qmcplusplus::LatticeAnalyzer&lt; T, 2 &gt;</class>
    <class kind="struct">qmcplusplus::LatticeAnalyzer&lt; T, 1 &gt;</class>
    <class kind="struct">qmcplusplus::DotProduct</class>
    <class kind="struct">qmcplusplus::DotProduct&lt; TinyVector&lt; T1, D &gt;, Tensor&lt; T2, D &gt;, false &gt;</class>
    <class kind="struct">qmcplusplus::DotProduct&lt; TinyVector&lt; T1, 3 &gt;, Tensor&lt; T2, 3 &gt;, false &gt;</class>
    <class kind="struct">qmcplusplus::DotProduct&lt; TinyVector&lt; T1, D &gt;, Tensor&lt; T2, D &gt;, true &gt;</class>
    <class kind="struct">qmcplusplus::DotProduct&lt; TinyVector&lt; T1, 3 &gt;, Tensor&lt; T2, 3 &gt;, true &gt;</class>
    <class kind="struct">qmcplusplus::CartesianNorm2</class>
    <class kind="struct">qmcplusplus::CartesianNorm2&lt; TinyVector&lt; T1, D &gt;, Tensor&lt; T2, D &gt;, false &gt;</class>
    <class kind="struct">qmcplusplus::CartesianNorm2&lt; TinyVector&lt; T1, 3 &gt;, Tensor&lt; T2, 3 &gt;, false &gt;</class>
    <class kind="struct">qmcplusplus::CartesianNorm2&lt; TinyVector&lt; T1, D &gt;, Tensor&lt; T2, D &gt;, true &gt;</class>
    <class kind="struct">qmcplusplus::CartesianNorm2&lt; TinyVector&lt; T1, 3 &gt;, Tensor&lt; T2, 3 &gt;, true &gt;</class>
    <class kind="struct">qmcplusplus::MinimumImageBConds</class>
    <class kind="struct">qmcplusplus::CheckBoxConds</class>
    <class kind="struct">qmcplusplus::CheckBoxConds&lt; T, 1 &gt;</class>
    <class kind="struct">qmcplusplus::CheckBoxConds&lt; T, 2 &gt;</class>
    <class kind="struct">qmcplusplus::CheckBoxConds&lt; T, 3 &gt;</class>
    <class kind="struct">qmcplusplus::makelattice</class>
    <class kind="struct">qmcplusplus::makelattice&lt; CrystalLattice&lt; T, D &gt; &gt;</class>
    <class kind="struct">qmcplusplus::makelattice&lt; CrystalLattice&lt; T, 1 &gt; &gt;</class>
    <class kind="struct">qmcplusplus::makelattice&lt; CrystalLattice&lt; T, 2 &gt; &gt;</class>
    <class kind="struct">qmcplusplus::makelattice&lt; CrystalLattice&lt; T, 3 &gt; &gt;</class>
    <class kind="struct">qmcplusplus::PowerOfN</class>
    <class kind="struct">qmcplusplus::PowerOfN&lt; N, 0 &gt;</class>
    <class kind="struct">qmcplusplus::DTD_BConds</class>
    <class kind="struct">qmcplusplus::DTD_BConds&lt; T, 2, SUPERCELL_BULK &gt;</class>
    <class kind="struct">qmcplusplus::DTD_BConds&lt; T, 2, PPPS &gt;</class>
    <class kind="struct">qmcplusplus::DTD_BConds&lt; T, 2, PPPO &gt;</class>
    <class kind="struct">qmcplusplus::DTD_BConds&lt; T, 2, SUPERCELL_WIRE &gt;</class>
    <class kind="struct">qmcplusplus::DTD_BConds&lt; T, 3, PPPO &gt;</class>
    <class kind="struct">qmcplusplus::DTD_BConds&lt; T, 3, PPPS &gt;</class>
    <class kind="struct">qmcplusplus::DTD_BConds&lt; T, 3, PPPG &gt;</class>
    <class kind="struct">qmcplusplus::DTD_BConds&lt; T, 3, PPNG &gt;</class>
    <class kind="struct">qmcplusplus::DTD_BConds&lt; T, 3, PPNO &gt;</class>
    <class kind="struct">qmcplusplus::DTD_BConds&lt; T, 3, PPNS &gt;</class>
    <class kind="struct">qmcplusplus::DTD_BConds&lt; T, 3, SUPERCELL_WIRE &gt;</class>
    <class kind="struct">qmcplusplus::DTD_BConds&lt; T, 3, PPPX &gt;</class>
    <class kind="struct">qmcplusplus::DTD_BConds&lt; T, 3, PPNX &gt;</class>
    <class kind="class">qmcplusplus::Uniform3DGridLayout</class>
    <class kind="struct">qmcplusplus::UniformCartesianGrid</class>
    <class kind="class">qmcplusplus::UniformCartesianGrid&lt; T, 3 &gt;</class>
    <class kind="class">qmcplusplus::UniformCartesianGrid&lt; T, 2 &gt;</class>
    <class kind="struct">qmcplusplus::LRCutoffEvaluator</class>
    <class kind="struct">qmcplusplus::UniformGridLayout</class>
    <class kind="struct">qmcplusplus::LRCutoffEvaluator&lt; T, 2, ORTHO &gt;</class>
    <class kind="struct">qmcplusplus::LRCutoffEvaluator&lt; T, 1, ORTHO &gt;</class>
    <class kind="struct">qmcplusplus::CreateLeaf&lt; ParticleAttrib&lt; T &gt; &gt;</class>
    <class kind="class">qmcplusplus::SizeLeafPA</class>
    <class kind="struct">qmcplusplus::LeafFunctor&lt; Scalar&lt; T &gt;, SizeLeafPA &gt;</class>
    <class kind="struct">qmcplusplus::LeafFunctor&lt; ParticleAttrib&lt; T &gt;, SizeLeafPA &gt;</class>
    <class kind="struct">qmcplusplus::LeafFunctor&lt; ParticleAttrib&lt; T &gt;, EvalLeaf1 &gt;</class>
    <class kind="class">qmcplusplus::ParticleAttrib</class>
    <class kind="class">qmcplusplus::ParticleBase</class>
    <class kind="struct">qmcplusplus::AsymmetricDTD</class>
    <class kind="struct">qmcplusplus::DistanceTable</class>
    <class kind="struct">qmcplusplus::PairDataType</class>
    <class kind="struct">qmcplusplus::TempDisplacement</class>
    <class kind="class">qmcplusplus::DistanceTableData</class>
    <class kind="struct">qmcplusplus::ConvertPosUnit</class>
    <class kind="struct">qmcplusplus::ConvertPosUnit&lt; ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt;, Tensor&lt; T, 3 &gt;, 3, true &gt;</class>
    <class kind="struct">qmcplusplus::ConvertPosUnit&lt; ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt;, Tensor&lt; T, 3 &gt;, 3, false &gt;</class>
    <class kind="struct">qmcplusplus::ConvertPosUnit&lt; ParticleAttrib&lt; TinyVector&lt; T, 2 &gt; &gt;, Tensor&lt; T, 2 &gt;, 2, true &gt;</class>
    <class kind="struct">qmcplusplus::ConvertPosUnit&lt; ParticleAttrib&lt; TinyVector&lt; T, 2 &gt; &gt;, Tensor&lt; T, 2 &gt;, 2, false &gt;</class>
    <class kind="struct">qmcplusplus::ApplyBConds</class>
    <class kind="struct">qmcplusplus::ApplyBConds&lt; ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt;, Tensor&lt; T, 3 &gt;, 3, true &gt;</class>
    <class kind="struct">qmcplusplus::ApplyBConds&lt; ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt;, Tensor&lt; T, 3 &gt;, 3, false &gt;</class>
    <class kind="struct">qmcplusplus::ApplyBConds&lt; ParticleAttrib&lt; TinyVector&lt; T, 2 &gt; &gt;, Tensor&lt; T, 2 &gt;, 2, true &gt;</class>
    <class kind="struct">qmcplusplus::ApplyBConds&lt; ParticleAttrib&lt; TinyVector&lt; T, 2 &gt; &gt;, Tensor&lt; T, 2 &gt;, 2, false &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; ParticleAttrib&lt; int &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; ParticleAttrib&lt; double &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; ParticleAttrib&lt; TinyVector&lt; double, 3 &gt; &gt; &gt;</class>
    <class kind="class">qmcplusplus::HDFWalkerInput0</class>
    <class kind="class">qmcplusplus::HDFWalkerInput_0_0</class>
    <class kind="struct">qmcplusplus::HDFWalkerInput_0_4</class>
    <class kind="class">qmcplusplus::HDFWalkerInputCollect</class>
    <class kind="class">qmcplusplus::HDFWalkerInputManager</class>
    <class kind="struct">qmcplusplus::HDFWalkerIOEngine</class>
    <class kind="class">qmcplusplus::HDFWalkerOutput</class>
    <class kind="struct">qmcplusplus::MCSample</class>
    <class kind="class">qmcplusplus::MCWalkerConfiguration</class>
    <class kind="struct">qmcplusplus::BoxBCHandler</class>
    <class kind="struct">qmcplusplus::BoxBCHandler&lt; T, 3, true &gt;</class>
    <class kind="struct">qmcplusplus::BoxBCHandler&lt; T, 3, false &gt;</class>
    <class kind="struct">qmcplusplus::MixedBCDTD</class>
    <class kind="struct">qmcplusplus::MCDataType</class>
    <class kind="class">qmcplusplus::ParticleSet</class>
    <class kind="struct">qmcplusplus::D2OnSphere</class>
    <class kind="struct">qmcplusplus::D1OnSphere</class>
    <class kind="struct">qmcplusplus::DistTableOnSphere</class>
    <class kind="struct">qmcplusplus::MultiMoveHandler</class>
    <class kind="class">qmcplusplus::Reptile</class>
    <class kind="struct">qmcplusplus::SymmetricDTD</class>
    <class kind="struct">qmcplusplus::Walker</class>
    <class kind="struct">qmcplusplus::ESHDFElectronsParser</class>
    <class kind="struct">qmcplusplus::ESHDFIonsParser</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; ParticleAttrib&lt; TinyVector&lt; double, D &gt; &gt; &gt;</class>
    <class kind="class">qmcplusplus::HDFParticleParser</class>
    <class kind="class">qmcplusplus::HDFSaveParticle</class>
    <class kind="class">qmcplusplus::LatticeParser</class>
    <class kind="class">qmcplusplus::LatticeXMLWriter</class>
    <class kind="struct">qmcplusplus::ParticleAttribXmlNode</class>
    <class kind="class">qmcplusplus::XMLParticleParser</class>
    <class kind="class">qmcplusplus::XMLSaveParticle</class>
    <class kind="struct">qmcplusplus::HDFAttribIOBase</class>
    <class kind="struct">qmcplusplus::HDFAttribIO</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; string &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; std::ostringstream &gt;</class>
    <class kind="class">qmcplusplus::TinyVector</class>
    <class kind="struct">qmcplusplus::printTinyVector</class>
    <class kind="struct">qmcplusplus::printTinyVector&lt; TinyVector&lt; T, D &gt; &gt;</class>
    <class kind="struct">qmcplusplus::printTinyVector&lt; TinyVector&lt; T, 2 &gt; &gt;</class>
    <class kind="struct">qmcplusplus::printTinyVector&lt; TinyVector&lt; T, 3 &gt; &gt;</class>
    <class kind="class">qmcplusplus::SymTensor</class>
    <class kind="class">qmcplusplus::AntiSymTensor</class>
    <class kind="class">qmcplusplus::Tensor</class>
    <class kind="class">qmcplusplus::Vector</class>
    <class kind="struct">qmcplusplus::CreateLeaf&lt; Vector&lt; T, C &gt; &gt;</class>
    <class kind="class">qmcplusplus::SizeLeaf</class>
    <class kind="struct">qmcplusplus::LeafFunctor&lt; Scalar&lt; T &gt;, SizeLeaf &gt;</class>
    <class kind="struct">qmcplusplus::LeafFunctor&lt; Vector&lt; T, C &gt;, SizeLeaf &gt;</class>
    <class kind="struct">qmcplusplus::LeafFunctor&lt; Vector&lt; T, C &gt;, EvalLeaf1 &gt;</class>
    <class kind="class">qmcplusplus::Matrix</class>
    <class kind="struct">qmcplusplus::CreateLeaf&lt; Matrix&lt; T, C &gt; &gt;</class>
    <class kind="class">qmcplusplus::SizeLeaf2</class>
    <class kind="struct">qmcplusplus::LeafFunctor&lt; Scalar&lt; T &gt;, SizeLeaf2 &gt;</class>
    <class kind="struct">qmcplusplus::LeafFunctor&lt; Matrix&lt; T, C &gt;, SizeLeaf2 &gt;</class>
    <class kind="struct">qmcplusplus::LeafFunctor&lt; Matrix&lt; T, C &gt;, EvalLeaf2 &gt;</class>
    <class kind="struct">qmcplusplus::ProjectData</class>
    <class kind="class">qmcplusplus::RandomNumberControl</class>
    <class kind="struct">qmcplusplus::GEMV</class>
    <class kind="struct">qmcplusplus::GEMV&lt; T, 3 &gt;</class>
    <class kind="struct">qmcplusplus::const_traits</class>
    <class kind="struct">qmcplusplus::const_traits&lt; double &gt;</class>
    <class kind="struct">qmcplusplus::const_traits&lt; std::complex&lt; double &gt; &gt;</class>
    <class kind="class">qmcplusplus::ComplexExpFitClass</class>
    <class kind="class">qmcplusplus::ExpFitClass</class>
    <class kind="class">qmcplusplus::FFTAbleVectorBase</class>
    <class kind="class">qmcplusplus::FFTAbleVector</class>
    <class kind="class">qmcplusplus::FFTWEngine</class>
    <class kind="class">qmcplusplus::FFTWEngine&lt; dimensions, std::complex&lt; double &gt; &gt;</class>
    <class kind="class">qmcplusplus::FFTWEngine&lt; dimensions, std::complex&lt; long double &gt; &gt;</class>
    <class kind="class">qmcplusplus::FFTWEngine&lt; dimensions, std::complex&lt; float &gt; &gt;</class>
    <class kind="struct">qmcplusplus::GridBCond</class>
    <class kind="struct">qmcplusplus::GridBCond&lt; T, FIXED_GBC &gt;</class>
    <class kind="struct">qmcplusplus::GridBCond&lt; T, PERIODIC_GBC &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; hsize_t &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; unsigned long &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; int &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; double &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; TinyVector&lt; double, D &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; Tensor&lt; double, D &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; TinyVector&lt; int, D &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; std::vector&lt; TinyVector&lt; int, D &gt; &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; std::vector&lt; TinyVector&lt; double, D &gt; &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; Vector&lt; double &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; Vector&lt; std::complex&lt; double &gt; &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; Vector&lt; int &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; Vector&lt; TinyVector&lt; double, D &gt; &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; Matrix&lt; double &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; Matrix&lt; TinyVector&lt; double, D &gt; &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; Array&lt; double, D &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; Array&lt; complex&lt; double &gt;, D &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; std::vector&lt; int &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; std::vector&lt; double &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; std::vector&lt; std::complex&lt; double &gt; &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; std::bitset&lt; N &gt; &gt;</class>
    <class kind="struct">qmcplusplus::MatrixOperators</class>
    <class kind="class">qmcplusplus::OneDimCubicSplineFirst</class>
    <class kind="class">qmcplusplus::OneDimCubicSplinePBC</class>
    <class kind="class">qmcplusplus::OneDimCubicSpline</class>
    <class kind="struct">qmcplusplus::OneDimGridBase</class>
    <class kind="struct">qmcplusplus::LinearGrid</class>
    <class kind="struct">qmcplusplus::LogGrid</class>
    <class kind="struct">qmcplusplus::LogGridZero</class>
    <class kind="struct">qmcplusplus::NumericalGrid</class>
    <class kind="struct">qmcplusplus::FunctorBase</class>
    <class kind="struct">qmcplusplus::OneDimGridFunctor</class>
    <class kind="class">qmcplusplus::OneDimConstFunctor</class>
    <class kind="class">qmcplusplus::OneDimLinearSpline</class>
    <class kind="struct">qmcplusplus::OneDimNumGridFunctor</class>
    <class kind="class">qmcplusplus::OneDimQuinticSpline</class>
    <class kind="struct">qmcplusplus::SymmetryGroup</class>
    <class kind="class">qmcplusplus::SymmetryBuilder</class>
    <class kind="struct">qmcplusplus::XYZCubicGrid</class>
    <class kind="class">qmcplusplus::AFMSPOBuilder</class>
    <class kind="class">qmcplusplus::AFMSPOSet</class>
    <class kind="class">qmcplusplus::AGPDeterminant</class>
    <class kind="class">qmcplusplus::AGPDeterminantBuilder</class>
    <class kind="struct">qmcplusplus::AtomicOrbitalTraits</class>
    <class kind="struct">qmcplusplus::AtomicOrbitalTraits&lt; double &gt;</class>
    <class kind="struct">qmcplusplus::AtomicOrbitalTraits&lt; complex&lt; double &gt; &gt;</class>
    <class kind="class">qmcplusplus::AtomicOrbital</class>
    <class kind="struct">qmcplusplus::HePresetHF</class>
    <class kind="struct">qmcplusplus::HePresetHFBuilder</class>
    <class kind="struct">qmcplusplus::ComboSTO</class>
    <class kind="struct">qmcplusplus::HFAtomicSTOSet</class>
    <class kind="class">qmcplusplus::HFAtomicSTOSetBuilder</class>
    <class kind="struct">qmcplusplus::BasisSetBase</class>
    <class kind="struct">qmcplusplus::BasisSetBuilder</class>
    <class kind="class">qmcplusplus::BasisSetFactory</class>
    <class kind="struct">qmcplusplus::DistributedSPOSet</class>
    <class kind="struct">qmcplusplus::DummyBasisSet</class>
    <class kind="struct">qmcplusplus::einspline_traits</class>
    <class kind="struct">qmcplusplus::einspline_traits&lt; double, 3 &gt;</class>
    <class kind="struct">qmcplusplus::einspline_traits&lt; complex&lt; double &gt;, 3 &gt;</class>
    <class kind="struct">qmcplusplus::einspline_traits&lt; float, 3 &gt;</class>
    <class kind="struct">qmcplusplus::einspline_traits&lt; complex&lt; float &gt;, 3 &gt;</class>
    <class kind="struct">qmcplusplus::SplineAdoptorBase</class>
    <class kind="struct">qmcplusplus::VectorViewer</class>
    <class kind="struct">qmcplusplus::BsplineSet</class>
    <class kind="class">qmcplusplus::EinsplineOrb</class>
    <class kind="class">qmcplusplus::EinsplineSet</class>
    <class kind="struct">qmcplusplus::MultiOrbitalTraits</class>
    <class kind="struct">qmcplusplus::MultiOrbitalTraits&lt; double, 2 &gt;</class>
    <class kind="struct">qmcplusplus::MultiOrbitalTraits&lt; complex&lt; double &gt;, 2 &gt;</class>
    <class kind="struct">qmcplusplus::MultiOrbitalTraits&lt; float, 2 &gt;</class>
    <class kind="struct">qmcplusplus::MultiOrbitalTraits&lt; complex&lt; float &gt;, 2 &gt;</class>
    <class kind="struct">qmcplusplus::MultiOrbitalTraits&lt; double, 3 &gt;</class>
    <class kind="struct">qmcplusplus::MultiOrbitalTraits&lt; complex&lt; double &gt;, 3 &gt;</class>
    <class kind="struct">qmcplusplus::MultiOrbitalTraits&lt; float, 3 &gt;</class>
    <class kind="struct">qmcplusplus::MultiOrbitalTraits&lt; complex&lt; float &gt;, 3 &gt;</class>
    <class kind="class">qmcplusplus::EinsplineSetExtended</class>
    <class kind="struct">qmcplusplus::Int3less</class>
    <class kind="struct">qmcplusplus::Int4less</class>
    <class kind="struct">qmcplusplus::H5OrbSet</class>
    <class kind="struct">qmcplusplus::BandInfo</class>
    <class kind="class">qmcplusplus::EinsplineSetBuilder</class>
    <class kind="class">qmcplusplus::EinsplineSetLocal</class>
    <class kind="struct">qmcplusplus::EGOSet</class>
    <class kind="class">qmcplusplus::ElectronGasComplexOrbitalBuilder</class>
    <class kind="class">qmcplusplus::ElectronGasBasisBuilder</class>
    <class kind="struct">qmcplusplus::RealEGOSet</class>
    <class kind="class">qmcplusplus::ElectronGasOrbitalBuilder</class>
    <class kind="struct">qmcplusplus::HEGGrid</class>
    <class kind="struct">qmcplusplus::HEGGrid&lt; T, 3 &gt;</class>
    <class kind="struct">qmcplusplus::HEGGrid&lt; T, 2 &gt;</class>
    <class kind="class">qmcplusplus::Backflow_ee</class>
    <class kind="class">qmcplusplus::Backflow_ee_kSpace</class>
    <class kind="class">qmcplusplus::Backflow_eI</class>
    <class kind="class">qmcplusplus::Backflow_eI_spin</class>
    <class kind="class">qmcplusplus::BackflowBuilder</class>
    <class kind="class">qmcplusplus::BackflowFunctionBase</class>
    <class kind="class">qmcplusplus::BackflowTransformation</class>
    <class kind="struct">qmcplusplus::BFsplineFunctor</class>
    <class kind="struct">qmcplusplus::ci_builder</class>
    <class kind="struct">qmcplusplus::ci_configuration</class>
    <class kind="struct">qmcplusplus::ci_configuration2</class>
    <class kind="struct">qmcplusplus::ci_node</class>
    <class kind="class">qmcplusplus::DiracDeterminantAFM</class>
    <class kind="class">qmcplusplus::DiracDeterminantBase</class>
    <class kind="class">qmcplusplus::DiracDeterminantCUDA</class>
    <class kind="class">qmcplusplus::DiracDeterminantIterative</class>
    <class kind="class">qmcplusplus::DiracDeterminantOpt</class>
    <class kind="class">qmcplusplus::DiracDeterminantT</class>
    <class kind="class">qmcplusplus::DiracDeterminantTruncation</class>
    <class kind="class">qmcplusplus::DiracDeterminantWithBackflow</class>
    <class kind="struct">qmcplusplus::excitation_node</class>
    <class kind="class">qmcplusplus::ExcitationClass</class>
    <class kind="struct">qmcplusplus::GaussianFunctor</class>
    <class kind="class">qmcplusplus::MultiDiracDeterminantBase</class>
    <class kind="struct">qmcplusplus::MyDeterminant</class>
    <class kind="class">qmcplusplus::MultiSlaterDeterminant</class>
    <class kind="class">qmcplusplus::MultiSlaterDeterminantFast</class>
    <class kind="class">qmcplusplus::MultiSlaterDeterminantWithBackflow</class>
    <class kind="class">qmcplusplus::RNDiracDeterminantBase</class>
    <class kind="class">qmcplusplus::RNDiracDeterminantBaseAlternate</class>
    <class kind="class">qmcplusplus::SlaterDet</class>
    <class kind="class">qmcplusplus::SlaterDetBuilder</class>
    <class kind="class">qmcplusplus::SlaterDetWithBackflow</class>
    <class kind="struct">qmcplusplus::SPOSetProxy</class>
    <class kind="struct">qmcplusplus::SPOSetProxyForMSD</class>
    <class kind="struct">qmcplusplus::FermionBase</class>
    <class kind="struct">qmcplusplus::GroupedOrbitalSet</class>
    <class kind="struct">qmcplusplus::IonOrbital</class>
    <class kind="class">qmcplusplus::IonOrbitalBuilder</class>
    <class kind="struct">qmcplusplus::BesselZero</class>
    <class kind="struct">qmcplusplus::BsplineFunctor</class>
    <class kind="struct">qmcplusplus::BsplineFunctor3D</class>
    <class kind="struct">qmcplusplus::BsplineInitializer</class>
    <class kind="struct">qmcplusplus::BsplineJastrowBuilder</class>
    <class kind="class">qmcplusplus::CBSOBuilder</class>
    <class kind="struct">qmcplusplus::TruncatedPadeFunctor</class>
    <class kind="struct">qmcplusplus::AnyTimesRnFunctor</class>
    <class kind="struct">qmcplusplus::CuspCorrectionFunctor</class>
    <class kind="struct">qmcplusplus::DCuspCorrectionDEFunctor</class>
    <class kind="class">qmcplusplus::CubicBsplineGroup</class>
    <class kind="struct">qmcplusplus::CudaSpline</class>
    <class kind="struct">qmcplusplus::DPadeDBFunctor</class>
    <class kind="struct">qmcplusplus::D2PadeDB2Functor</class>
    <class kind="struct">qmcplusplus::DWMDBFunctor</class>
    <class kind="struct">qmcplusplus::D2WMDB2Functor</class>
    <class kind="class">qmcplusplus::DiffOneBodyJastrowOrbital</class>
    <class kind="class">qmcplusplus::DiffOneBodySpinJastrowOrbital</class>
    <class kind="class">qmcplusplus::DiffTwoBodyJastrowOrbital</class>
    <class kind="struct">qmcplusplus::eeI_JastrowBuilder</class>
    <class kind="struct">qmcplusplus::IonData</class>
    <class kind="class">qmcplusplus::eeI_JastrowOrbital</class>
    <class kind="struct">qmcplusplus::TruncatedShiftedGaussianFunctor</class>
    <class kind="struct">qmcplusplus::JAABuilder</class>
    <class kind="struct">qmcplusplus::JABBuilder</class>
    <class kind="class">qmcplusplus::JastrowBasisBuilder</class>
    <class kind="class">qmcplusplus::JastrowBuilder</class>
    <class kind="struct">qmcplusplus::magLess</class>
    <class kind="struct">qmcplusplus::RPA0</class>
    <class kind="class">qmcplusplus::kSpaceCoef</class>
    <class kind="class">qmcplusplus::kSpaceJastrow</class>
    <class kind="struct">qmcplusplus::kSpaceJastrowBuilder</class>
    <class kind="struct">qmcplusplus::YukawaBreakup</class>
    <class kind="struct">qmcplusplus::DerivRPABreakup</class>
    <class kind="struct">qmcplusplus::RPABreakup</class>
    <class kind="struct">qmcplusplus::DerivYukawaBreakup</class>
    <class kind="struct">qmcplusplus::EPRPABreakup</class>
    <class kind="struct">qmcplusplus::derivEPRPABreakup</class>
    <class kind="struct">qmcplusplus::ShortRangePartAdapter</class>
    <class kind="struct">qmcplusplus::RPABFeeBreakup</class>
    <class kind="class">qmcplusplus::LRTwoBodyJastrow</class>
    <class kind="struct">qmcplusplus::McMillanJ2Functor</class>
    <class kind="struct">qmcplusplus::ModMcMillanJ2Functor</class>
    <class kind="struct">qmcplusplus::comboMcMillanJ2Functor</class>
    <class kind="struct">qmcplusplus::McMillanJ2GFunctor</class>
    <class kind="struct">qmcplusplus::ModPadeFunctor</class>
    <class kind="struct">qmcplusplus::CutoffFunctor</class>
    <class kind="struct">qmcplusplus::NumericalJastrow</class>
    <class kind="class">qmcplusplus::OneBodyJastrowOrbital</class>
    <class kind="class">qmcplusplus::OneBodyJastrowOrbitalBspline</class>
    <class kind="class">qmcplusplus::OneBodySpinJastrowOrbital</class>
    <class kind="struct">qmcplusplus::OpenGaussianSlaterFunctor</class>
    <class kind="struct">qmcplusplus::PadeFunctor</class>
    <class kind="struct">qmcplusplus::Pade2ndOrderFunctor</class>
    <class kind="struct">qmcplusplus::PadeTwo2ndOrderFunctor</class>
    <class kind="struct">qmcplusplus::ScaledPadeFunctor</class>
    <class kind="struct">qmcplusplus::PadeJastrowBuilder</class>
    <class kind="class">qmcplusplus::PolarizedJastrow</class>
    <class kind="struct">qmcplusplus::PolyConstraints</class>
    <class kind="struct">qmcplusplus::PolyFunctor</class>
    <class kind="struct">qmcplusplus::PolynomialFunctor3D</class>
    <class kind="struct">qmcplusplus::RPAJastrow</class>
    <class kind="struct">qmcplusplus::RPAJastrowFunctor</class>
    <class kind="struct">qmcplusplus::singleRPAJastrowBuilder</class>
    <class kind="struct">qmcplusplus::CubicSplineSingle</class>
    <class kind="struct">qmcplusplus::CubicSplineBasisSet</class>
    <class kind="class">qmcplusplus::ThreeBodyBlockSparse</class>
    <class kind="class">qmcplusplus::ThreeBodyGeminal</class>
    <class kind="class">qmcplusplus::ThreeBodyGeminalBuilder</class>
    <class kind="class">qmcplusplus::ThreeBodyJastrowOrbital</class>
    <class kind="class">qmcplusplus::ThreeBodyPade</class>
    <class kind="class">qmcplusplus::ThreeBodyPadeBuilder</class>
    <class kind="class">qmcplusplus::TwoBodyJastrow</class>
    <class kind="class">qmcplusplus::TwoBodyJastrow&lt; FT, false &gt;</class>
    <class kind="class">qmcplusplus::TwoBodyJastrow&lt; FT, true &gt;</class>
    <class kind="class">qmcplusplus::TwoBodyJastrowOrbital</class>
    <class kind="class">qmcplusplus::TwoBodyJastrowOrbitalBspline</class>
    <class kind="struct">qmcplusplus::WMFunctor</class>
    <class kind="struct">qmcplusplus::WMFunctorSet</class>
    <class kind="class">qmcplusplus::WMJastrowBuilder</class>
    <class kind="class">qmcplusplus::LCOrbitals</class>
    <class kind="class">qmcplusplus::LCOrbitalSet</class>
    <class kind="class">qmcplusplus::LCOrbitalSet&lt; BS, true &gt;</class>
    <class kind="class">qmcplusplus::LCOrbitalSet&lt; BS, false &gt;</class>
    <class kind="struct">qmcplusplus::LocalizedBasisSet</class>
    <class kind="class">qmcplusplus::MixedSPOSet</class>
    <class kind="struct">qmcplusplus::AtomicBasisBuilder</class>
    <class kind="class">qmcplusplus::BsplineAOBuilder</class>
    <class kind="class">qmcplusplus::GTOBuilder</class>
    <class kind="class">qmcplusplus::MolecularBasisBuilder</class>
    <class kind="struct">qmcplusplus::PadeOrbital</class>
    <class kind="struct">qmcplusplus::NGOrbital</class>
    <class kind="class">qmcplusplus::NGOBuilder</class>
    <class kind="class">qmcplusplus::STOBuilder</class>
    <class kind="class">qmcplusplus::MuffinTinClass</class>
    <class kind="class">qmcplusplus::OptimizableSPOBuilder</class>
    <class kind="class">qmcplusplus::OptimizableSPOSet</class>
    <class kind="struct">qmcplusplus::OrbitalBase</class>
    <class kind="class">qmcplusplus::OrbitalBuilderBase</class>
    <class kind="struct">qmcplusplus::OrbitalConstraintsBase</class>
    <class kind="struct">qmcplusplus::DummyGrid</class>
    <class kind="struct">qmcplusplus::OrbitalSetTraits</class>
    <class kind="class">qmcplusplus::PWBasis</class>
    <class kind="class">qmcplusplus::PWOrbitalBuilder</class>
    <class kind="class">qmcplusplus::PWOrbitalSet</class>
    <class kind="struct">qmcplusplus::PWParameterSet</class>
    <class kind="class">qmcplusplus::PWRealOrbitalSet</class>
    <class kind="struct">qmcplusplus::ProductOrbital</class>
    <class kind="struct">qmcplusplus::SparseLocalizedBasisSet</class>
    <class kind="struct">qmcplusplus::SphericalBasisSet</class>
    <class kind="struct">qmcplusplus::SphericalOrbitalSet</class>
    <class kind="struct">qmcplusplus::BsplineReaderBase</class>
    <class kind="struct">qmcplusplus::SplineAdoptorReader</class>
    <class kind="struct">qmcplusplus::SplineC2CPackedAdoptor</class>
    <class kind="struct">qmcplusplus::SplineC2RPackedAdoptor</class>
    <class kind="struct">qmcplusplus::hdf_dual_grid</class>
    <class kind="struct">qmcplusplus::SplineMixedAdoptor</class>
    <class kind="struct">qmcplusplus::SplineOpenAdoptor</class>
    <class kind="struct">qmcplusplus::SplineMixedAdoptorReader</class>
    <class kind="struct">qmcplusplus::SplineR2RAdoptor</class>
    <class kind="class">qmcplusplus::SPOSetBase</class>
    <class kind="struct">qmcplusplus::CoefficientHolder</class>
    <class kind="class">qmcplusplus::TrialWaveFunction</class>
    <class kind="struct">qmcplusplus::WaveFunctionFactory</class>
    <class kind="struct">qmcplusplus::BareKineticEnergy</class>
    <class kind="class">qmcplusplus::ChiesaCorrection</class>
    <class kind="struct">qmcplusplus::ConservedEnergy</class>
    <class kind="struct">qmcplusplus::CoulombAA_CUDA</class>
    <class kind="struct">qmcplusplus::CoulombAB_CUDA</class>
    <class kind="struct">qmcplusplus::CoulombPBCAA</class>
    <class kind="struct">qmcplusplus::CoulombPBCAA_CUDA</class>
    <class kind="struct">qmcplusplus::CoulombPBCAB</class>
    <class kind="struct">qmcplusplus::CoulombPBCAB_CUDA</class>
    <class kind="struct">qmcplusplus::CoulombPotential</class>
    <class kind="struct">qmcplusplus::CoulombPotentialAA_CUDA</class>
    <class kind="struct">qmcplusplus::CoulombPotentialAB_CUDA</class>
    <class kind="class">qmcplusplus::DensityEstimator</class>
    <class kind="struct">qmcplusplus::ECPComponentBuilder</class>
    <class kind="struct">qmcplusplus::ECPotentialBuilder</class>
    <class kind="struct">qmcplusplus::EffMKineticEnergy</class>
    <class kind="struct">qmcplusplus::ForceBase</class>
    <class kind="struct">qmcplusplus::BareForce</class>
    <class kind="struct">qmcplusplus::ForceCeperley</class>
    <class kind="struct">qmcplusplus::ForwardWalking</class>
    <class kind="struct">qmcplusplus::FSAtomPseudoPot</class>
    <class kind="struct">qmcplusplus::GaussianPot</class>
    <class kind="struct">qmcplusplus::HamiltonianFactory</class>
    <class kind="struct">qmcplusplus::HardSphere</class>
    <class kind="struct">qmcplusplus::HarmonicPotential</class>
    <class kind="struct">qmcplusplus::HeePotential</class>
    <class kind="struct">qmcplusplus::HeePotential_tail</class>
    <class kind="struct">qmcplusplus::HePressure</class>
    <class kind="struct">qmcplusplus::HeSAPT_smoothed_phy</class>
    <class kind="struct">qmcplusplus::HeSAPT_smoothed_aux</class>
    <class kind="struct">qmcplusplus::HFDBHE_smoothed_phy</class>
    <class kind="struct">qmcplusplus::HFDBHE_smoothed_aux</class>
    <class kind="struct">qmcplusplus::HFDHE2_Moroni1995_phy</class>
    <class kind="struct">qmcplusplus::HFDHE2_Moroni1995_aux</class>
    <class kind="struct">qmcplusplus::HFDHE2Potential</class>
    <class kind="struct">qmcplusplus::HFDHE2Potential_tail</class>
    <class kind="struct">qmcplusplus::HusePot</class>
    <class kind="struct">qmcplusplus::JelliumPotential</class>
    <class kind="struct">qmcplusplus::LennardJones_smoothed_phy</class>
    <class kind="struct">qmcplusplus::LennardJones_smoothed_aux</class>
    <class kind="struct">qmcplusplus::LocalCorePolPotential</class>
    <class kind="struct">qmcplusplus::LocalECPotential</class>
    <class kind="struct">qmcplusplus::LocalECPotential_CUDA</class>
    <class kind="class">qmcplusplus::LocalMomentEstimator</class>
    <class kind="struct">qmcplusplus::LocalPPotential</class>
    <class kind="class">qmcplusplus::ModInsKineticEnergy</class>
    <class kind="struct">qmcplusplus::ModPoschlTeller</class>
    <class kind="class">qmcplusplus::PtclChoiceBase</class>
    <class kind="class">qmcplusplus::RandomChoice</class>
    <class kind="class">qmcplusplus::RandomChoicePerWalker</class>
    <class kind="class">qmcplusplus::StaticChoice</class>
    <class kind="class">qmcplusplus::MomDistBase</class>
    <class kind="class">qmcplusplus::FFTMomentumDist</class>
    <class kind="class">qmcplusplus::ThreeDimMomDist</class>
    <class kind="class">qmcplusplus::OneDimMomDist</class>
    <class kind="class">qmcplusplus::AveragedOneDimMomDist</class>
    <class kind="class">qmcplusplus::DirectMomDist</class>
    <class kind="class">qmcplusplus::RandomMomDist</class>
    <class kind="class">qmcplusplus::MomentumEstimator</class>
    <class kind="class">qmcplusplus::MPC</class>
    <class kind="class">qmcplusplus::MPC_CUDA</class>
    <class kind="struct">qmcplusplus::NonLocalECPComponent</class>
    <class kind="struct">qmcplusplus::NonLocalECPotential</class>
    <class kind="class">qmcplusplus::NonLocalECPotential_CUDA</class>
    <class kind="struct">qmcplusplus::NonLocalTOperator</class>
    <class kind="struct">qmcplusplus::NumberFluctuations</class>
    <class kind="struct">qmcplusplus::NumericalRadialPotential</class>
    <class kind="struct">qmcplusplus::observable_helper</class>
    <class kind="class">qmcplusplus::OneBodyDensityMatrix</class>
    <class kind="struct">qmcplusplus::OscillatoryPotential</class>
    <class kind="class">qmcplusplus::PairCorrEstimator</class>
    <class kind="struct">qmcplusplus::PolarizationPotential</class>
    <class kind="struct">qmcplusplus::Pressure</class>
    <class kind="struct">qmcplusplus::PulayForce</class>
    <class kind="class">qmcplusplus::QMCHamiltonian</class>
    <class kind="struct">qmcplusplus::NonLocalData</class>
    <class kind="struct">qmcplusplus::QMCHamiltonianBase</class>
    <class kind="class">qmcplusplus::SkEstimator</class>
    <class kind="class">qmcplusplus::SkEstimator_CUDA</class>
    <class kind="class">qmcplusplus::SkPot</class>
    <class kind="struct">qmcplusplus::Spline3DPotential</class>
    <class kind="struct">qmcplusplus::TriCubicSplinePotential</class>
    <class kind="class">qmcplusplus::VHXC</class>
    <class kind="struct">qmcplusplus::ZeroVarianceForce</class>
    <class kind="struct">qmcplusplus::GTO2GridBuilder</class>
    <class kind="class">qmcplusplus::HDFWalkerMerger</class>
    <class kind="class">qmcplusplus::MolecularOrbitalBasis</class>
    <class kind="struct">qmcplusplus::RGFBuilderBase</class>
    <class kind="struct">qmcplusplus::STO2GridBuilder</class>
    <class kind="class">qmcplusplus::AlternateReleasedNodeEnergyEstimator</class>
    <class kind="class">qmcplusplus::CollectablesEstimator</class>
    <class kind="struct">qmcplusplus::ComboPolymerEstimator</class>
    <class kind="struct">qmcplusplus::CompositeEstimatorBase</class>
    <class kind="struct">qmcplusplus::CompositeEstimatorSet</class>
    <class kind="struct">qmcplusplus::CSEnergyEstimator</class>
    <class kind="struct">qmcplusplus::CSPolymerEstimator</class>
    <class kind="struct">qmcplusplus::DMCEnergyEstimator</class>
    <class kind="class">qmcplusplus::EstimatorManager</class>
    <class kind="class">qmcplusplus::ForwardWalkingEstimator</class>
    <class kind="struct">qmcplusplus::HFDHE2PolymerEstimator</class>
    <class kind="struct">qmcplusplus::HFPolymerEstimator</class>
    <class kind="class">qmcplusplus::LocalEnergyEstimator</class>
    <class kind="class">qmcplusplus::LocalEnergyEstimatorHDF</class>
    <class kind="struct">qmcplusplus::LocalEnergyOnlyEstimator</class>
    <class kind="struct">qmcplusplus::MJPolymerEstimator</class>
    <class kind="struct">qmcplusplus::MultipleEnergyEstimator</class>
    <class kind="class">qmcplusplus::PolarizationEstimator</class>
    <class kind="struct">qmcplusplus::PolymerEstimator</class>
    <class kind="class">qmcplusplus::ReleasedNodeEnergyEstimator</class>
    <class kind="struct">qmcplusplus::ReptileCorrelationEstimator</class>
    <class kind="struct">qmcplusplus::ReptileEstimator</class>
    <class kind="struct">qmcplusplus::ReptileStatistics</class>
    <class kind="class">qmcplusplus::RMCLocalEnergyEstimator</class>
    <class kind="struct">qmcplusplus::RQMCEstimator</class>
    <class kind="struct">qmcplusplus::ScalarEstimatorBase</class>
    <class kind="struct">qmcplusplus::VectorEstimatorImpl</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; VectorEstimatorImpl&lt; double &gt; &gt;</class>
    <class kind="class">qmcplusplus::WFMCOnlyEstimator</class>
    <class kind="struct">qmcplusplus::h5data_proxy&lt; accumulator_set&lt; T &gt; &gt;</class>
    <class kind="struct">qmcplusplus::BranchIO</class>
    <class kind="class">qmcplusplus::CloneManager</class>
    <class kind="class">qmcplusplus::CSUpdateBase</class>
    <class kind="class">qmcplusplus::CSVMC</class>
    <class kind="class">qmcplusplus::CSVMCUpdateAll</class>
    <class kind="class">qmcplusplus::CSVMCUpdatePbyP</class>
    <class kind="class">qmcplusplus::DMC</class>
    <class kind="class">qmcplusplus::DMCcuda</class>
    <class kind="struct">qmcplusplus::DMCFactory</class>
    <class kind="class">qmcplusplus::DMCNonLocalUpdate</class>
    <class kind="class">qmcplusplus::DMCNonLocalUpdatePbyP</class>
    <class kind="class">qmcplusplus::DMCNonLocalUpdatePbyPFast</class>
    <class kind="class">qmcplusplus::DMCOMP</class>
    <class kind="class">qmcplusplus::DMCOMPOPT</class>
    <class kind="class">qmcplusplus::DMCPeta</class>
    <class kind="class">qmcplusplus::DMCUpdateAllWithRejection</class>
    <class kind="class">qmcplusplus::DMCUpdateAllWithKill</class>
    <class kind="class">qmcplusplus::DMCUpdatePbyPWithRejection</class>
    <class kind="class">qmcplusplus::DMCUpdatePbyPWithRejectionFast</class>
    <class kind="class">qmcplusplus::DMCUpdatePbyPWithKill</class>
    <class kind="class">qmcplusplus::RNDMCUpdatePbyPFast</class>
    <class kind="class">qmcplusplus::RNDMCUpdatePbyPCeperley</class>
    <class kind="class">qmcplusplus::DMCWOS</class>
    <class kind="struct">qmcplusplus::WalkerControlMPI</class>
    <class kind="struct">qmcplusplus::WalkerPureDMC</class>
    <class kind="struct">qmcplusplus::WalkerReconfiguration</class>
    <class kind="struct">qmcplusplus::WalkerReconfigurationMPI</class>
    <class kind="class">qmcplusplus::DummyQMC</class>
    <class kind="class">qmcplusplus::QMCCorrelatedSamplingLinearOptimize</class>
    <class kind="class">qmcplusplus::QMCCostFunctionBase</class>
    <class kind="class">qmcplusplus::QMCCostFunctionCUDA</class>
    <class kind="class">qmcplusplus::QMCCostFunctionOMP</class>
    <class kind="class">qmcplusplus::QMCCSLinearOptimizeWFmanagerOMP</class>
    <class kind="class">qmcplusplus::QMCDriver</class>
    <class kind="class">qmcplusplus::QMCFixedSampleLinearOptimize</class>
    <class kind="class">qmcplusplus::QMCLinearOptimize</class>
    <class kind="class">qmcplusplus::QMCOptimize</class>
    <class kind="class">qmcplusplus::QMCUpdateBase</class>
    <class kind="struct">qmcplusplus::RMCFactory</class>
    <class kind="class">qmcplusplus::RMCSingleOMP</class>
    <class kind="class">qmcplusplus::RMCUpdateAllWithDrift</class>
    <class kind="class">qmcplusplus::RMCUpdatePbyPWithDrift</class>
    <class kind="struct">qmcplusplus::SimpleFixedNodeBranch</class>
    <class kind="struct">qmcplusplus::SinglePtclWarp</class>
    <class kind="struct">qmcplusplus::SpaceWarp</class>
    <class kind="class">qmcplusplus::VMCcuda</class>
    <class kind="struct">qmcplusplus::VMCFactory</class>
    <class kind="class">qmcplusplus::VMCLinearOptOMP</class>
    <class kind="class">qmcplusplus::VMCMultipleWarp</class>
    <class kind="class">qmcplusplus::VMCPbyPMultiple</class>
    <class kind="class">qmcplusplus::VMCPbyPMultiWarp</class>
    <class kind="class">qmcplusplus::VMCSingleOMP</class>
    <class kind="class">qmcplusplus::VMCUpdateAll</class>
    <class kind="class">qmcplusplus::VMCUpdateAllWithDrift</class>
    <class kind="class">qmcplusplus::VMCUpdatePbyP</class>
    <class kind="class">qmcplusplus::VMCUpdatePbyPWithDrift</class>
    <class kind="class">qmcplusplus::VMCUpdatePbyPWithDriftFast</class>
    <class kind="class">qmcplusplus::VMCUpdateRenyiWithDriftFast</class>
    <class kind="struct">qmcplusplus::VMCBranch</class>
    <class kind="struct">qmcplusplus::FixedNodeCBranch</class>
    <class kind="class">qmcplusplus::WalkerControlBase</class>
    <class kind="class">qmcplusplus::WaveFunctionTester</class>
    <class kind="class">qmcplusplus::HamiltonianPool</class>
    <class kind="struct">qmcplusplus::LoneElectron</class>
    <class kind="class">qmcplusplus::InitMolecularSystem</class>
    <class kind="struct">qmcplusplus::BasisGroupType</class>
    <class kind="class">qmcplusplus::MO2Grid3D</class>
    <class kind="class">qmcplusplus::ParticleSetPool</class>
    <class kind="class">qmcplusplus::QMCAppBase</class>
    <class kind="struct">qmcplusplus::QMCDriverFactory</class>
    <class kind="class">qmcplusplus::QMCInterface</class>
    <class kind="class">qmcplusplus::QMCMain</class>
    <class kind="class">qmcplusplus::WaveFunctionPool</class>
  <compound kind="struct">
    <name>qmcplusplus::LatticeAnalyzer</name>
    <filename>a00008.html</filename>
    <anchor>a01479</anchor>
    <templarg></templarg>
    <templarg>D</templarg>
  <compound kind="struct">
    <name>qmcplusplus::DotProduct</name>
    <filename>a00008.html</filename>
    <anchor>a01453</anchor>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>ORTHO</templarg>
  <compound kind="struct">
    <name>qmcplusplus::CartesianNorm2</name>
    <filename>a00008.html</filename>
    <anchor>a01432</anchor>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>ORTHO</templarg>
  <compound kind="struct">
    <name>qmcplusplus::makelattice</name>
    <filename>a00008.html</filename>
    <anchor>a01486</anchor>
    <templarg></templarg>
  <compound kind="struct">
    <name>qmcplusplus::LRCutoffEvaluator</name>
    <filename>a00008.html</filename>
    <anchor>a01485</anchor>
    <templarg></templarg>
    <templarg>D</templarg>
    <templarg>ORTHO</templarg>
  <compound kind="struct">
    <name>qmcplusplus::ConvertPosUnit</name>
    <filename>a00008.html</filename>
    <anchor>a01434</anchor>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>D</templarg>
    <templarg>ORTHO</templarg>
  <compound kind="struct">
    <name>qmcplusplus::ApplyBConds</name>
    <filename>a00008.html</filename>
    <anchor>a01427</anchor>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>D</templarg>
    <templarg>ORTHO</templarg>
  <compound kind="struct">
    <name>qmcplusplus::MCDataType</name>
    <filename>a00008.html</filename>
    <anchor>a01488</anchor>
    <templarg>T</templarg>
  <compound kind="struct">
    <name>qmcplusplus::printTinyVector</name>
    <filename>a00008.html</filename>
    <anchor>a01505</anchor>
    <templarg></templarg>
  <compound kind="class">
    <name>qmcplusplus::SymTensor</name>
    <filename>a00008.html</filename>
    <anchor>a01529</anchor>
    <templarg></templarg>
    <templarg>D</templarg>
  <compound kind="class">
    <name>qmcplusplus::AntiSymTensor</name>
    <filename>a00008.html</filename>
    <anchor>a01426</anchor>
    <templarg></templarg>
    <templarg>D</templarg>
  <compound kind="struct">
    <name>qmcplusplus::const_traits</name>
    <filename>a00008.html</filename>
    <anchor>a01433</anchor>
    <templarg></templarg>
  <compound kind="class">
    <name>qmcplusplus::FFTWEngine</name>
    <filename>a00008.html</filename>
    <anchor>a01459</anchor>
    <templarg>dimensions</templarg>
    <templarg></templarg>
  <compound kind="struct">
    <name>qmcplusplus::FunctorBase</name>
    <filename>a00008.html</filename>
    <anchor>a01460</anchor>
    <templarg></templarg>
    <templarg>D</templarg>
  <compound kind="struct">
    <name>qmcplusplus::AtomicOrbitalTraits</name>
    <filename>a00008.html</filename>
    <anchor>a01430</anchor>
    <templarg></templarg>
  <compound kind="struct">
    <name>qmcplusplus::einspline_traits</name>
    <filename>a00008.html</filename>
    <anchor>a01456</anchor>
    <templarg></templarg>
    <templarg>D</templarg>
  <compound kind="class">
    <name>qmcplusplus::EinsplineOrb</name>
    <filename>a00008.html</filename>
    <anchor>a01457</anchor>
    <templarg></templarg>
    <templarg>N</templarg>
  <compound kind="struct">
    <name>qmcplusplus::MultiOrbitalTraits</name>
    <filename>a00008.html</filename>
    <anchor>a01491</anchor>
    <templarg></templarg>
    <templarg>dim</templarg>
  <compound kind="struct">
    <name>qmcplusplus::HEGGrid</name>
    <filename>a00008.html</filename>
    <anchor>a01467</anchor>
    <templarg></templarg>
    <templarg>D</templarg>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::PtclAttribTraits</name>
    <filename>a00487.html</filename>
    <member kind="typedef">
      <type>int</type>
      <name>Index_t</name>
      <anchorfile>a00487.html</anchorfile>
      <anchor>ad2c83a0d5df0f098b7e4418ad5ec3355</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleAttrib&lt; Index_t &gt;</type>
      <name>ParticleIndex_t</name>
      <anchorfile>a00487.html</anchorfile>
      <anchor>aaca0aae67c45875824f2cf1b4d631702</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleAttrib&lt; OHMMS_PRECISION &gt;</type>
      <name>ParticleScalar_t</name>
      <anchorfile>a00487.html</anchorfile>
      <anchor>a97e5dcbc4c3e8351bc8231cea94cc242</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleAttrib&lt; TinyVector&lt; OHMMS_PRECISION, OHMMS_DIM &gt; &gt;</type>
      <name>ParticlePos_t</name>
      <anchorfile>a00487.html</anchorfile>
      <anchor>a5812f0348e224e743ef6184398961402</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleAttrib&lt; Tensor&lt; OHMMS_PRECISION, OHMMS_DIM &gt; &gt;</type>
      <name>ParticleTensor_t</name>
      <anchorfile>a00487.html</anchorfile>
      <anchor>a3a407e1b75b4530d63178d44e0ac5e74</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::QMCTraits</name>
    <filename>a00499.html</filename>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::PtclOnLatticeTraits</name>
    <filename>a00489.html</filename>
    <member kind="typedef">
      <type>Uniform3DGridLayout</type>
      <name>ParticleLayout_t</name>
      <anchorfile>a00489.html</anchorfile>
      <anchor>a8db9d67fecfc0509839043701e615fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>Index_t</name>
      <anchorfile>a00489.html</anchorfile>
      <anchor>ad2c83a0d5df0f098b7e4418ad5ec3355</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OHMMS_PRECISION</type>
      <name>Scalar_t</name>
      <anchorfile>a00489.html</anchorfile>
      <anchor>a82d1e7ccdef9edd12b26b10c2dbf8e8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::complex&lt; Scalar_t &gt;</type>
      <name>Complex_t</name>
      <anchorfile>a00489.html</anchorfile>
      <anchor>a215b507297cda3bbcc06bac056caa0a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleLayout_t::SingleParticleIndex_t</type>
      <name>SingleParticleIndex_t</name>
      <anchorfile>a00489.html</anchorfile>
      <anchor>a8cc334f336ec35114504bbe16e38a7a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleLayout_t::SingleParticlePos_t</type>
      <name>SingleParticlePos_t</name>
      <anchorfile>a00489.html</anchorfile>
      <anchor>a765468dd500c494a68a7ef317581a6f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleLayout_t::Tensor_t</type>
      <name>Tensor_t</name>
      <anchorfile>a00489.html</anchorfile>
      <anchor>a038cda018f2474294de4de961e0e535c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleAttrib&lt; Index_t &gt;</type>
      <name>ParticleIndex_t</name>
      <anchorfile>a00489.html</anchorfile>
      <anchor>aaca0aae67c45875824f2cf1b4d631702</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleAttrib&lt; Scalar_t &gt;</type>
      <name>ParticleScalar_t</name>
      <anchorfile>a00489.html</anchorfile>
      <anchor>a5e9f3810bc1c718889507904f4b43186</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleAttrib&lt; SingleParticlePos_t &gt;</type>
      <name>ParticlePos_t</name>
      <anchorfile>a00489.html</anchorfile>
      <anchor>a022c841c56e86b48af35316985670c0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleAttrib&lt; Tensor_t &gt;</type>
      <name>ParticleTensor_t</name>
      <anchorfile>a00489.html</anchorfile>
      <anchor>a59f297f290cbb04e7d7b4dc32f4c87ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleAttrib&lt; SingleParticlePos_t &gt;</type>
      <name>ParticleGradient_t</name>
      <anchorfile>a00489.html</anchorfile>
      <anchor>adcc50b464b5377968815811fa1e2030d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleAttrib&lt; Scalar_t &gt;</type>
      <name>ParticleLaplacian_t</name>
      <anchorfile>a00489.html</anchorfile>
      <anchor>ad807720b4995a5e72bfe43b47a6da3f7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::NewTimer</name>
    <filename>a00405.html</filename>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a00405.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>a00405.html</anchorfile>
      <anchor>a8c528baf37154d347366083f0f816846</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_total</name>
      <anchorfile>a00405.html</anchorfile>
      <anchor>acdf18e2432a671d759533d22a9463e0f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>get_num_calls</name>
      <anchorfile>a00405.html</anchorfile>
      <anchor>adc4cfba0c6a8ac86428d887408f879c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_name</name>
      <anchorfile>a00405.html</anchorfile>
      <anchor>a3698093973c52835d6fd4b0d8e8ae6cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00405.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NewTimer</name>
      <anchorfile>a00405.html</anchorfile>
      <anchor>ae84f50a3193eb3ff9d8feaf60243eeda</anchor>
      <arglist>(const std::string &amp;myname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>a00405.html</anchorfile>
      <anchor>a2e8e05ceef1d66773ee0430af46d8f27</anchor>
      <arglist>(const std::string &amp;myname)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>start_time</name>
      <anchorfile>a00405.html</anchorfile>
      <anchor>a00b0c9b1c3ea8bb73a7fc8b53a3961fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>total_time</name>
      <anchorfile>a00405.html</anchorfile>
      <anchor>abc276e47b85df9dd59f248e663b3b971</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>num_calls</name>
      <anchorfile>a00405.html</anchorfile>
      <anchor>a06c501f2833a3b2c9120f5e3cd2025a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>a00405.html</anchorfile>
      <anchor>a9b45b3e13bd9167aab02e17e08916231</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::TimerComparator</name>
    <filename>a00607.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>a00607.html</anchorfile>
      <anchor>a74f97be37030b00ed3d705f8984c51dc</anchor>
      <arglist>(const NewTimer *a, const NewTimer *b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::TimerManagerClass</name>
    <filename>a00608.html</filename>
    <member kind="function">
      <type>void</type>
      <name>addTimer</name>
      <anchorfile>a00608.html</anchorfile>
      <anchor>aca57172e1d76bf3739b85eb627fc86b5</anchor>
      <arglist>(NewTimer *t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00608.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00608.html</anchorfile>
      <anchor>aa62164173c903021a840931f474f7bcb</anchor>
      <arglist>(Communicate *comm)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; NewTimer * &gt;</type>
      <name>TimerList</name>
      <anchorfile>a00608.html</anchorfile>
      <anchor>aced9e7c35602d3eb372a0d31ba7105c9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::ReportEngine</name>
    <filename>a00527.html</filename>
    <member kind="function">
      <type></type>
      <name>ReportEngine</name>
      <anchorfile>a00527.html</anchorfile>
      <anchor>a9c89e0dce7d355ddf3632ec5732a1cc6</anchor>
      <arglist>(const std::string &amp;cname, const std::string &amp;fname, int atype=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ReportEngine</name>
      <anchorfile>a00527.html</anchorfile>
      <anchor>a74154f8bb98bd383a8f201899be973b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>a00527.html</anchorfile>
      <anchor>adac116554b543b7c4228c018a85882f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startWarning</name>
      <anchorfile>a00527.html</anchorfile>
      <anchor>afdb978ead541f8181d2c9d4bf24bb9e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endWarning</name>
      <anchorfile>a00527.html</anchorfile>
      <anchor>a0672f2fc2defb469b6ac67af0f7ead7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>warning</name>
      <anchorfile>a00527.html</anchorfile>
      <anchor>a5f424de46c6187ae5ff0b715604d37eb</anchor>
      <arglist>(const std::string &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startError</name>
      <anchorfile>a00527.html</anchorfile>
      <anchor>a45c4f238168e51be56acd5d5c48cf395</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endError</name>
      <anchorfile>a00527.html</anchorfile>
      <anchor>a5be24bd2640fb686b006abba61e355ac</anchor>
      <arglist>(bool fatal=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>error</name>
      <anchorfile>a00527.html</anchorfile>
      <anchor>a5d81dc35cf48eb58de50016c769455bb</anchor>
      <arglist>(const std::string &amp;msg, bool fatal=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>echo</name>
      <anchorfile>a00527.html</anchorfile>
      <anchor>aefddcf6cac8bce0b85c2fe0fe89a1cc5</anchor>
      <arglist>(xmlNodePtr cur, bool recursive=false)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ReportEngine</name>
      <anchorfile>a00527.html</anchorfile>
      <anchor>ab01ddd51ca01979bbf54278ce8ea35b0</anchor>
      <arglist>(const ReportEngine &amp;a)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>ReportType</name>
      <anchorfile>a00527.html</anchorfile>
      <anchor>a7fd05a3a5967333a0602e8a122383db5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>ClassName</name>
      <anchorfile>a00527.html</anchorfile>
      <anchor>a995b081a11fae5fed318f8d6afa2dc99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>FuncName</name>
      <anchorfile>a00527.html</anchorfile>
      <anchor>aaaff432d31e62d60c58acf6b4541081a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::string &gt;</type>
      <name>ArgList</name>
      <anchorfile>a00527.html</anchorfile>
      <anchor>a146d320362a246dae4bc7231fe401e9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OhmmsInform &amp;</type>
      <name>LogBuffer</name>
      <anchorfile>a00527.html</anchorfile>
      <anchor>a74a38e12375a7ccf25dc0f7fb9bd98e6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; RandomGenerator_t &gt;</name>
    <filename>a00270.html</filename>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>a00270.html</anchorfile>
      <anchor>a5cafabad702d50acd986f395c6f9df58</anchor>
      <arglist>(RandomGenerator_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a00270.html</anchorfile>
      <anchor>a9cb9a11595717b99c90268f87ffb530b</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a00270.html</anchorfile>
      <anchor>a2378d66f31e2d3c28eed6a1863e5c5dc</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIOBase</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>a1907a599bee1b0b50678e94538338ebf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HDFAttribIOBase</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>a7617eccbf1bfeedf0d3a69314c83e962</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransferProperty</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>a9c6f5550b4e85cf70166440e6ad9a443</anchor>
      <arglist>(hid_t xfer_mode)</arglist>
    </member>
    <member kind="variable">
      <type>RandomGenerator_t &amp;</type>
      <name>ref</name>
      <anchorfile>a00270.html</anchorfile>
      <anchor>ac17c243d3f1d1c25fc1a251aaceaef9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hid_t</type>
      <name>my_loc</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>a2aa2141a49b67eda7433330fd718fafd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hid_t</type>
      <name>xfer_plist</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>afed6fa2893f59c21865371d5ea264a66</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::Timer</name>
    <filename>a00606.html</filename>
    <member kind="function">
      <type></type>
      <name>Timer</name>
      <anchorfile>a00606.html</anchorfile>
      <anchor>a6a8bc5014802d569f6d01c4f36121a81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restart</name>
      <anchorfile>a00606.html</anchorfile>
      <anchor>a22ee094ca3f45aa4156b97d34fe678bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>elapsed</name>
      <anchorfile>a00606.html</anchorfile>
      <anchor>a75569f2a1023167fb30f9314907505eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>start_time</name>
      <anchorfile>a00606.html</anchorfile>
      <anchor>a00b0c9b1c3ea8bb73a7fc8b53a3961fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::MPIObjectBase</name>
    <filename>a00389.html</filename>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::PosUnit</name>
    <filename>a00475.html</filename>
    <member kind="enumvalue">
      <type>@</type>
      <name>CartesianUnit</name>
      <anchorfile>a00475.html</anchorfile>
      <anchor>ab04a0655cd1e3bcac5e8f48c18df1a57a4b317f265f5511fffb8f39f442e4a3ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LatticeUnit</name>
      <anchorfile>a00475.html</anchorfile>
      <anchor>ab04a0655cd1e3bcac5e8f48c18df1a57a772c53a4f68a8dcbc17350a71171aaef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::CrystalLattice</name>
    <filename>a00108.html</filename>
    <templarg>T</templarg>
    <templarg>D</templarg>
    <templarg>ORTHO</templarg>
    <member kind="enumvalue">
      <type>@</type>
      <name>DIM</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a385c44f6fb256e5716a2302a5b940388a6c8e5f290be4be86fd5e7048654b4a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Scalar_t</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a74ebc0a8ec00a527f379a64ebf24d6de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TinyVector&lt; T, D &gt;</type>
      <name>SingleParticlePos_t</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a94d73f4c1388b05bcfa8e521602046ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TinyVector&lt; int, D &gt;</type>
      <name>SingleParticleIndex_t</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>ae91cfe6a932dda22048f2f948fd9a9d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tensor&lt; T, D &gt;</type>
      <name>Tensor_t</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>aee0636a06dbdd36b7e2beddf0724b6b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CrystalLattice</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a8fe526e67fe25c607e23ed92a2d30357</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CrystalLattice</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>aca0a0e444c5eecd801a61f39133f69cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SingleParticlePos_t</type>
      <name>a</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>ae5f36417fcf769466f91db3d986a7a26</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>SingleParticlePos_t</type>
      <name>b</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a64570e5db3cc3234e56a4521bfb6b2f1</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>SingleParticlePos_t</type>
      <name>toUnit</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>adc8cbaa4d7f46928fbcc2ae9c1e3bfe0</anchor>
      <arglist>(const TinyVector&lt; T1, D &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>SingleParticlePos_t</type>
      <name>toCart</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a86800f973ccb3a1a906af39576f87b92</anchor>
      <arglist>(const TinyVector&lt; T1, D &gt; &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a386bd4e6b89facf6966b9bef9603a11d</anchor>
      <arglist>(const TinyVector&lt; T, D &gt; &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a2c5a1193823b041c8cc45f0c7c7020ff</anchor>
      <arglist>(const TinyVector&lt; T, D &gt; &amp;u, TinyVector&lt; T, D &gt; &amp;ubox) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>outOfBound</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a37147f9b7fcaa9c8cc661d6ed0575bce</anchor>
      <arglist>(const TinyVector&lt; T, D &gt; &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyMinimumImage</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>abd1d2b266a6dd6e208c2aff11f8148cd</anchor>
      <arglist>(TinyVector&lt; T, D &gt; &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Dot</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a39bbadb32d6f454aefc6b0ff10ab3baa</anchor>
      <arglist>(const SingleParticlePos_t &amp;ra, const SingleParticlePos_t &amp;rb) const </arglist>
    </member>
    <member kind="function">
      <type>SingleParticlePos_t</type>
      <name>k_cart</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a5f07f54c78f87570d15941773ae95f07</anchor>
      <arglist>(const SingleParticlePos_t &amp;kin) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ksq</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>adc2e9ff2acdda4e29c1e160b700b3549</anchor>
      <arglist>(const SingleParticlePos_t &amp;kin) const </arglist>
    </member>
    <member kind="function">
      <type>CrystalLattice&lt; T, D, ORTHO &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>ac8e2dae3a0ffa2f5d1c30708a3926da9</anchor>
      <arglist>(const CrystalLattice&lt; T1, D, ORTHO &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CrystalLattice&lt; T, D, ORTHO &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a09531c4115ba3f95ddd23ca75859fd66</anchor>
      <arglist>(const Tensor&lt; T1, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CrystalLattice&lt; T, D, ORTHO &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a041e30f606ba4e2243c2433a969e6b6a</anchor>
      <arglist>(T sc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a2c9a1c01e13bbedf722b663e5ea289c9</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>ac822a6b981469835d7833689b408e95b</anchor>
      <arglist>(std::vector&lt; string &gt; &amp;argv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a9ca2493a42235ffcdbfb848982a0f402</anchor>
      <arglist>(T sc, T *lat=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>aa4266ed93102007b995bfb3df27126ec</anchor>
      <arglist>(const CrystalLattice&lt; T, D, ORTHO &gt; &amp;oldlat, int *uc=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a72b428cd1f92495ea39577922c8be039</anchor>
      <arglist>(const Tensor&lt; T, D &gt; &amp;lat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a9922c7179394180355f53b0a14eb3013</anchor>
      <arglist>(ostream &amp;, int level=2) const </arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>DiagonalOnly</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a117081ba48307a4db07fce3f4238521b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>SuperCellEnum</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a45d508fa5ed33e5fb92afc6ec5650341</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; int, D &gt;</type>
      <name>BoxBConds</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>ae225f2939b6b2b25cb49dba0baed692e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SingleParticlePos_t</type>
      <name>ABC</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a3ad43bd9811513a8daf85c0b3eede0b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; SingleParticlePos_t &gt;</type>
      <name>NextUnitCells</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a8461907b29aafc436d1c68d973bb59e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>Volume</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a2a5130c218b3ab62d29862d6e579a004</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>WignerSeitzRadius</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a85fb0721dbfaa3815b16a5c690ab986c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>SimulationCellRadius</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>ae2a790e918d8fd910949eec3da17b6fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>CellRadiusSq</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a6b6cf0b7ca20490328a461bcf36b3246</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tensor_t</type>
      <name>R</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a0374f7adc727fab677d12618f67842e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tensor_t</type>
      <name>G</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a597fafeb98127311f4e100a436d7e80e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tensor_t</type>
      <name>M</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a3d1a20ef0d50f545fa9159f24e522418</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tensor_t</type>
      <name>Mg</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a9379615a30349ca0dc58c4aa0c9c1908</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SingleParticlePos_t</type>
      <name>Length</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a0740bb9b889a9c179f51f01722225df6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SingleParticlePos_t</type>
      <name>OneOverLength</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>af729fd46fb84d6cbac3d0ec8969e5f35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; SingleParticlePos_t, D &gt;</type>
      <name>Rv</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>ac26acf32662dd50e1cbdc88fde0480c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; SingleParticlePos_t, D &gt;</type>
      <name>Gv</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>aa1434d7180658233d877dafde654e79e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::LatticeAnalyzer&lt; T, 3 &gt;</name>
    <filename>a00325.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>TinyVector&lt; T, 3 &gt;</type>
      <name>SingleParticlePos_t</name>
      <anchorfile>a00325.html</anchorfile>
      <anchor>ae5213b2004d58051df98f4bea9713b1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tensor&lt; T, 3 &gt;</type>
      <name>Tensor_t</name>
      <anchorfile>a00325.html</anchorfile>
      <anchor>a726a8f0e5977bd35fcc2d39e943096be</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>a00325.html</anchorfile>
      <anchor>a844836d90cc0566ff3c1f6793e0158d1</anchor>
      <arglist>(const TinyVector&lt; int, 3 &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDiagonalOnly</name>
      <anchorfile>a00325.html</anchorfile>
      <anchor>aa243c0db683de3c542984148f625c959</anchor>
      <arglist>(const Tensor_t &amp;R) const </arglist>
    </member>
    <member kind="function">
      <type>SingleParticlePos_t</type>
      <name>calcSolidAngles</name>
      <anchorfile>a00325.html</anchorfile>
      <anchor>a68ba7004194dca71ee90518ed78cd692</anchor>
      <arglist>(const TinyVector&lt; SingleParticlePos_t, 3 &gt; &amp;Rv, const SingleParticlePos_t &amp;OneOverLength)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>calcWignerSeitzRadius</name>
      <anchorfile>a00325.html</anchorfile>
      <anchor>af50366fb5e8f57342bf414f2e90caaa3</anchor>
      <arglist>(TinyVector&lt; SingleParticlePos_t, 3 &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>calcSimulationCellRadius</name>
      <anchorfile>a00325.html</anchorfile>
      <anchor>abb141626f30518c6d3fcc0b767d2dd1c</anchor>
      <arglist>(TinyVector&lt; SingleParticlePos_t, 3 &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeNextCells</name>
      <anchorfile>a00325.html</anchorfile>
      <anchor>abe3794983c13c6b825fd86bb1532448b</anchor>
      <arglist>(const Tensor_t &amp;lat, vector&lt; SingleParticlePos_t &gt; &amp;nextcells)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>mySC</name>
      <anchorfile>a00325.html</anchorfile>
      <anchor>a3d25c5db5351f486abcfe5b4692fe085</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::LatticeAnalyzer&lt; T, 2 &gt;</name>
    <filename>a00324.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>TinyVector&lt; T, 2 &gt;</type>
      <name>SingleParticlePos_t</name>
      <anchorfile>a00324.html</anchorfile>
      <anchor>a20441cfb9b7be6610c40fc737eb37f94</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tensor&lt; T, 2 &gt;</type>
      <name>Tensor_t</name>
      <anchorfile>a00324.html</anchorfile>
      <anchor>ac9d069aa2b8028d1db44d54c0583c9fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>a00324.html</anchorfile>
      <anchor>af9641e300a4999f6ee3c509da7b96eb1</anchor>
      <arglist>(const TinyVector&lt; int, 2 &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDiagonalOnly</name>
      <anchorfile>a00324.html</anchorfile>
      <anchor>a5b802188468e78f42ea26260f1ed0b3a</anchor>
      <arglist>(const Tensor&lt; T, 2 &gt; &amp;R) const </arglist>
    </member>
    <member kind="function">
      <type>SingleParticlePos_t</type>
      <name>calcSolidAngles</name>
      <anchorfile>a00324.html</anchorfile>
      <anchor>abee88b49547b81152a5923f8b8ff3122</anchor>
      <arglist>(const TinyVector&lt; SingleParticlePos_t, 2 &gt; &amp;Rv, const SingleParticlePos_t &amp;OneOverLength)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>calcWignerSeitzRadius</name>
      <anchorfile>a00324.html</anchorfile>
      <anchor>a40c803bc8b21022b8917673acf899937</anchor>
      <arglist>(TinyVector&lt; SingleParticlePos_t, 2 &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>calcSimulationCellRadius</name>
      <anchorfile>a00324.html</anchorfile>
      <anchor>a0064fb599c8ac26bf035ceb0c6cbc4d6</anchor>
      <arglist>(TinyVector&lt; SingleParticlePos_t, 2 &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeNextCells</name>
      <anchorfile>a00324.html</anchorfile>
      <anchor>abe3794983c13c6b825fd86bb1532448b</anchor>
      <arglist>(const Tensor_t &amp;lat, vector&lt; SingleParticlePos_t &gt; &amp;nextcells)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::LatticeAnalyzer&lt; T, 1 &gt;</name>
    <filename>a00323.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>TinyVector&lt; T, 1 &gt;</type>
      <name>SingleParticlePos_t</name>
      <anchorfile>a00323.html</anchorfile>
      <anchor>a2e0a410075eeae53443ea9e1b0a305bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDiagonalOnly</name>
      <anchorfile>a00323.html</anchorfile>
      <anchor>aca4a77e30376b7bd993ea4e80d2176aa</anchor>
      <arglist>(const Tensor&lt; T, 1 &gt; &amp;R) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>a00323.html</anchorfile>
      <anchor>a0924b7b8c5a6ba0015003acf3e3f4647</anchor>
      <arglist>(const TinyVector&lt; int, 1 &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>calcWignerSeitzRadius</name>
      <anchorfile>a00323.html</anchorfile>
      <anchor>a37e78192668ddcd313b90a35a591a683</anchor>
      <arglist>(TinyVector&lt; SingleParticlePos_t, 1 &gt; &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::DotProduct&lt; TinyVector&lt; T1, D &gt;, Tensor&lt; T2, D &gt;, false &gt;</name>
    <filename>a00171.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>D</templarg>
    <member kind="typedef">
      <type>BinaryReturn&lt; T1, T2, OpMultiply &gt;::Type_t</type>
      <name>Type_t</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a9163286970249fceda661ebc01344bc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TinyVector&lt; Type_t, D &gt;</type>
      <name>apply</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>af534485040b050408fd4648286c32f78</anchor>
      <arglist>(const TinyVector&lt; T1, D &gt; &amp;lhs, const Tensor&lt; T2, D &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::DotProduct&lt; TinyVector&lt; T1, 3 &gt;, Tensor&lt; T2, 3 &gt;, false &gt;</name>
    <filename>a00169.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>BinaryReturn&lt; T1, T2, OpMultiply &gt;::Type_t</type>
      <name>Type_t</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a9163286970249fceda661ebc01344bc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TinyVector&lt; Type_t, 3 &gt;</type>
      <name>apply</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a791b599e7326f7c812282a0a80878618</anchor>
      <arglist>(const TinyVector&lt; T1, 3 &gt; &amp;lhs, const Tensor&lt; T2, 3 &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TinyVector&lt; Type_t, 3 &gt;</type>
      <name>apply</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a3f8eb00ab24102d9a723c15cf26cdcf4</anchor>
      <arglist>(const Tensor&lt; T2, 3 &gt; &amp;lhs, const TinyVector&lt; T1, 3 &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::DotProduct&lt; TinyVector&lt; T1, D &gt;, Tensor&lt; T2, D &gt;, true &gt;</name>
    <filename>a00172.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>D</templarg>
    <member kind="typedef">
      <type>BinaryReturn&lt; T1, T2, OpMultiply &gt;::Type_t</type>
      <name>Type_t</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a9163286970249fceda661ebc01344bc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TinyVector&lt; Type_t, D &gt;</type>
      <name>apply</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>af534485040b050408fd4648286c32f78</anchor>
      <arglist>(const TinyVector&lt; T1, D &gt; &amp;lhs, const Tensor&lt; T2, D &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::DotProduct&lt; TinyVector&lt; T1, 3 &gt;, Tensor&lt; T2, 3 &gt;, true &gt;</name>
    <filename>a00170.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>BinaryReturn&lt; T1, T2, OpMultiply &gt;::Type_t</type>
      <name>Type_t</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a9163286970249fceda661ebc01344bc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TinyVector&lt; Type_t, 3 &gt;</type>
      <name>apply</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a791b599e7326f7c812282a0a80878618</anchor>
      <arglist>(const TinyVector&lt; T1, 3 &gt; &amp;lhs, const Tensor&lt; T2, 3 &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TinyVector&lt; Type_t, 3 &gt;</type>
      <name>apply</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a3f8eb00ab24102d9a723c15cf26cdcf4</anchor>
      <arglist>(const Tensor&lt; T2, 3 &gt; &amp;lhs, const TinyVector&lt; T1, 3 &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::CartesianNorm2&lt; TinyVector&lt; T1, D &gt;, Tensor&lt; T2, D &gt;, false &gt;</name>
    <filename>a00058.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>D</templarg>
    <member kind="typedef">
      <type>BinaryReturn&lt; T1, T2, OpMultiply &gt;::Type_t</type>
      <name>Type_t</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a9163286970249fceda661ebc01344bc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Type_t</type>
      <name>apply</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>aa8ce0386794944f1db1a2471bb3e60be</anchor>
      <arglist>(const TinyVector&lt; T1, D &gt; &amp;a, const Tensor&lt; T2, D &gt; &amp;X, const TinyVector&lt; T1, D &gt; &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::CartesianNorm2&lt; TinyVector&lt; T1, 3 &gt;, Tensor&lt; T2, 3 &gt;, false &gt;</name>
    <filename>a00056.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>BinaryReturn&lt; T1, T2, OpMultiply &gt;::Type_t</type>
      <name>Type_t</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a9163286970249fceda661ebc01344bc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Type_t</type>
      <name>apply</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>aad163c0a687a1a1433cac157a263c899</anchor>
      <arglist>(const TinyVector&lt; T1, 3 &gt; &amp;a, const Tensor&lt; T2, 3 &gt; &amp;X, const TinyVector&lt; T1, 3 &gt; &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::CartesianNorm2&lt; TinyVector&lt; T1, D &gt;, Tensor&lt; T2, D &gt;, true &gt;</name>
    <filename>a00059.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>D</templarg>
    <member kind="typedef">
      <type>BinaryReturn&lt; T1, T2, OpMultiply &gt;::Type_t</type>
      <name>Type_t</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a9163286970249fceda661ebc01344bc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Type_t</type>
      <name>apply</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>aa8ce0386794944f1db1a2471bb3e60be</anchor>
      <arglist>(const TinyVector&lt; T1, D &gt; &amp;a, const Tensor&lt; T2, D &gt; &amp;X, const TinyVector&lt; T1, D &gt; &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::CartesianNorm2&lt; TinyVector&lt; T1, 3 &gt;, Tensor&lt; T2, 3 &gt;, true &gt;</name>
    <filename>a00057.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>BinaryReturn&lt; T1, T2, OpMultiply &gt;::Type_t</type>
      <name>Type_t</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a9163286970249fceda661ebc01344bc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Type_t</type>
      <name>apply</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>aad163c0a687a1a1433cac157a263c899</anchor>
      <arglist>(const TinyVector&lt; T1, 3 &gt; &amp;a, const Tensor&lt; T2, 3 &gt; &amp;X, const TinyVector&lt; T1, 3 &gt; &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::MinimumImageBConds</name>
    <filename>a00376.html</filename>
    <templarg></templarg>
    <templarg>D</templarg>
    <member kind="typedef">
      <type>TinyVector&lt; T, D &gt;</type>
      <name>Return_t</name>
      <anchorfile>a00376.html</anchorfile>
      <anchor>af658475d408a59fa6f8a7dad2155bc3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a00376.html</anchorfile>
      <anchor>aef42e41a31f89e51f7bb093f9869e535</anchor>
      <arglist>(const Tensor&lt; T, D &gt; &amp;R, const Tensor&lt; T, D &gt; &amp;G, TinyVector&lt; T, D &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::CheckBoxConds</name>
    <filename>a00064.html</filename>
    <templarg></templarg>
    <templarg>D</templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>inside</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>ae824b26737216cd3a1e6cd41eea87696</anchor>
      <arglist>(const TinyVector&lt; T, D &gt; &amp;u)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>inside</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>aa02e4391d0251fe26451ae2c189048bd</anchor>
      <arglist>(const TinyVector&lt; T, D &gt; &amp;u, TinyVector&lt; T, D &gt; &amp;ubox)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::CheckBoxConds&lt; T, 1 &gt;</name>
    <filename>a00065.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>inside</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a40a9aa7a1de4bbb845e17d0e5d2c312d</anchor>
      <arglist>(const TinyVector&lt; T, 1 &gt; &amp;u)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>inside</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a2dc2b63645eccfac8992b404d0c26a14</anchor>
      <arglist>(const TinyVector&lt; T, 1 &gt; &amp;u, TinyVector&lt; T, 1 &gt; &amp;ubox)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::CheckBoxConds&lt; T, 2 &gt;</name>
    <filename>a00066.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>inside</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a8dbca28c8f776c37e062f718c15c81c5</anchor>
      <arglist>(const TinyVector&lt; T, 2 &gt; &amp;u)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>inside</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>ae39a3c83efc1f3f23a8128d9925e9b59</anchor>
      <arglist>(const TinyVector&lt; T, 2 &gt; &amp;u, TinyVector&lt; T, 2 &gt; &amp;ubox)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::CheckBoxConds&lt; T, 3 &gt;</name>
    <filename>a00067.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>inside</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a60e15d422d883e3564c06e30661c7d6d</anchor>
      <arglist>(const TinyVector&lt; T, 3 &gt; &amp;u)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>inside</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ac6053eabf65831a0161aa036db6e9fe5</anchor>
      <arglist>(const TinyVector&lt; T, 3 &gt; &amp;u, const TinyVector&lt; int, 3 &gt; &amp;bc)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>inside</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>aadb0f2cc42e4149c49e97353569f8e5e</anchor>
      <arglist>(const TinyVector&lt; T, 3 &gt; &amp;u, TinyVector&lt; T, 3 &gt; &amp;ubox)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::makelattice&lt; CrystalLattice&lt; T, D &gt; &gt;</name>
    <filename>a00366.html</filename>
    <templarg></templarg>
    <templarg>D</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a00366.html</anchorfile>
      <anchor>a5880cc980b5a01609da39dd3f89d6532</anchor>
      <arglist>(CrystalLattice&lt; T, D &gt; &amp;, std::vector&lt; string &gt; &amp;argv)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::makelattice&lt; CrystalLattice&lt; T, 1 &gt; &gt;</name>
    <filename>a00363.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a00363.html</anchorfile>
      <anchor>ab4f9ac48ac6412de10bbcc6bbe313fe5</anchor>
      <arglist>(CrystalLattice&lt; T, 1 &gt; &amp;lat, std::vector&lt; string &gt; &amp;argv)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::makelattice&lt; CrystalLattice&lt; T, 2 &gt; &gt;</name>
    <filename>a00364.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a00364.html</anchorfile>
      <anchor>a6247b89c7e9eb465b9129441ee1cf9a4</anchor>
      <arglist>(CrystalLattice&lt; T, 2 &gt; &amp;lat, std::vector&lt; string &gt; &amp;argv)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::makelattice&lt; CrystalLattice&lt; T, 3 &gt; &gt;</name>
    <filename>a00365.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a00365.html</anchorfile>
      <anchor>ac0b18970f033c7f2484b4bb6c9fca885</anchor>
      <arglist>(CrystalLattice&lt; T, 3 &gt; &amp;lat, std::vector&lt; string &gt; &amp;argv)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::PowerOfN</name>
    <filename>a00476.html</filename>
    <templarg>N</templarg>
    <templarg>D</templarg>
    <member kind="enumvalue">
      <type>@</type>
      <name>value</name>
      <anchorfile>a00476.html</anchorfile>
      <anchor>ac36f475ca5b446f4fde4c9b90bec77c8a97de9ab6885342a574053b8f64a563a9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::PowerOfN&lt; N, 0 &gt;</name>
    <filename>a00477.html</filename>
    <templarg>N</templarg>
    <member kind="enumvalue">
      <type>@</type>
      <name>value</name>
      <anchorfile>a00477.html</anchorfile>
      <anchor>a05589fbab0657f08285ebdfe93f5ec9ea97de9ab6885342a574053b8f64a563a9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::DTD_BConds</name>
    <filename>a00174.html</filename>
    <templarg>T</templarg>
    <templarg>D</templarg>
    <templarg>SC</templarg>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::DTD_BConds&lt; T, 2, SUPERCELL_BULK &gt;</name>
    <filename>a00177.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>DTD_BConds</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>ad2b434fb4022c1a2af67def1784d27ea</anchor>
      <arglist>(const CrystalLattice&lt; T, 2 &gt; &amp;lat)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_min_distance</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>ad5b0a61803e1bc84bf574eb468aa2210</anchor>
      <arglist>(TinyVector&lt; T, 2 &gt; &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>apply_bc</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a4ad2f02ace001d1bc2a1d52e7ecb5473</anchor>
      <arglist>(TinyVector&lt; T, 2 &gt; &amp;displ) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_bc</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a039d84c89f9b2c7c2091a7a6f9d44600</anchor>
      <arglist>(std::vector&lt; TinyVector&lt; T, 2 &gt; &gt; &amp;dr, std::vector&lt; T &gt; &amp;r, std::vector&lt; T &gt; &amp;rinv) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_bc</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a7e57c166d0f6d76146cfcc40f23b4e9f</anchor>
      <arglist>(std::vector&lt; TinyVector&lt; T, 2 &gt; &gt; &amp;dr, std::vector&lt; T &gt; &amp;r) const </arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r00</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>ad5fb08fa8b88a6b58dd574cf9decafb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r10</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>ad96a40ef96597d0e2b8469173186b26e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r01</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a8239545585fe9a537683600d6e110202</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r11</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>ad57d27048a9f8876fb1d96a6c5f9a39f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g00</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>aca7874e1bc96d406ff0d29fbcab5762e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g10</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>ad2801336cef856fc67a4bacfcaaae02a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g01</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>aecec1790f5e2b46ce218e00e65e2fe06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g11</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a8919cab53b77b5cf4a896bc0121ff37b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r2max</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a65552e4442ce2184ed4c714d9aee4cf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; TinyVector&lt; T, 2 &gt; &gt;</type>
      <name>nextcells</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a4265b96c7daf974697ba794c20309c0a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::DTD_BConds&lt; T, 2, PPPS &gt;</name>
    <filename>a00176.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>DTD_BConds</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>ad2b434fb4022c1a2af67def1784d27ea</anchor>
      <arglist>(const CrystalLattice&lt; T, 2 &gt; &amp;lat)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>apply_bc</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a4ad2f02ace001d1bc2a1d52e7ecb5473</anchor>
      <arglist>(TinyVector&lt; T, 2 &gt; &amp;displ) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_bc</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a039d84c89f9b2c7c2091a7a6f9d44600</anchor>
      <arglist>(std::vector&lt; TinyVector&lt; T, 2 &gt; &gt; &amp;dr, std::vector&lt; T &gt; &amp;r, std::vector&lt; T &gt; &amp;rinv) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_bc</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a7e57c166d0f6d76146cfcc40f23b4e9f</anchor>
      <arglist>(std::vector&lt; TinyVector&lt; T, 2 &gt; &gt; &amp;dr, std::vector&lt; T &gt; &amp;r) const </arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r00</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>ad5fb08fa8b88a6b58dd574cf9decafb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r10</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>ad96a40ef96597d0e2b8469173186b26e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r01</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a8239545585fe9a537683600d6e110202</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r11</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>ad57d27048a9f8876fb1d96a6c5f9a39f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g00</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>aca7874e1bc96d406ff0d29fbcab5762e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g10</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>ad2801336cef856fc67a4bacfcaaae02a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g01</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>aecec1790f5e2b46ce218e00e65e2fe06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g11</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a8919cab53b77b5cf4a896bc0121ff37b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r2max</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a65552e4442ce2184ed4c714d9aee4cf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; TinyVector&lt; T, 2 &gt; &gt;</type>
      <name>nextcells</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a4265b96c7daf974697ba794c20309c0a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::DTD_BConds&lt; T, 2, PPPO &gt;</name>
    <filename>a00175.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>DTD_BConds</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>ad2b434fb4022c1a2af67def1784d27ea</anchor>
      <arglist>(const CrystalLattice&lt; T, 2 &gt; &amp;lat)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>apply_bc</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a4ad2f02ace001d1bc2a1d52e7ecb5473</anchor>
      <arglist>(TinyVector&lt; T, 2 &gt; &amp;displ) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_bc</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a039d84c89f9b2c7c2091a7a6f9d44600</anchor>
      <arglist>(std::vector&lt; TinyVector&lt; T, 2 &gt; &gt; &amp;dr, std::vector&lt; T &gt; &amp;r, std::vector&lt; T &gt; &amp;rinv) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_bc</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a7e57c166d0f6d76146cfcc40f23b4e9f</anchor>
      <arglist>(std::vector&lt; TinyVector&lt; T, 2 &gt; &gt; &amp;dr, std::vector&lt; T &gt; &amp;r) const </arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Linv0</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a858dea5413316bf027d6880153badc8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>L0</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a42170abef5cee300b5abb43b5450b1f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Linv1</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a107427c0d863c766d925ae11eab255c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>L1</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>ae51b17b3cea1392721f23e0ef4c5c72f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::DTD_BConds&lt; T, 2, SUPERCELL_WIRE &gt;</name>
    <filename>a00178.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>DTD_BConds</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>ad2b434fb4022c1a2af67def1784d27ea</anchor>
      <arglist>(const CrystalLattice&lt; T, 2 &gt; &amp;lat)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>apply_bc</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a4ad2f02ace001d1bc2a1d52e7ecb5473</anchor>
      <arglist>(TinyVector&lt; T, 2 &gt; &amp;displ) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_bc</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a039d84c89f9b2c7c2091a7a6f9d44600</anchor>
      <arglist>(std::vector&lt; TinyVector&lt; T, 2 &gt; &gt; &amp;dr, std::vector&lt; T &gt; &amp;r, std::vector&lt; T &gt; &amp;rinv) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_bc</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a7e57c166d0f6d76146cfcc40f23b4e9f</anchor>
      <arglist>(std::vector&lt; TinyVector&lt; T, 2 &gt; &gt; &amp;dr, std::vector&lt; T &gt; &amp;r) const </arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Linv0</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a858dea5413316bf027d6880153badc8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>L0</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a42170abef5cee300b5abb43b5450b1f2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::DTD_BConds&lt; T, 3, PPPO &gt;</name>
    <filename>a00184.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>DTD_BConds</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>a96e553db0b24322299bd25f267bd41bf</anchor>
      <arglist>(const CrystalLattice&lt; T, 3 &gt; &amp;lat)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>apply_bc</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>abddbc3ddf4fa6875b3805dc0dd3bda98</anchor>
      <arglist>(TinyVector&lt; T, 3 &gt; &amp;displ) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_bc</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>a843ac5c228f92e125ce36f79a5c46e4b</anchor>
      <arglist>(std::vector&lt; TinyVector&lt; T, 3 &gt; &gt; &amp;dr, std::vector&lt; T &gt; &amp;r, std::vector&lt; T &gt; &amp;rinv) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_bc</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>aca521639b2fea0b1f6bb8a4e7d4bb75d</anchor>
      <arglist>(std::vector&lt; TinyVector&lt; T, 3 &gt; &gt; &amp;dr, std::vector&lt; T &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_rsquared</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>a8281bd96440d422dd8c4f1dfa1e4cc2f</anchor>
      <arglist>(TinyVector&lt; T, 3 &gt; *restrict dr, T *restrict rr, int n)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Linv0</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>a858dea5413316bf027d6880153badc8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>L0</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>a42170abef5cee300b5abb43b5450b1f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Linv1</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>a107427c0d863c766d925ae11eab255c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>L1</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>ae51b17b3cea1392721f23e0ef4c5c72f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Linv2</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>adf96b44091e3489ef83a5f785f3d941b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>L2</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>ac25dba53d3cddc3af93ea902ee60230c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r2max</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>a65552e4442ce2184ed4c714d9aee4cf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>dummy</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>a5e2206d7bde7b95cb19e1c1ca14c8a40</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::DTD_BConds&lt; T, 3, PPPS &gt;</name>
    <filename>a00185.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>DTD_BConds</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a96e553db0b24322299bd25f267bd41bf</anchor>
      <arglist>(const CrystalLattice&lt; T, 3 &gt; &amp;lat)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>apply_bc</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>abddbc3ddf4fa6875b3805dc0dd3bda98</anchor>
      <arglist>(TinyVector&lt; T, 3 &gt; &amp;displ) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_bc</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a843ac5c228f92e125ce36f79a5c46e4b</anchor>
      <arglist>(std::vector&lt; TinyVector&lt; T, 3 &gt; &gt; &amp;dr, std::vector&lt; T &gt; &amp;r, std::vector&lt; T &gt; &amp;rinv) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_bc</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>aca521639b2fea0b1f6bb8a4e7d4bb75d</anchor>
      <arglist>(std::vector&lt; TinyVector&lt; T, 3 &gt; &gt; &amp;dr, std::vector&lt; T &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_rsquared</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a8281bd96440d422dd8c4f1dfa1e4cc2f</anchor>
      <arglist>(TinyVector&lt; T, 3 &gt; *restrict dr, T *restrict rr, int n)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r00</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>ad5fb08fa8b88a6b58dd574cf9decafb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r10</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>ad96a40ef96597d0e2b8469173186b26e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r20</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>aadec67e4970dcd0bc6d67627cf7480b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r01</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a8239545585fe9a537683600d6e110202</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r11</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>ad57d27048a9f8876fb1d96a6c5f9a39f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r21</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>afa7806690e3508f1afded6dfd727130b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r02</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>ab5c5b682730234c1ed1f6352721e4097</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r12</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>ad45d4665c6e715413dc84ef4ca38904d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r22</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a3610afcce40943bac502264be85e9d1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g00</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>aca7874e1bc96d406ff0d29fbcab5762e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g10</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>ad2801336cef856fc67a4bacfcaaae02a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g20</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a15cfd7ff92fa8726be1a748dd33b847a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g01</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>aecec1790f5e2b46ce218e00e65e2fe06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g11</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a8919cab53b77b5cf4a896bc0121ff37b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g21</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a3d1aa4fcd14df576ef8da65d9fbc6cf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g02</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a6affceec05df553674d36e28dbb01b2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g12</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a0f2616dd66ee9fa287c07246191244bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g22</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a2b420329903ddc1e0f3815b1a4cb5dbc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::DTD_BConds&lt; T, 3, PPPG &gt;</name>
    <filename>a00183.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>DTD_BConds</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>a96e553db0b24322299bd25f267bd41bf</anchor>
      <arglist>(const CrystalLattice&lt; T, 3 &gt; &amp;lat)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>apply_bc</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>abddbc3ddf4fa6875b3805dc0dd3bda98</anchor>
      <arglist>(TinyVector&lt; T, 3 &gt; &amp;displ) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_bc</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>a843ac5c228f92e125ce36f79a5c46e4b</anchor>
      <arglist>(std::vector&lt; TinyVector&lt; T, 3 &gt; &gt; &amp;dr, std::vector&lt; T &gt; &amp;r, std::vector&lt; T &gt; &amp;rinv) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_bc</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>aca521639b2fea0b1f6bb8a4e7d4bb75d</anchor>
      <arglist>(std::vector&lt; TinyVector&lt; T, 3 &gt; &gt; &amp;dr, std::vector&lt; T &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_rsquared</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>a8281bd96440d422dd8c4f1dfa1e4cc2f</anchor>
      <arglist>(TinyVector&lt; T, 3 &gt; *restrict dr, T *restrict rr, int n)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g00</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>aca7874e1bc96d406ff0d29fbcab5762e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g10</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>ad2801336cef856fc67a4bacfcaaae02a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g20</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>a15cfd7ff92fa8726be1a748dd33b847a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g01</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>aecec1790f5e2b46ce218e00e65e2fe06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g11</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>a8919cab53b77b5cf4a896bc0121ff37b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g21</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>a3d1aa4fcd14df576ef8da65d9fbc6cf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g02</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>a6affceec05df553674d36e28dbb01b2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g12</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>a0f2616dd66ee9fa287c07246191244bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g22</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>a2b420329903ddc1e0f3815b1a4cb5dbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; TinyVector&lt; T, 3 &gt;, 3 &gt;</type>
      <name>rb</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>a084042912a51ad1fd0d0adcc273850dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; TinyVector&lt; T, 3 &gt; &gt;</type>
      <name>corners</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>a177b0c6416cc721a109758c265d21a70</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::DTD_BConds&lt; T, 3, PPNG &gt;</name>
    <filename>a00179.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>DTD_BConds</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a96e553db0b24322299bd25f267bd41bf</anchor>
      <arglist>(const CrystalLattice&lt; T, 3 &gt; &amp;lat)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>apply_bc</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>abddbc3ddf4fa6875b3805dc0dd3bda98</anchor>
      <arglist>(TinyVector&lt; T, 3 &gt; &amp;displ) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_bc</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a843ac5c228f92e125ce36f79a5c46e4b</anchor>
      <arglist>(std::vector&lt; TinyVector&lt; T, 3 &gt; &gt; &amp;dr, std::vector&lt; T &gt; &amp;r, std::vector&lt; T &gt; &amp;rinv) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_bc</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>aca521639b2fea0b1f6bb8a4e7d4bb75d</anchor>
      <arglist>(std::vector&lt; TinyVector&lt; T, 3 &gt; &gt; &amp;dr, std::vector&lt; T &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_rsquared</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a8281bd96440d422dd8c4f1dfa1e4cc2f</anchor>
      <arglist>(TinyVector&lt; T, 3 &gt; *restrict dr, T *restrict rr, int n)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g00</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>aca7874e1bc96d406ff0d29fbcab5762e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g10</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>ad2801336cef856fc67a4bacfcaaae02a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g01</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>aecec1790f5e2b46ce218e00e65e2fe06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g11</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a8919cab53b77b5cf4a896bc0121ff37b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; TinyVector&lt; T, 3 &gt;, 3 &gt;</type>
      <name>rb</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a084042912a51ad1fd0d0adcc273850dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; TinyVector&lt; T, 3 &gt; &gt;</type>
      <name>corners</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a177b0c6416cc721a109758c265d21a70</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::DTD_BConds&lt; T, 3, PPNO &gt;</name>
    <filename>a00180.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>DTD_BConds</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a96e553db0b24322299bd25f267bd41bf</anchor>
      <arglist>(const CrystalLattice&lt; T, 3 &gt; &amp;lat)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>apply_bc</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>abddbc3ddf4fa6875b3805dc0dd3bda98</anchor>
      <arglist>(TinyVector&lt; T, 3 &gt; &amp;displ) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_bc</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a843ac5c228f92e125ce36f79a5c46e4b</anchor>
      <arglist>(std::vector&lt; TinyVector&lt; T, 3 &gt; &gt; &amp;dr, std::vector&lt; T &gt; &amp;r, std::vector&lt; T &gt; &amp;rinv) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_bc</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>aca521639b2fea0b1f6bb8a4e7d4bb75d</anchor>
      <arglist>(std::vector&lt; TinyVector&lt; T, 3 &gt; &gt; &amp;dr, std::vector&lt; T &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_rsquared</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a8281bd96440d422dd8c4f1dfa1e4cc2f</anchor>
      <arglist>(TinyVector&lt; T, 3 &gt; *restrict dr, T *restrict rr, int n)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Linv0</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a858dea5413316bf027d6880153badc8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>L0</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a42170abef5cee300b5abb43b5450b1f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Linv1</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a107427c0d863c766d925ae11eab255c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>L1</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>ae51b17b3cea1392721f23e0ef4c5c72f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::DTD_BConds&lt; T, 3, PPNS &gt;</name>
    <filename>a00181.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>DTD_BConds</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a96e553db0b24322299bd25f267bd41bf</anchor>
      <arglist>(const CrystalLattice&lt; T, 3 &gt; &amp;lat)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>apply_bc</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>abddbc3ddf4fa6875b3805dc0dd3bda98</anchor>
      <arglist>(TinyVector&lt; T, 3 &gt; &amp;displ) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_bc</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a843ac5c228f92e125ce36f79a5c46e4b</anchor>
      <arglist>(std::vector&lt; TinyVector&lt; T, 3 &gt; &gt; &amp;dr, std::vector&lt; T &gt; &amp;r, std::vector&lt; T &gt; &amp;rinv) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_bc</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>aca521639b2fea0b1f6bb8a4e7d4bb75d</anchor>
      <arglist>(std::vector&lt; TinyVector&lt; T, 3 &gt; &gt; &amp;dr, std::vector&lt; T &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_rsquared</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a8281bd96440d422dd8c4f1dfa1e4cc2f</anchor>
      <arglist>(TinyVector&lt; T, 3 &gt; *restrict dr, T *restrict rr, int n)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r00</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>ad5fb08fa8b88a6b58dd574cf9decafb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r10</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>ad96a40ef96597d0e2b8469173186b26e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r01</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a8239545585fe9a537683600d6e110202</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r11</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>ad57d27048a9f8876fb1d96a6c5f9a39f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g00</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>aca7874e1bc96d406ff0d29fbcab5762e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g10</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>ad2801336cef856fc67a4bacfcaaae02a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g01</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>aecec1790f5e2b46ce218e00e65e2fe06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g11</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a8919cab53b77b5cf4a896bc0121ff37b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::DTD_BConds&lt; T, 3, SUPERCELL_WIRE &gt;</name>
    <filename>a00187.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>DTD_BConds</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>a96e553db0b24322299bd25f267bd41bf</anchor>
      <arglist>(const CrystalLattice&lt; T, 3 &gt; &amp;lat)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>apply_bc</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>abddbc3ddf4fa6875b3805dc0dd3bda98</anchor>
      <arglist>(TinyVector&lt; T, 3 &gt; &amp;displ) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_bc</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>a843ac5c228f92e125ce36f79a5c46e4b</anchor>
      <arglist>(std::vector&lt; TinyVector&lt; T, 3 &gt; &gt; &amp;dr, std::vector&lt; T &gt; &amp;r, std::vector&lt; T &gt; &amp;rinv) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_bc</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>aca521639b2fea0b1f6bb8a4e7d4bb75d</anchor>
      <arglist>(std::vector&lt; TinyVector&lt; T, 3 &gt; &gt; &amp;dr, std::vector&lt; T &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_rsquared</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>a8281bd96440d422dd8c4f1dfa1e4cc2f</anchor>
      <arglist>(TinyVector&lt; T, 3 &gt; *restrict dr, T *restrict rr, int n)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Linv0</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>a858dea5413316bf027d6880153badc8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>L0</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>a42170abef5cee300b5abb43b5450b1f2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::DTD_BConds&lt; T, 3, PPPX &gt;</name>
    <filename>a00186.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>DTD_BConds</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a96e553db0b24322299bd25f267bd41bf</anchor>
      <arglist>(const CrystalLattice&lt; T, 3 &gt; &amp;lat)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_min_distance</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a56bf1b62a425aaa2d71e554157ba67d8</anchor>
      <arglist>(TinyVector&lt; T, 3 &gt; &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>apply_bc</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>abddbc3ddf4fa6875b3805dc0dd3bda98</anchor>
      <arglist>(TinyVector&lt; T, 3 &gt; &amp;displ) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert2Cart</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a7d171a3720fce385219e4825ca0def1c</anchor>
      <arglist>(const T *restrict in, T *restrict out, int n) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert2Unit</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a935dc60d460c39560485a3a731efff02</anchor>
      <arglist>(const T *restrict in, T *restrict out, int n) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_bc</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a843ac5c228f92e125ce36f79a5c46e4b</anchor>
      <arglist>(std::vector&lt; TinyVector&lt; T, 3 &gt; &gt; &amp;dr, std::vector&lt; T &gt; &amp;r, std::vector&lt; T &gt; &amp;rinv) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_bc</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>aca521639b2fea0b1f6bb8a4e7d4bb75d</anchor>
      <arglist>(std::vector&lt; TinyVector&lt; T, 3 &gt; &gt; &amp;dr, std::vector&lt; T &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_rsquared</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a8281bd96440d422dd8c4f1dfa1e4cc2f</anchor>
      <arglist>(TinyVector&lt; T, 3 &gt; *restrict dr, T *restrict rr, int n)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r00</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>ad5fb08fa8b88a6b58dd574cf9decafb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r10</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>ad96a40ef96597d0e2b8469173186b26e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r20</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>aadec67e4970dcd0bc6d67627cf7480b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r01</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a8239545585fe9a537683600d6e110202</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r11</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>ad57d27048a9f8876fb1d96a6c5f9a39f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r21</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>afa7806690e3508f1afded6dfd727130b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r02</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>ab5c5b682730234c1ed1f6352721e4097</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r12</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>ad45d4665c6e715413dc84ef4ca38904d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r22</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a3610afcce40943bac502264be85e9d1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g00</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>aca7874e1bc96d406ff0d29fbcab5762e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g10</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>ad2801336cef856fc67a4bacfcaaae02a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g20</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a15cfd7ff92fa8726be1a748dd33b847a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g01</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>aecec1790f5e2b46ce218e00e65e2fe06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g11</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a8919cab53b77b5cf4a896bc0121ff37b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g21</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a3d1aa4fcd14df576ef8da65d9fbc6cf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g02</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a6affceec05df553674d36e28dbb01b2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g12</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a0f2616dd66ee9fa287c07246191244bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g22</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a2b420329903ddc1e0f3815b1a4cb5dbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r2max</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a65552e4442ce2184ed4c714d9aee4cf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; TinyVector&lt; T, 3 &gt; &gt;</type>
      <name>nextcells</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a8eb6d166635690888e792a4e45036e4b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::DTD_BConds&lt; T, 3, PPNX &gt;</name>
    <filename>a00182.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>DTD_BConds</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a96e553db0b24322299bd25f267bd41bf</anchor>
      <arglist>(const CrystalLattice&lt; T, 3 &gt; &amp;lat)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_min_distance</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a56bf1b62a425aaa2d71e554157ba67d8</anchor>
      <arglist>(TinyVector&lt; T, 3 &gt; &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>apply_bc</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>abddbc3ddf4fa6875b3805dc0dd3bda98</anchor>
      <arglist>(TinyVector&lt; T, 3 &gt; &amp;displ) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_bc</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a843ac5c228f92e125ce36f79a5c46e4b</anchor>
      <arglist>(std::vector&lt; TinyVector&lt; T, 3 &gt; &gt; &amp;dr, std::vector&lt; T &gt; &amp;r, std::vector&lt; T &gt; &amp;rinv) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_bc</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>aca521639b2fea0b1f6bb8a4e7d4bb75d</anchor>
      <arglist>(std::vector&lt; TinyVector&lt; T, 3 &gt; &gt; &amp;dr, std::vector&lt; T &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_rsquared</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a8281bd96440d422dd8c4f1dfa1e4cc2f</anchor>
      <arglist>(TinyVector&lt; T, 3 &gt; *restrict dr, T *restrict rr, int n)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r00</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>ad5fb08fa8b88a6b58dd574cf9decafb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r10</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>ad96a40ef96597d0e2b8469173186b26e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r01</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a8239545585fe9a537683600d6e110202</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r11</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>ad57d27048a9f8876fb1d96a6c5f9a39f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g00</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>aca7874e1bc96d406ff0d29fbcab5762e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g10</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>ad2801336cef856fc67a4bacfcaaae02a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g01</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>aecec1790f5e2b46ce218e00e65e2fe06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g11</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a8919cab53b77b5cf4a896bc0121ff37b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r2max</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a65552e4442ce2184ed4c714d9aee4cf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; TinyVector&lt; T, 3 &gt; &gt;</type>
      <name>nextcells</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a8eb6d166635690888e792a4e45036e4b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::Uniform3DGridLayout</name>
    <filename>a00615.html</filename>
    <base>CrystalLattice&lt; OHMMS_PRECISION, 3, OHMMS_ORTHO &gt;</base>
    <base>UniformCartesianGrid&lt; OHMMS_PRECISION, 3 &gt;</base>
    <member kind="enumvalue">
      <type>@</type>
      <name>IsOrthogonal</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>aba01db17f4a2bfbc3db60dc172972a25af1e7de4b6a4ef80140c2b9c66e7f05e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MPI_GRID</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>aaf105ae5beaca1dee30ae54530691fcead065b2bc1263d6604457135d0368900d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>OMP_GRID</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>aaf105ae5beaca1dee30ae54530691fceaa8cf95c7b559b6f2095b84e32b21499f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SPATIAL_GRID</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>aaf105ae5beaca1dee30ae54530691fceac0c82a4da70dc9cc1ea2d02f7d2026f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>GridLevel</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>aaf105ae5beaca1dee30ae54530691fceabde7399371c1acdcc1c67e17668abd45</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OHMMS_PRECISION</type>
      <name>value_type</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>ab2decad2e9b0f41949dab4dcc20b599e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CrystalLattice&lt; value_type, 3, OHMMS_ORTHO &gt;</type>
      <name>Base_t</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>ab1746ae70ca7b3fa23fd756f70fc2547</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UniformCartesianGrid&lt; value_type, 3 &gt;</type>
      <name>Grid_t</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>a67ea1f94b9924b47cee13c4e04720a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Uniform3DGridLayout</type>
      <name>This_t</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>abfac00555e49ed59fc4feb83408b83d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base_t::SingleParticlePos_t</type>
      <name>SingleParticlePos_t</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>a138a088282a95b48fb2e37d36a9c6e3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base_t::SingleParticleIndex_t</type>
      <name>SingleParticleIndex_t</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>a99106608930a7a0f595ae77b111fd1bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OHMMS_PRECISION</type>
      <name>Scalar_t</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a74ebc0a8ec00a527f379a64ebf24d6de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TinyVector&lt; OHMMS_PRECISION, D &gt;</type>
      <name>SingleParticlePos_t</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a94d73f4c1388b05bcfa8e521602046ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TinyVector&lt; int, D &gt;</type>
      <name>SingleParticleIndex_t</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>ae91cfe6a932dda22048f2f948fd9a9d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tensor&lt; OHMMS_PRECISION, D &gt;</type>
      <name>Tensor_t</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>aee0636a06dbdd36b7e2beddf0724b6b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Uniform3DGridLayout</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>aca715bc7bea087b3eaba770a9884e367</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>a1388675f90e3286c59a1d6c2d4e9ba5e</anchor>
      <arglist>(const Uniform3DGridLayout &amp;pl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Uniform3DGridLayout</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>a2d16f809633e8c91de3d0be5b35d7c20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>first_connected</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>add31a72895957e8c6e61a1e5d5e60c0e</anchor>
      <arglist>(int ig) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>last_connected</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>a7cf292ea4a056b8f587c1a74c8216629</anchor>
      <arglist>(int ig) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>max_connected</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>afc8c2735021c227b1dfb610fb4644ed3</anchor>
      <arglist>(int ig) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id_connected</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>a00d261a2dc9afb92d39edda224169191</anchor>
      <arglist>(int j) const </arglist>
    </member>
    <member kind="function">
      <type>SingleParticlePos_t</type>
      <name>bc</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>a0627294ec0d17f07096da8555cc6a55a</anchor>
      <arglist>(int j) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ncontexts</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>a08ce9de05a8928aba4f12a63dcad2386</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>connectGrid</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>a4cbe1ba798eefd0954e30bc4d130541c</anchor>
      <arglist>(value_type int_rad, value_type con_rad=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeShell</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>a9d0500fd0fa122f5991ab8f933a720f2</anchor>
      <arglist>(std::vector&lt; SingleParticleIndex_t &gt; &amp;RS, std::vector&lt; bool &gt; &amp;FS, const SingleParticleIndex_t &amp;nc, value_type rr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeGrid</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>a0e4985fc29c5c1f9dfd2b5af6cd303b5</anchor>
      <arglist>(const GIM &amp;mgrid)</arglist>
    </member>
    <member kind="function">
      <type>Grid_t *</type>
      <name>addGrid</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>a0df75a4a564a5f5c52f9035e7b60bc6a</anchor>
      <arglist>(int glevel, const SingleParticleIndex_t &amp;agrid)</arglist>
    </member>
    <member kind="function">
      <type>Grid_t *</type>
      <name>getGrid</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>ac55788e6645e9296ffe4c4130b87ebdf</anchor>
      <arglist>(int glevel)</arglist>
    </member>
    <member kind="function">
      <type>const Grid_t *</type>
      <name>getGrid</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>a98855fb724f1c6aa574a5a81d35db096</anchor>
      <arglist>(int glevel) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initGrid</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>aac205180d02e601b3ab221b0e0176632</anchor>
      <arglist>(Grid_t &amp;agrid, const Grid_t &amp;subgrid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkGrid</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>aa55b73bf19fb23925eca598ed20e649f</anchor>
      <arglist>(value_type int_rad)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ngrid</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>a2f6d7d9eced2fc2d5ac8f3cba32844c6</anchor>
      <arglist>(int ig) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ngrid</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>ab6e74d673c117fa5e75f4891d4776567</anchor>
      <arglist>(int glevel, int ig) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>aa230a2d18799b9cd3d177081b4a843d1</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>ac5c54df7ed3b930268c8d7752c101725</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLRCutoffs</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>ade5eaf5adebaee20f3c20278867f4e9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>a9cd9ac296d50b5f10c75d9a0f338f316</anchor>
      <arglist>(const Tensor&lt; value_type, 3 &gt; &amp;lat)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CrystalLattice</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a8fe526e67fe25c607e23ed92a2d30357</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CrystalLattice</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>aca0a0e444c5eecd801a61f39133f69cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SingleParticlePos_t</type>
      <name>a</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>ae5f36417fcf769466f91db3d986a7a26</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>SingleParticlePos_t</type>
      <name>b</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a64570e5db3cc3234e56a4521bfb6b2f1</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>SingleParticlePos_t</type>
      <name>toUnit</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>adc8cbaa4d7f46928fbcc2ae9c1e3bfe0</anchor>
      <arglist>(const TinyVector&lt; T1, D &gt; &amp;r) const</arglist>
    </member>
    <member kind="function">
      <type>SingleParticlePos_t</type>
      <name>toCart</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a86800f973ccb3a1a906af39576f87b92</anchor>
      <arglist>(const TinyVector&lt; T1, D &gt; &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a386bd4e6b89facf6966b9bef9603a11d</anchor>
      <arglist>(const TinyVector&lt; OHMMS_PRECISION, D &gt; &amp;u) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a2c5a1193823b041c8cc45f0c7c7020ff</anchor>
      <arglist>(const TinyVector&lt; OHMMS_PRECISION, D &gt; &amp;u, TinyVector&lt; OHMMS_PRECISION, D &gt; &amp;ubox) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>outOfBound</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a37147f9b7fcaa9c8cc661d6ed0575bce</anchor>
      <arglist>(const TinyVector&lt; OHMMS_PRECISION, D &gt; &amp;u) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyMinimumImage</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>abd1d2b266a6dd6e208c2aff11f8148cd</anchor>
      <arglist>(TinyVector&lt; OHMMS_PRECISION, D &gt; &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>OHMMS_PRECISION</type>
      <name>Dot</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a39bbadb32d6f454aefc6b0ff10ab3baa</anchor>
      <arglist>(const SingleParticlePos_t &amp;ra, const SingleParticlePos_t &amp;rb) const</arglist>
    </member>
    <member kind="function">
      <type>SingleParticlePos_t</type>
      <name>k_cart</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a5f07f54c78f87570d15941773ae95f07</anchor>
      <arglist>(const SingleParticlePos_t &amp;kin) const</arglist>
    </member>
    <member kind="function">
      <type>OHMMS_PRECISION</type>
      <name>ksq</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>adc2e9ff2acdda4e29c1e160b700b3549</anchor>
      <arglist>(const SingleParticlePos_t &amp;kin) const</arglist>
    </member>
    <member kind="function">
      <type>CrystalLattice&lt; OHMMS_PRECISION, D, ORTHO &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>ac8e2dae3a0ffa2f5d1c30708a3926da9</anchor>
      <arglist>(const CrystalLattice&lt; T1, D, ORTHO &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CrystalLattice&lt; OHMMS_PRECISION, D, ORTHO &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a09531c4115ba3f95ddd23ca75859fd66</anchor>
      <arglist>(const Tensor&lt; T1, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CrystalLattice&lt; OHMMS_PRECISION, D, ORTHO &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a041e30f606ba4e2243c2433a969e6b6a</anchor>
      <arglist>(OHMMS_PRECISIONsc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a2c9a1c01e13bbedf722b663e5ea289c9</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>ac822a6b981469835d7833689b408e95b</anchor>
      <arglist>(std::vector&lt; string &gt; &amp;argv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a9ca2493a42235ffcdbfb848982a0f402</anchor>
      <arglist>(OHMMS_PRECISIONsc, OHMMS_PRECISION *lat=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>aa4266ed93102007b995bfb3df27126ec</anchor>
      <arglist>(const CrystalLattice&lt; OHMMS_PRECISION, D, ORTHO &gt; &amp;oldlat, int *uc=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a72b428cd1f92495ea39577922c8be039</anchor>
      <arglist>(const Tensor&lt; OHMMS_PRECISION, D &gt; &amp;lat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a9922c7179394180355f53b0a14eb3013</anchor>
      <arglist>(ostream &amp;, int level=2) const</arglist>
    </member>
    <member kind="variable">
      <type>SingleParticleIndex_t</type>
      <name>Grid</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>af58d773c12085c20b88f54f1ea64d0c2</anchor>
      <arglist>[GridLevel]</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>Status</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>ae5688384c5cddd8d139e001a2e3666c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>MaxConnections</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>a754a11e0baafd4ee9c91b521fac3902d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>InteractionRadius</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>a07285e981d843f860415f593446a333e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>ConnectionRadius</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>a0b028e5d4bc470390ace385525aa1c93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>LR_dim_cutoff</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>ab6fc1459ef3314c5a7f52ac0629693cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>LR_rc</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>abbfb1e10ff75523ae68aaa0d776b5fc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>LR_kc</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>aa277e48f3a412dc0eb334c4ef91df7aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SingleParticleIndex_t</type>
      <name>NCMax</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>a996387ed87e478d8bb2fe162df84db41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Grid_t * &gt;</type>
      <name>SuperGrid</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>a2ba2f0addb8fb747c50cbe8e3c0834a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>c_offset</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>a3d7746b5033bb47a6433c63a062b8314</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>c_max</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>aea862295e420f30f5cb032b662f72170</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>c_id</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>abf3f4d3be7b8a305e41c5fabe27ac2ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; SingleParticlePos_t &gt;</type>
      <name>c_bc</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>a5c1e4bd0ff90c321821e72bb1fe3be53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; SingleParticlePos_t &gt;</type>
      <name>u_bc</name>
      <anchorfile>a00615.html</anchorfile>
      <anchor>abb372e018498b0879441e99a1d0e4fc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>DiagonalOnly</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a117081ba48307a4db07fce3f4238521b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>SuperCellEnum</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a45d508fa5ed33e5fb92afc6ec5650341</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; int, D &gt;</type>
      <name>BoxBConds</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>ae225f2939b6b2b25cb49dba0baed692e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SingleParticlePos_t</type>
      <name>ABC</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a3ad43bd9811513a8daf85c0b3eede0b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; SingleParticlePos_t &gt;</type>
      <name>NextUnitCells</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a8461907b29aafc436d1c68d973bb59e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>Volume</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a2a5130c218b3ab62d29862d6e579a004</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>WignerSeitzRadius</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a85fb0721dbfaa3815b16a5c690ab986c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>SimulationCellRadius</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>ae2a790e918d8fd910949eec3da17b6fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>CellRadiusSq</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a6b6cf0b7ca20490328a461bcf36b3246</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tensor_t</type>
      <name>R</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a0374f7adc727fab677d12618f67842e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tensor_t</type>
      <name>G</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a597fafeb98127311f4e100a436d7e80e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tensor_t</type>
      <name>M</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a3d1a20ef0d50f545fa9159f24e522418</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tensor_t</type>
      <name>Mg</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a9379615a30349ca0dc58c4aa0c9c1908</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SingleParticlePos_t</type>
      <name>Length</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a0740bb9b889a9c179f51f01722225df6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SingleParticlePos_t</type>
      <name>OneOverLength</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>af729fd46fb84d6cbac3d0ec8969e5f35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; SingleParticlePos_t, D &gt;</type>
      <name>Rv</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>ac26acf32662dd50e1cbdc88fde0480c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; SingleParticlePos_t, D &gt;</type>
      <name>Gv</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>aa1434d7180658233d877dafde654e79e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::UniformCartesianGrid</name>
    <filename>a00616.html</filename>
    <templarg></templarg>
    <templarg>D</templarg>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::UniformCartesianGrid&lt; T, 3 &gt;</name>
    <filename>a00618.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>DistributedIndex::iterator</type>
      <name>iterator</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>a3a8ab1651e15c2cc4f27069a2785b39e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DistributedIndex::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>afde3afd92f32d395dba23a1d90534fd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UniformCartesianGrid</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>a44f4a808cdf34c176dad6c821585d9b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UniformCartesianGrid</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>ae6f84d795decefff87897f1b2e11e022</anchor>
      <arglist>(const IV &amp;ng)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UniformCartesianGrid</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>ad239d20e21195030724777b4da9d36b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UniformCartesianGrid&lt; T, 3 &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>a251bd7cb55605d3a0d953bcd8849db2b</anchor>
      <arglist>(const UniformCartesianGrid&lt; T, 3 &gt; &amp;gr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeCopy</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>a430d692db9e848dbb7bb6c8533039d64</anchor>
      <arglist>(const UniformCartesianGrid&lt; T, 3 &gt; &amp;gr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>ab243ad95876992f71bfc9043b9a713bd</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGrid</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>a633ae72568f8ed9a4ac954faaf136e4f</anchor>
      <arglist>(const IV &amp;ng)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTotalNum</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>abd442623fd85f7c5c676a11ab3fdacbf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>key</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>ae759b096d5a41235ac573eeda595ee50</anchor>
      <arglist>(int i, int j, int k) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>loc</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>a22585df1cedde64b14f3e3dfd6191b52</anchor>
      <arglist>(int i, int j, int k) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>loc</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>af0ca97a7957359afc53ef110a80e2159</anchor>
      <arglist>(T x, T y, T z) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>loc</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>af0bd7c0db3cdc513ce297f9c679c601c</anchor>
      <arglist>(const Pos_t &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>TinyVector&lt; int, 3 &gt;</type>
      <name>index</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>a3da746c94a7545f7de1c3866c3c66f96</anchor>
      <arglist>(const TinyVector&lt; T, 3 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>TinyVector&lt; T, 3 &gt;</type>
      <name>center</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>aca6f3772744333f9c29b6aeabacd5c13</anchor>
      <arglist>(int i, int j, int k) const </arglist>
    </member>
    <member kind="function">
      <type>TinyVector&lt; T, 3 &gt;</type>
      <name>vertex</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>aca5a6c82dbc5a726ec78e81df835543f</anchor>
      <arglist>(int i, int j, int k) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distribute</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>afaa17a66b9ac74c7e758706416733010</anchor>
      <arglist>(int ntot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distribute</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>a4e0ac87a6515cda11fb00343515a6ec5</anchor>
      <arglist>(_InputIterator first, _InputIterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printGrid</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>ab2ef9d03c018b02645155b73c54811b6</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeGroup</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>ab7d855ce72d8ecfa5b773a853f552c25</anchor>
      <arglist>(int ng)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>group</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>a9baceb2f4fae5ad81465a3bcef9303c0</anchor>
      <arglist>(int ig) const </arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>group</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>a0fa52ab1f3b51ef53825f3e8954effe5</anchor>
      <arglist>(int ig)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createData</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>acef8df17e24fe9b947f43a9048626abc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearData</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>abd4e5c937c4b98dd42745acb33815cdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addData</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>af4648155693ab37f0e685c4b841a4119</anchor>
      <arglist>(int ig, int iat)</arglist>
    </member>
    <member kind="function">
      <type>DistributedIndex &amp;</type>
      <name>getDataSets</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>a213751fee9a5fbc05a902c46c99011bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DistributedIndex &amp;</type>
      <name>getDataSets</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>a61d38e53bc69878914bbc8437e50b251</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumData</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>a27cec529758fff44e73a589cc7701ee2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxDataPerGrid</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>a9b5d7f6d710ba923a0bd58f9ebae9ab8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumDataSets</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>aa992cbbd068c094f132520762421f617</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumData</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>a98d3f8301a0f7229f3761bc54a797c50</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>firstData</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>a3cb262bea3c6664c17aa54a000897334</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lastData</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>af71a4fe7b7ffd6384b1d28be7e35feda</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>beginData</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>acc73fffd3455d35ccd5ff8fec2b8172b</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>endData</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>a32a8f25f429a810399aaf3fb8fdbf9f3</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>beginData</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>a087c69630a513196e80c75b0e672a863</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>endData</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>ac3da266d2af2f2ab123c0ecc35251f79</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>a7db8cb96645a84e753f1316be6945662</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumGrids</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>a5581e6609b5a1a0acab41c3933c30ed3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NP</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>a7f9c9c5054ef40b32de94954b3625330</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Delta</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>a6bcefece41e2634afa11085fb8845045</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>InvDelta</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>af67d9e6d97f288853409284ebc43ea5c</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>DistributedIndex</type>
      <name>I</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>a38b71ee9f01ae7e89654d407962e282c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>PID</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>a04cd37efd0013e36bb8c302e929a5a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>CellKey</name>
      <anchorfile>a00618.html</anchorfile>
      <anchor>a4512ec2b12f237445b29c2d31c5d9f28</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::UniformCartesianGrid&lt; T, 2 &gt;</name>
    <filename>a00617.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>DistributedIndex::iterator</type>
      <name>iterator</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>a3a8ab1651e15c2cc4f27069a2785b39e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DistributedIndex::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>afde3afd92f32d395dba23a1d90534fd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UniformCartesianGrid</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>a44f4a808cdf34c176dad6c821585d9b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UniformCartesianGrid</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>a70022baff876862dfd1473bf2d2c1663</anchor>
      <arglist>(const UniformCartesianGrid&lt; T, 2 &gt; &amp;gr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UniformCartesianGrid</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>ae6f84d795decefff87897f1b2e11e022</anchor>
      <arglist>(const IV &amp;ng)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UniformCartesianGrid</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>ad239d20e21195030724777b4da9d36b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UniformCartesianGrid&lt; T, 2 &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>ae314817d8826bd2262354072d0f3f616</anchor>
      <arglist>(const UniformCartesianGrid&lt; T, 2 &gt; &amp;gr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeCopy</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>aebd03d8cdb1678dc8d7f646669b2be8b</anchor>
      <arglist>(const UniformCartesianGrid&lt; T, 2 &gt; &amp;gr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>ab243ad95876992f71bfc9043b9a713bd</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGrid</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>a633ae72568f8ed9a4ac954faaf136e4f</anchor>
      <arglist>(const IV &amp;ng)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTotalNum</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>abd442623fd85f7c5c676a11ab3fdacbf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>key</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>a2c84f33fef2ccf65c678f71495e8dc1d</anchor>
      <arglist>(int i, int j) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>loc</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>a7f7dabefe9f7d4ceb0a62b403d194f9c</anchor>
      <arglist>(int i, int j) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>loc</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>aca05d02ab3aa4e2115e258660ca4326b</anchor>
      <arglist>(T x, T y) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>loc</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>af0bd7c0db3cdc513ce297f9c679c601c</anchor>
      <arglist>(const Pos_t &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>TinyVector&lt; int, 2 &gt;</type>
      <name>index</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>ab84690fdc3f0c45ab934f04f2dbb7065</anchor>
      <arglist>(const TinyVector&lt; T, 2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>TinyVector&lt; T, 2 &gt;</type>
      <name>center</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>a905bbdc7fe8456355ea8821fa238af02</anchor>
      <arglist>(int i, int j) const </arglist>
    </member>
    <member kind="function">
      <type>TinyVector&lt; T, 2 &gt;</type>
      <name>vertex</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>a14e6e82fb359c72ed543b58c6437dc2a</anchor>
      <arglist>(int i, int j) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distribute</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>afaa17a66b9ac74c7e758706416733010</anchor>
      <arglist>(int ntot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distribute</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>a4e0ac87a6515cda11fb00343515a6ec5</anchor>
      <arglist>(_InputIterator first, _InputIterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printGrid</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>ab2ef9d03c018b02645155b73c54811b6</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeGroup</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>ab7d855ce72d8ecfa5b773a853f552c25</anchor>
      <arglist>(int ng)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>group</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>a9baceb2f4fae5ad81465a3bcef9303c0</anchor>
      <arglist>(int ig) const </arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>group</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>a0fa52ab1f3b51ef53825f3e8954effe5</anchor>
      <arglist>(int ig)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createData</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>acef8df17e24fe9b947f43a9048626abc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearData</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>abd4e5c937c4b98dd42745acb33815cdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addData</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>af4648155693ab37f0e685c4b841a4119</anchor>
      <arglist>(int ig, int iat)</arglist>
    </member>
    <member kind="function">
      <type>DistributedIndex &amp;</type>
      <name>getDataSets</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>a213751fee9a5fbc05a902c46c99011bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DistributedIndex &amp;</type>
      <name>getDataSets</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>a61d38e53bc69878914bbc8437e50b251</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumData</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>a27cec529758fff44e73a589cc7701ee2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxDataPerGrid</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>a9b5d7f6d710ba923a0bd58f9ebae9ab8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumDataSets</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>aa992cbbd068c094f132520762421f617</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumData</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>a98d3f8301a0f7229f3761bc54a797c50</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>firstData</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>a3cb262bea3c6664c17aa54a000897334</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lastData</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>af71a4fe7b7ffd6384b1d28be7e35feda</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>beginData</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>acc73fffd3455d35ccd5ff8fec2b8172b</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>endData</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>a32a8f25f429a810399aaf3fb8fdbf9f3</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>beginData</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>a087c69630a513196e80c75b0e672a863</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>endData</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>ac3da266d2af2f2ab123c0ecc35251f79</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>a7db8cb96645a84e753f1316be6945662</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumGrids</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>a5581e6609b5a1a0acab41c3933c30ed3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NP</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>a27279047e3084ca8d8609cfe28bcc29c</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Delta</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>aa16e668a08894b47e0aee71909d25595</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>InvDelta</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>a75c8726db35d45aa3d28fff1ac082b1e</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>DistributedIndex</type>
      <name>I</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>a38b71ee9f01ae7e89654d407962e282c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>PID</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>a04cd37efd0013e36bb8c302e929a5a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>CellKey</name>
      <anchorfile>a00617.html</anchorfile>
      <anchor>a4512ec2b12f237445b29c2d31c5d9f28</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::UniformGridLayout</name>
    <filename>a00621.html</filename>
    <templarg>T</templarg>
    <templarg>D</templarg>
    <templarg>ORTHO</templarg>
    <base>qmcplusplus::CrystalLattice</base>
    <base>qmcplusplus::UniformCartesianGrid</base>
    <member kind="enumvalue">
      <type>@</type>
      <name>IsOrthogonal</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>a80155586fa275b28773c9b203f52cabaaf1e7de4b6a4ef80140c2b9c66e7f05e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MPI_GRID</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>a6b7b47dd702d9e331586d485013fd1eaad065b2bc1263d6604457135d0368900d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>OMP_GRID</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>a6b7b47dd702d9e331586d485013fd1eaaa8cf95c7b559b6f2095b84e32b21499f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SPATIAL_GRID</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>a6b7b47dd702d9e331586d485013fd1eaac0c82a4da70dc9cc1ea2d02f7d2026f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>GridLevel</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>a6b7b47dd702d9e331586d485013fd1eaabde7399371c1acdcc1c67e17668abd45</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>a265a253612b46abed17c61b0a5e5ce30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CrystalLattice&lt; T, D, ORTHO &gt;</type>
      <name>Base_t</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>ae19aefc1e9a4aaedf35c4f8e885da9b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UniformCartesianGrid&lt; T, D &gt;</type>
      <name>Grid_t</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>a9dbc4d4d8332efe6d3c53a85fc43c54c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UniformGridLayout&lt; T, D &gt;</type>
      <name>This_t</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>a5409a3edd3e7e03875011a495e1ad247</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base_t::SingleParticlePos_t</type>
      <name>SingleParticlePos_t</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>a138a088282a95b48fb2e37d36a9c6e3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base_t::SingleParticleIndex_t</type>
      <name>SingleParticleIndex_t</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>a99106608930a7a0f595ae77b111fd1bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UniformGridLayout</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>acd82ed6d02ccdd6088624a82b41e7724</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UniformGridLayout</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>a1b9649d0197a64728b78abbbb5a075d5</anchor>
      <arglist>(const UniformGridLayout&lt; T, D &gt; &amp;pl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>afbc4ef82eaa33873e0e9baa0476f814d</anchor>
      <arglist>(const UniformGridLayout&lt; T, D &gt; &amp;pl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~UniformGridLayout</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>a5d04883cdf2cc0e7021390efada872f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>first_connected</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>add31a72895957e8c6e61a1e5d5e60c0e</anchor>
      <arglist>(int ig) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>last_connected</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>a7cf292ea4a056b8f587c1a74c8216629</anchor>
      <arglist>(int ig) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>max_connected</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>afc8c2735021c227b1dfb610fb4644ed3</anchor>
      <arglist>(int ig) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id_connected</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>a00d261a2dc9afb92d39edda224169191</anchor>
      <arglist>(int j) const </arglist>
    </member>
    <member kind="function">
      <type>SingleParticlePos_t</type>
      <name>bc</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>a0627294ec0d17f07096da8555cc6a55a</anchor>
      <arglist>(int j) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ncontexts</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>a08ce9de05a8928aba4f12a63dcad2386</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>connectGrid</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>a4cbe1ba798eefd0954e30bc4d130541c</anchor>
      <arglist>(value_type int_rad, value_type con_rad=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeGrid</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>a0e4985fc29c5c1f9dfd2b5af6cd303b5</anchor>
      <arglist>(const GIM &amp;mgrid)</arglist>
    </member>
    <member kind="function">
      <type>Grid_t *</type>
      <name>addGrid</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>a0df75a4a564a5f5c52f9035e7b60bc6a</anchor>
      <arglist>(int glevel, const SingleParticleIndex_t &amp;agrid)</arglist>
    </member>
    <member kind="function">
      <type>Grid_t *</type>
      <name>getGrid</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>ac55788e6645e9296ffe4c4130b87ebdf</anchor>
      <arglist>(int glevel)</arglist>
    </member>
    <member kind="function">
      <type>const Grid_t *</type>
      <name>getGrid</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>a98855fb724f1c6aa574a5a81d35db096</anchor>
      <arglist>(int glevel) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initGrid</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>aac205180d02e601b3ab221b0e0176632</anchor>
      <arglist>(Grid_t &amp;agrid, const Grid_t &amp;subgrid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkGrid</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>aa55b73bf19fb23925eca598ed20e649f</anchor>
      <arglist>(value_type int_rad)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ngrid</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>a2f6d7d9eced2fc2d5ac8f3cba32844c6</anchor>
      <arglist>(int ig) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ngrid</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>ab6e74d673c117fa5e75f4891d4776567</anchor>
      <arglist>(int glevel, int ig) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>aa230a2d18799b9cd3d177081b4a843d1</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>ac5c54df7ed3b930268c8d7752c101725</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLRCutoffs</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>ade5eaf5adebaee20f3c20278867f4e9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>afeed7263498670a040c8b085ba32526b</anchor>
      <arglist>(const Tensor&lt; T, D &gt; &amp;lat)</arglist>
    </member>
    <member kind="variable">
      <type>SingleParticleIndex_t</type>
      <name>Grid</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>af58d773c12085c20b88f54f1ea64d0c2</anchor>
      <arglist>[GridLevel]</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>Status</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>ae5688384c5cddd8d139e001a2e3666c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>MaxConnections</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>a754a11e0baafd4ee9c91b521fac3902d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>InteractionRadius</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>a07285e981d843f860415f593446a333e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>ConnectionRadius</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>a0b028e5d4bc470390ace385525aa1c93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>LR_dim_cutoff</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>ab6fc1459ef3314c5a7f52ac0629693cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>LR_rc</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>abbfb1e10ff75523ae68aaa0d776b5fc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>LR_kc</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>aa277e48f3a412dc0eb334c4ef91df7aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SingleParticleIndex_t</type>
      <name>NCMax</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>a996387ed87e478d8bb2fe162df84db41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Grid_t * &gt;</type>
      <name>SuperGrid</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>a2ba2f0addb8fb747c50cbe8e3c0834a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>c_offset</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>a3d7746b5033bb47a6433c63a062b8314</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>c_max</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>aea862295e420f30f5cb032b662f72170</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>c_id</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>abf3f4d3be7b8a305e41c5fabe27ac2ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; SingleParticlePos_t &gt;</type>
      <name>c_bc</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>a5c1e4bd0ff90c321821e72bb1fe3be53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; SingleParticlePos_t &gt;</type>
      <name>u_bc</name>
      <anchorfile>a00621.html</anchorfile>
      <anchor>abb372e018498b0879441e99a1d0e4fc9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::LRCutoffEvaluator&lt; T, 2, ORTHO &gt;</name>
    <filename>a00360.html</filename>
    <templarg></templarg>
    <templarg>ORTHO</templarg>
    <member kind="typedef">
      <type>UniformGridLayout&lt; T, 2, ORTHO &gt;</type>
      <name>Lattice_t</name>
      <anchorfile>a00360.html</anchorfile>
      <anchor>a02fd249b4d193ac4f1041e0c2653fa19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a00360.html</anchorfile>
      <anchor>a8567dad30780e5c65cd5c4c5f272790f</anchor>
      <arglist>(Lattice_t &amp;lat)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::LRCutoffEvaluator&lt; T, 1, ORTHO &gt;</name>
    <filename>a00359.html</filename>
    <templarg></templarg>
    <templarg>ORTHO</templarg>
    <member kind="typedef">
      <type>UniformGridLayout&lt; T, 1, ORTHO &gt;</type>
      <name>Lattice_t</name>
      <anchorfile>a00359.html</anchorfile>
      <anchor>a1e0db0f4af6668a8c7f12900c53f6f5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a00359.html</anchorfile>
      <anchor>a8567dad30780e5c65cd5c4c5f272790f</anchor>
      <arglist>(Lattice_t &amp;lat)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::CreateLeaf&lt; ParticleAttrib&lt; T &gt; &gt;</name>
    <filename>a00106.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Reference&lt; ParticleAttrib&lt; T &gt; &gt;</type>
      <name>Leaf_t</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a58dfcd2cbf210ad40e4d5aa1fba4d037</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Leaf_t</type>
      <name>make</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>ab4093f6397d4647cbdc507a8ec35807e</anchor>
      <arglist>(const ParticleAttrib&lt; T &gt; &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::SizeLeafPA</name>
    <filename>a00559.html</filename>
    <member kind="function">
      <type></type>
      <name>SizeLeafPA</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6ab949404f667f454f50df12e925bacc</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SizeLeafPA</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a18c89f23351cac9c1faacec10b7fdc5a</anchor>
      <arglist>(const SizeLeafPA &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a23ab970220993d48145de1c2cd85bc2f</anchor>
      <arglist>(int s) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>size_m</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab320fb6c37a9b80622c6613d0fd7a43c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::LeafFunctor&lt; Scalar&lt; T &gt;, SizeLeafPA &gt;</name>
    <filename>a00338.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>bool</type>
      <name>Type_t</name>
      <anchorfile>a00338.html</anchorfile>
      <anchor>af31a28dfbf87086fad608ceae3c3601c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>apply</name>
      <anchorfile>a00338.html</anchorfile>
      <anchor>ac5c43fd46f08ea037f251e5ef10dd7d2</anchor>
      <arglist>(const Scalar&lt; T &gt; &amp;, const SizeLeafPA &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::LeafFunctor&lt; ParticleAttrib&lt; T &gt;, SizeLeafPA &gt;</name>
    <filename>a00335.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>bool</type>
      <name>Type_t</name>
      <anchorfile>a00335.html</anchorfile>
      <anchor>af31a28dfbf87086fad608ceae3c3601c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>apply</name>
      <anchorfile>a00335.html</anchorfile>
      <anchor>adade9ffa057a65458f3f077a3aeeb65e</anchor>
      <arglist>(const ParticleAttrib&lt; T &gt; &amp;v, const SizeLeafPA &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::LeafFunctor&lt; ParticleAttrib&lt; T &gt;, EvalLeaf1 &gt;</name>
    <filename>a00334.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Type_t</name>
      <anchorfile>a00334.html</anchorfile>
      <anchor>aace3424f71d53a9b6be8d37bc35cecd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Type_t</type>
      <name>apply</name>
      <anchorfile>a00334.html</anchorfile>
      <anchor>aa6baa8048c8b2a66d879abb03506eea2</anchor>
      <arglist>(const ParticleAttrib&lt; T &gt; &amp;vec, const EvalLeaf1 &amp;f)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::ParticleAttrib</name>
    <filename>a00460.html</filename>
    <templarg>T</templarg>
    <base>OhmmsObject</base>
    <member kind="typedef">
      <type>T</type>
      <name>Type_t</name>
      <anchorfile>a00460.html</anchorfile>
      <anchor>aace3424f71d53a9b6be8d37bc35cecd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>vector&lt; T &gt;</type>
      <name>Container_t</name>
      <anchorfile>a00460.html</anchorfile>
      <anchor>a2413d56557a75f48a045c338e3d47b31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container_t::iterator</type>
      <name>iterator</name>
      <anchorfile>a00460.html</anchorfile>
      <anchor>a7d1bb323b6d972f619c609d698e938b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container_t::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00460.html</anchorfile>
      <anchor>a7d7695e77d1310d350346758afb3481e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleAttrib&lt; T &gt;</type>
      <name>This_t</name>
      <anchorfile>a00460.html</anchorfile>
      <anchor>a993e58524931d81a7e705bd1d1bccc40</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParticleAttrib</name>
      <anchorfile>a00460.html</anchorfile>
      <anchor>aec8e90f3f6f5ee45ac95c6cdbbe98093</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>InUnit</name>
      <anchorfile>a00460.html</anchorfile>
      <anchor>aaf98799c643159ddd07df6e0747a2891</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nLocal</name>
      <anchorfile>a00460.html</anchorfile>
      <anchor>a6029b27829b897cebe8bf269f6dcafa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nGhosts</name>
      <anchorfile>a00460.html</anchorfile>
      <anchor>a7ba589a64202613c6d72598b66872106</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::ParticleBase</name>
    <filename>a00462.html</filename>
    <templarg>PT</templarg>
    <base>ParticleTags</base>
    <member kind="typedef">
      <type>PT::ParticleLayout_t</type>
      <name>ParticleLayout_t</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>aeb9910a4cbeae79051a4b158b0d15225</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PT::Index_t</type>
      <name>Index_t</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>afe0744ee8482c92b69252e662bb5460a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PT::Scalar_t</type>
      <name>Scalar_t</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a972820061fe8d0cdef59cbb2fb5be73e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PT::SingleParticleIndex_t</type>
      <name>SingleParticleIndex_t</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>ae9179e33dd484d5ae0a922c8199a64f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PT::SingleParticlePos_t</type>
      <name>SingleParticlePos_t</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a9aa21479de9d633e06ab69ef5054fa37</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PT::Tensor_t</type>
      <name>Tensor_t</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a61c81ceeb4c824a417583307b2688f1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>map&lt; string, OhmmsObject * &gt;::iterator</type>
      <name>PAListIterator</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a0e638660266db501b04fd45ec20fe28b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PT::ParticleIndex_t</type>
      <name>ParticleIndex_t</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>aa4b876bfde219c444a040a5785ccbe90</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PT::ParticleScalar_t</type>
      <name>ParticleScalar_t</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a9e5e94f34272a7af7a0b339428463505</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PT::ParticlePos_t</type>
      <name>ParticlePos_t</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a879bec661d0811bc96ec2cdc54ee9834</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PT::ParticleTensor_t</type>
      <name>ParticleTensor_t</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>af38d0bb648bf725a6f9bbccbe8dea049</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PT::ParticleGradient_t</type>
      <name>ParticleGradient_t</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>adb1a1a4fab0c4d7d1712e1d5c7970d81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PT::ParticleLaplacian_t</type>
      <name>ParticleLaplacian_t</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>ad79fc5e94702535ae6f100d573734326</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParticleBase</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a2b6d40b528be9ea02b94296633f9a9e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParticleBase</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a341cc21ec2306f71fac2bba33ce1f046</anchor>
      <arglist>(const ParticleBase&lt; PT &gt; &amp;P)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParticleBase</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>adf87f2c5e69d317753303cb5168b0ad8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getAttribType</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>aa38b305e638b193965e1d8e687bd6d08</anchor>
      <arglist>(const string &amp;tname)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumAttrib</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a7ed49947d2399b206ee5dc28c799f28e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PAListIterator</type>
      <name>first_attrib</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>acb2dcd7b4fa1ac9e6a8803abc69901f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PAListIterator</type>
      <name>last_attrib</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a9127480e7e4fd6e2b7726fd0a9a4c862</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasAttrib</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a16a95630a5961c623966b9ae18f605ac</anchor>
      <arglist>(const std::string &amp;attrib_name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addAttribute</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a55880a6db75d4636d078bd8b8bc4d95e</anchor>
      <arglist>(const std::string &amp;tname, const std::string &amp;oname)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addAttribute</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a7a2a0b7762cbe8adb7a734672cbcdfff</anchor>
      <arglist>(ParticleIndex_t &amp;pa)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addAttribute</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>ad8e7a91b4e336b78f0a1b4e36142fb5d</anchor>
      <arglist>(ParticleScalar_t &amp;pa)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addAttribute</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a80df7966e7a35ca45e9a52f5d7b0179a</anchor>
      <arglist>(ParticlePos_t &amp;pa)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addAttribute</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a10b184dcbba19b394564a18c7256005b</anchor>
      <arglist>(ParticleTensor_t &amp;pa)</arglist>
    </member>
    <member kind="function">
      <type>const ParticleIndex_t *</type>
      <name>getIndexAttrib</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a9e32566bc6069690d37b379b31e04a55</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>const ParticleScalar_t *</type>
      <name>getScalarAttrib</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a281677053495893594d5fcffa31b3cb1</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>const ParticlePos_t *</type>
      <name>getVectorAttrib</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a1a0e89edd6cded9e84ab6fd54df115dc</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>const ParticleTensor_t *</type>
      <name>getTensorAttrib</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a4cb57d38945acf9587a68bb958c9b339</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>ParticleIndex_t *</type>
      <name>getIndexAttrib</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>af8018b1fb1822dd1799c72bbe4e612d6</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>ParticleScalar_t *</type>
      <name>getScalarAttrib</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>ae675aa572413480b95b05ce36ea7fb94</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>ParticlePos_t *</type>
      <name>getVectorAttrib</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a86752877c561c4686a1772f5b1644bfd</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>ParticleTensor_t *</type>
      <name>getTensorAttrib</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a5ada12e64c193220b36c5415c9191c3b</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a2d66a21378e0cfcfdac5d0d794a7ad8a</anchor>
      <arglist>(unsigned m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a78f70455112ea42c8a0ffd2e8bc6a43f</anchor>
      <arglist>(const vector&lt; int &gt; &amp;agroup)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>ab87907cb2a65294e80e48061c3982bc8</anchor>
      <arglist>(unsigned m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>assign</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>abb67bf05674b3a96f7e82c2c698a52d2</anchor>
      <arglist>(const ParticleBase&lt; PT &gt; &amp;ptclin)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLocalNum</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a974ac5c14b25073545b795ab1ba34196</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTotalNum</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>abd442623fd85f7c5c676a11ab3fdacbf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>groups</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a36a4093d7489844091460bd21cba8077</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>first</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a5e0bc54e9bfaaecd01b86ff59e4d4364</anchor>
      <arglist>(int igroup) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>last</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a123338d1259e19c4c45c7a5751d2674e</anchor>
      <arglist>(int igroup) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>current</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a40e7fa09b7b40063ee0b890874b7d235</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advance</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a8903a4e9f3d5fb42d0faa9d53e21d85c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCounter</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>af57e31c81fec979e8d210500bb1c9deb</anchor>
      <arglist>(int i=0)</arglist>
    </member>
    <member kind="function">
      <type>ParticleIndex_t *</type>
      <name>getIndexAttrib</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a0d0f6ea956feb7895853cc2ed998d26e</anchor>
      <arglist>(const std::string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>ParticleScalar_t *</type>
      <name>getScalarAttrib</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a28fc930f2bef83966fe3af8e16d8a65b</anchor>
      <arglist>(const std::string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>ParticlePos_t *</type>
      <name>getVectorAttrib</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>aaaae7f3b4bac951fa81e078bc254a82f</anchor>
      <arglist>(const std::string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>ParticleTensor_t *</type>
      <name>getTensorAttrib</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a5bb37898b3328802f789ee99f6f7d664</anchor>
      <arglist>(const std::string &amp;aname)</arglist>
    </member>
    <member kind="variable">
      <type>ParticleLayout_t</type>
      <name>Lattice</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a0d2cb760536b1d444fefd35557e89be1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleLayout_t</type>
      <name>PrimitiveLattice</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a0b2d1e3fd67c6f030295e908e15bfbf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleIndex_t</type>
      <name>ID</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>aaa5b3822fc3065b2d47f390b34dc2a04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleIndex_t</type>
      <name>GroupID</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>af265ee302ec2f6f7185c6bb3047336df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticlePos_t</type>
      <name>R</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a3bdf48527be4c72e21e4ba50cfc67069</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticlePos_t</type>
      <name>curR</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a052a377438fcf1f7f8f0d869ae2b90ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initBase</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>aeb85ffc8a1b91f3940ff0a6c625e98db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>Counter</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a8da6d6b33b7597f02434fedca1781cbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>LocalNum</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a0dcb1827a9550667b1dd2b992947efcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>GlobalNum</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a1829eedb8d2e27759675571eba882439</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleIndex_t</type>
      <name>SubPtcl</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a91533b86522e2b5e7c68e1c4ddaa9e83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>map&lt; string, int &gt;</type>
      <name>AttribTypeMap</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>ad4200eda2aa791b6797a0500f85851d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>map&lt; string, int &gt;</type>
      <name>Name2Index</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>aeca23b582a4f5cc02b9ab6e338f4af8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>map&lt; string, OhmmsObject * &gt;</type>
      <name>AttribList</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>aa738e8efa0b0a2c410e38c80df4af37a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; ParticleIndex_t * &gt;</type>
      <name>INDEX</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>afcc06d560387647b2da3b7cc0ceee029</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; ParticleScalar_t * &gt;</type>
      <name>VAL</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a83a0615f6ab6be5689533a14f8861f76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; ParticlePos_t * &gt;</type>
      <name>POS</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>ab6a882a70970d950e9d979b483a34fef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; ParticleTensor_t * &gt;</type>
      <name>TENZOR</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>ad43cf38c0c530409c529e91151000398</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; OhmmsObject * &gt;</type>
      <name>myAttribList</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a0c6dfe76c5dc48b3bacf3c69d299ce27</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::DistanceTable</name>
    <filename>a00153.html</filename>
    <member kind="function" static="yes">
      <type>static DistanceTableData *</type>
      <name>add</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>a2153d049a20195788d04fa3d6ba2292e</anchor>
      <arglist>(ParticleSet &amp;s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DistanceTableData *</type>
      <name>add</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>aed2a536db299e7f6984983ca95075d84</anchor>
      <arglist>(const ParticleSet &amp;s, ParticleSet &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::PairDataType</name>
    <filename>a00457.html</filename>
    <templarg>T</templarg>
    <templarg>D</templarg>
    <member kind="function">
      <type></type>
      <name>PairDataType</name>
      <anchorfile>a00457.html</anchorfile>
      <anchor>a936f3f58c0167cec2cae4f74d1884944</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PairDataType</name>
      <anchorfile>a00457.html</anchorfile>
      <anchor>aba8c239e32277ac02c47ad6b0b71007c</anchor>
      <arglist>(const PairDataType&lt; T, D &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>PairDataType&lt; T, D &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00457.html</anchorfile>
      <anchor>add986aad60bf96ff2fef36bb8c2f1c9f</anchor>
      <arglist>(const PairDataType&lt; T, D &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00457.html</anchorfile>
      <anchor>a8ebad8310a29888975cc67a529006f86</anchor>
      <arglist>(const TinyVector&lt; T, D &gt; &amp;displ, T sep2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00457.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r</name>
      <anchorfile>a00457.html</anchorfile>
      <anchor>a3ff0123200292ec4b7e3e6319d048fa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>rr</name>
      <anchorfile>a00457.html</anchorfile>
      <anchor>a883e943c8c6bf1bc799afeb32cf1be4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>rinv</name>
      <anchorfile>a00457.html</anchorfile>
      <anchor>ad5bdd446a811b6629a475d2317b23d10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; T, D &gt;</type>
      <name>dr</name>
      <anchorfile>a00457.html</anchorfile>
      <anchor>aa66ddc5baa0b6c56c2aef26055c02996</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::TempDisplacement</name>
    <filename>a00600.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
    <member kind="function">
      <type></type>
      <name>TempDisplacement</name>
      <anchorfile>a00600.html</anchorfile>
      <anchor>a6ce3dc0734356c760a4a16863ae7bf75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00600.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r1</name>
      <anchorfile>a00600.html</anchorfile>
      <anchor>a514a3e752dacc666a3c63d4a26da0b01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>rinv1</name>
      <anchorfile>a00600.html</anchorfile>
      <anchor>a79cf7e2947297406f4e9e8a58e272124</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; T, N &gt;</type>
      <name>dr1</name>
      <anchorfile>a00600.html</anchorfile>
      <anchor>ac3e38d6c2794acf8d8a14f67e6a0163e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; T, N &gt;</type>
      <name>dr1_nobox</name>
      <anchorfile>a00600.html</anchorfile>
      <anchor>ace1ffc321ecc6e2fa720584be7d99c86</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ConvertPosUnit&lt; ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt;, Tensor&lt; T, 3 &gt;, 3, true &gt;</name>
    <filename>a00095.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt;</type>
      <name>Array_t</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>aed5f3cffe2d843e94bcf904021d63e1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tensor&lt; T, 3 &gt;</type>
      <name>Transformer_t</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ad333f08b00d3ee6a6987c7d5e2796ae4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a656cd986fc1c4c1f7e14379cdc6ff09a</anchor>
      <arglist>(const Array_t &amp;pin, const Transformer_t &amp;X, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a0c6f0ac972cdabd1f55e1a54f83b7763</anchor>
      <arglist>(const Transformer_t &amp;X, const Array_t &amp;pin, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a40b011bd9714ea833f09de24ff7b6574</anchor>
      <arglist>(Array_t &amp;pinout, const Transformer_t &amp;X, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a2356ee06f601b0f5975b0c879497a1f1</anchor>
      <arglist>(const Transformer_t &amp;X, Array_t &amp;pinout, int first, int last)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ConvertPosUnit&lt; ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt;, Tensor&lt; T, 3 &gt;, 3, false &gt;</name>
    <filename>a00094.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt;</type>
      <name>Array_t</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>aed5f3cffe2d843e94bcf904021d63e1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tensor&lt; T, 3 &gt;</type>
      <name>Transformer_t</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>ad333f08b00d3ee6a6987c7d5e2796ae4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a656cd986fc1c4c1f7e14379cdc6ff09a</anchor>
      <arglist>(const Array_t &amp;pin, const Transformer_t &amp;X, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a0c6f0ac972cdabd1f55e1a54f83b7763</anchor>
      <arglist>(const Transformer_t &amp;X, const Array_t &amp;pin, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a40b011bd9714ea833f09de24ff7b6574</anchor>
      <arglist>(Array_t &amp;pinout, const Transformer_t &amp;X, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a2356ee06f601b0f5975b0c879497a1f1</anchor>
      <arglist>(const Transformer_t &amp;X, Array_t &amp;pinout, int first, int last)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ConvertPosUnit&lt; ParticleAttrib&lt; TinyVector&lt; T, 2 &gt; &gt;, Tensor&lt; T, 2 &gt;, 2, true &gt;</name>
    <filename>a00093.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ParticleAttrib&lt; TinyVector&lt; T, 2 &gt; &gt;</type>
      <name>Array_t</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>ab1c229b774ee3cc06147085bf1ea85c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tensor&lt; T, 2 &gt;</type>
      <name>Transformer_t</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>afa8150cab5c76078a68201a9d5043011</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a656cd986fc1c4c1f7e14379cdc6ff09a</anchor>
      <arglist>(const Array_t &amp;pin, const Transformer_t &amp;X, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a0c6f0ac972cdabd1f55e1a54f83b7763</anchor>
      <arglist>(const Transformer_t &amp;X, const Array_t &amp;pin, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a40b011bd9714ea833f09de24ff7b6574</anchor>
      <arglist>(Array_t &amp;pinout, const Transformer_t &amp;X, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a2356ee06f601b0f5975b0c879497a1f1</anchor>
      <arglist>(const Transformer_t &amp;X, Array_t &amp;pinout, int first, int last)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ConvertPosUnit&lt; ParticleAttrib&lt; TinyVector&lt; T, 2 &gt; &gt;, Tensor&lt; T, 2 &gt;, 2, false &gt;</name>
    <filename>a00092.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ParticleAttrib&lt; TinyVector&lt; T, 2 &gt; &gt;</type>
      <name>Array_t</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>ab1c229b774ee3cc06147085bf1ea85c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tensor&lt; T, 2 &gt;</type>
      <name>Transformer_t</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>afa8150cab5c76078a68201a9d5043011</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a656cd986fc1c4c1f7e14379cdc6ff09a</anchor>
      <arglist>(const Array_t &amp;pin, const Transformer_t &amp;X, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a0c6f0ac972cdabd1f55e1a54f83b7763</anchor>
      <arglist>(const Transformer_t &amp;X, const Array_t &amp;pin, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a40b011bd9714ea833f09de24ff7b6574</anchor>
      <arglist>(Array_t &amp;pinout, const Transformer_t &amp;X, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a2356ee06f601b0f5975b0c879497a1f1</anchor>
      <arglist>(const Transformer_t &amp;X, Array_t &amp;pinout, int first, int last)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ApplyBConds&lt; ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt;, Tensor&lt; T, 3 &gt;, 3, true &gt;</name>
    <filename>a00014.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt;</type>
      <name>Array_t</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>aed5f3cffe2d843e94bcf904021d63e1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array_t::Type_t</type>
      <name>Component_t</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>ad61f23619539597c9eb227617176e307</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tensor&lt; T, 3 &gt;</type>
      <name>Transformer_t</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>ad333f08b00d3ee6a6987c7d5e2796ae4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Unit2Unit</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>ada25536c98e68ae370944c8c08bd1db8</anchor>
      <arglist>(const Array_t &amp;pin, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Unit2Cart</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>adcc281a58a97961b9f7f012e82d6c56d</anchor>
      <arglist>(const Array_t &amp;pin, const Transformer_t &amp;R, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Cart2Unit</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a0b23c4e65fe3711f85cbcbad1263df7f</anchor>
      <arglist>(const Array_t &amp;pin, const Transformer_t &amp;G, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Cart2Cart</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a8c1f3fe09fe48db914458c27178e55eb</anchor>
      <arglist>(const Array_t &amp;pin, const Transformer_t &amp;G, const Transformer_t &amp;R, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Unit2Unit</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a8e5bd8d57b880bf66250c06254d0eb1e</anchor>
      <arglist>(Array_t &amp;pinout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Cart2Cart</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a8e0d44d19565733d6d50ec285d292170</anchor>
      <arglist>(Array_t &amp;pinout, const Transformer_t &amp;G, const Transformer_t &amp;R, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Component_t</type>
      <name>Unit2Unit</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a68bbf1e6ef5c152963bfd90aa5bfa3eb</anchor>
      <arglist>(const Component_t &amp;pos)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Component_t</type>
      <name>Cart2Unit</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a4a2ff48a03207f62a4f53e1eee6db0d7</anchor>
      <arglist>(const Component_t &amp;pos, const Transformer_t &amp;G)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Component_t</type>
      <name>Unit2Cart</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a237509cbdb99fea6bda400f86bf2303f</anchor>
      <arglist>(const Component_t &amp;pos, const Transformer_t &amp;R)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Component_t</type>
      <name>Cart2Cart</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a0f856042eb0eadc95586aadb8c19ff6e</anchor>
      <arglist>(const Component_t &amp;pos, const Transformer_t &amp;G, const Transformer_t &amp;R)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ApplyBConds&lt; ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt;, Tensor&lt; T, 3 &gt;, 3, false &gt;</name>
    <filename>a00013.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt;</type>
      <name>Array_t</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>aed5f3cffe2d843e94bcf904021d63e1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array_t::Type_t</type>
      <name>Component_t</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>ad61f23619539597c9eb227617176e307</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tensor&lt; T, 3 &gt;</type>
      <name>Transformer_t</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>ad333f08b00d3ee6a6987c7d5e2796ae4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Cart2Cart</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a8c1f3fe09fe48db914458c27178e55eb</anchor>
      <arglist>(const Array_t &amp;pin, const Transformer_t &amp;G, const Transformer_t &amp;R, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Cart2Unit</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a0b23c4e65fe3711f85cbcbad1263df7f</anchor>
      <arglist>(const Array_t &amp;pin, const Transformer_t &amp;G, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Unit2Cart</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>adcc281a58a97961b9f7f012e82d6c56d</anchor>
      <arglist>(const Array_t &amp;pin, const Transformer_t &amp;R, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Unit2Unit</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>ada25536c98e68ae370944c8c08bd1db8</anchor>
      <arglist>(const Array_t &amp;pin, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Unit2Unit</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a8e5bd8d57b880bf66250c06254d0eb1e</anchor>
      <arglist>(Array_t &amp;pinout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Cart2Cart</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a8e0d44d19565733d6d50ec285d292170</anchor>
      <arglist>(Array_t &amp;pinout, const Transformer_t &amp;G, const Transformer_t &amp;R, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Component_t</type>
      <name>Unit2Unit</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a68bbf1e6ef5c152963bfd90aa5bfa3eb</anchor>
      <arglist>(const Component_t &amp;pos)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Component_t</type>
      <name>Cart2Unit</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a4a2ff48a03207f62a4f53e1eee6db0d7</anchor>
      <arglist>(const Component_t &amp;pos, const Transformer_t &amp;G)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Component_t</type>
      <name>Unit2Cart</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a237509cbdb99fea6bda400f86bf2303f</anchor>
      <arglist>(const Component_t &amp;pos, const Transformer_t &amp;R)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Component_t</type>
      <name>Cart2Cart</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a0f856042eb0eadc95586aadb8c19ff6e</anchor>
      <arglist>(const Component_t &amp;pos, const Transformer_t &amp;G, const Transformer_t &amp;R)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ApplyBConds&lt; ParticleAttrib&lt; TinyVector&lt; T, 2 &gt; &gt;, Tensor&lt; T, 2 &gt;, 2, true &gt;</name>
    <filename>a00012.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ParticleAttrib&lt; TinyVector&lt; T, 2 &gt; &gt;</type>
      <name>Array_t</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>ab1c229b774ee3cc06147085bf1ea85c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array_t::Type_t</type>
      <name>Component_t</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>ad61f23619539597c9eb227617176e307</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tensor&lt; T, 2 &gt;</type>
      <name>Transformer_t</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>afa8150cab5c76078a68201a9d5043011</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Unit2Unit</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>ada25536c98e68ae370944c8c08bd1db8</anchor>
      <arglist>(const Array_t &amp;pin, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Unit2Cart</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>adcc281a58a97961b9f7f012e82d6c56d</anchor>
      <arglist>(const Array_t &amp;pin, const Transformer_t &amp;R, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Cart2Unit</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a0b23c4e65fe3711f85cbcbad1263df7f</anchor>
      <arglist>(const Array_t &amp;pin, const Transformer_t &amp;G, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Cart2Cart</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a8c1f3fe09fe48db914458c27178e55eb</anchor>
      <arglist>(const Array_t &amp;pin, const Transformer_t &amp;G, const Transformer_t &amp;R, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Unit2Unit</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a8e5bd8d57b880bf66250c06254d0eb1e</anchor>
      <arglist>(Array_t &amp;pinout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Cart2Cart</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a8e0d44d19565733d6d50ec285d292170</anchor>
      <arglist>(Array_t &amp;pinout, const Transformer_t &amp;G, const Transformer_t &amp;R, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Component_t</type>
      <name>Unit2Unit</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a68bbf1e6ef5c152963bfd90aa5bfa3eb</anchor>
      <arglist>(const Component_t &amp;pos)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Component_t</type>
      <name>Cart2Unit</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a4a2ff48a03207f62a4f53e1eee6db0d7</anchor>
      <arglist>(const Component_t &amp;pos, const Transformer_t &amp;G)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Component_t</type>
      <name>Unit2Cart</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a237509cbdb99fea6bda400f86bf2303f</anchor>
      <arglist>(const Component_t &amp;pos, const Transformer_t &amp;R)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Component_t</type>
      <name>Cart2Cart</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a0f856042eb0eadc95586aadb8c19ff6e</anchor>
      <arglist>(const Component_t &amp;pos, const Transformer_t &amp;G, const Transformer_t &amp;R)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ApplyBConds&lt; ParticleAttrib&lt; TinyVector&lt; T, 2 &gt; &gt;, Tensor&lt; T, 2 &gt;, 2, false &gt;</name>
    <filename>a00011.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ParticleAttrib&lt; TinyVector&lt; T, 2 &gt; &gt;</type>
      <name>Array_t</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>ab1c229b774ee3cc06147085bf1ea85c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array_t::Type_t</type>
      <name>Component_t</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>ad61f23619539597c9eb227617176e307</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tensor&lt; T, 2 &gt;</type>
      <name>Transformer_t</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>afa8150cab5c76078a68201a9d5043011</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Cart2Cart</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a8c1f3fe09fe48db914458c27178e55eb</anchor>
      <arglist>(const Array_t &amp;pin, const Transformer_t &amp;G, const Transformer_t &amp;R, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Cart2Unit</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a0b23c4e65fe3711f85cbcbad1263df7f</anchor>
      <arglist>(const Array_t &amp;pin, const Transformer_t &amp;G, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Unit2Cart</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>adcc281a58a97961b9f7f012e82d6c56d</anchor>
      <arglist>(const Array_t &amp;pin, const Transformer_t &amp;R, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Unit2Unit</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>ada25536c98e68ae370944c8c08bd1db8</anchor>
      <arglist>(const Array_t &amp;pin, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Unit2Unit</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a8e5bd8d57b880bf66250c06254d0eb1e</anchor>
      <arglist>(Array_t &amp;pinout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Cart2Cart</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a8e0d44d19565733d6d50ec285d292170</anchor>
      <arglist>(Array_t &amp;pinout, const Transformer_t &amp;G, const Transformer_t &amp;R, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Component_t</type>
      <name>Unit2Unit</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a68bbf1e6ef5c152963bfd90aa5bfa3eb</anchor>
      <arglist>(const Component_t &amp;pos)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Component_t</type>
      <name>Cart2Unit</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a4a2ff48a03207f62a4f53e1eee6db0d7</anchor>
      <arglist>(const Component_t &amp;pos, const Transformer_t &amp;G)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Component_t</type>
      <name>Unit2Cart</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a237509cbdb99fea6bda400f86bf2303f</anchor>
      <arglist>(const Component_t &amp;pos, const Transformer_t &amp;R)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Component_t</type>
      <name>Cart2Cart</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a0f856042eb0eadc95586aadb8c19ff6e</anchor>
      <arglist>(const Component_t &amp;pos, const Transformer_t &amp;G, const Transformer_t &amp;R)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; ParticleAttrib&lt; int &gt; &gt;</name>
    <filename>a00267.html</filename>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="typedef">
      <type>ParticleAttrib&lt; int &gt;</type>
      <name>ArrayType_t</name>
      <anchorfile>a00267.html</anchorfile>
      <anchor>a9a9d4b21f568c31ee8246e12bec5be03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleAttrib&lt; int &gt;</type>
      <name>ArrayType_t</name>
      <anchorfile>a00267.html</anchorfile>
      <anchor>a9a9d4b21f568c31ee8246e12bec5be03</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>a00267.html</anchorfile>
      <anchor>a7c30f1a0d39f35dff65f66bd397d37ca</anchor>
      <arglist>(ArrayType_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a00267.html</anchorfile>
      <anchor>a9cb9a11595717b99c90268f87ffb530b</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a00267.html</anchorfile>
      <anchor>a2378d66f31e2d3c28eed6a1863e5c5dc</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>a00267.html</anchorfile>
      <anchor>a7c30f1a0d39f35dff65f66bd397d37ca</anchor>
      <arglist>(ArrayType_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a00267.html</anchorfile>
      <anchor>aabf27f26e0fa4675aa5f9b18278e7545</anchor>
      <arglist>(hid_t hdfFile, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a00267.html</anchorfile>
      <anchor>a2378d66f31e2d3c28eed6a1863e5c5dc</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>ArrayType_t &amp;</type>
      <name>ref</name>
      <anchorfile>a00267.html</anchorfile>
      <anchor>a5c6b34f0fd027b13b1c9a78d2317f624</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; ParticleAttrib&lt; double &gt; &gt;</name>
    <filename>a00266.html</filename>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="typedef">
      <type>ParticleAttrib&lt; double &gt;</type>
      <name>ArrayType_t</name>
      <anchorfile>a00266.html</anchorfile>
      <anchor>aa1ddb9ba7eb72edb24b6bed80e29318f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleAttrib&lt; double &gt;</type>
      <name>ArrayType_t</name>
      <anchorfile>a00266.html</anchorfile>
      <anchor>aa1ddb9ba7eb72edb24b6bed80e29318f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>a00266.html</anchorfile>
      <anchor>a7c30f1a0d39f35dff65f66bd397d37ca</anchor>
      <arglist>(ArrayType_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a00266.html</anchorfile>
      <anchor>a9cb9a11595717b99c90268f87ffb530b</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a00266.html</anchorfile>
      <anchor>a2378d66f31e2d3c28eed6a1863e5c5dc</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>a00266.html</anchorfile>
      <anchor>a7c30f1a0d39f35dff65f66bd397d37ca</anchor>
      <arglist>(ArrayType_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a00266.html</anchorfile>
      <anchor>aabf27f26e0fa4675aa5f9b18278e7545</anchor>
      <arglist>(hid_t hdfFile, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a00266.html</anchorfile>
      <anchor>a2378d66f31e2d3c28eed6a1863e5c5dc</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>ArrayType_t &amp;</type>
      <name>ref</name>
      <anchorfile>a00266.html</anchorfile>
      <anchor>a5c6b34f0fd027b13b1c9a78d2317f624</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; ParticleAttrib&lt; TinyVector&lt; double, 3 &gt; &gt; &gt;</name>
    <filename>a00268.html</filename>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="typedef">
      <type>TinyVector&lt; double, 3 &gt;</type>
      <name>SingleParticlePos_t</name>
      <anchorfile>a00268.html</anchorfile>
      <anchor>a9c0e1473f4e82181d7a345b85aeadd83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleAttrib&lt; SingleParticlePos_t &gt;</type>
      <name>ArrayType_t</name>
      <anchorfile>a00268.html</anchorfile>
      <anchor>a09f7451d06a6f762e49729a6027cccc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>a00268.html</anchorfile>
      <anchor>a7c30f1a0d39f35dff65f66bd397d37ca</anchor>
      <arglist>(ArrayType_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HDFAttribIO</name>
      <anchorfile>a00268.html</anchorfile>
      <anchor>a0a555159ada77340dd27f88ed031e4fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a00268.html</anchorfile>
      <anchor>a9cb9a11595717b99c90268f87ffb530b</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a00268.html</anchorfile>
      <anchor>a2378d66f31e2d3c28eed6a1863e5c5dc</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>ArrayType_t &amp;</type>
      <name>ref</name>
      <anchorfile>a00268.html</anchorfile>
      <anchor>aa41ba92e454ef17e0c4a3d47b09bea98</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::HDFWalkerInput0</name>
    <filename>a00292.html</filename>
    <member kind="function">
      <type></type>
      <name>HDFWalkerInput0</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>ac75dbf29d1acdb78d05a6feb7588c573</anchor>
      <arglist>(const string &amp;fname, int ipart=0, int nparts=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HDFWalkerInput0</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a17d8d6e32c76c179fe56bd231f0565b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a74afb41be7c7f970161e56eb4994850e</anchor>
      <arglist>(MCWalkerConfiguration &amp;, int ic)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>append</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a6c2d4318672359e849b1192f1138c7c9</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, int blocks)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a3aab81536c051f076a44570f2f90573f</anchor>
      <arglist>(CT &amp;anything)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRandomState</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a0e47b0fccc18a534730c590733ff4d5f</anchor>
      <arglist>(bool restart)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>FirstSet</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a6095fdc92c4cb4cd280c6ee6974c21e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>LastSet</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a152cee7da5c661067456d555b33682d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>Counter</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a8da6d6b33b7597f02434fedca1781cbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumSets</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>aecef4496876cbbfbf29bae5fbf44d9ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>hid_t</type>
      <name>h_file</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>ada4768ea607e2357163e51a4a6eafc14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>hid_t</type>
      <name>h_config</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a72e5082ecfc02acee26c72df0711b5c3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::HDFWalkerInput_0_0</name>
    <filename>a00293.html</filename>
    <member kind="function">
      <type></type>
      <name>HDFWalkerInput_0_0</name>
      <anchorfile>a00293.html</anchorfile>
      <anchor>a3c6b4758ef48bb785b8e2dc77e0cb938</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, const string &amp;aroot)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HDFWalkerInput_0_0</name>
      <anchorfile>a00293.html</anchorfile>
      <anchor>a56af81fcea93953c0dc2e50d6ffa5a81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00293.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>HDFVersion</type>
      <name>version</name>
      <anchorfile>a00293.html</anchorfile>
      <anchor>a473868584e131daed70c08325bac88aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MCWalkerConfiguration &amp;</type>
      <name>targetW</name>
      <anchorfile>a00293.html</anchorfile>
      <anchor>aa7437dc93af2c81ca45aee21337d01c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>FileName</name>
      <anchorfile>a00293.html</anchorfile>
      <anchor>ac56689c3ac56ce5bcecabd9b090880f8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFWalkerInput_0_4</name>
    <filename>a00294.html</filename>
    <class kind="struct">qmcplusplus::HDFWalkerInput_0_4::IOInfo</class>
    <member kind="function">
      <type></type>
      <name>HDFWalkerInput_0_4</name>
      <anchorfile>a00294.html</anchorfile>
      <anchor>abb6154a73c15aaac8b6ae352c8142699</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, Communicate *c, const HDFVersion &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HDFWalkerInput_0_4</name>
      <anchorfile>a00294.html</anchorfile>
      <anchor>a17101de9247d9111199e3aa63c40aa1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00294.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOptions</name>
      <anchorfile>a00294.html</anchorfile>
      <anchor>adef9074b626cfb49ecbe5ec6af202e2c</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>MCWalkerConfiguration &amp;</type>
      <name>targetW</name>
      <anchorfile>a00294.html</anchorfile>
      <anchor>aa7437dc93af2c81ca45aee21337d01c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Communicate *</type>
      <name>myComm</name>
      <anchorfile>a00294.html</anchorfile>
      <anchor>a6e290154265339db27f9a9bef2bd3aab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HDFVersion</type>
      <name>cur_version</name>
      <anchorfile>a00294.html</anchorfile>
      <anchor>a7a36c767028280e9ca66edd526d7510c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IOInfo</type>
      <name>i_info</name>
      <anchorfile>a00294.html</anchorfile>
      <anchor>a2f1dd44c808d2596b7c8c24bc169f7c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hid_t</type>
      <name>h_plist</name>
      <anchorfile>a00294.html</anchorfile>
      <anchor>a0d0194358ee0cfc4ddd04deb9f9b7986</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>FileName</name>
      <anchorfile>a00294.html</anchorfile>
      <anchor>ac56689c3ac56ce5bcecabd9b090880f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>stack&lt; string &gt;</type>
      <name>FileStack</name>
      <anchorfile>a00294.html</anchorfile>
      <anchor>a16248c3b359eba8455ffcf020f73a837</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFWalkerInput_0_4::IOInfo</name>
    <filename>a00312.html</filename>
    <member kind="function">
      <type></type>
      <name>IOInfo</name>
      <anchorfile>a00312.html</anchorfile>
      <anchor>aad3eb9372c3d5f8c894755c3cdee5726</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00312.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>parallel</name>
      <anchorfile>a00312.html</anchorfile>
      <anchor>a8f6f3467efa1b4dbaaed0f81c9ecc5d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>collected</name>
      <anchorfile>a00312.html</anchorfile>
      <anchor>a9823843215c625c9eb29b35b7f153c98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>rank</name>
      <anchorfile>a00312.html</anchorfile>
      <anchor>a6cfd95afd0afebd625b889fb6e58371c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nprocs</name>
      <anchorfile>a00312.html</anchorfile>
      <anchor>ad7c4c17cf720ee538e27c02ab356ed6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hid_t</type>
      <name>h_plist</name>
      <anchorfile>a00312.html</anchorfile>
      <anchor>a0d0194358ee0cfc4ddd04deb9f9b7986</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HDFVersion</type>
      <name>version</name>
      <anchorfile>a00312.html</anchorfile>
      <anchor>a473868584e131daed70c08325bac88aa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::HDFWalkerInputCollect</name>
    <filename>a00295.html</filename>
    <member kind="function">
      <type></type>
      <name>HDFWalkerInputCollect</name>
      <anchorfile>a00295.html</anchorfile>
      <anchor>aadb21e48609a1330d4181d02f7d58bb7</anchor>
      <arglist>(const std::string &amp;aroot)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HDFWalkerInputCollect</name>
      <anchorfile>a00295.html</anchorfile>
      <anchor>a8b1b724d0ac973370e44aae609daa741</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>open</name>
      <anchorfile>a00295.html</anchorfile>
      <anchor>a895837e18d9de285356ac294834a5e4e</anchor>
      <arglist>(const string &amp;aroot)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00295.html</anchorfile>
      <anchor>a76212714831cb24fcd853fe09309d580</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, int rollback=1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putSingle</name>
      <anchorfile>a00295.html</anchorfile>
      <anchor>a77f5ae6e9237f8a0328da00b2d0aef05</anchor>
      <arglist>(MCWalkerConfiguration &amp;W)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>rewind</name>
      <anchorfile>a00295.html</anchorfile>
      <anchor>a4a88e79a00d07a5fd49a31b6df71d345</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, int rollback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>a00295.html</anchorfile>
      <anchor>aea2fc247d55a47b019059a189154313b</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, int firstConf, int lastConf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readRandomState</name>
      <anchorfile>a00295.html</anchorfile>
      <anchor>ad400b094140b5d5b1661c3e8bcfcbe6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>close</name>
      <anchorfile>a00295.html</anchorfile>
      <anchor>a46143fd6de3be9ab9951f140d3ae8c2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>distribute</name>
      <anchorfile>a00295.html</anchorfile>
      <anchor>a39bc71643bf263825a2661ecd87ccfab</anchor>
      <arglist>(hsize_t nw)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>hid_t</type>
      <name>fileID</name>
      <anchorfile>a00295.html</anchorfile>
      <anchor>a45339574dfa92f503266d447ebb1f1cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>prevNContexts</name>
      <anchorfile>a00295.html</anchorfile>
      <anchor>a914b1381d1da95b666ac89eec81c546e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>curNContexts</name>
      <anchorfile>a00295.html</anchorfile>
      <anchor>a4208ae133507eaf6471f52a648a63abd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>CollectMode</name>
      <anchorfile>a00295.html</anchorfile>
      <anchor>a982d8c22aeeb35573790925caecfe85c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>RewindMode</name>
      <anchorfile>a00295.html</anchorfile>
      <anchor>ab77065b113d63be0cd7eefa22d7c66ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; hsize_t &gt;</type>
      <name>OffSet</name>
      <anchorfile>a00295.html</anchorfile>
      <anchor>a0b100c982604dfe110eb3c39e3581803</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::HDFWalkerInputManager</name>
    <filename>a00296.html</filename>
    <member kind="function">
      <type></type>
      <name>HDFWalkerInputManager</name>
      <anchorfile>a00296.html</anchorfile>
      <anchor>a8e761f81afde908b745746e2ce54df26</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, Communicate *c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HDFWalkerInputManager</name>
      <anchorfile>a00296.html</anchorfile>
      <anchor>ac2a1856a161ddc1ca1b11dd98f103841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00296.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getFileRoot</name>
      <anchorfile>a00296.html</anchorfile>
      <anchor>a03e5195d8413682397f8f858f76f03e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rewind</name>
      <anchorfile>a00296.html</anchorfile>
      <anchor>a305e5ffe4f0243a4192b5f1fd3a40ce3</anchor>
      <arglist>(const std::string &amp;h5root, int blocks)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MCWalkerConfiguration &amp;</type>
      <name>targetW</name>
      <anchorfile>a00296.html</anchorfile>
      <anchor>aa7437dc93af2c81ca45aee21337d01c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Communicate *</type>
      <name>myComm</name>
      <anchorfile>a00296.html</anchorfile>
      <anchor>a6e290154265339db27f9a9bef2bd3aab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>CurrentFileRoot</name>
      <anchorfile>a00296.html</anchorfile>
      <anchor>a042fe72dbe354d290cc745ac56af07b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFWalkerIOEngine</name>
    <filename>a00297.html</filename>
    <member kind="function">
      <type></type>
      <name>HDFWalkerIOEngine</name>
      <anchorfile>a00297.html</anchorfile>
      <anchor>a07c6281aab88dcb0f4176c4c9546f057</anchor>
      <arglist>(MCWalkerConfiguration &amp;a, bool reuse=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a00297.html</anchorfile>
      <anchor>a2378d66f31e2d3c28eed6a1863e5c5dc</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readAll</name>
      <anchorfile>a00297.html</anchorfile>
      <anchor>af1187f4ef6025bfa21e02ffc69a08363</anchor>
      <arglist>(hid_t grp, const char *name, Communicate *myComm)</arglist>
    </member>
    <member kind="variable">
      <type>MCWalkerConfiguration &amp;</type>
      <name>W</name>
      <anchorfile>a00297.html</anchorfile>
      <anchor>ae7cc267f0c9018e7975d78d07e7e2061</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>replace</name>
      <anchorfile>a00297.html</anchorfile>
      <anchor>a8dee86d04ccae709059c8c923826ac9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hid_t</type>
      <name>xfer_plist</name>
      <anchorfile>a00297.html</anchorfile>
      <anchor>afed6fa2893f59c21865371d5ea264a66</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::HDFWalkerOutput</name>
    <filename>a00299.html</filename>
    <member kind="function">
      <type></type>
      <name>HDFWalkerOutput</name>
      <anchorfile>a00299.html</anchorfile>
      <anchor>afb07dc7e3a29823ea45d9a7b4812b8b9</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, const string &amp;fname, Communicate *c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HDFWalkerOutput</name>
      <anchorfile>a00299.html</anchorfile>
      <anchor>a2191bd86525e09306a56d54820b8e9ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dump</name>
      <anchorfile>a00299.html</anchorfile>
      <anchor>aa7f6cb350b7f2d87b7e1d8ec8f2e2879</anchor>
      <arglist>(MCWalkerConfiguration &amp;w)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>PooledData&lt; OHMMS_PRECISION &gt;</type>
      <name>BufferType</name>
      <anchorfile>a00299.html</anchorfile>
      <anchor>ae82841a8cc926883f4423097cb0dfbbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>write_configuration</name>
      <anchorfile>a00299.html</anchorfile>
      <anchor>a20e53e5c79dd3232d69429c7e6a44788</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, hdf_archive &amp;hout)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>DoNotAppend</name>
      <anchorfile>a00299.html</anchorfile>
      <anchor>a0104f73a195493193e8f555358e9185f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>appended_blocks</name>
      <anchorfile>a00299.html</anchorfile>
      <anchor>ae14c3bed4e7a591e2385a5f0c1c3e6d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>number_of_walkers</name>
      <anchorfile>a00299.html</anchorfile>
      <anchor>a394cfab0b68db4adfb53fe052c4efe0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>number_of_particles</name>
      <anchorfile>a00299.html</anchorfile>
      <anchor>af6c971622dcb14b258dd63809ff9ed2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>number_of_backups</name>
      <anchorfile>a00299.html</anchorfile>
      <anchor>a6403214edaab1493ecf106d581c6a488</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>max_number_of_backups</name>
      <anchorfile>a00299.html</anchorfile>
      <anchor>a1b0d67e51c298e852db6d1950c252fdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Communicate *</type>
      <name>myComm</name>
      <anchorfile>a00299.html</anchorfile>
      <anchor>a6e290154265339db27f9a9bef2bd3aab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>currentConfigNumber</name>
      <anchorfile>a00299.html</anchorfile>
      <anchor>a11b46a820464e71f2cef5627d5e597fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>RootName</name>
      <anchorfile>a00299.html</anchorfile>
      <anchor>a4280eb5c7f0d275dce96a4f1083c5cf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; Communicate::request &gt;</type>
      <name>myRequest</name>
      <anchorfile>a00299.html</anchorfile>
      <anchor>a39c978bd68fd1e9fcefdb5fb3cb10d2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; BufferType * &gt;</type>
      <name>RemoteData</name>
      <anchorfile>a00299.html</anchorfile>
      <anchor>ad7c917c1e587f3540fad97a1b7f552f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::MCSample</name>
    <filename>a00374.html</filename>
    <member kind="typedef">
      <type>ParticleSet::Walker_t</type>
      <name>Walker_t</name>
      <anchorfile>a00374.html</anchorfile>
      <anchor>abbc77657579efa0cd83de2b985f92476</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MCSample</name>
      <anchorfile>a00374.html</anchorfile>
      <anchor>add995fd7a4717d0b5d3d2ce88e6de5be</anchor>
      <arglist>(const Walker_t &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MCSample</name>
      <anchorfile>a00374.html</anchorfile>
      <anchor>a72bab17f735b0de56869b78cdbd07fd0</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>a00374.html</anchorfile>
      <anchor>abb57e46bff2972f67251282d1dbbf748</anchor>
      <arglist>(const Walker_t &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get</name>
      <anchorfile>a00374.html</anchorfile>
      <anchor>adf7aac3e69be9da7f5d7015af7b19519</anchor>
      <arglist>(Walker_t &amp;w) const </arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticlePos_t</type>
      <name>R</name>
      <anchorfile>a00374.html</anchorfile>
      <anchor>aa53b7d6d877957d1fcc075009216d55d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>G</name>
      <anchorfile>a00374.html</anchorfile>
      <anchor>a2e80ca05de55af93652e6a81ef04d683</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleLaplacian_t</type>
      <name>L</name>
      <anchorfile>a00374.html</anchorfile>
      <anchor>ad63a0bd353ede51d1f82c52e40822874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::RealType</type>
      <name>LogPsi</name>
      <anchorfile>a00374.html</anchorfile>
      <anchor>aa235f68a4bbe39dd3ca9682699992050</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::RealType</type>
      <name>Sign</name>
      <anchorfile>a00374.html</anchorfile>
      <anchor>ad1294530353c76172db9cad2509236cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::RealType</type>
      <name>PE</name>
      <anchorfile>a00374.html</anchorfile>
      <anchor>a3e6b93cd547cada25c3ba3d62e27bb6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::RealType</type>
      <name>KE</name>
      <anchorfile>a00374.html</anchorfile>
      <anchor>a333401ec5f8b63d7d4df09a499267b1b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::MCWalkerConfiguration</name>
    <filename>a00375.html</filename>
    <base>qmcplusplus::ParticleSet</base>
    <member kind="enumvalue">
      <type>@</type>
      <name>Update_All</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>adb49720dc49f7d4e4cf9adbf2948e409a77ee2aa6200fedbe8038375a3a23d683</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Update_Walker</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>adb49720dc49f7d4e4cf9adbf2948e409a48713d46684516e9859ab06fcdde2f00</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Update_Particle</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>adb49720dc49f7d4e4cf9adbf2948e409a7a5b87c3a68b553329d47ddc66824412</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Walker_t::PropertyContainer_t</type>
      <name>PropertyContainer_t</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>a381705e0cd087d6ea3465644320013cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Walker_t * &gt;</type>
      <name>WalkerList_t</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>a7aa03b7c40305ee500aa014a25228778</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>WalkerList_t::iterator</type>
      <name>iterator</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>add6bf2b1453a929a80471df28470cd4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>WalkerList_t::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>a376215f1aedbfea01c54a04d2bd27b65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Walker&lt; QMCTraits, PtclOnLatticeTraits &gt;</type>
      <name>Walker_t</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>ab39f2900de8bb70bd2d05b1e58699195</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Walker_t::PropertyContainer_t</type>
      <name>PropertyContainer_t</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a381705e0cd087d6ea3465644320013cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Walker_t::Buffer_t</type>
      <name>Buffer_t</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a690ee5b8c98bdd61fd8fe757016b0dd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PtclOnLatticeTraits::ParticleLayout_t</type>
      <name>ParticleLayout_t</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>aeb9910a4cbeae79051a4b158b0d15225</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PtclOnLatticeTraits::Index_t</type>
      <name>Index_t</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>afe0744ee8482c92b69252e662bb5460a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PtclOnLatticeTraits::Scalar_t</type>
      <name>Scalar_t</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a972820061fe8d0cdef59cbb2fb5be73e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PtclOnLatticeTraits::SingleParticleIndex_t</type>
      <name>SingleParticleIndex_t</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>ae9179e33dd484d5ae0a922c8199a64f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PtclOnLatticeTraits::SingleParticlePos_t</type>
      <name>SingleParticlePos_t</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a9aa21479de9d633e06ab69ef5054fa37</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PtclOnLatticeTraits::Tensor_t</type>
      <name>Tensor_t</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a61c81ceeb4c824a417583307b2688f1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>map&lt; string, OhmmsObject * &gt;::iterator</type>
      <name>PAListIterator</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a0e638660266db501b04fd45ec20fe28b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PtclOnLatticeTraits::ParticleIndex_t</type>
      <name>ParticleIndex_t</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>aa4b876bfde219c444a040a5785ccbe90</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PtclOnLatticeTraits::ParticleScalar_t</type>
      <name>ParticleScalar_t</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a9e5e94f34272a7af7a0b339428463505</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PtclOnLatticeTraits::ParticlePos_t</type>
      <name>ParticlePos_t</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a879bec661d0811bc96ec2cdc54ee9834</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PtclOnLatticeTraits::ParticleTensor_t</type>
      <name>ParticleTensor_t</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>af38d0bb648bf725a6f9bbccbe8dea049</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PtclOnLatticeTraits::ParticleGradient_t</type>
      <name>ParticleGradient_t</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>adb1a1a4fab0c4d7d1712e1d5c7970d81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PtclOnLatticeTraits::ParticleLaplacian_t</type>
      <name>ParticleLaplacian_t</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>ad79fc5e94702535ae6f100d573734326</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MCWalkerConfiguration</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>aebda93b86f5aae4a88ce39d81dcb64c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MCWalkerConfiguration</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>a5fa845e4bdebdcd0d3457436681a48e0</anchor>
      <arglist>(const MCWalkerConfiguration &amp;mcw)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MCWalkerConfiguration</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>aff2a0940e17b65dde9e792669294a2a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createWalkers</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>ab60e41fa567a9ef829e3a96702446840</anchor>
      <arglist>(int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createWalkers</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>af85e3f940f3fd549999fbc7dd0d48c33</anchor>
      <arglist>(iterator first, iterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyWalkers</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>a8ad0967acfd20e8cfa6414fa7365e297</anchor>
      <arglist>(iterator first, iterator last, iterator start)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>destroyWalkers</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>a87c6067627d29d6932b391d1827490b6</anchor>
      <arglist>(iterator first, iterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroyWalkers</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>aff0f2c5bef61af827ea7fec049434698</anchor>
      <arglist>(int nw)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyWalkerRefs</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>a9e1576bbe7d3c156f806acf4c911e409</anchor>
      <arglist>(Walker_t *head, Walker_t *tail)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>a0b478f83ab2b9db94b075bb1d95c9a86</anchor>
      <arglist>(int numWalkers, int numPtcls)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sample</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>ad5a0b05d32885d68e93999e52d4d6f81</anchor>
      <arglist>(iterator it, RealType tauinv)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getActiveWalkers</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>a765dab01fad543d4d8880e5cb48965ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGlobalNumWalkers</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>a2eb943a29cd86e75efb7f1392d8d0840</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalNumWalkers</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>aba6851a76a8fab33e4d865bd4734d6b4</anchor>
      <arglist>(int nw)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWalkerOffsets</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>a46754c293106e661d39e0e7bf45e9110</anchor>
      <arglist>(const vector&lt; int &gt; &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getParticleNum</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>ad8cf9a0bcb86dd09c1b91b7de2f76800</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>ad69bd11391be1a1dba5c8202259664f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>acad38d52497a975bfb6f2f6acd76631f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>aa4b02d4f1a8500fb07a551069060709f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>a350132543d80a1c1e5be844e6d2878ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>aed1fac989a3a1640bc74ff6a826286be</anchor>
      <arglist>(iterator it, INPUT_ITER first, INPUT_ITER last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>ac9d154d6f574f2b72e8908243f81a882</anchor>
      <arglist>(Walker_t *awalker)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeWalkerHistories</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>a9852ead61e07e1b4566a06647d5cbe32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_back</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>a058bda4957df6a97b1ea6c9fd783f672</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Walker_t *</type>
      <name>operator[]</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>a6cbb8df540ec9ac8ed4e77db9855b627</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const Walker_t *</type>
      <name>operator[]</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>ab753b691367c3dfc0058f7ad78bf2961</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLocalEnergy</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>ace1f9534653d51ec0aa210894897640f</anchor>
      <arglist>(RealType e)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getLocalEnergy</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>afd2d39a46c979498d63bf844c66825ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MultiChain *</type>
      <name>getPolymer</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>a4df5f9a49e78917310111b42049fee3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPolymer</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>a0915bcd505cdcf47612651903501ea76</anchor>
      <arglist>(MultiChain *chain)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetWalkerProperty</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>a067e108175b4f6236016a14214315e77</anchor>
      <arglist>(int ncopy=1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updatePbyP</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>aca442dd1cd4a7a12309bec7787230d37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putConfigurations</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>a02577dbec7ea137e9cb0fa0e43a821a7</anchor>
      <arglist>(ForwardIter target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetWalkerParents</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>ac2951c9b03c67be5f96eb6694f0d495b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>make_clones</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>aa5c6505c3d1b15345c59e38219e222d0</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numSamples</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>a6bc8d413a3a857e5afee127b09358515</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumSamples</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>a0d0ed5f3866768dc16d5eba41b0871ea</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveEnsemble</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>a572d13969bf5b88619386f0c54af8bb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveEnsemble</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>a64b9c3ab82b2ca4ddae29a54e4faf047</anchor>
      <arglist>(iterator first, iterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadEnsemble</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>a26b50a2eccc45c1ffc09f0015271ed42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadEnsemble</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>a71280f7dec8ad36a37640351e700f21c</anchor>
      <arglist>(vector&lt; MCWalkerConfiguration * &gt; &amp;others, bool doclean=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dumpEnsemble</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>a50b4e2a99c662354609dcd8c8086d81f</anchor>
      <arglist>(vector&lt; MCWalkerConfiguration * &gt; &amp;others, HDFWalkerOutput *out, int np)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearEnsemble</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>a2db7bbe1d3e5cf51481c0b0e639664df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParticleSet</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>acfd6803c0fd7a95f09bb59d59eb1a368</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParticleSet</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a56e0ab827d8011961330e844efb2b06e</anchor>
      <arglist>(const ParticleSet &amp;p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParticleSet</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>aa8d86f51f0bd5e20cf72f95580cc9ea4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a3ae125ee679f1a1b1e54177e55b845f6</anchor>
      <arglist>(ostream &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a9191e4b9bd1fa19bf98abf15be0d40d5</anchor>
      <arglist>(istream &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundBox</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>acec4910768bed52cb1994b68fbab1feb</anchor>
      <arglist>(bool yes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkBoundBox</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>ae87411149fe3b0469f23ead8b286f689</anchor>
      <arglist>(RealType rb)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addTable</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a2794b108d1471b9f97485d7c9ab6da17</anchor>
      <arglist>(const ParticleSet &amp;psrc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetCollectables</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a3acf0fcce94f998a36838a21ee198998</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>acded17653ec7b826c8cab35e8d5068b4</anchor>
      <arglist>(int iflag=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a591126b691b3c9f5c48d16967db281a3</anchor>
      <arglist>(const ParticlePos_t &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createSK</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>ab99942428525277229642b0033f8ba20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SpeciesSet &amp;</type>
      <name>getSpeciesSet</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a7d806fc06a3fc29ee892d423dcb26465</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SpeciesSet &amp;</type>
      <name>getSpeciesSet</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>abee9143ee9231999dfdc0e879f6d1224</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tag</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>aeb56925b80e35f34f6b668e91663d570</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>parent</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a90927d95340c3a73ab0e0bab18ff308a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getTotalWeight</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a9e38ec7f67f3d772e64e88a997d9c359</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetGroups</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>aa94ce5d2ae6470d26668e35446053dd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SingleParticlePos_t</type>
      <name>makeMove</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a264229995b469496c005bdf72269619b</anchor>
      <arglist>(Index_t iat, const SingleParticlePos_t &amp;displ)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>makeMoveAndCheck</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>ae58674722bc2676e47af4641f33a914d</anchor>
      <arglist>(Index_t iat, const SingleParticlePos_t &amp;displ)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>makeMove</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>acc67af02679fca501246b4878925747b</anchor>
      <arglist>(const Walker_t &amp;awalker, const ParticlePos_t &amp;deltaR, RealType dt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>makeMove</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a72fd18b7e9e1b5d94da0544ae4b1183b</anchor>
      <arglist>(const Walker_t &amp;awalker, const ParticlePos_t &amp;deltaR, const vector&lt; RealType &gt; &amp;dt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>makeMoveWithDrift</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>ab94ed419186afb53793b0b1baec157a9</anchor>
      <arglist>(const Walker_t &amp;awalker, const ParticlePos_t &amp;drift, const ParticlePos_t &amp;deltaR, RealType dt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>makeMoveWithDrift</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a0cf36cabbae95375a98428ff62086508</anchor>
      <arglist>(const Walker_t &amp;awalker, const ParticlePos_t &amp;drift, const ParticlePos_t &amp;deltaR, const vector&lt; RealType &gt; &amp;dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeMoveOnSphere</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>aeea136b218d712f48612f8a29c3faeed</anchor>
      <arglist>(Index_t iat, const SingleParticlePos_t &amp;displ)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeVirtualMoves</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a3e79f628be0b833c14dd9d6efcab6bcd</anchor>
      <arglist>(const SingleParticlePos_t &amp;newpos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a3ee5e0d536f9d9e31390bb50097b21f7</anchor>
      <arglist>(Index_t iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rejectMove</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a1f38f01e05c717e2283200b48e4187dc</anchor>
      <arglist>(Index_t iat)</arglist>
    </member>
    <member kind="function">
      <type>SingleParticlePos_t</type>
      <name>getOldPos</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a7820dacce239430c03f7bd9730fc8196</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initPropertyList</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a166c5259637879bbf5076f7987c12449</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addProperty</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a6bb1f39a71c57039d62e438263a4763b</anchor>
      <arglist>(const string &amp;pname)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addPropertyHistory</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a239e359bdc2dfd01f02dbeab0204a7ff</anchor>
      <arglist>(int leng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearDistanceTables</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a586159e15c8bb7e10194d7b8553d85ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeSphere</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>ada4f28993c215f47a7384a64e295aee4</anchor>
      <arglist>(int nc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>ae035433cf95ee6f0282e2f9c48e4c1b6</anchor>
      <arglist>(const ParticlePos_t &amp;pin, ParticlePos_t &amp;pout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert2Unit</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a7d585e7315b57718de2732ff0de1cc61</anchor>
      <arglist>(const ParticlePos_t &amp;pin, ParticlePos_t &amp;pout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert2Cart</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a3079ea302e2b7b7efb089756cf092549</anchor>
      <arglist>(const ParticlePos_t &amp;pin, ParticlePos_t &amp;pout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert2Unit</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>af49d1c1b80ef2b0cfc7803db74fb22ec</anchor>
      <arglist>(ParticlePos_t &amp;pout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert2Cart</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>ab2d3cb5d222c5cf17f989bbbb6e31b51</anchor>
      <arglist>(ParticlePos_t &amp;pout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert2UnitInBox</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>ad8f2e2a3ba28ca9196891fb437a46519</anchor>
      <arglist>(const ParticlePos_t &amp;pint, ParticlePos_t &amp;pout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert2CartInBox</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a1d8318cd30fe202585b18231d97c7acc</anchor>
      <arglist>(const ParticlePos_t &amp;pint, ParticlePos_t &amp;pout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyBC</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a879a7827572004e1b33e78b28e1000b0</anchor>
      <arglist>(const ParticlePos_t &amp;pin, ParticlePos_t &amp;pout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyBC</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a86897069752921f38a956eb6be97eec0</anchor>
      <arglist>(ParticlePos_t &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyBC</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>aa785edfbda3000151ca02bc04cb2d085</anchor>
      <arglist>(const ParticlePos_t &amp;pin, ParticlePos_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyMinimumImage</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a807eea8dd120330933183a9947dda48d</anchor>
      <arglist>(ParticlePos_t &amp;pinout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadWalker</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a91030a04b2463ffe69201bd3e9b831c4</anchor>
      <arglist>(Walker_t &amp;awalker, bool pbyp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveWalker</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a503462f6c8f56c9dfcc2d718db26b729</anchor>
      <arglist>(Walker_t &amp;awalker)</arglist>
    </member>
    <member kind="function">
      <type>RealType *restrict</type>
      <name>getPropertyBase</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>ad07c436ebfa1fcf5810096718112f3a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const RealType *restrict</type>
      <name>getPropertyBase</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a844270fa316054f1380711d45f47f764</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealType *restrict</type>
      <name>getPropertyBase</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a194e03e04cb82d4a973093135fc28615</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const RealType *restrict</type>
      <name>getPropertyBase</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>aff9f108ddbd96dac2cf8a51dea018250</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTwist</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a9c6ca124e348e4833c13cb541de19841</anchor>
      <arglist>(SingleParticlePos_t &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>SingleParticlePos_t</type>
      <name>getTwist</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>aa492f3add631b9838d88a6f0c90eb1bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>randomizeFromSource</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>af8040ceeff19c427e721d5b5abfde50a</anchor>
      <arglist>(ParticleSet &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ParticleSet *</type>
      <name>get_clone</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a0d8451bbc9038b282b389b28536033b8</anchor>
      <arglist>(int ip)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_clones</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a3824209ca3b1075f9aa10dc3ad01893d</anchor>
      <arglist>(const PAT &amp;rnew)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParticleBase</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a2b6d40b528be9ea02b94296633f9a9e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParticleBase</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a341cc21ec2306f71fac2bba33ce1f046</anchor>
      <arglist>(const ParticleBase&lt; PtclOnLatticeTraits &gt; &amp;P)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParticleBase</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>adf87f2c5e69d317753303cb5168b0ad8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getAttribType</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>aa38b305e638b193965e1d8e687bd6d08</anchor>
      <arglist>(const string &amp;tname)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumAttrib</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a7ed49947d2399b206ee5dc28c799f28e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PAListIterator</type>
      <name>first_attrib</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>acb2dcd7b4fa1ac9e6a8803abc69901f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PAListIterator</type>
      <name>last_attrib</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a9127480e7e4fd6e2b7726fd0a9a4c862</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasAttrib</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a16a95630a5961c623966b9ae18f605ac</anchor>
      <arglist>(const std::string &amp;attrib_name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addAttribute</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a55880a6db75d4636d078bd8b8bc4d95e</anchor>
      <arglist>(const std::string &amp;tname, const std::string &amp;oname)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addAttribute</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a7a2a0b7762cbe8adb7a734672cbcdfff</anchor>
      <arglist>(ParticleIndex_t &amp;pa)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addAttribute</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>ad8e7a91b4e336b78f0a1b4e36142fb5d</anchor>
      <arglist>(ParticleScalar_t &amp;pa)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addAttribute</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a80df7966e7a35ca45e9a52f5d7b0179a</anchor>
      <arglist>(ParticlePos_t &amp;pa)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addAttribute</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a10b184dcbba19b394564a18c7256005b</anchor>
      <arglist>(ParticleTensor_t &amp;pa)</arglist>
    </member>
    <member kind="function">
      <type>ParticleIndex_t *</type>
      <name>getIndexAttrib</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a0d0f6ea956feb7895853cc2ed998d26e</anchor>
      <arglist>(const std::string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>const ParticleIndex_t *</type>
      <name>getIndexAttrib</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a9e32566bc6069690d37b379b31e04a55</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>ParticleIndex_t *</type>
      <name>getIndexAttrib</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>af8018b1fb1822dd1799c72bbe4e612d6</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>ParticleScalar_t *</type>
      <name>getScalarAttrib</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a28fc930f2bef83966fe3af8e16d8a65b</anchor>
      <arglist>(const std::string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>const ParticleScalar_t *</type>
      <name>getScalarAttrib</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a281677053495893594d5fcffa31b3cb1</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>ParticleScalar_t *</type>
      <name>getScalarAttrib</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>ae675aa572413480b95b05ce36ea7fb94</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>ParticlePos_t *</type>
      <name>getVectorAttrib</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>aaaae7f3b4bac951fa81e078bc254a82f</anchor>
      <arglist>(const std::string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>const ParticlePos_t *</type>
      <name>getVectorAttrib</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a1a0e89edd6cded9e84ab6fd54df115dc</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>ParticlePos_t *</type>
      <name>getVectorAttrib</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a86752877c561c4686a1772f5b1644bfd</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>ParticleTensor_t *</type>
      <name>getTensorAttrib</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a5bb37898b3328802f789ee99f6f7d664</anchor>
      <arglist>(const std::string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>const ParticleTensor_t *</type>
      <name>getTensorAttrib</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a4cb57d38945acf9587a68bb958c9b339</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>ParticleTensor_t *</type>
      <name>getTensorAttrib</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a5ada12e64c193220b36c5415c9191c3b</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a2d66a21378e0cfcfdac5d0d794a7ad8a</anchor>
      <arglist>(unsigned m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a78f70455112ea42c8a0ffd2e8bc6a43f</anchor>
      <arglist>(const vector&lt; int &gt; &amp;agroup)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>ab87907cb2a65294e80e48061c3982bc8</anchor>
      <arglist>(unsigned m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>assign</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>abb67bf05674b3a96f7e82c2c698a52d2</anchor>
      <arglist>(const ParticleBase&lt; PtclOnLatticeTraits &gt; &amp;ptclin)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLocalNum</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a974ac5c14b25073545b795ab1ba34196</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTotalNum</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>abd442623fd85f7c5c676a11ab3fdacbf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>groups</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a36a4093d7489844091460bd21cba8077</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>first</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a5e0bc54e9bfaaecd01b86ff59e4d4364</anchor>
      <arglist>(int igroup) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>last</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a123338d1259e19c4c45c7a5751d2674e</anchor>
      <arglist>(int igroup) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>current</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a40e7fa09b7b40063ee0b890874b7d235</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advance</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a8903a4e9f3d5fb42d0faa9d53e21d85c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCounter</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>af57e31c81fec979e8d210500bb1c9deb</anchor>
      <arglist>(int i=0)</arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>WalkerOffsets</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>ab9564bf009d57eead9684d9af2782e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>WalkerList_t</type>
      <name>WalkerList</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>ae9c5bc0db247f90a0255d99c3f0f503f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Reptile *</type>
      <name>reptile</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>a6711327d279a99e705ca3c7791e221db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MCDataType&lt; RealType &gt;</type>
      <name>EnsembleProperty</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>aed4e42393d716eb5c03b2255f0b1f5b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleGradient_t</type>
      <name>G</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>af86dda412dab46ed2e064f2c83086d24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleLaplacian_t</type>
      <name>L</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a8f34c3bfef547ae61b3e6fb4f82ebacf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleGradient_t</type>
      <name>dG</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>aa02c08c2342c5640c1b74696b6e7b4ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleLaplacian_t</type>
      <name>dL</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>ad355e54568029d31ea0922887a245b83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticlePos_t</type>
      <name>redR</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>ab62fa7ccce9b5a09305c07084877583c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleIndex_t</type>
      <name>IndirectID</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a93df2e1d5230accd1315321ea49d395d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleScalar_t</type>
      <name>Mass</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>ae03fc3085946af719afdbd156d0ed18f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleScalar_t</type>
      <name>Z</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>ac0830e4561b960543ea63aeb13a77ca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>UseBoundBox</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>ae1989f079ded1eb7c1ce203e1727d312</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>UseSphereUpdate</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a0602838fe7b423f5790dc8adc63fcb46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>IsGrouped</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a9fa8d1eef9380dd09b3ab4024fa0adfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Index_t</type>
      <name>ThreadID</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>ad5b5b5e6eb5c00813d39b31c42f6cc2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Index_t</type>
      <name>activePtcl</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a9574f42f7b3dc125fc67dc53e14d34bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Index_t</type>
      <name>activeBead</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a29dfe9ab6ec0c16655112fc15d3303e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Index_t</type>
      <name>direction</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a7c6b9952dd5f99f740b41133e824c740</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SingleParticlePos_t</type>
      <name>activePos</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>ac0317e91633c97a016435b30f6a86a05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SingleParticlePos_t</type>
      <name>newRedPos</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a89faba00f954e9bd1d6fd5a41784411b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SpeciesSet</type>
      <name>mySpecies</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>ac534cd4b1534d578794938b7087cc0c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>StructFact *</type>
      <name>SK</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a84e0ce45c66fd07f9632564b982c75e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; DistanceTableData * &gt;</type>
      <name>DistTables</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>af08f675ac5c28de1d526ff2dc3944d04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; ParticlePos_t * &gt;</type>
      <name>Sphere</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>ab9629406395ad1720e6454bcbef02df7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; TinyVector&lt; int, OHMMS_DIM &gt; &gt;</type>
      <name>DensityReducedGvecs</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>aef6ed743ea83aa36cdd8b5f7c05e6a0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; ComplexType &gt;</type>
      <name>Density_G</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a24e7fc632b81b0942fb18b975986612d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; RealType, OHMMS_DIM &gt;</type>
      <name>Density_r</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a2e6e3a0221164b7f5728334ab0d3c9e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; TinyVector&lt; int, OHMMS_DIM &gt; &gt;</type>
      <name>VHXCReducedGvecs</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a5901b7d75fb4952368953fde22ea617d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; ComplexType &gt;</type>
      <name>VHXC_G</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a92b45354832d5a8a788cb89088e4d69e</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; RealType, OHMMS_DIM &gt;</type>
      <name>VHXC_r</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>afdfa792a78f2d1ed6d378d7b573534d5</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>PropertySetType</type>
      <name>PropertyList</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a2fbc95c313baf632d59861ee25c703ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PropertyContainer_t</type>
      <name>Properties</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>abc71455d137bc534cd6ff75393b69ee0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Buffer_t</type>
      <name>Collectables</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a2151249b975dfd787c7ac90933e086b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; ParticleSet * &gt;</type>
      <name>myClones</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>ac0958906d3e2af1c01d39178868f3e14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; vector&lt; RealType &gt; &gt;</type>
      <name>PropertyHistory</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a533291bbb55021241c204b1fc9d24861</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>PHindex</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a882e12a6e246d201bb8809f36b5fd78d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleLayout_t</type>
      <name>Lattice</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a0d2cb760536b1d444fefd35557e89be1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleLayout_t</type>
      <name>PrimitiveLattice</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a0b2d1e3fd67c6f030295e908e15bfbf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleIndex_t</type>
      <name>ID</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>aaa5b3822fc3065b2d47f390b34dc2a04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleIndex_t</type>
      <name>GroupID</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>af265ee302ec2f6f7185c6bb3047336df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticlePos_t</type>
      <name>R</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a3bdf48527be4c72e21e4ba50cfc67069</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticlePos_t</type>
      <name>curR</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a052a377438fcf1f7f8f0d869ae2b90ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>OwnWalkers</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>a067419003e732bf4b566da426d72b763</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>ReadyForPbyP</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>af04cc75e21429d48f8af01509fb20020</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>LocalNumWalkers</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>aff1bbf9687903a7a415418ecea9f8135</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>GlobalNumWalkers</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>aac3319df98eb11425d600fcbdea48259</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>UpdateMode</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>a742b26dcec2d1a30c3b4fa0a5cc34304</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>LocalEnergy</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>a23c1fe0cf2eb4bb4ae9480f32225bc0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Index_t</type>
      <name>ObjectTag</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>aafd045e3dcfe8c04de0f986bd4576aed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Index_t</type>
      <name>ParentTag</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>aa2a5cfd2b812d8dcd35ed1da089c623c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>map&lt; int, int &gt;</type>
      <name>myDistTableMap</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a52a9d02f7183eb562d821cc6411ab137</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; NewTimer * &gt;</type>
      <name>myTimers</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a7f1b158b9dd94f7e78276fafc68f365a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SingleParticlePos_t</type>
      <name>myTwist</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a7850a22b6871bc38b2bbcf2077ef560c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>Counter</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a8da6d6b33b7597f02434fedca1781cbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>LocalNum</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a0dcb1827a9550667b1dd2b992947efcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>GlobalNum</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a1829eedb8d2e27759675571eba882439</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleIndex_t</type>
      <name>SubPtcl</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a91533b86522e2b5e7c68e1c4ddaa9e83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>map&lt; string, int &gt;</type>
      <name>AttribTypeMap</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>ad4200eda2aa791b6797a0500f85851d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>map&lt; string, int &gt;</type>
      <name>Name2Index</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>aeca23b582a4f5cc02b9ab6e338f4af8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>map&lt; string, OhmmsObject * &gt;</type>
      <name>AttribList</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>aa738e8efa0b0a2c410e38c80df4af37a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; ParticleIndex_t * &gt;</type>
      <name>INDEX</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>afcc06d560387647b2da3b7cc0ceee029</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; ParticleScalar_t * &gt;</type>
      <name>VAL</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a83a0615f6ab6be5689533a14f8861f76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; ParticlePos_t * &gt;</type>
      <name>POS</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>ab6a882a70970d950e9d979b483a34fef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; ParticleTensor_t * &gt;</type>
      <name>TENZOR</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>ad43cf38c0c530409c529e91151000398</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; OhmmsObject * &gt;</type>
      <name>myAttribList</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>a0c6dfe76c5dc48b3bacf3c69d299ce27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MultiChain *</type>
      <name>Polymer</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>a454738bb810aae61f16de2f4ae3a9d08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>MaxSamples</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>aadaa89cf0c4771361d1130da1101e247</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>CurSampleCount</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>a4619f791335b95fa986ac0641ef44ab8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; MCSample * &gt;</type>
      <name>SampleStack</name>
      <anchorfile>a00375.html</anchorfile>
      <anchor>a7a9a46894837302cd63e023a287e2296</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initParticleSet</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>a460592ad751bc7d952c37980746d13a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static Index_t</type>
      <name>PtclObjectCounter</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>ac4044a741cf1644a071e529541b9be6b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::BoxBCHandler</name>
    <filename>a00045.html</filename>
    <templarg></templarg>
    <templarg>D</templarg>
    <templarg>ORTHO</templarg>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::BoxBCHandler&lt; T, 3, true &gt;</name>
    <filename>a00047.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>BoxBCHandler</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>aa8a3e6f1960151809c71db0263ec91c6</anchor>
      <arglist>(const CrystalLattice&lt; T, 3 &gt; &amp;lat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put2box</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a2178a952b9bee23d66229f11cbd2cea6</anchor>
      <arglist>(const TinyVector&lt; T, 3 &gt; &amp;pin, TinyVector&lt; T, 3 &gt; &amp;pout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put2box</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>af675e8e9cfbcb412992533c5d9e243ef</anchor>
      <arglist>(const PAT1 &amp;pin, PAT2 &amp;pout, int n)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>L0</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a42170abef5cee300b5abb43b5450b1f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>L0Inv</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>afc5542bac20aeb122293c7bd7287a9f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>L1</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>ae51b17b3cea1392721f23e0ef4c5c72f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>L1Inv</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>af9d1ae6ab5a7d5de0a1dbea878344c0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>L2</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>ac25dba53d3cddc3af93ea902ee60230c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>L2Inv</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a75299cdc9e0598e44b02e8d6b35de989</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::BoxBCHandler&lt; T, 3, false &gt;</name>
    <filename>a00046.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>BoxBCHandler</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>aa8a3e6f1960151809c71db0263ec91c6</anchor>
      <arglist>(const CrystalLattice&lt; T, 3 &gt; &amp;lat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put2box</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a2178a952b9bee23d66229f11cbd2cea6</anchor>
      <arglist>(const TinyVector&lt; T, 3 &gt; &amp;pin, TinyVector&lt; T, 3 &gt; &amp;pout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put2box</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>af675e8e9cfbcb412992533c5d9e243ef</anchor>
      <arglist>(const PAT1 &amp;pin, PAT2 &amp;pout, int n)</arglist>
    </member>
    <member kind="variable">
      <type>CrystalLattice</type>
      <name>myLattice</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>aefb7fa79c0df7d389323b2e1176e1323</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::MixedBCDTD</name>
    <filename>a00377.html</filename>
    <templarg></templarg>
    <templarg>D</templarg>
    <templarg>ORTHO</templarg>
    <base>qmcplusplus::BoxBCHandler</base>
    <base>qmcplusplus::DistanceTableData</base>
    <member kind="function">
      <type></type>
      <name>MixedBCDTD</name>
      <anchorfile>a00377.html</anchorfile>
      <anchor>a155f14837d0093b50fa239787b1525bf</anchor>
      <arglist>(const ParticleSet &amp;source, const ParticleSet &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>a00377.html</anchorfile>
      <anchor>a66c26a00b384475a3c0229b64c6f0e5d</anchor>
      <arglist>(int walkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00377.html</anchorfile>
      <anchor>a9bc482eb2e63a142dade8bc6491efc4e</anchor>
      <arglist>(int n1, int n2, int nactive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00377.html</anchorfile>
      <anchor>a0bb2ffda8422273ba3ef55b25eb07fe1</anchor>
      <arglist>(const ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>a00377.html</anchorfile>
      <anchor>aaf32fd05b134bd0712fd673b758cb9f3</anchor>
      <arglist>(const ParticleSet &amp;P, const PosType &amp;rnew, IndexType jat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveby</name>
      <anchorfile>a00377.html</anchorfile>
      <anchor>a13695e5ce38f2eba4db4b2d20363f76b</anchor>
      <arglist>(const ParticleSet &amp;P, const PosType &amp;displ, IndexType jat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveOnSphere</name>
      <anchorfile>a00377.html</anchorfile>
      <anchor>a2bd06e391ec766def970d9591b329429</anchor>
      <arglist>(const ParticleSet &amp;P, const PosType &amp;displ, IndexType jat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00377.html</anchorfile>
      <anchor>a17d529b0b294a5cf07854e893f4ff658</anchor>
      <arglist>(IndexType jat)</arglist>
    </member>
    <member kind="variable">
      <type>const ParticleSet &amp;</type>
      <name>Target</name>
      <anchorfile>a00377.html</anchorfile>
      <anchor>abda3d1be6fe32812d2e4b6b814e2f7af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; PosType &gt;</type>
      <name>RinBox</name>
      <anchorfile>a00377.html</anchorfile>
      <anchor>adccfdd4514c90807e2ed87d1a3a1f8ed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::ParticleSet</name>
    <filename>a00463.html</filename>
    <base>qmcplusplus::QMCTraits</base>
    <base>OhmmsElementBase</base>
    <base>ParticleBase&lt; PtclOnLatticeTraits &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>make_clones</name>
      <anchorfile>a00463.html</anchorfile>
      <anchor>aa5c6505c3d1b15345c59e38219e222d0</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initBase</name>
      <anchorfile>a00462.html</anchorfile>
      <anchor>aeb85ffc8a1b91f3940ff0a6c625e98db</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::D2OnSphere</name>
    <filename>a00134.html</filename>
    <templarg></templarg>
    <templarg>D</templarg>
    <templarg>SC</templarg>
    <base>qmcplusplus::DistTableOnSphere</base>
    <member kind="function">
      <type></type>
      <name>D2OnSphere</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>a803ecfebfdb86e8a3b2e06624e9e222f</anchor>
      <arglist>(const ParticleSet &amp;P, const DistanceTableData &amp;dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeMoves</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>ad0e03310dc22fe225e892023597ec36f</anchor>
      <arglist>(int iel, const DistanceTableData &amp;dt, const vector&lt; PosType &gt; &amp;displs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DistTableOnSphere</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a35d4dd3028d01f2180fec411e483aabc</anchor>
      <arglist>(const DistanceTableData &amp;dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ac7af8900550e60d719ce98a6a1d54232</anchor>
      <arglist>(int nknot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a6d705d81205a851543a0831c8d8c6573</anchor>
      <arglist>(int n, int nknot)</arglist>
    </member>
    <member kind="variable">
      <type>DTD_BConds&lt; T, D, SC &gt;</type>
      <name>myBconds</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>a48f33bcfa049bdfe7dc29683cd1b5e5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; RealType &gt;</type>
      <name>r_m</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ac5f284cacbfe7b519653eef2942524c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; PosType &gt;</type>
      <name>dr_m</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ab99b65b6157968ca8d5ea6dba9a8a340</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SourceIndex</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aae05225933a42f81e7c4a9fb286596f9a732385481fd4cdd65e2b03bf1e5a8391</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VisitorIndex</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aae05225933a42f81e7c4a9fb286596f9a08b87a0f672e69b6c83e764232271b37</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DistanceTableData::RealType</type>
      <name>RealType</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ad0c60f9d9e3eaddf4e764ebe5da0d0d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DistanceTableData::PosType</type>
      <name>PosType</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a1bc85dd0b5dae7347ae9f62d4289aa24</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::D1OnSphere</name>
    <filename>a00133.html</filename>
    <templarg></templarg>
    <templarg>D</templarg>
    <templarg>SC</templarg>
    <base>qmcplusplus::DistTableOnSphere</base>
    <member kind="function">
      <type></type>
      <name>D1OnSphere</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>a8c58e312ba8d3e39d2521ae6d412d16c</anchor>
      <arglist>(const ParticleSet &amp;P, const DistanceTableData &amp;dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeMoves</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>ad0e03310dc22fe225e892023597ec36f</anchor>
      <arglist>(int iel, const DistanceTableData &amp;dt, const vector&lt; PosType &gt; &amp;displs)</arglist>
    </member>
    <member kind="variable">
      <type>DTD_BConds&lt; T, D, SC &gt;</type>
      <name>myBconds</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>a48f33bcfa049bdfe7dc29683cd1b5e5b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::DistTableOnSphere</name>
    <filename>a00155.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>makeMoves</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a49e472ffe2006ce554d49ad4f015d514</anchor>
      <arglist>(int iel, const DistanceTableData &amp;dt, const vector&lt; PosType &gt; &amp;displs)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::MultiMoveHandler</name>
    <filename>a00394.html</filename>
    <member kind="typedef">
      <type>ParticleSet::ParticlePos_t</type>
      <name>ParticlePos_t</name>
      <anchorfile>a00394.html</anchorfile>
      <anchor>af8fc698bf4ec42010074a024e26ecc34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleSet::SingleParticlePos_t</type>
      <name>PosType</name>
      <anchorfile>a00394.html</anchorfile>
      <anchor>aeb0265bf895b2b26138b5abefa753dc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiMoveHandler</name>
      <anchorfile>a00394.html</anchorfile>
      <anchor>a9146f371b4e8a20b4ed3cd9b5392d725</anchor>
      <arglist>(const ParticleSet &amp;pt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MultiMoveHandler</name>
      <anchorfile>a00394.html</anchorfile>
      <anchor>addfa94c54fcc0659f75c02a93ba70f34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00394.html</anchorfile>
      <anchor>ac7af8900550e60d719ce98a6a1d54232</anchor>
      <arglist>(int nknot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeMoves</name>
      <anchorfile>a00394.html</anchorfile>
      <anchor>a4b712bd3fd223854c1bc4d7f609b5f15</anchor>
      <arglist>(ParticleSet &amp;P, int iat, const PA &amp;displs)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ActivePtcl</name>
      <anchorfile>a00394.html</anchorfile>
      <anchor>a53d6edcd38cdb1f69f4be0419a3f2459</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>GroupID</name>
      <anchorfile>a00394.html</anchorfile>
      <anchor>adaacbc113eb3a8eb51e1b7a0328c47df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticlePos_t</type>
      <name>R</name>
      <anchorfile>a00394.html</anchorfile>
      <anchor>a3bdf48527be4c72e21e4ba50cfc67069</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; DistTableOnSphere * &gt;</type>
      <name>myTables</name>
      <anchorfile>a00394.html</anchorfile>
      <anchor>a873aa10130fec64e0d838316b73e82cf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::Reptile</name>
    <filename>a00528.html</filename>
    <base>qmcplusplus::QMCTraits</base>
    <member kind="typedef">
      <type>MCWalkerConfiguration::Walker_t</type>
      <name>Walker_t</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>ac075f56c393d5ec9a998ec36c58ad7d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MCWalkerConfiguration::iterator</type>
      <name>WalkerIter_t</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>af47868b1428ec9e8cb6f713f3c05a397</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Reptile</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>a96c48fb51f6a69fd71ad041110314bb6</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, WalkerIter_t start, WalkerIter_t end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Reptile</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>a928306b6a323efb6a36711fd4b4f38ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>wrapIndex</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>a832c34dffcd6515937d537ec544fff52</anchor>
      <arglist>(IndexType repindex)</arglist>
    </member>
    <member kind="function">
      <type>Walker_t &amp;</type>
      <name>getWalker</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>ad5b02f96fb106d2be651d77a0d6d47cc</anchor>
      <arglist>(IndexType i)</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>getBeadIndex</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>a0b58d620a4bbf082eb1c4fee2ba99791</anchor>
      <arglist>(IndexType i)</arglist>
    </member>
    <member kind="function">
      <type>Walker_t &amp;</type>
      <name>getBead</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>a8f1058beca208b5f5d6d931e6320071c</anchor>
      <arglist>(IndexType i)</arglist>
    </member>
    <member kind="function">
      <type>Walker_t &amp;</type>
      <name>getHead</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>a382ebedf14725e84b659de6c57d86e74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Walker_t &amp;</type>
      <name>getTail</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>a7f91a0dd4b7d797b61b4589a8b7dc762</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Walker_t &amp;</type>
      <name>getNext</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>a75355c170c6e3bd68193f287599e5c6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Walker_t &amp;</type>
      <name>getCenter</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>ab2ff49806a3f53b67d181e263d736c91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flip</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>a126cb0362ae2e7935520fb27343bad31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDirection</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>a810566dd796006801142d0923bd4de75</anchor>
      <arglist>(IndexType dir)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBead</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>a49808d6f7c6e46d7929ee79d7efab700</anchor>
      <arglist>(Walker_t &amp;walker, IndexType i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHead</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>af64abfc109caca03af2500b29d9abb62</anchor>
      <arglist>(Walker_t &amp;overwrite)</arglist>
    </member>
    <member kind="function">
      <type>Walker_t &amp;</type>
      <name>getNewHead</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>a2947f87fce4c387b4f5ee0538ac8192f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printState</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>a5aaf516d78b7caef2d2b9867b02542e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetR2Avg</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>acc04529aacbcd053d962a82eec35935d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetEAvg</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>a1a21926b2b33965a0396a8ed8bdb2949</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcTauScaling</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>aba5fc67cd63014904cc5626a259428f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulateE</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>af0ad7c5f95fd9d8b3a45708ea999f863</anchor>
      <arglist>(RealType eloc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcERun</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>a7c5a7e9044c8df7047e53197ba540184</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; IndexType &gt;</type>
      <name>Action</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>aac1d581a7f1ba68247f6d4b91b413869</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; IndexType &gt;</type>
      <name>TransProb</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>a4c6de91a3ced74dc92602fdb94805655</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>forwardprob</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>aa641aeed69894e7a024e521fd7a7041e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>backwardprob</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>a0ed298bc724a8dd50054957296ec3850</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>forwardaction</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>a7cf9dcdf3c87a03e48f28d84450bf02c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>backwardaction</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>a5b833ff184b35663ea28dd163ffcde69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>r2prop</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>a6c0907257d1b768355be6e741de685e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>r2accept</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>a3ce483dd9006472dad6cad7046211c67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>r2samp</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>aeed928060f34b26dcd0aec19837216c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>maxSamp</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>ad3aee578108c6b453bb7612c883c74b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>tauscale</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>a8431781c944dd048d9cfb93fee9e58a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>tau</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>a599ecc72bcd9d5cad195014e27f6a2f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>erun</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>a29c3b3c64582a3622acc4f23192eef87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>erun2</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>a57af1285d45c2a2d70452e2a3f670ea1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>eest</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>ac7e48932cfa93d69981f353e015227e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>evar</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>aba279865feb5dccb63181e17d2a8e25f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>esamp</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>a8e746c69559743c667ffa4c90530b5ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>direction</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>a38fea1b0677c6639abd718f9971c7c40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>headindex</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>a4d8e2a235554e24f888aedc89edcc5b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>nbeads</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>a38fdea0512b8799c1ea71fd6b2a74c41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MCWalkerConfiguration &amp;</type>
      <name>w</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>ad15678b4a90bf7dae2a524ce0383ae28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Walker_t *</type>
      <name>prophead</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>a152b1bb0ae17f9e0bc71e0a8d03bf2f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>WalkerIter_t</type>
      <name>repstart</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>ad0a6447cae6896599aa4981c6504ffc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>WalkerIter_t</type>
      <name>repend</name>
      <anchorfile>a00528.html</anchorfile>
      <anchor>a5be96a5f17c2d15e9a35e05b17a6c42a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::Walker</name>
    <filename>a00629.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="enumvalue">
      <type>@</type>
      <name>DIM</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>aaf8fd5f0e57d456151c951e0f3715fc4a6c8e5f290be4be86fd5e7048654b4a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>t_traits::RealType</type>
      <name>RealType</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>a60e5a308b0c1159bf759ada296fe2a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>t_traits::ValueType</type>
      <name>ValueType</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>a79821ba4ff4ca6e5c7bbb8d9ae4faa55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>p_traits::ParticlePos_t</type>
      <name>ParticlePos_t</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>af55efeb6e3928af318bf565928047ca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>p_traits::ParticleGradient_t</type>
      <name>ParticleGradient_t</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>a8d785354a66c99c14197fbfdd903ccd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>p_traits::ParticleLaplacian_t</type>
      <name>ParticleLaplacian_t</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>af305738686a0f1460e1c253d71d6102c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; RealType &gt;</type>
      <name>PropertyContainer_t</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>a0b63222885dc44694ea8d0a6d39ee6c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PooledData&lt; RealType &gt;</type>
      <name>Buffer_t</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>ad5359490fdb94e60cb4acd8a70d47157</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Walker</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>aa718b5f71f3d8b1d1cabef0c8ba08acd</anchor>
      <arglist>(int nptcl=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addPropertyHistory</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>a239e359bdc2dfd01f02dbeab0204a7ff</anchor>
      <arglist>(int leng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deletePropertyHistory</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>aec2936224cefb7fc942083a21846e32c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetPropertyHistory</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>aa58daa17cb2d4f7b394af9d586a4d6db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPropertyHistoryPoint</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>aa2ad4f1970f493b4ed6d4bce47129880</anchor>
      <arglist>(int index, RealType data)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getPropertyHistorySum</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>a865829f7121cfc17b6606cd851898387</anchor>
      <arglist>(int index, int endN)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Walker</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>abda69cae6ab2acbb704b3123e425bd83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Walker &amp;</type>
      <name>operator=</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>a121ac35226eb157bbd6427036b7b764f</anchor>
      <arglist>(const Walker &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>ab8e4e3e2a7bf18888b71bdf9dda0770b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>ae830acd8d266340870f8c39671dc4cb4</anchor>
      <arglist>(int nptcl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeCopy</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>a18190990e0927031c6969190e68b239a</anchor>
      <arglist>(const Walker &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>RealType *restrict</type>
      <name>getPropertyBase</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>ad07c436ebfa1fcf5810096718112f3a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const RealType *restrict</type>
      <name>getPropertyBase</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>a844270fa316054f1380711d45f47f764</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealType *restrict</type>
      <name>getPropertyBase</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>a194e03e04cb82d4a973093135fc28615</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const RealType *restrict</type>
      <name>getPropertyBase</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>aff9f108ddbd96dac2cf8a51dea018250</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetProperty</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>ab2bbd64ac85bcbcb10da8ddae5c5c627</anchor>
      <arglist>(RealType logpsi, RealType sigN, RealType ene)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetReleasedNodeProperty</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>afa9b5cfef5c079ee5966af2cf82c1f7f</anchor>
      <arglist>(RealType localenergy, RealType alternateEnergy, RealType altR)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetReleasedNodeProperty</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>acdf4c713473bd33847b5ae1b70718697</anchor>
      <arglist>(RealType localenergy, RealType alternateEnergy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetProperty</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>a3ca21ca006b5c9e5eed9346db04b9819</anchor>
      <arglist>(RealType logpsi, RealType sigN, RealType ene, RealType r2a, RealType r2p, RealType vq)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>willDie</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>ac85d8242f739e3ba2b1f0f029ad29989</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeProperty</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>a6783ce94ece213cf8db29536b67e2e5a</anchor>
      <arglist>(int n, int m)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>byteSize</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>a5922bf2166fce41bd0a82f88bec7f154</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Msg &amp;</type>
      <name>putMessage</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>a66f0d1c9f6ad548215e0304258871ae8</anchor>
      <arglist>(Msg &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Msg &amp;</type>
      <name>getMessage</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>a8bdf97e232512163287ab211f21d92c8</anchor>
      <arglist>(Msg &amp;m)</arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>ID</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>ae9c27346afc38e44402e452477847b53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>ParentID</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>a4203437dd6f2986b41fb18a52bda21ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Generation</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>afc40d72036170bf56b5f8018378f55cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Age</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>a33ed304f7261f607df756d3860ef83c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ReleasedNodeAge</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>a8f3a56be1e098bf4cb48b01396ccbb7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Weight</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>ae5f9e9592b18b89f25ce9c178bc903f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>ReleasedNodeWeight</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>a472b5e79edfcb2f3463c9b83450bd3b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Multiplicity</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>a6ce3836ce76d46c3503d53875dfc5d3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticlePos_t</type>
      <name>R</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>a3bdf48527be4c72e21e4ba50cfc67069</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleLaplacian_t</type>
      <name>L</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>a8f34c3bfef547ae61b3e6fb4f82ebacf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PropertyContainer_t</type>
      <name>Properties</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>abc71455d137bc534cd6ff75393b69ee0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; vector&lt; RealType &gt; &gt;</type>
      <name>PropertyHistory</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>a533291bbb55021241c204b1fc9d24861</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>PHindex</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>a882e12a6e246d201bb8809f36b5fd78d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Buffer_t</type>
      <name>DataSet</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>af13ee5a1f7a105c12fea26d26b48aed7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Buffer_t</type>
      <name>DataSetForDerivatives</name>
      <anchorfile>a00629.html</anchorfile>
      <anchor>aede2a3365dcb8014bdab533874a9862f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ESHDFElectronsParser</name>
    <filename>a00209.html</filename>
    <member kind="function">
      <type></type>
      <name>ESHDFElectronsParser</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a132485600b7692195acfbd6722bd1dfb</anchor>
      <arglist>(ParticleSet &amp;aptcl, hid_t h=-1, Communicate *c=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet &amp;</type>
      <name>ref_</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>afb9ce3e82582b3ff20c1c01fb91c1ca1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hid_t</type>
      <name>hfile_id</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>acb7f820e803abc6b584bfebc58ad18b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Communicate *</type>
      <name>myComm</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a6e290154265339db27f9a9bef2bd3aab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ESHDFIonsParser</name>
    <filename>a00210.html</filename>
    <member kind="function">
      <type></type>
      <name>ESHDFIonsParser</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>a76b1db56329dcfdf90e6201fc386c1ab</anchor>
      <arglist>(ParticleSet &amp;aptcl, hid_t h=-1, Communicate *c=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readESHDF</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>ab6e41d19c1188bb085aacc899682d8d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expand</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>a207ce30cb928164d2105b721e7580df0</anchor>
      <arglist>(Tensor&lt; int, 3 &gt; &amp;tilematrix)</arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet &amp;</type>
      <name>ref_</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>afb9ce3e82582b3ff20c1c01fb91c1ca1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hid_t</type>
      <name>hfile_id</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>acb7f820e803abc6b584bfebc58ad18b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Communicate *</type>
      <name>myComm</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>a6e290154265339db27f9a9bef2bd3aab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>atomic_number_tag</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>a2e769e212bcf267c9c2284c015050383</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>charge_tag</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>aee9e75dcabdbc7ff952f550c1958187c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>mass_tag</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>a14cbce18e624d754d9c73202bcdd08a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; ParticleAttrib&lt; TinyVector&lt; double, D &gt; &gt; &gt;</name>
    <filename>a00269.html</filename>
    <templarg>D</templarg>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="typedef">
      <type>TinyVector&lt; double, D &gt;</type>
      <name>SingleParticlePos_t</name>
      <anchorfile>a00269.html</anchorfile>
      <anchor>a0bf631cc49a48e3bb5a8b70d5f8f9dc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleAttrib&lt; SingleParticlePos_t &gt;</type>
      <name>ArrayType_t</name>
      <anchorfile>a00269.html</anchorfile>
      <anchor>a09f7451d06a6f762e49729a6027cccc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>a00269.html</anchorfile>
      <anchor>a7c30f1a0d39f35dff65f66bd397d37ca</anchor>
      <arglist>(ArrayType_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HDFAttribIO</name>
      <anchorfile>a00269.html</anchorfile>
      <anchor>a0a555159ada77340dd27f88ed031e4fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a00269.html</anchorfile>
      <anchor>aabf27f26e0fa4675aa5f9b18278e7545</anchor>
      <arglist>(hid_t hdfFile, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a00269.html</anchorfile>
      <anchor>a2378d66f31e2d3c28eed6a1863e5c5dc</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>ArrayType_t &amp;</type>
      <name>ref</name>
      <anchorfile>a00269.html</anchorfile>
      <anchor>aa41ba92e454ef17e0c4a3d47b09bea98</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::HDFParticleParser</name>
    <filename>a00290.html</filename>
    <base>ParticleTags</base>
    <member kind="typedef">
      <type>ParticleSet</type>
      <name>Particle_t</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a39d787c8f2b88b99038dec636dea9016</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFParticleParser</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a38f066145f82779c39fa93fb6da5e6a7</anchor>
      <arglist>(Particle_t &amp;aptcl)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a5a8f4d745b66f09c5e30d10830a80637</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Particle_t &amp;</type>
      <name>ref_</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a4dfb7836be7ebe011958b3c87bdce8bf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::HDFSaveParticle</name>
    <filename>a00291.html</filename>
    <base>ParticleTags</base>
    <base>RecordProperty</base>
    <member kind="typedef">
      <type>ParticleSet</type>
      <name>Particle_t</name>
      <anchorfile>a00291.html</anchorfile>
      <anchor>a39d787c8f2b88b99038dec636dea9016</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFSaveParticle</name>
      <anchorfile>a00291.html</anchorfile>
      <anchor>aae6b9f76a873f117e07c45a99c8978c1</anchor>
      <arglist>(Particle_t &amp;pin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HDFSaveParticle</name>
      <anchorfile>a00291.html</anchorfile>
      <anchor>a18d0d6c3db07f34ebc4aa210f62eed72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00291.html</anchorfile>
      <anchor>a0455c6f2d063312e6add1c45ebc99c24</anchor>
      <arglist>(const char *fileroot, bool append=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>report</name>
      <anchorfile>a00291.html</anchorfile>
      <anchor>a56fd44205a63bdff859974f08254d105</anchor>
      <arglist>(int iter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>a00291.html</anchorfile>
      <anchor>a32d626626eee0bc4ade146973f6abb1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00291.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Particle_t &amp;</type>
      <name>ref_</name>
      <anchorfile>a00291.html</anchorfile>
      <anchor>a4dfb7836be7ebe011958b3c87bdce8bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>FileRoot</name>
      <anchorfile>a00291.html</anchorfile>
      <anchor>afab4f7affc4fc132d20d6e360a875edb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::LatticeParser</name>
    <filename>a00326.html</filename>
    <member kind="function">
      <type></type>
      <name>LatticeParser</name>
      <anchorfile>a00326.html</anchorfile>
      <anchor>a7882375837dc5e9802515a0b0982a1f4</anchor>
      <arglist>(ParticleLayout_t &amp;lat)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00326.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>PtclOnLatticeTraits::ParticleLayout_t</type>
      <name>ParticleLayout_t</name>
      <anchorfile>a00326.html</anchorfile>
      <anchor>a29757525d62a537de6c5756a899af218</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleLayout_t &amp;</type>
      <name>ref_</name>
      <anchorfile>a00326.html</anchorfile>
      <anchor>a78983ef57e39e9c619f94e249ab14609</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::LatticeXMLWriter</name>
    <filename>a00327.html</filename>
    <member kind="function">
      <type></type>
      <name>LatticeXMLWriter</name>
      <anchorfile>a00327.html</anchorfile>
      <anchor>aca04e9cea8246cfcdd6b9dbdc9d0b2b2</anchor>
      <arglist>(ParticleLayout_t &amp;lat)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00327.html</anchorfile>
      <anchor>a3ae125ee679f1a1b1e54177e55b845f6</anchor>
      <arglist>(ostream &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>xmlNodePtr</type>
      <name>createNode</name>
      <anchorfile>a00327.html</anchorfile>
      <anchor>a72ead853b7f86d9119c5797e4698235c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>PtclOnLatticeTraits::ParticleLayout_t</type>
      <name>ParticleLayout_t</name>
      <anchorfile>a00327.html</anchorfile>
      <anchor>a29757525d62a537de6c5756a899af218</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleLayout_t &amp;</type>
      <name>ref_</name>
      <anchorfile>a00327.html</anchorfile>
      <anchor>a78983ef57e39e9c619f94e249ab14609</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ParticleAttribXmlNode</name>
    <filename>a00461.html</filename>
    <templarg>PAT</templarg>
    <member kind="function">
      <type></type>
      <name>ParticleAttribXmlNode</name>
      <anchorfile>a00461.html</anchorfile>
      <anchor>a45e8f29ba3c6af3188240bdcd09bc26a</anchor>
      <arglist>(PAT &amp;a, int utype)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00461.html</anchorfile>
      <anchor>a0bf5b58c1f497010d7ac925b60e6598a</anchor>
      <arglist>(xmlNodePtr cur, int n_in, int start)</arglist>
    </member>
    <member kind="variable">
      <type>PAT &amp;</type>
      <name>ref_</name>
      <anchorfile>a00461.html</anchorfile>
      <anchor>a9014c1918af44e9c39ac326d26a5a082</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::XMLParticleParser</name>
    <filename>a00641.html</filename>
    <base>ParticleTags</base>
    <member kind="function">
      <type></type>
      <name>XMLParticleParser</name>
      <anchorfile>a00641.html</anchorfile>
      <anchor>a541e248267010cffaedb69f461fbc73e</anchor>
      <arglist>(Particle_t &amp;aptcl, Tensor&lt; int, OHMMS_DIM &gt; &amp;tmat, bool donotresize=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00641.html</anchorfile>
      <anchor>a5df542af6060ae55970ee93e4ebc9524</anchor>
      <arglist>(const string &amp;fname_in, const string &amp;fext_in)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00641.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reset</name>
      <anchorfile>a00641.html</anchorfile>
      <anchor>a8bf0ec350c05ac2e16b5acd35e43705f</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ParticleSet</type>
      <name>Particle_t</name>
      <anchorfile>a00641.html</anchorfile>
      <anchor>a39d787c8f2b88b99038dec636dea9016</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Particle_t::ParticleIndex_t</type>
      <name>ParticleIndex_t</name>
      <anchorfile>a00641.html</anchorfile>
      <anchor>a94d0a474473a174903da071efd9f76f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Particle_t::ParticleScalar_t</type>
      <name>ParticleScalar_t</name>
      <anchorfile>a00641.html</anchorfile>
      <anchor>a96a75559b15471d7e1edeae6e85673f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Particle_t::ParticlePos_t</type>
      <name>ParticlePos_t</name>
      <anchorfile>a00641.html</anchorfile>
      <anchor>a179c41b683210bf36fbcf1add795e903</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Particle_t::ParticleTensor_t</type>
      <name>ParticleTensor_t</name>
      <anchorfile>a00641.html</anchorfile>
      <anchor>a10ab48a4692fe2df7d22f4070093ed52</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>putSpecial</name>
      <anchorfile>a00641.html</anchorfile>
      <anchor>a683bb261bb830f0382b77ddb15d45a56</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getPtclAttrib</name>
      <anchorfile>a00641.html</anchorfile>
      <anchor>ace71d7de0e51e324e63c4cd4d9b7d5a3</anchor>
      <arglist>(xmlNodePtr cur, int nat, int nloc)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>AssignmentOnly</name>
      <anchorfile>a00641.html</anchorfile>
      <anchor>a01e74ba7f4ed5b8aadfff643dee99660</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Particle_t &amp;</type>
      <name>ref_</name>
      <anchorfile>a00641.html</anchorfile>
      <anchor>a4dfb7836be7ebe011958b3c87bdce8bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Tensor&lt; int, OHMMS_DIM &gt; &amp;</type>
      <name>TileMatrix</name>
      <anchorfile>a00641.html</anchorfile>
      <anchor>af03e4c59727e5f61c6b9cd305ea796dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::XMLSaveParticle</name>
    <filename>a00642.html</filename>
    <base>ParticleTags</base>
    <base>RecordProperty</base>
    <member kind="function">
      <type></type>
      <name>XMLSaveParticle</name>
      <anchorfile>a00642.html</anchorfile>
      <anchor>a3d010f3f58adb8dce7685c1c7f788f02</anchor>
      <arglist>(Particle_t &amp;pin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~XMLSaveParticle</name>
      <anchorfile>a00642.html</anchorfile>
      <anchor>ab06783b76063fec38130304080509423</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00642.html</anchorfile>
      <anchor>a0455c6f2d063312e6add1c45ebc99c24</anchor>
      <arglist>(const char *fileroot, bool append=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>report</name>
      <anchorfile>a00642.html</anchorfile>
      <anchor>a56fd44205a63bdff859974f08254d105</anchor>
      <arglist>(int iter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>a00642.html</anchorfile>
      <anchor>a32d626626eee0bc4ade146973f6abb1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00642.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get</name>
      <anchorfile>a00642.html</anchorfile>
      <anchor>a37ac38b80d8b54696d7ff12dbdbcbddf</anchor>
      <arglist>(ostream &amp;os, int olevel) const </arglist>
    </member>
    <member kind="function">
      <type>xmlNodePtr</type>
      <name>createNode</name>
      <anchorfile>a00642.html</anchorfile>
      <anchor>a65366b3328b73d8b310e2586dd55a5e7</anchor>
      <arglist>(bool addlattice)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ParticleSet</type>
      <name>Particle_t</name>
      <anchorfile>a00642.html</anchorfile>
      <anchor>a39d787c8f2b88b99038dec636dea9016</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Particle_t::ParticleIndex_t</type>
      <name>ParticleIndex_t</name>
      <anchorfile>a00642.html</anchorfile>
      <anchor>a94d0a474473a174903da071efd9f76f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Particle_t::ParticleScalar_t</type>
      <name>ParticleScalar_t</name>
      <anchorfile>a00642.html</anchorfile>
      <anchor>a96a75559b15471d7e1edeae6e85673f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Particle_t::ParticlePos_t</type>
      <name>ParticlePos_t</name>
      <anchorfile>a00642.html</anchorfile>
      <anchor>a179c41b683210bf36fbcf1add795e903</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Particle_t::ParticleTensor_t</type>
      <name>ParticleTensor_t</name>
      <anchorfile>a00642.html</anchorfile>
      <anchor>a10ab48a4692fe2df7d22f4070093ed52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Particle_t &amp;</type>
      <name>ref_</name>
      <anchorfile>a00642.html</anchorfile>
      <anchor>a4dfb7836be7ebe011958b3c87bdce8bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>FileRoot</name>
      <anchorfile>a00642.html</anchorfile>
      <anchor>afab4f7affc4fc132d20d6e360a875edb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; string &gt;</type>
      <name>SpeciesName</name>
      <anchorfile>a00642.html</anchorfile>
      <anchor>a29f0d7f274694dfdd31a4128cf9843e0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIOBase</name>
    <filename>a00289.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>a150f440bed5c94c152c4faf33dd6d94e</anchor>
      <arglist>(hid_t, const char *)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>aed8ceacf740e92e8bf4f9a34d7ddf10b</anchor>
      <arglist>(hid_t, const char *)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO</name>
    <filename>a00258.html</filename>
    <templarg>T</templarg>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a00258.html</anchorfile>
      <anchor>a7295d814ec3ef71883b9dead058a44ed</anchor>
      <arglist>(hid_t, const char *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a00258.html</anchorfile>
      <anchor>af830f714b65be4b3c573fbb39935d86b</anchor>
      <arglist>(hid_t, const char *)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; string &gt;</name>
    <filename>a00278.html</filename>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="typedef">
      <type>string</type>
      <name>ArrayType_t</name>
      <anchorfile>a00278.html</anchorfile>
      <anchor>a2c00ba334cdffb97a95a09546d240afb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>a00278.html</anchorfile>
      <anchor>a7c30f1a0d39f35dff65f66bd397d37ca</anchor>
      <arglist>(ArrayType_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a00278.html</anchorfile>
      <anchor>a9cb9a11595717b99c90268f87ffb530b</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a00278.html</anchorfile>
      <anchor>a2378d66f31e2d3c28eed6a1863e5c5dc</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>ArrayType_t &amp;</type>
      <name>ref</name>
      <anchorfile>a00278.html</anchorfile>
      <anchor>aa41ba92e454ef17e0c4a3d47b09bea98</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; std::ostringstream &gt;</name>
    <filename>a00272.html</filename>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="typedef">
      <type>std::ostringstream</type>
      <name>Data_t</name>
      <anchorfile>a00272.html</anchorfile>
      <anchor>a110730c081e6138ed833815159938681</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>a00272.html</anchorfile>
      <anchor>ad20474398780c76910a45ca6f58f0e9d</anchor>
      <arglist>(Data_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a00272.html</anchorfile>
      <anchor>a9cb9a11595717b99c90268f87ffb530b</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a00272.html</anchorfile>
      <anchor>a2378d66f31e2d3c28eed6a1863e5c5dc</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>Data_t &amp;</type>
      <name>ref</name>
      <anchorfile>a00272.html</anchorfile>
      <anchor>af466cf3a9648e1cb8faa13cc9b45dcc9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::TinyVector</name>
    <filename>a00167.html</filename>
    <templarg>T</templarg>
    <templarg>D</templarg>
    <class kind="class">qmcplusplus::TinyVector::DontInitialize</class>
    <member kind="enumvalue">
      <type>@</type>
      <name>Size</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>ae4d5251432e1a9e6803c0240cc492e18aff9abf2b1a689f70a77a18da50c01d9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Type_t</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>aace3424f71d53a9b6be8d37bc35cecd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TinyVector</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>ae93f6df5295ff8a1dd3dda5069093037</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TinyVector</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>ad7b32744d1a77b1ba93e24db9d6e9e06</anchor>
      <arglist>(DontInitialize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TinyVector</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a60e26e5a4d99da67ef0e1031221b5aba</anchor>
      <arglist>(const TinyVector&lt; T, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TinyVector</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>aa5a1fdc78de6de5188cca4701cc620e3</anchor>
      <arglist>(const TinyVector&lt; T1, D1 &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TinyVector</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a628a10fb3b89c281e139037870fb1429</anchor>
      <arglist>(const T &amp;x00)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TinyVector</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a49f2452c568fb01fc78000d619ad53f6</anchor>
      <arglist>(const T &amp;x00, const T &amp;x01)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TinyVector</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a6f7f4834ca08db377135c087c701c589</anchor>
      <arglist>(const T &amp;x00, const T &amp;x01, const T &amp;x02)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TinyVector</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a1ca879d6cc150ddab4f4fffeec594ee1</anchor>
      <arglist>(const T &amp;x00, const T &amp;x01, const T &amp;x02, const T &amp;x03)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TinyVector</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a7dc3c86269430d43c82d55fc6881691c</anchor>
      <arglist>(const T &amp;x00, const T &amp;x01, const T &amp;x02, const T &amp;x03, const T &amp;x10, const T &amp;x11, const T &amp;x12, const T &amp;x13, const T &amp;x20, const T &amp;x21, const T &amp;x22, const T &amp;x23, const T &amp;x30, const T &amp;x31, const T &amp;x32, const T &amp;x33)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TinyVector</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a3f8b77d7596fa831e37e5468c722598f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>ab8e4e3e2a7bf18888b71bdf9dda0770b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>byteSize</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>acf6f452ad9b4e1a390e81775468f257e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TinyVector&lt; T, D &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a50ae5984771c54cbd175a41298189980</anchor>
      <arglist>(const TinyVector&lt; T, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TinyVector&lt; T, D &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>aad0be3161ad33057b16e3973d92cadf8</anchor>
      <arglist>(const TinyVector&lt; T1, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TinyVector&lt; T, D &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a679b06338acd8d740b8b95f766ed4524</anchor>
      <arglist>(const T &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a4ae243265c82fa27f9536d113c7e8ccf</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator[]</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a39a1b2774e2a11ed4db5b6848de09feb</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator()</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a7370ad3c0010b19e4374be9b6257a5a8</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator()</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a1d7391c814ed6bcb580ee66f0e26dee0</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>Type_t *</type>
      <name>data</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>aa9e021db1037f42c07ed6efb005f17ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Type_t *</type>
      <name>data</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>adc105523e0aa5a5c591a078ff5aeb85f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Type_t *</type>
      <name>begin</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a3a03366bd20c74b73b30ce7a3a2cbfd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Type_t *</type>
      <name>begin</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>aa3b014af499cc4e893e1fbad77684e4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Type_t *</type>
      <name>end</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>ae6a38763e77a7cd3be4a7a024760d67e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Type_t *</type>
      <name>end</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>aeb9a2c015228804fc10fc62e0c0ca5df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Msg &amp;</type>
      <name>putMessage</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a66f0d1c9f6ad548215e0304258871ae8</anchor>
      <arglist>(Msg &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Msg &amp;</type>
      <name>getMessage</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a8bdf97e232512163287ab211f21d92c8</anchor>
      <arglist>(Msg &amp;m)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>X</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a6e1b5786f3a29eadb323b19ec1531b59</anchor>
      <arglist>[Size]</arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::TinyVector::DontInitialize</name>
    <filename>a00167.html</filename>
    <anchor>a01452</anchor>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::printTinyVector&lt; TinyVector&lt; T, D &gt; &gt;</name>
    <filename>a00484.html</filename>
    <templarg></templarg>
    <templarg>D</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>print</name>
      <anchorfile>a00484.html</anchorfile>
      <anchor>a7b2ee07d20b81353723fad23dc5cf363</anchor>
      <arglist>(std::ostream &amp;os, const TinyVector&lt; T, D &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::printTinyVector&lt; TinyVector&lt; T, 2 &gt; &gt;</name>
    <filename>a00482.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>print</name>
      <anchorfile>a00482.html</anchorfile>
      <anchor>a390e450c372982871b8fe02833f05093</anchor>
      <arglist>(std::ostream &amp;os, const TinyVector&lt; T, 2 &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::printTinyVector&lt; TinyVector&lt; T, 3 &gt; &gt;</name>
    <filename>a00483.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>print</name>
      <anchorfile>a00483.html</anchorfile>
      <anchor>a690b07e934c885e25f6f3e171b4c6af0</anchor>
      <arglist>(std::ostream &amp;os, const TinyVector&lt; T, 3 &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::Tensor</name>
    <filename>a00168.html</filename>
    <templarg>T</templarg>
    <templarg>D</templarg>
    <class kind="class">qmcplusplus::Tensor::DontInitialize</class>
    <member kind="enumvalue">
      <type>@</type>
      <name>ElemDim</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a7ff5f2dff38e7639981794c43dc9167ba74821a3c239c9b9fc9eef80057b719bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Size</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>aabfcbcb5ac86a1edac4035264bc7d2b8aff9abf2b1a689f70a77a18da50c01d9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Type_t</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>aace3424f71d53a9b6be8d37bc35cecd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tensor</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a09dacbd79d16b74ba8698e27ae3dc42b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tensor</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a03bc14e367606c1544826ef2eaf0922a</anchor>
      <arglist>(DontInitialize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tensor</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a7d6492ef4b7ad0e5dc0d2ee1d3dddf3e</anchor>
      <arglist>(const Tensor&lt; T, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tensor</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a7e6a18653ea394a3eadc8c0155ac113f</anchor>
      <arglist>(const T &amp;x00)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tensor</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a74c9738d4dd43673475afe6cb65ccd35</anchor>
      <arglist>(const T &amp;x00, const T &amp;x10, const T &amp;x01, const T &amp;x11)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tensor</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a767022b138f207ec843fe922f5063c69</anchor>
      <arglist>(const T &amp;x00, const T &amp;x10, const T &amp;x20, const T &amp;x01, const T &amp;x11, const T &amp;x21, const T &amp;x02, const T &amp;x12, const T &amp;x22)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tensor</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a978ba640b0d5ebcf4db22dc75c4f68fc</anchor>
      <arglist>(const SymTensor&lt; T, D &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tensor</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>ade76eb7ea8cf44e327b3f60b372454e0</anchor>
      <arglist>(const AntiSymTensor&lt; T, D &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Tensor</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>aed7239ca3b55714bbd290219b503ad0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; T, D &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a73d06188bf1bc52794212856f4d8cee7</anchor>
      <arglist>(const Tensor&lt; T, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; T, D &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a85a84262e56e89977c84134a1c4d601f</anchor>
      <arglist>(const Tensor&lt; T1, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; T, D &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a4d2fb365e459ebd4e8ec435aa7190bd4</anchor>
      <arglist>(const T &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; T, D &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>ab36a518912c5fc2a45c876ed839e1c5f</anchor>
      <arglist>(const Tensor&lt; T1, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; T, D &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>ab4c72451e6e1c121e311b6b5f6c5775d</anchor>
      <arglist>(const T &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; T, D &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a5510691c869068182ba4df8d26bbf896</anchor>
      <arglist>(const Tensor&lt; T1, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; T, D &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a0bd10cd794c98de751ef804c16bcfcbd</anchor>
      <arglist>(const T &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; T, D &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>ae118c913a5e825cb01ccabee5f1c4793</anchor>
      <arglist>(const Tensor&lt; T1, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; T, D &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a9131a2948da3aeba38e58aed14a54abf</anchor>
      <arglist>(const T &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; T, D &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>ac9af43506dea4d19ec3cbafec737948b</anchor>
      <arglist>(const Tensor&lt; T1, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; T, D &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a26bafddc6cb67c54c472eb8b12b573f1</anchor>
      <arglist>(const T &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>diagonal</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a1ee3083eccd7e3e9d25229386f463f8a</anchor>
      <arglist>(const T &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add2diagonal</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a0d345ddcce76df09a1e45045b799a56f</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>len</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a8020fe4f948e34cfd4c9eb17efc00390</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>ab8e4e3e2a7bf18888b71bdf9dda0770b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a4ae243265c82fa27f9536d113c7e8ccf</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator[]</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a39a1b2774e2a11ed4db5b6848de09feb</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator()</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a7370ad3c0010b19e4374be9b6257a5a8</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator()</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a1d7391c814ed6bcb580ee66f0e26dee0</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator()</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a647068bff6d0aebda58c7405d5ee71ea</anchor>
      <arglist>(unsigned int i, unsigned int j) const </arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator()</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>ae5c898a61846a3bd0cdf57c0dbc78765</anchor>
      <arglist>(unsigned int i, unsigned int j)</arglist>
    </member>
    <member kind="function">
      <type>TinyVector&lt; T, D &gt;</type>
      <name>getRow</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a47ddb36113b4ddbc438adceb94131f83</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>TinyVector&lt; T, D &gt;</type>
      <name>getColumn</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a8ea74a7972c80fb2cba0d868c558a865</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>Type_t *</type>
      <name>data</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>aa9e021db1037f42c07ed6efb005f17ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Type_t *</type>
      <name>data</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>adc105523e0aa5a5c591a078ff5aeb85f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Type_t *</type>
      <name>begin</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a3a03366bd20c74b73b30ce7a3a2cbfd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Type_t *</type>
      <name>begin</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>aa3b014af499cc4e893e1fbad77684e4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Type_t *</type>
      <name>end</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>ae6a38763e77a7cd3be4a7a024760d67e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Type_t *</type>
      <name>end</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>aeb9a2c015228804fc10fc62e0c0ca5df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>X</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a6e1b5786f3a29eadb323b19ec1531b59</anchor>
      <arglist>[Size]</arglist>
    </member>
  <compound kind="class">
    <name>qmcplusplus::Tensor::DontInitialize</name>
    <filename>a00168.html</filename>
    <anchor>a01451</anchor>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::Vector</name>
    <filename>a00624.html</filename>
    <templarg>T</templarg>
    <templarg>C</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Type_t</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>aace3424f71d53a9b6be8d37bc35cecd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C</type>
      <name>Container_t</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>a64ffa690d96664a045b42fd53bb964c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; T, C &gt;</type>
      <name>This_t</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>ae225170c3120f2cc94ac6f739936bb1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container_t::iterator</type>
      <name>iterator</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>a7d1bb323b6d972f619c609d698e938b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container_t::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>a7d7695e77d1310d350346758afb3481e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>a4df026156780bc0ca651c342b7d6daa4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>a6324ab885f727b926999be495502a162</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>a9a8d9a9583db37f0707209c119223dfe</anchor>
      <arglist>(const Vector&lt; T, C &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Vector</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>aaa9fccd0cb7734271f7a15e5d9dc0d27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>size</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>acdb549c592f948a9d973d4d84b02ef87</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>ac7267e4d0be6999c43930b05cee281d6</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>a2adbbd2425f69e2ba6e51fc252bb3e0f</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>This_t &amp;</type>
      <name>operator=</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>ab241f988eb7f5a35f595a450b85d91eb</anchor>
      <arglist>(const Vector&lt; T, C &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const This_t &amp;</type>
      <name>operator=</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>a2e61845ed598472f7cce38e9176951f4</anchor>
      <arglist>(const Vector&lt; T, C &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>This_t &amp;</type>
      <name>operator=</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>a4e909351cffc01c9ccfa52f781acd323</anchor>
      <arglist>(const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Type_t *</type>
      <name>data</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>aa9e021db1037f42c07ed6efb005f17ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Type_t *</type>
      <name>data</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>adc105523e0aa5a5c591a078ff5aeb85f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Type_t *</type>
      <name>first_address</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>a706933ea201433a310df98db84b405f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Type_t *</type>
      <name>first_address</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>a69395620b9e5f24e49041f06d01196bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Type_t *</type>
      <name>last_address</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>a457cf7c9a0ae67236ef886a5d94b4f93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Type_t *</type>
      <name>last_address</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>a84c8ad07c5be157adfcc71ca38295d31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>ad69bd11391be1a1dba5c8202259664f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>aa4b02d4f1a8500fb07a551069060709f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>acad38d52497a975bfb6f2f6acd76631f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>a350132543d80a1c1e5be844e6d2878ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>a4ae243265c82fa27f9536d113c7e8ccf</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator[]</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>a39a1b2774e2a11ed4db5b6848de09feb</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator()</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>a7370ad3c0010b19e4374be9b6257a5a8</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator()</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>a1d7391c814ed6bcb580ee66f0e26dee0</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Container_t</type>
      <name>X</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>add6c36324dbe075ad4ac91b95845e703</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::CreateLeaf&lt; Vector&lt; T, C &gt; &gt;</name>
    <filename>a00107.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Reference&lt; Vector&lt; T, C &gt; &gt;</type>
      <name>Leaf_t</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>acf4d5ec82c85b9750d13b7218a99180d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Leaf_t</type>
      <name>make</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a61d1eb9cbe4dd33439f8e09cd51ad0a9</anchor>
      <arglist>(const Vector&lt; T, C &gt; &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::SizeLeaf</name>
    <filename>a00557.html</filename>
    <member kind="function">
      <type></type>
      <name>SizeLeaf</name>
      <anchorfile>a00557.html</anchorfile>
      <anchor>ab5ace1c6366c8df1c2125a7a1fada8dd</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SizeLeaf</name>
      <anchorfile>a00557.html</anchorfile>
      <anchor>a5f497c2a5355201ae39ebfdca04fed8a</anchor>
      <arglist>(const SizeLeaf &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>a00557.html</anchorfile>
      <anchor>a23ab970220993d48145de1c2cd85bc2f</anchor>
      <arglist>(int s) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>size_m</name>
      <anchorfile>a00557.html</anchorfile>
      <anchor>ab320fb6c37a9b80622c6613d0fd7a43c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::LeafFunctor&lt; Scalar&lt; T &gt;, SizeLeaf &gt;</name>
    <filename>a00336.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>bool</type>
      <name>Type_t</name>
      <anchorfile>a00336.html</anchorfile>
      <anchor>af31a28dfbf87086fad608ceae3c3601c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>apply</name>
      <anchorfile>a00336.html</anchorfile>
      <anchor>a68849f6e38d7ff2bc68ee93c539ef931</anchor>
      <arglist>(const Scalar&lt; T &gt; &amp;, const SizeLeaf &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::LeafFunctor&lt; Vector&lt; T, C &gt;, SizeLeaf &gt;</name>
    <filename>a00340.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>bool</type>
      <name>Type_t</name>
      <anchorfile>a00340.html</anchorfile>
      <anchor>af31a28dfbf87086fad608ceae3c3601c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>apply</name>
      <anchorfile>a00340.html</anchorfile>
      <anchor>a26dce50d21568db27af5f9f6a4f0dc3e</anchor>
      <arglist>(const Vector&lt; T, C &gt; &amp;v, const SizeLeaf &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::LeafFunctor&lt; Vector&lt; T, C &gt;, EvalLeaf1 &gt;</name>
    <filename>a00339.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Type_t</name>
      <anchorfile>a00339.html</anchorfile>
      <anchor>aace3424f71d53a9b6be8d37bc35cecd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Type_t</type>
      <name>apply</name>
      <anchorfile>a00339.html</anchorfile>
      <anchor>a358c76add1d771fb6fc646e4498436fb</anchor>
      <arglist>(const Vector&lt; T, C &gt; &amp;vec, const EvalLeaf1 &amp;f)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::Matrix</name>
    <filename>a00370.html</filename>
    <templarg>T</templarg>
    <templarg>C</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Type_t</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>aace3424f71d53a9b6be8d37bc35cecd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>a265a253612b46abed17c61b0a5e5ce30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>pointer</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>a680c78d51cff3fd301666dd75bdbe49d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T *</type>
      <name>const_pointer</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>a53d259f0075b22d7646e373816830e8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C</type>
      <name>Container_t</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>a64ffa690d96664a045b42fd53bb964c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C::size_type</type>
      <name>size_type</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>acca9906bf00ec190f17d932be75f9338</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container_t::iterator</type>
      <name>iterator</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>a7d1bb323b6d972f619c609d698e938b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; T, C &gt;</type>
      <name>This_t</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>a4fdfc2fa88d69ab4c19305fc293a65bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>a3aede62f513da27e6f61ae7a972b4f96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>a41e14f7a1db0f05c3de8abdeadd5b6d6</anchor>
      <arglist>(size_type n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>aaa29ab937c175baf7294f5d026f3e26d</anchor>
      <arglist>(size_type n, size_type m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>ae5a44ff819c3d25f25f6b8d9a2952680</anchor>
      <arglist>(const Matrix&lt; T, C &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Matrix</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>a2249c859d9c3503ec00d3a20fe963842</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>a503ab01f6c0142145d3434f6924714e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rows</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>ada4ea1ca5d1a329d78f5735cf8a64036</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>cols</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>aef48fa3406455faf5c31bf873eccae85</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size1</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>a7dd094a9c9324a396059b30e5bc6c997</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size2</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>a608bdfa643e5a437579aac288fb98f96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>a0770b16f8f2c1794a8c4c30119cdc417</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>extent</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>ac83bbb020e39cfbbfc1ea64bfb4763dc</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>Container_t::iterator</type>
      <name>begin</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>a936690cdbd209118fd4d9a7146376809</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Container_t::iterator</type>
      <name>end</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>a0fec9d94d01702cb6ae5c79431e43ad3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Container_t::const_iterator</type>
      <name>begin</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>a6d0d97fe6036b547416941d27ac5da17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Container_t::const_iterator</type>
      <name>end</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>a1f167bcf304a1bc04d81779801e5da9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Container_t::iterator</type>
      <name>begin</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>a1156247406a9697fc361190f30e1dbb3</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>Container_t::const_iterator</type>
      <name>begin</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>af419cc4056278639e3ac8979d669dc2e</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>ac5b3ec46ce4634b589493841d48c36e4</anchor>
      <arglist>(size_type n, size_type m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>aa362a9643b0495586bdca0a261375bc6</anchor>
      <arglist>(size_type n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>afc7e59c612c5969470941c077c1023b3</anchor>
      <arglist>(const Matrix&lt; T, C &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>This_t &amp;</type>
      <name>operator=</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>a112bd7e357e0066123a15d73c4885f04</anchor>
      <arglist>(const Matrix&lt; T, C &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const This_t &amp;</type>
      <name>operator=</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>ad3099fc0f2d6e9359c2650125a93194e</anchor>
      <arglist>(const Matrix&lt; T, C &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>This_t &amp;</type>
      <name>operator=</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>a4e909351cffc01c9ccfa52f781acd323</anchor>
      <arglist>(const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>data</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>a36e4d11a00a3572c87bf7e913e9b5ca1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_pointer</type>
      <name>data</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>a794bbc6c3888bcfe88fb961f527c3563</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>first_address</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>a371daa667121595716eda0ed87023b24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_pointer</type>
      <name>first_address</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>a48a2dcd4757f39078d90ac311951ab3b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>last_address</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>a26429eb2b2db18a72f972f46e058957c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Type_t *</type>
      <name>last_address</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>a84c8ad07c5be157adfcc71ca38295d31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Type_t *</type>
      <name>operator[]</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>af5a2a1843b0a3c8c13c6500d4fe12d53</anchor>
      <arglist>(size_type i) const </arglist>
    </member>
    <member kind="function">
      <type>Type_t *</type>
      <name>operator[]</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>a4ae63d15aa6226a65a113846084cc367</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator()</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>a1211cc67c9f21a55a3a9ffc2d72a5a51</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator()</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>a295ed3a129f1861b8e27098b1fad9217</anchor>
      <arglist>(size_type i) const </arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator()</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>a989ef69d6544c80c0625013a339c2361</anchor>
      <arglist>(size_type i, size_type j)</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator()</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>afb94e8cfe9001eeacdda160b4973e968</anchor>
      <arglist>(size_type i, size_type j) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap_rows</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>a8b365df6b1476ac6a6390879127b405a</anchor>
      <arglist>(int r1, int r2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap_cols</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>a9cece7a1ab07558ab7934c0d5141116e</anchor>
      <arglist>(int c1, int c2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceRow</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>acd2ca23690a7e3aad23541e7ff37c3f0</anchor>
      <arglist>(IT first, size_type i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceColumn</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>acf537d67fcc5786c742f4bc440c4a7de</anchor>
      <arglist>(IT first, size_type j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add2Column</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>aea374dc2f0dbe9ad9a4460f2d5bc7802</anchor>
      <arglist>(IT first, size_type j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>af58c68dde30fc516911fffb185215d34</anchor>
      <arglist>(const T1 *sub, size_type d1, size_type d2, size_type i0, size_type j0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>a9629b3626755054719d0385eaafbaa1d</anchor>
      <arglist>(const T1 *sub, size_type d1, size_type d2, size_type i0, size_type j0, const T &amp;phi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>a2a7f7ea208693aeedac06db709a4b86a</anchor>
      <arglist>(const SubMat_t &amp;sub, unsigned int i0, unsigned int j0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>a969f5e9f89eca74dd34593684a085b27</anchor>
      <arglist>(const This_t &amp;sub, unsigned int i0, unsigned int j0)</arglist>
    </member>
    <member kind="function">
      <type>Msg &amp;</type>
      <name>putMessage</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>a66f0d1c9f6ad548215e0304258871ae8</anchor>
      <arglist>(Msg &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Msg &amp;</type>
      <name>getMessage</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>a8bdf97e232512163287ab211f21d92c8</anchor>
      <arglist>(Msg &amp;m)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>D1</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>a8b3a073beee00f74ecbae153944b5cfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>D2</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>abbf8305a7b5de73830fa74e4285211a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>TotSize</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>a6f1b97631e8d8f520340f3f3d7dae1db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Container_t</type>
      <name>X</name>
      <anchorfile>a00370.html</anchorfile>
      <anchor>add6c36324dbe075ad4ac91b95845e703</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::CreateLeaf&lt; Matrix&lt; T, C &gt; &gt;</name>
    <filename>a00105.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Reference&lt; Matrix&lt; T, C &gt; &gt;</type>
      <name>Leaf_t</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>a9347b90228a6da3939d139d78eb177be</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Leaf_t</type>
      <name>make</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>a9f983d113e2fcab8d7fa4f715221b5a2</anchor>
      <arglist>(const Matrix&lt; T, C &gt; &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::SizeLeaf2</name>
    <filename>a00558.html</filename>
    <member kind="typedef">
      <type>int</type>
      <name>size_type</name>
      <anchorfile>a00558.html</anchorfile>
      <anchor>aafd1e3ba4133ad908bdbc99c4b356e5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SizeLeaf2</name>
      <anchorfile>a00558.html</anchorfile>
      <anchor>ade7d5a82c7cd74b68b1d58086fce097d</anchor>
      <arglist>(size_type s, size_type p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SizeLeaf2</name>
      <anchorfile>a00558.html</anchorfile>
      <anchor>ac6c7b207c5bad58c730b40d2ef994fe2</anchor>
      <arglist>(const SizeLeaf2 &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>a00558.html</anchorfile>
      <anchor>a82f66a0a8f855329d3a14ecbb488800d</anchor>
      <arglist>(size_type s, size_type p) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_type</type>
      <name>size_m</name>
      <anchorfile>a00558.html</anchorfile>
      <anchor>ac2af074f3fd6e326230381f7341af9d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_type</type>
      <name>size_n</name>
      <anchorfile>a00558.html</anchorfile>
      <anchor>a2a50893992d28ff1724e1deab4c1d5d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::LeafFunctor&lt; Scalar&lt; T &gt;, SizeLeaf2 &gt;</name>
    <filename>a00337.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>bool</type>
      <name>Type_t</name>
      <anchorfile>a00337.html</anchorfile>
      <anchor>af31a28dfbf87086fad608ceae3c3601c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>apply</name>
      <anchorfile>a00337.html</anchorfile>
      <anchor>a511b1cb7b20e97a9814f367c575f750f</anchor>
      <arglist>(const Scalar&lt; T &gt; &amp;, const SizeLeaf2 &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::LeafFunctor&lt; Matrix&lt; T, C &gt;, SizeLeaf2 &gt;</name>
    <filename>a00333.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>bool</type>
      <name>Type_t</name>
      <anchorfile>a00333.html</anchorfile>
      <anchor>af31a28dfbf87086fad608ceae3c3601c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>apply</name>
      <anchorfile>a00333.html</anchorfile>
      <anchor>aeb15cfffbc98240b6e5fb4de8cdf8bbb</anchor>
      <arglist>(const Matrix&lt; T, C &gt; &amp;v, const SizeLeaf2 &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::LeafFunctor&lt; Matrix&lt; T, C &gt;, EvalLeaf2 &gt;</name>
    <filename>a00332.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Type_t</name>
      <anchorfile>a00332.html</anchorfile>
      <anchor>aace3424f71d53a9b6be8d37bc35cecd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Type_t</type>
      <name>apply</name>
      <anchorfile>a00332.html</anchorfile>
      <anchor>a1097cb74a52369779a0ee43ab5c89d32</anchor>
      <arglist>(const Matrix&lt; T, C &gt; &amp;mat, const EvalLeaf2 &amp;f)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ProjectData</name>
    <filename>a00486.html</filename>
    <base>OhmmsElementBase</base>
    <member kind="function">
      <type></type>
      <name>ProjectData</name>
      <anchorfile>a00486.html</anchorfile>
      <anchor>abcb730151efbc303322d534feda79a5a</anchor>
      <arglist>(const char *aname=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00486.html</anchorfile>
      <anchor>a60f38e88f022e1576397285ce140ede2</anchor>
      <arglist>(ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00486.html</anchorfile>
      <anchor>a4aba89c818daa5905d3301f269c6349e</anchor>
      <arglist>(istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00486.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00486.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advance</name>
      <anchorfile>a00486.html</anchorfile>
      <anchor>a8903a4e9f3d5fb42d0faa9d53e21d85c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rewind</name>
      <anchorfile>a00486.html</anchorfile>
      <anchor>ab8734e666421c9fe3b6380a818c6c727</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTitle</name>
      <anchorfile>a00486.html</anchorfile>
      <anchor>a739b267ba672e544ebbb307c89af9e99</anchor>
      <arglist>(const string &amp;atitle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCommunicator</name>
      <anchorfile>a00486.html</anchorfile>
      <anchor>a633f341af95ca58fda893c606d5e94d4</anchor>
      <arglist>(Communicate *c)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>CurrentMainRoot</name>
      <anchorfile>a00486.html</anchorfile>
      <anchor>a9577e2546d9d069f3069bccb3226a0e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>CurrentRoot</name>
      <anchorfile>a00486.html</anchorfile>
      <anchor>a8a809aa10b701d6b302f02d9c6c688fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>NextRoot</name>
      <anchorfile>a00486.html</anchorfile>
      <anchor>abca2e00ca4b549f6f08966cd8590bf9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>PreviousRoot</name>
      <anchorfile>a00486.html</anchorfile>
      <anchor>aeaf537a88bd3a39fe8391745f8fc9bfe</anchor>
      <arglist>(string &amp;oldroot) const </arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>m_title</name>
      <anchorfile>a00486.html</anchorfile>
      <anchor>a9051e9e6563f1ae490194450f524989a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>m_user</name>
      <anchorfile>a00486.html</anchorfile>
      <anchor>ad1cb7cb2b03b5f98e92a0cc6c9b44eca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>m_host</name>
      <anchorfile>a00486.html</anchorfile>
      <anchor>a3c6791f34ff929c3c77f4e3f7664000a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>m_date</name>
      <anchorfile>a00486.html</anchorfile>
      <anchor>aad3e517077401f8ca1e929ede57c0322</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>m_projectmain</name>
      <anchorfile>a00486.html</anchorfile>
      <anchor>a8497501f4ff1c07741004bbc17440eb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>m_projectroot</name>
      <anchorfile>a00486.html</anchorfile>
      <anchor>a5f433ea7ce6e078e92018bf768fcbdba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>m_nextroot</name>
      <anchorfile>a00486.html</anchorfile>
      <anchor>a2e21f33848e1a7ff6d85a0bd332cce43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_series</name>
      <anchorfile>a00486.html</anchorfile>
      <anchor>a88b1c3597ea2cdd514ba2809b0288252</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Communicate *</type>
      <name>myComm</name>
      <anchorfile>a00486.html</anchorfile>
      <anchor>a6e290154265339db27f9a9bef2bd3aab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>xmlNodePtr</type>
      <name>m_cur</name>
      <anchorfile>a00486.html</anchorfile>
      <anchor>a94f8e458d132a6372e42561fb004432a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::RandomNumberControl</name>
    <filename>a00509.html</filename>
    <base>OhmmsElementBase</base>
    <member kind="typedef">
      <type>RandomGenerator_t::uint_type</type>
      <name>uint_type</name>
      <anchorfile>a00509.html</anchorfile>
      <anchor>a9f8083be04f2e206a069cfeb04979a78</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandomNumberControl</name>
      <anchorfile>a00509.html</anchorfile>
      <anchor>ad5ac33b90485bc6f0d1ffdd47ec76d83</anchor>
      <arglist>(const char *aname=&quot;random&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00509.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00509.html</anchorfile>
      <anchor>a344f0b89ae376f79ee25adb51168d1f0</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00509.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00509.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>xmlNodePtr</type>
      <name>initialize</name>
      <anchorfile>a00509.html</anchorfile>
      <anchor>a6639d6dc9a10739efb3630ed939befd5</anchor>
      <arglist>(xmlXPathContextPtr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>test</name>
      <anchorfile>a00509.html</anchorfile>
      <anchor>ae1a3968e7947464bee7714f6d43b7002</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>make_seeds</name>
      <anchorfile>a00509.html</anchorfile>
      <anchor>a561fc03aa1675d0a534e0da9927fe850</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>make_children</name>
      <anchorfile>a00509.html</anchorfile>
      <anchor>a5facfbe9f68ce7f605c46ecbd3bb7d3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>read</name>
      <anchorfile>a00509.html</anchorfile>
      <anchor>a1e88ce21f4e355377e6a12063811d12f</anchor>
      <arglist>(const string &amp;fname, Communicate *comm)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>write</name>
      <anchorfile>a00509.html</anchorfile>
      <anchor>a08bd767b92341720b339ba599952fc52</anchor>
      <arglist>(const string &amp;fname, Communicate *comm)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static PrimeNumberSet&lt; uint_type &gt;</type>
      <name>PrimeNumbers</name>
      <anchorfile>a00509.html</anchorfile>
      <anchor>a68c91e6e04bb49325cc4f79766c50470</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::vector&lt; RandomGenerator_t * &gt;</type>
      <name>Children</name>
      <anchorfile>a00509.html</anchorfile>
      <anchor>a26ade10d99a6265860fbda8b5dc35f0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>NeverBeenInitialized</name>
      <anchorfile>a00509.html</anchorfile>
      <anchor>af780bf0ccb8b9b48d92872acae8817e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>xmlNodePtr</type>
      <name>myCur</name>
      <anchorfile>a00509.html</anchorfile>
      <anchor>a3de3693a736102412607b7a10cfb39fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static uint_type</type>
      <name>Offset</name>
      <anchorfile>a00509.html</anchorfile>
      <anchor>a086ff0fd290ffcc8ade207673bdf79c1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::GEMV</name>
    <filename>a00238.html</filename>
    <templarg></templarg>
    <templarg>D</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a00238.html</anchorfile>
      <anchor>a1ddf70381bd3c5c9c8bcf95fc594552e</anchor>
      <arglist>(const T *restrict a, const T *restrict x, T *restrict y, int n, int m)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::GEMV&lt; T, 3 &gt;</name>
    <filename>a00239.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>a1ddf70381bd3c5c9c8bcf95fc594552e</anchor>
      <arglist>(const T *restrict a, const T *restrict x, T *restrict y, int n, int m)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::const_traits&lt; double &gt;</name>
    <filename>a00089.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>value_type</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>aba0996e183cdbebc61c5cbdcccf9da15</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>zero</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>ab7603716c5aa6fcc581f10bfd97e6e0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>one</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a3e2c992b94d5c2b4989981912261d6f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>minus_one</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>ae480a6b9c06366ddb81840fa169e9469</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::const_traits&lt; std::complex&lt; double &gt; &gt;</name>
    <filename>a00090.html</filename>
    <member kind="typedef">
      <type>std::complex&lt; double &gt;</type>
      <name>value_type</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a0fdf03d9426a155431b67c7bef1966c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::complex&lt; double &gt;</type>
      <name>zero</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a820dde859be3a70d1546bf37bce8dd8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::complex&lt; double &gt;</type>
      <name>one</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>ab0fe4c9569d6153d6ee444bb42fd85bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::complex&lt; double &gt;</type>
      <name>minus_one</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>ad091e00e36b8ff354151d5417ffa474d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::ComplexExpFitClass</name>
    <filename>a00085.html</filename>
    <templarg>M</templarg>
    <member kind="function">
      <type>void</type>
      <name>Fit</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a4b679bf88bd12c7cb445528424b5adfc</anchor>
      <arglist>(vector&lt; double &gt; &amp;r, vector&lt; complex&lt; double &gt; &gt; &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FitCusp</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>ab81f6e8c468b8cccba80c1cff3858062</anchor>
      <arglist>(vector&lt; double &gt; &amp;r, vector&lt; complex&lt; double &gt; &gt; &amp;u, double cusp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>ab568cc55cbf91471d5b9138bc31c2dd0</anchor>
      <arglist>(double r, complex&lt; double &gt; &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>ad7f9013291493244513ff21a99ccee38</anchor>
      <arglist>(double r, complex&lt; double &gt; &amp;u, complex&lt; double &gt; &amp;du, complex&lt; double &gt; &amp;d2u)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TinyVector&lt; complex&lt; double &gt;, M &gt;</type>
      <name>Coefs</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a0dcd2db27893296b24dc023ab50fc63d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TinyVector&lt; complex&lt; double &gt;, M &gt;</type>
      <name>dCoefs</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a3b906b8848a1d5a5ce120e405e31e96f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TinyVector&lt; complex&lt; double &gt;, M &gt;</type>
      <name>d2Coefs</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>acb509ab3f5f04b9c98b6d2c22cc36822</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>realSign</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a6a7892701b77d81e41541a7febdae5df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>imagSign</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a25cb6beffa19d97e20c16091e1ae857e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::ExpFitClass</name>
    <filename>a00218.html</filename>
    <templarg>M</templarg>
    <member kind="function">
      <type>void</type>
      <name>Fit</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>abbddffb83d0302afb40950445456fd8f</anchor>
      <arglist>(vector&lt; double &gt; &amp;r, vector&lt; double &gt; &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FitCusp</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a071702a6a0f9e6b0f299817ff4d253d8</anchor>
      <arglist>(vector&lt; double &gt; &amp;r, vector&lt; double &gt; &amp;u, double cusp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a33727a80c86e7d67633da320417b6e3f</anchor>
      <arglist>(double r, double &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eval</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a7dfe0ad2e6a1d86063ef3d4afe87b438</anchor>
      <arglist>(double r, double &amp;u, double &amp;du, double &amp;d2u)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TinyVector&lt; double, M &gt;</type>
      <name>Coefs</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a6866a6c2f2550eac391206daba64c762</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TinyVector&lt; double, M &gt;</type>
      <name>dCoefs</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a0da55d1addea6f6208ded59e320e5119</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TinyVector&lt; double, M &gt;</type>
      <name>d2Coefs</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a6e3678d2469b1dea4e7e717b1f53c510</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>sign</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>ae8b66de717f70f19c5986b36b50a948c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ComplexExpFitClass&lt; M &gt;</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>ab8c39ea4540255ca34339d91c1fe5f1a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::FFTAbleVectorBase</name>
    <filename>a00221.html</filename>
    <templarg>precision</templarg>
    <base>Vector&lt; precision &gt;</base>
    <member kind="function">
      <type></type>
      <name>FFTAbleVectorBase</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>a4fbee65ec22d01b9798d9163f4593aac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FFTAbleVectorBase</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>a2edaae1c333a9170140d43942f44fae7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FFTAbleVectorBase</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>a286a631e233b711268158ca2c593cdd2</anchor>
      <arglist>(const FFTAbleVectorBase &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual FFTAbleVectorBase *</type>
      <name>clone</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>ad80acccde94fde972c2af6af97526bf3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setForwardNorm</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>a31c1390fdb3ba398a33503b5175aaa05</anchor>
      <arglist>(double fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackwardNorm</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>ac6c8b675011b13ce3709ecca9d758541</anchor>
      <arglist>(double bn)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>transformForward</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>aef3816153db995f24f91644a9cb6b2a3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>transformBackward</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>a5b2757b684095b39dd4f9ea20430b115</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>a4df026156780bc0ca651c342b7d6daa4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>a6324ab885f727b926999be495502a162</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>a9a8d9a9583db37f0707209c119223dfe</anchor>
      <arglist>(const Vector&lt; precision, std::vector&lt; precision &gt; &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Vector</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>aaa9fccd0cb7734271f7a15e5d9dc0d27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>size</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>acdb549c592f948a9d973d4d84b02ef87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>ac7267e4d0be6999c43930b05cee281d6</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>a2adbbd2425f69e2ba6e51fc252bb3e0f</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>This_t &amp;</type>
      <name>operator=</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>ab241f988eb7f5a35f595a450b85d91eb</anchor>
      <arglist>(const Vector&lt; precision, std::vector&lt; precision &gt; &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const This_t &amp;</type>
      <name>operator=</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>a2e61845ed598472f7cce38e9176951f4</anchor>
      <arglist>(const Vector&lt; precision, std::vector&lt; precision &gt; &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>This_t &amp;</type>
      <name>operator=</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>a4e909351cffc01c9ccfa52f781acd323</anchor>
      <arglist>(const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Type_t *</type>
      <name>data</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>aa9e021db1037f42c07ed6efb005f17ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Type_t *</type>
      <name>data</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>adc105523e0aa5a5c591a078ff5aeb85f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Type_t *</type>
      <name>first_address</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>a706933ea201433a310df98db84b405f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Type_t *</type>
      <name>first_address</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>a69395620b9e5f24e49041f06d01196bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Type_t *</type>
      <name>last_address</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>a457cf7c9a0ae67236ef886a5d94b4f93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Type_t *</type>
      <name>last_address</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>a84c8ad07c5be157adfcc71ca38295d31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>ad69bd11391be1a1dba5c8202259664f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>aa4b02d4f1a8500fb07a551069060709f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>acad38d52497a975bfb6f2f6acd76631f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>a350132543d80a1c1e5be844e6d2878ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>a4ae243265c82fa27f9536d113c7e8ccf</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator[]</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>a39a1b2774e2a11ed4db5b6848de09feb</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator()</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>a7370ad3c0010b19e4374be9b6257a5a8</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator()</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>a1d7391c814ed6bcb580ee66f0e26dee0</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumPts</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>a18716b25186112ef6d77a96d4a5b0612</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>ForwardNorm</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>a973bbc4b69a72671f867cf14b651ab82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>BackwardNorm</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>a81491f2c74a2a9d603f6200c0b70fb59</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>precision</type>
      <name>Type_t</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>aace3424f71d53a9b6be8d37bc35cecd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; precision &gt;</type>
      <name>Container_t</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>a64ffa690d96664a045b42fd53bb964c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; precision, std::vector&lt; precision &gt; &gt;</type>
      <name>This_t</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>ae225170c3120f2cc94ac6f739936bb1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container_t::iterator</type>
      <name>iterator</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>a7d1bb323b6d972f619c609d698e938b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container_t::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00624.html</anchorfile>
      <anchor>a7d7695e77d1310d350346758afb3481e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::FFTAbleVector</name>
    <filename>a00220.html</filename>
    <templarg>dimensions</templarg>
    <templarg></templarg>
    <templarg>FFTEngine</templarg>
    <base>qmcplusplus::FFTAbleVectorBase</base>
    <member kind="function">
      <type></type>
      <name>FFTAbleVector</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>a15a8b663f865f1df8836879e25f6e757</anchor>
      <arglist>(int sizeDim1, int sizeDim2=0, int sizeDim3=0, int sizeDim4=0, int sizeDim5=0, int sizeDim6=0, int sizeDim7=0, int sizeDim8=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FFTAbleVector</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>a1c9961b55811a0d7bbafb5b2fa4811de</anchor>
      <arglist>(const TinyVector&lt; int, dimensions &gt; &amp;DimSizes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FFTAbleVector</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>a087c9d20e667ec6ca5e29df6d94b390d</anchor>
      <arglist>(const FFTAbleVector &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>FFTAbleVector *</type>
      <name>clone</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>aab3b6c9ade900fee947ac8a6bda8423c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformForward</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>a892b8d17173637ebe2c7a82860eb4e32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformBackward</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>a9a00ec4af42337e2bcb07759a7aff653</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>FFTAbleVectorBase&lt; precision &gt;</type>
      <name>base</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>a8aec835cb74f6be65203623816ce27a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>a3e7b0d7ff0355edbee865d3307651c31</anchor>
      <arglist>(const TinyVector&lt; int, dimensions &gt; &amp;DimSizes)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TinyVector&lt; int, dimensions &gt;</type>
      <name>SizeDims</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>a1b020eb5e9c3d33cd04f6bb2805582e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FFTEngine&lt; dimensions, precision &gt;</type>
      <name>MyEngine</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>abef3df863b9d9221b4bafb44fe5953c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::FFTWEngine&lt; dimensions, std::complex&lt; double &gt; &gt;</name>
    <filename>a00223.html</filename>
    <templarg>dimensions</templarg>
    <member kind="function">
      <type></type>
      <name>FFTWEngine</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a85343f95b0c856725860eb7c4e32134f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FFTWEngine</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a4672fc45a01b572d9f14e47f6234e5b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a4e59c017d873e8ba3c0379e04bf8a7d8</anchor>
      <arglist>(const int *DimSizes, std::complex&lt; double &gt; *DataArray)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformForward</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a2ead6f4b3521d84f3133d1e7059f58f8</anchor>
      <arglist>(std::complex&lt; double &gt; *DataArray)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformBackward</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a86419c75044e76c1a40541107491c681</anchor>
      <arglist>(std::complex&lt; double &gt; *DataArray)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>fftw_complex *</type>
      <name>mangle</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>ac701f142f557d81db17ab10804fd436c</anchor>
      <arglist>(std::complex&lt; double &gt; *p)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>FFTWEngine</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a25e40e754f4131c80c88f80f647a7a41</anchor>
      <arglist>(const FFTWEngine &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fftw_plan</type>
      <name>forwardPlan</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>ac49ba92830829805a80abbae91944b3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fftw_plan</type>
      <name>backwardPlan</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>ae4853abcd5a8c4314b75eae799aabe9f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::FFTWEngine&lt; dimensions, std::complex&lt; long double &gt; &gt;</name>
    <filename>a00225.html</filename>
    <templarg>dimensions</templarg>
    <member kind="function">
      <type></type>
      <name>FFTWEngine</name>
      <anchorfile>a00225.html</anchorfile>
      <anchor>a85343f95b0c856725860eb7c4e32134f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FFTWEngine</name>
      <anchorfile>a00225.html</anchorfile>
      <anchor>a4672fc45a01b572d9f14e47f6234e5b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a00225.html</anchorfile>
      <anchor>ac3c3c9fdd4d8ec86fd93a2c68358af18</anchor>
      <arglist>(const int *DimSizes, std::complex&lt; long double &gt; *DataArray)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformForward</name>
      <anchorfile>a00225.html</anchorfile>
      <anchor>afdfae3a1182644c49e28d5a76e400aa6</anchor>
      <arglist>(std::complex&lt; long double &gt; *DataArray)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformBackward</name>
      <anchorfile>a00225.html</anchorfile>
      <anchor>a654713c2eda42b0df6fbf49a789e06f0</anchor>
      <arglist>(std::complex&lt; long double &gt; *DataArray)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>fftwl_complex *</type>
      <name>mangle</name>
      <anchorfile>a00225.html</anchorfile>
      <anchor>abb26b2f1a365713e948035cf2651470b</anchor>
      <arglist>(std::complex&lt; long double &gt; *p)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>FFTWEngine</name>
      <anchorfile>a00225.html</anchorfile>
      <anchor>a25e40e754f4131c80c88f80f647a7a41</anchor>
      <arglist>(const FFTWEngine &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fftwl_plan</type>
      <name>forwardPlan</name>
      <anchorfile>a00225.html</anchorfile>
      <anchor>a0be57adc88fa31c475d1ced2d57ec5bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fftwl_plan</type>
      <name>backwardPlan</name>
      <anchorfile>a00225.html</anchorfile>
      <anchor>a6a90369c6e1c6e110e5c0de18464524a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::FFTWEngine&lt; dimensions, std::complex&lt; float &gt; &gt;</name>
    <filename>a00224.html</filename>
    <templarg>dimensions</templarg>
    <member kind="function">
      <type></type>
      <name>FFTWEngine</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>a85343f95b0c856725860eb7c4e32134f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FFTWEngine</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>a4672fc45a01b572d9f14e47f6234e5b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>a4731c88ae8b9b38b94be22c42c14d390</anchor>
      <arglist>(const int *DimSizes, std::complex&lt; float &gt; *DataArray)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformForward</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>ad0dc2981e361ea3392090e4b0a1229eb</anchor>
      <arglist>(std::complex&lt; float &gt; *DataArray)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformBackward</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>a63c6b731c50730cef1b6c0242c125f7b</anchor>
      <arglist>(std::complex&lt; float &gt; *DataArray)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>fftwf_complex *</type>
      <name>mangle</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>aa0d8dec6af56c4daf6ac13b18617ab37</anchor>
      <arglist>(std::complex&lt; float &gt; *p)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>FFTWEngine</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>a25e40e754f4131c80c88f80f647a7a41</anchor>
      <arglist>(const FFTWEngine &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fftwf_plan</type>
      <name>forwardPlan</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>ae43e1eb50934a88f0f602de656e2641a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fftwf_plan</type>
      <name>backwardPlan</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>a77cf13374965d5679e90aa55a1e3c1ae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::GridBCond</name>
    <filename>a00242.html</filename>
    <templarg></templarg>
    <templarg>BC</templarg>
    <member kind="function">
      <type></type>
      <name>GridBCond</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>ad18359939fad55f7a20e8ddc00419a34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_periodic</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>a369f92cf89836fcee0186407f87199c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>ac03d942d74dbad9df87f6de5f00fe72b</anchor>
      <arglist>(int ng, T xmin, T xmax, bool pbc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyBC</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>a8b79a7ae196746aab1b518e98c405098</anchor>
      <arglist>(T &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>outofbound</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>af7f367a6ae79a80ea51fb17867b080df</anchor>
      <arglist>(T &amp;x, int &amp;i) const </arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>periodic</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>a09271c5dbbb7bb9b0e0487bbc48373aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Ng</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>af705b33b25526759a04b8970736cdc1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Lower</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>a70b60d1fa14e4977f860cf465a5481b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Upper</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>afb7d91d58a8a218428ce66af14815628</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>OneOverDelta</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>a24c1a574393d2271acc10372a114f531</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>L</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>a690c9ef343b108154227f7c125ef08c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>OneOverL</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>a72c05258b451b94cad4fd2e207e8ff75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Delta</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>ae314e81d4c833414a32f988a2c1d91b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::GridBCond&lt; T, FIXED_GBC &gt;</name>
    <filename>a00243.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>GridBCond</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ad18359939fad55f7a20e8ddc00419a34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_periodic</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>a369f92cf89836fcee0186407f87199c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ac03d942d74dbad9df87f6de5f00fe72b</anchor>
      <arglist>(int ng, T xmin, T xmax, bool pbc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyBC</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>a8b79a7ae196746aab1b518e98c405098</anchor>
      <arglist>(T &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>outofbound</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>af7f367a6ae79a80ea51fb17867b080df</anchor>
      <arglist>(T &amp;x, int &amp;i) const </arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Ng</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>af705b33b25526759a04b8970736cdc1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Lower</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>a70b60d1fa14e4977f860cf465a5481b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Upper</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>afb7d91d58a8a218428ce66af14815628</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>OneOverDelta</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>a24c1a574393d2271acc10372a114f531</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>L</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>a690c9ef343b108154227f7c125ef08c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>OneOverL</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>a72c05258b451b94cad4fd2e207e8ff75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Delta</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ae314e81d4c833414a32f988a2c1d91b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::GridBCond&lt; T, PERIODIC_GBC &gt;</name>
    <filename>a00244.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>GridBCond</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>ad18359939fad55f7a20e8ddc00419a34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_periodic</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>a369f92cf89836fcee0186407f87199c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>ac03d942d74dbad9df87f6de5f00fe72b</anchor>
      <arglist>(int ng, T xmin, T xmax, bool pbc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>outofbound</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>af7f367a6ae79a80ea51fb17867b080df</anchor>
      <arglist>(T &amp;x, int &amp;i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyBC</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>a8b79a7ae196746aab1b518e98c405098</anchor>
      <arglist>(T &amp;x) const </arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Ng</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>af705b33b25526759a04b8970736cdc1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Lower</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>a70b60d1fa14e4977f860cf465a5481b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>L</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>a690c9ef343b108154227f7c125ef08c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>OneOverL</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>a72c05258b451b94cad4fd2e207e8ff75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>OneOverDelta</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>a24c1a574393d2271acc10372a114f531</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Delta</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>ae314e81d4c833414a32f988a2c1d91b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Upper</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>afb7d91d58a8a218428ce66af14815628</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; hsize_t &gt;</name>
    <filename>a00262.html</filename>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>a00262.html</anchorfile>
      <anchor>a43beaffdfcbff951d93a1cc5d670e9b2</anchor>
      <arglist>(hsize_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a00262.html</anchorfile>
      <anchor>a9cb9a11595717b99c90268f87ffb530b</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a00262.html</anchorfile>
      <anchor>a2378d66f31e2d3c28eed6a1863e5c5dc</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>hsize_t &amp;</type>
      <name>ref</name>
      <anchorfile>a00262.html</anchorfile>
      <anchor>aea79b624ae6d9b7f3305fbfc4ded4a64</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; unsigned long &gt;</name>
    <filename>a00283.html</filename>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>a00283.html</anchorfile>
      <anchor>a7fae5fda9cd074b9eb15fff59874e624</anchor>
      <arglist>(unsigned long &amp;a, bool reuse=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a00283.html</anchorfile>
      <anchor>a9cb9a11595717b99c90268f87ffb530b</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a00283.html</anchorfile>
      <anchor>a2378d66f31e2d3c28eed6a1863e5c5dc</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>unsigned long &amp;</type>
      <name>ref</name>
      <anchorfile>a00283.html</anchorfile>
      <anchor>a6ca3cdc7aae3ada77191df7bb02e267a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>replace</name>
      <anchorfile>a00283.html</anchorfile>
      <anchor>a8dee86d04ccae709059c8c923826ac9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; int &gt;</name>
    <filename>a00263.html</filename>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>a00263.html</anchorfile>
      <anchor>a204b49aea8fbc1de70d13fcdef36b090</anchor>
      <arglist>(int &amp;a, bool reuse=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a00263.html</anchorfile>
      <anchor>a9cb9a11595717b99c90268f87ffb530b</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a00263.html</anchorfile>
      <anchor>a2378d66f31e2d3c28eed6a1863e5c5dc</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>int &amp;</type>
      <name>ref</name>
      <anchorfile>a00263.html</anchorfile>
      <anchor>afb455b7ce5cef4ec87deec6f497db463</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>replace</name>
      <anchorfile>a00263.html</anchorfile>
      <anchor>a8dee86d04ccae709059c8c923826ac9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; double &gt;</name>
    <filename>a00261.html</filename>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>a00261.html</anchorfile>
      <anchor>a1924e9cf42a3d3a942a793092fedadf3</anchor>
      <arglist>(double &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a00261.html</anchorfile>
      <anchor>a9cb9a11595717b99c90268f87ffb530b</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a00261.html</anchorfile>
      <anchor>a2378d66f31e2d3c28eed6a1863e5c5dc</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>double &amp;</type>
      <name>ref</name>
      <anchorfile>a00261.html</anchorfile>
      <anchor>acacc20581781b0076b212f9fa0576a3d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; TinyVector&lt; double, D &gt; &gt;</name>
    <filename>a00280.html</filename>
    <templarg>D</templarg>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="typedef">
      <type>TinyVector&lt; double, D &gt;</type>
      <name>data_type</name>
      <anchorfile>a00280.html</anchorfile>
      <anchor>a4551d671a895eca8e3da3125ee346f1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>a00280.html</anchorfile>
      <anchor>a5cbfe54b8d87938bae759cd3c8941d60</anchor>
      <arglist>(data_type &amp;a, bool over=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a00280.html</anchorfile>
      <anchor>a9cb9a11595717b99c90268f87ffb530b</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a00280.html</anchorfile>
      <anchor>a2378d66f31e2d3c28eed6a1863e5c5dc</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>data_type &amp;</type>
      <name>ref</name>
      <anchorfile>a00280.html</anchorfile>
      <anchor>a32b491d233bae977b6e88e8197499b95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>replace</name>
      <anchorfile>a00280.html</anchorfile>
      <anchor>a8dee86d04ccae709059c8c923826ac9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; Tensor&lt; double, D &gt; &gt;</name>
    <filename>a00279.html</filename>
    <templarg>D</templarg>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="typedef">
      <type>Tensor&lt; double, D &gt;</type>
      <name>data_type</name>
      <anchorfile>a00279.html</anchorfile>
      <anchor>a73086594a815680003f5ee0612da09d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>a00279.html</anchorfile>
      <anchor>a5cbfe54b8d87938bae759cd3c8941d60</anchor>
      <arglist>(data_type &amp;a, bool over=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a00279.html</anchorfile>
      <anchor>a9cb9a11595717b99c90268f87ffb530b</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a00279.html</anchorfile>
      <anchor>a2378d66f31e2d3c28eed6a1863e5c5dc</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>data_type &amp;</type>
      <name>ref</name>
      <anchorfile>a00279.html</anchorfile>
      <anchor>a32b491d233bae977b6e88e8197499b95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>replace</name>
      <anchorfile>a00279.html</anchorfile>
      <anchor>a8dee86d04ccae709059c8c923826ac9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; TinyVector&lt; int, D &gt; &gt;</name>
    <filename>a00281.html</filename>
    <templarg>D</templarg>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="typedef">
      <type>TinyVector&lt; int, D &gt;</type>
      <name>data_type</name>
      <anchorfile>a00281.html</anchorfile>
      <anchor>a55e0b5f1a4849a98a171972f3e9a0481</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>a00281.html</anchorfile>
      <anchor>ade997a8f884c91ef1f47d5ac6dd4c843</anchor>
      <arglist>(data_type &amp;a, bool reuse=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a00281.html</anchorfile>
      <anchor>a9cb9a11595717b99c90268f87ffb530b</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a00281.html</anchorfile>
      <anchor>a2378d66f31e2d3c28eed6a1863e5c5dc</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>data_type &amp;</type>
      <name>ref</name>
      <anchorfile>a00281.html</anchorfile>
      <anchor>a32b491d233bae977b6e88e8197499b95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>replace</name>
      <anchorfile>a00281.html</anchorfile>
      <anchor>a8dee86d04ccae709059c8c923826ac9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; std::vector&lt; TinyVector&lt; int, D &gt; &gt; &gt;</name>
    <filename>a00277.html</filename>
    <templarg>D</templarg>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="typedef">
      <type>std::vector&lt; TinyVector&lt; int, D &gt; &gt;</type>
      <name>data_type</name>
      <anchorfile>a00277.html</anchorfile>
      <anchor>ae8033256e54e5041592c323676aa86df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>a00277.html</anchorfile>
      <anchor>a3c86ca4e1c08eaeb84a0cdaec921120d</anchor>
      <arglist>(data_type &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a00277.html</anchorfile>
      <anchor>a9cb9a11595717b99c90268f87ffb530b</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a00277.html</anchorfile>
      <anchor>a2378d66f31e2d3c28eed6a1863e5c5dc</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>data_type &amp;</type>
      <name>ref</name>
      <anchorfile>a00277.html</anchorfile>
      <anchor>a32b491d233bae977b6e88e8197499b95</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; std::vector&lt; TinyVector&lt; double, D &gt; &gt; &gt;</name>
    <filename>a00276.html</filename>
    <templarg>D</templarg>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="typedef">
      <type>std::vector&lt; TinyVector&lt; double, D &gt; &gt;</type>
      <name>data_type</name>
      <anchorfile>a00276.html</anchorfile>
      <anchor>aa5861294d64b04fa6d3f2a0f3d033b01</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>a00276.html</anchorfile>
      <anchor>a3c86ca4e1c08eaeb84a0cdaec921120d</anchor>
      <arglist>(data_type &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a00276.html</anchorfile>
      <anchor>a9cb9a11595717b99c90268f87ffb530b</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a00276.html</anchorfile>
      <anchor>a2378d66f31e2d3c28eed6a1863e5c5dc</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>data_type &amp;</type>
      <name>ref</name>
      <anchorfile>a00276.html</anchorfile>
      <anchor>a32b491d233bae977b6e88e8197499b95</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; Vector&lt; double &gt; &gt;</name>
    <filename>a00284.html</filename>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="typedef">
      <type>Vector&lt; double &gt;</type>
      <name>ArrayType_t</name>
      <anchorfile>a00284.html</anchorfile>
      <anchor>a8c292ac73882f8f14e95e383b5ea193f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>a00284.html</anchorfile>
      <anchor>a7c30f1a0d39f35dff65f66bd397d37ca</anchor>
      <arglist>(ArrayType_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a00284.html</anchorfile>
      <anchor>a9cb9a11595717b99c90268f87ffb530b</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a00284.html</anchorfile>
      <anchor>a2378d66f31e2d3c28eed6a1863e5c5dc</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>ArrayType_t &amp;</type>
      <name>ref</name>
      <anchorfile>a00284.html</anchorfile>
      <anchor>aa41ba92e454ef17e0c4a3d47b09bea98</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; Vector&lt; std::complex&lt; double &gt; &gt; &gt;</name>
    <filename>a00286.html</filename>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="typedef">
      <type>Vector&lt; complex&lt; double &gt; &gt;</type>
      <name>ArrayType_t</name>
      <anchorfile>a00286.html</anchorfile>
      <anchor>a3d3cb5184fc616ba49360b399abe4c38</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>a00286.html</anchorfile>
      <anchor>a7c30f1a0d39f35dff65f66bd397d37ca</anchor>
      <arglist>(ArrayType_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a00286.html</anchorfile>
      <anchor>a9cb9a11595717b99c90268f87ffb530b</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a00286.html</anchorfile>
      <anchor>a2378d66f31e2d3c28eed6a1863e5c5dc</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>ArrayType_t &amp;</type>
      <name>ref</name>
      <anchorfile>a00286.html</anchorfile>
      <anchor>aa41ba92e454ef17e0c4a3d47b09bea98</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; Vector&lt; int &gt; &gt;</name>
    <filename>a00285.html</filename>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="typedef">
      <type>Vector&lt; int &gt;</type>
      <name>ArrayType_t</name>
      <anchorfile>a00285.html</anchorfile>
      <anchor>a0deff3952b51d3f27ce5d44c5ee4707b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>a00285.html</anchorfile>
      <anchor>a7c30f1a0d39f35dff65f66bd397d37ca</anchor>
      <arglist>(ArrayType_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a00285.html</anchorfile>
      <anchor>a9cb9a11595717b99c90268f87ffb530b</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a00285.html</anchorfile>
      <anchor>a2378d66f31e2d3c28eed6a1863e5c5dc</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>ArrayType_t &amp;</type>
      <name>ref</name>
      <anchorfile>a00285.html</anchorfile>
      <anchor>aa41ba92e454ef17e0c4a3d47b09bea98</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; Vector&lt; TinyVector&lt; double, D &gt; &gt; &gt;</name>
    <filename>a00287.html</filename>
    <templarg>D</templarg>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="typedef">
      <type>Vector&lt; TinyVector&lt; double, D &gt; &gt;</type>
      <name>ArrayType_t</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>a3e33ec8d5eda44d320b87d4db30f246f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>a7c30f1a0d39f35dff65f66bd397d37ca</anchor>
      <arglist>(ArrayType_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>a9cb9a11595717b99c90268f87ffb530b</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>a2378d66f31e2d3c28eed6a1863e5c5dc</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>ArrayType_t &amp;</type>
      <name>ref</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>aa41ba92e454ef17e0c4a3d47b09bea98</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; Matrix&lt; double &gt; &gt;</name>
    <filename>a00264.html</filename>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="typedef">
      <type>Matrix&lt; double &gt;</type>
      <name>ArrayType_t</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>ae40b3c1c1ac98ba6ac28880eaa35206f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>a1000302920789aaa42e2ff4e09db6790</anchor>
      <arglist>(ArrayType_t &amp;a, bool reuse=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>a9cb9a11595717b99c90268f87ffb530b</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>a2378d66f31e2d3c28eed6a1863e5c5dc</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>ArrayType_t &amp;</type>
      <name>ref</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>aa41ba92e454ef17e0c4a3d47b09bea98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>replace</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>a8dee86d04ccae709059c8c923826ac9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; Matrix&lt; TinyVector&lt; double, D &gt; &gt; &gt;</name>
    <filename>a00265.html</filename>
    <templarg>D</templarg>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="typedef">
      <type>TinyVector&lt; double, D &gt;</type>
      <name>Component_t</name>
      <anchorfile>a00265.html</anchorfile>
      <anchor>a0f5cef918397328afcd44fff16f505ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Component_t &gt;</type>
      <name>ArrayType_t</name>
      <anchorfile>a00265.html</anchorfile>
      <anchor>a4224b23a0b75486a497030750c519cd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>a00265.html</anchorfile>
      <anchor>a1000302920789aaa42e2ff4e09db6790</anchor>
      <arglist>(ArrayType_t &amp;a, bool reuse=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a00265.html</anchorfile>
      <anchor>a9cb9a11595717b99c90268f87ffb530b</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a00265.html</anchorfile>
      <anchor>a2378d66f31e2d3c28eed6a1863e5c5dc</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>ArrayType_t &amp;</type>
      <name>ref</name>
      <anchorfile>a00265.html</anchorfile>
      <anchor>aa41ba92e454ef17e0c4a3d47b09bea98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>replace</name>
      <anchorfile>a00265.html</anchorfile>
      <anchor>a8dee86d04ccae709059c8c923826ac9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; Array&lt; double, D &gt; &gt;</name>
    <filename>a00260.html</filename>
    <templarg>D</templarg>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="typedef">
      <type>Array&lt; double, D &gt;</type>
      <name>ArrayType_t</name>
      <anchorfile>a00260.html</anchorfile>
      <anchor>a49d327326546e4f9dfd097804315fcf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>a00260.html</anchorfile>
      <anchor>a7c30f1a0d39f35dff65f66bd397d37ca</anchor>
      <arglist>(ArrayType_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a00260.html</anchorfile>
      <anchor>a9cb9a11595717b99c90268f87ffb530b</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a00260.html</anchorfile>
      <anchor>a2378d66f31e2d3c28eed6a1863e5c5dc</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>ArrayType_t &amp;</type>
      <name>ref</name>
      <anchorfile>a00260.html</anchorfile>
      <anchor>aa41ba92e454ef17e0c4a3d47b09bea98</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; Array&lt; complex&lt; double &gt;, D &gt; &gt;</name>
    <filename>a00259.html</filename>
    <templarg>D</templarg>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="typedef">
      <type>Array&lt; complex&lt; double &gt;, D &gt;</type>
      <name>ArrayType_t</name>
      <anchorfile>a00259.html</anchorfile>
      <anchor>a8c63f1df7ab4078ac715bb81fd27aeec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>a00259.html</anchorfile>
      <anchor>a1000302920789aaa42e2ff4e09db6790</anchor>
      <arglist>(ArrayType_t &amp;a, bool reuse=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a00259.html</anchorfile>
      <anchor>a9cb9a11595717b99c90268f87ffb530b</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a00259.html</anchorfile>
      <anchor>a2378d66f31e2d3c28eed6a1863e5c5dc</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>ArrayType_t &amp;</type>
      <name>ref</name>
      <anchorfile>a00259.html</anchorfile>
      <anchor>aa41ba92e454ef17e0c4a3d47b09bea98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>replace</name>
      <anchorfile>a00259.html</anchorfile>
      <anchor>a8dee86d04ccae709059c8c923826ac9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; std::vector&lt; int &gt; &gt;</name>
    <filename>a00274.html</filename>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="typedef">
      <type>std::vector&lt; int &gt;</type>
      <name>ArrayType_t</name>
      <anchorfile>a00274.html</anchorfile>
      <anchor>a01a2ee2d612ac0133cb89992c0f87deb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>a00274.html</anchorfile>
      <anchor>a1000302920789aaa42e2ff4e09db6790</anchor>
      <arglist>(ArrayType_t &amp;a, bool reuse=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a00274.html</anchorfile>
      <anchor>a9cb9a11595717b99c90268f87ffb530b</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a00274.html</anchorfile>
      <anchor>a2378d66f31e2d3c28eed6a1863e5c5dc</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>ArrayType_t &amp;</type>
      <name>ref</name>
      <anchorfile>a00274.html</anchorfile>
      <anchor>aa41ba92e454ef17e0c4a3d47b09bea98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>replace</name>
      <anchorfile>a00274.html</anchorfile>
      <anchor>a8dee86d04ccae709059c8c923826ac9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; std::vector&lt; double &gt; &gt;</name>
    <filename>a00273.html</filename>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>ArrayType_t</name>
      <anchorfile>a00273.html</anchorfile>
      <anchor>a44b3f6f763efec632f12a8b28d1f4e10</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>a00273.html</anchorfile>
      <anchor>a0ecf334b5fb70875f70756475cbb4da3</anchor>
      <arglist>(ArrayType_t &amp;a, bool over=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>a00273.html</anchorfile>
      <anchor>ac316b328a8a8e951c18e9ea28d1b9966</anchor>
      <arglist>(ArrayType_t &amp;a, std::vector&lt; int &gt; &amp;dim, int offset=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>a00273.html</anchorfile>
      <anchor>ae238953ccd305a0915faf32ed5c847db</anchor>
      <arglist>(ArrayType_t &amp;a, hsize_t ndim, hsize_t *dim, int offset=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a00273.html</anchorfile>
      <anchor>a9cb9a11595717b99c90268f87ffb530b</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a00273.html</anchorfile>
      <anchor>a2378d66f31e2d3c28eed6a1863e5c5dc</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; hsize_t &gt;</type>
      <name>Dim</name>
      <anchorfile>a00273.html</anchorfile>
      <anchor>ae6e186aa3b16b92f99bf28a7fe33a7fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ArrayType_t &amp;</type>
      <name>ref</name>
      <anchorfile>a00273.html</anchorfile>
      <anchor>aa41ba92e454ef17e0c4a3d47b09bea98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>replace</name>
      <anchorfile>a00273.html</anchorfile>
      <anchor>a8dee86d04ccae709059c8c923826ac9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>offset_</name>
      <anchorfile>a00273.html</anchorfile>
      <anchor>a09206911190ce91fe5bece5535717837</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; std::vector&lt; std::complex&lt; double &gt; &gt; &gt;</name>
    <filename>a00275.html</filename>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="typedef">
      <type>std::vector&lt; std::complex&lt; double &gt; &gt;</type>
      <name>ArrayType_t</name>
      <anchorfile>a00275.html</anchorfile>
      <anchor>a8bbee57a087b578f4bfa598f10dba20e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>a00275.html</anchorfile>
      <anchor>a7c30f1a0d39f35dff65f66bd397d37ca</anchor>
      <arglist>(ArrayType_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a00275.html</anchorfile>
      <anchor>a9cb9a11595717b99c90268f87ffb530b</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a00275.html</anchorfile>
      <anchor>a2378d66f31e2d3c28eed6a1863e5c5dc</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; hsize_t &gt;</type>
      <name>Dim</name>
      <anchorfile>a00275.html</anchorfile>
      <anchor>ae6e186aa3b16b92f99bf28a7fe33a7fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ArrayType_t &amp;</type>
      <name>ref</name>
      <anchorfile>a00275.html</anchorfile>
      <anchor>aa41ba92e454ef17e0c4a3d47b09bea98</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; std::bitset&lt; N &gt; &gt;</name>
    <filename>a00271.html</filename>
    <templarg>N</templarg>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="typedef">
      <type>std::bitset&lt; N &gt;</type>
      <name>ArrayType_t</name>
      <anchorfile>a00271.html</anchorfile>
      <anchor>a4a060b06c72f27638f7ebcefc85150b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>a00271.html</anchorfile>
      <anchor>a1000302920789aaa42e2ff4e09db6790</anchor>
      <arglist>(ArrayType_t &amp;a, bool reuse=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a00271.html</anchorfile>
      <anchor>a9cb9a11595717b99c90268f87ffb530b</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a00271.html</anchorfile>
      <anchor>a2378d66f31e2d3c28eed6a1863e5c5dc</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>ArrayType_t &amp;</type>
      <name>ref</name>
      <anchorfile>a00271.html</anchorfile>
      <anchor>aa41ba92e454ef17e0c4a3d47b09bea98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>replace</name>
      <anchorfile>a00271.html</anchorfile>
      <anchor>a8dee86d04ccae709059c8c923826ac9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::MatrixOperators</name>
    <filename>a00371.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>product</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>abcf1600811f9bd4b635936289402bb3f</anchor>
      <arglist>(const Matrix&lt; double &gt; &amp;A, const Matrix&lt; double &gt; &amp;B, Matrix&lt; double &gt; &amp;C)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>ABt</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a1db3e49918509787e6904ed9f945f881</anchor>
      <arglist>(const Matrix&lt; double &gt; &amp;A, const Matrix&lt; double &gt; &amp;B, Matrix&lt; double &gt; &amp;C)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>half_outerProduct</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>ab39d6b0f7dcfb6a44df95ef25804ea40</anchor>
      <arglist>(const Matrix&lt; double &gt; &amp;M, const Vector&lt; double &gt; &amp;B, int iat, Matrix&lt; double &gt; &amp;C)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>other_half_outerProduct</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a5888360feeb89dd0261ee0ef0dc4189f</anchor>
      <arglist>(const Matrix&lt; double &gt; &amp;M, const Vector&lt; double &gt; &amp;B, int iat, Matrix&lt; double &gt; &amp;C)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>innerProduct</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a91b30f263ea50e88fe1d1e4a286d9d4e</anchor>
      <arglist>(const Vector&lt; double &gt; &amp;A, const Vector&lt; double &gt; &amp;B)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transpose</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>af818a5bd4d77626306d0f013c99421ad</anchor>
      <arglist>(Matrix&lt; T &gt; &amp;A)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>product</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a999d3ef041c443bb0c3df9e3cb60db12</anchor>
      <arglist>(const Matrix&lt; std::complex&lt; double &gt; &gt; &amp;A, const Matrix&lt; std::complex&lt; double &gt; &gt; &amp;B, Matrix&lt; std::complex&lt; double &gt; &gt; &amp;C)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>product</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a262c1c02f187fd4fd23552b9ae2e6493</anchor>
      <arglist>(const Matrix&lt; double &gt; &amp;A, const Matrix&lt; std::complex&lt; double &gt; &gt; &amp;B, Matrix&lt; double &gt; &amp;C)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>product</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>af813ca87f14b88f85fe5e01ae573040a</anchor>
      <arglist>(const Matrix&lt; double &gt; &amp;A, const Vector&lt; double &gt; &amp;x, double *restrict yptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>product</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>af2fe69ff47721352e24f36b714587ec4</anchor>
      <arglist>(const Matrix&lt; double &gt; &amp;A, const double *restrict xptr, double *restrict yptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>product</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a5a51f64db86207516c858981587d1564</anchor>
      <arglist>(const Matrix&lt; double &gt; &amp;A, const TinyVector&lt; double, D &gt; *xvPtr, TinyVector&lt; double, D &gt; *restrict yptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>product</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a7c26ad200d0eb3d1f23efc2861b9dcba</anchor>
      <arglist>(const Matrix&lt; double &gt; &amp;A, const Tensor&lt; double, D &gt; *xvPtr, Tensor&lt; double, D &gt; *restrict yptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>product</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a048336c9cff597234669a0832856497a</anchor>
      <arglist>(const Matrix&lt; double &gt; &amp;A, const Vector&lt; TinyVector&lt; double, D &gt; &gt; &amp;x, TinyVector&lt; double, D &gt; *restrict yptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>product</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a5b40432ff78b73b30f738ccb1ae5215b</anchor>
      <arglist>(const Matrix&lt; std::complex&lt; double &gt; &gt; &amp;A, const Vector&lt; TinyVector&lt; std::complex&lt; double &gt;, D &gt; &gt; &amp;x, TinyVector&lt; std::complex&lt; double &gt;, D &gt; *restrict yptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>product</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>af971e91b0449e14cdcc554ae2b4b1eaa</anchor>
      <arglist>(const Matrix&lt; std::complex&lt; double &gt; &gt; &amp;A, const Vector&lt; std::complex&lt; double &gt; &gt; &amp;x, std::complex&lt; double &gt; *restrict yptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>product</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a7e2fb5b8b0a6e020fc7f52bd4b90c8b0</anchor>
      <arglist>(const Matrix&lt; std::complex&lt; double &gt; &gt; &amp;A, const Vector&lt; double &gt; &amp;x, std::complex&lt; double &gt; *restrict yptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>product</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a61d816053a2aaf11896ec07c6fd5c618</anchor>
      <arglist>(const Matrix&lt; std::complex&lt; double &gt; &gt; &amp;A, const std::complex&lt; double &gt; *restrict x, std::complex&lt; double &gt; *restrict yptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>product</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>aac1ee3a71d1098e12c27b65209b11c3b</anchor>
      <arglist>(const Matrix&lt; double &gt; &amp;A, const Vector&lt; std::complex&lt; double &gt; &gt; &amp;x, double *restrict yptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>product</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>af76f59e8eab195bc1f0fb2af5e949f2b</anchor>
      <arglist>(const Matrix&lt; T &gt; &amp;A, const Matrix&lt; T &gt; &amp;B, Matrix&lt; T &gt; &amp;C, std::vector&lt; int &gt; &amp;offset)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::OneDimCubicSplineFirst</name>
    <filename>a00437.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>qmcplusplus::OneDimGridFunctor</base>
    <member kind="typedef">
      <type>OneDimGridFunctor&lt; Td, Tg, CTd, CTg &gt;</type>
      <name>base_type</name>
      <anchorfile>a00437.html</anchorfile>
      <anchor>ae1940c2487902c0e9ce466b64111e871</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::value_type</type>
      <name>value_type</name>
      <anchorfile>a00437.html</anchorfile>
      <anchor>afabdc9b5f48b286e2d7676557d2b66ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::point_type</type>
      <name>point_type</name>
      <anchorfile>a00437.html</anchorfile>
      <anchor>a7ca7c963d77c804149f650c6c5f042ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::data_type</type>
      <name>data_type</name>
      <anchorfile>a00437.html</anchorfile>
      <anchor>a570c19a59289cf4c3849b780369d4a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::grid_type</type>
      <name>grid_type</name>
      <anchorfile>a00437.html</anchorfile>
      <anchor>ae0e66d7122800448c7f2e057226a7de3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Td</type>
      <name>value_type</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>afe4d664344397ec8cbc0808abdc1347f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tg</type>
      <name>point_type</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a71e64ef0687c6b44760bc075ef3f3194</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CTd</type>
      <name>data_type</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a1766349742447fa7394a261ec4d12bf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimGridBase&lt; Tg, CTg &gt;</type>
      <name>grid_type</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a2d6241ac5e0814265d3deb8951946f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimGridFunctor&lt; Td, Tg, CTd, CTg &gt;</type>
      <name>this_type</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a5c47a46da03f01e3de5e3d7e19f59a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDimCubicSplineFirst</name>
      <anchorfile>a00437.html</anchorfile>
      <anchor>a0f9697fd6413c5a64d47166ffcea6f7c</anchor>
      <arglist>(grid_type *gt=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDimCubicSplineFirst</name>
      <anchorfile>a00437.html</anchorfile>
      <anchor>a1b7f7d6ec6ec6930ab4044027f0400d1</anchor>
      <arglist>(grid_type *gt, const VV &amp;nv, bool pbc=true)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>splint</name>
      <anchorfile>a00437.html</anchorfile>
      <anchor>a93552547459b4867fb5b9dcb98602846</anchor>
      <arglist>(point_type r)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>splint</name>
      <anchorfile>a00437.html</anchorfile>
      <anchor>a2f72e955bf919c0d886fefaf7e25aa90</anchor>
      <arglist>(point_type r, value_type &amp;du, value_type &amp;d2u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>a00437.html</anchorfile>
      <anchor>ac6e408e3d5a8a585bcc41f42e9cb2abc</anchor>
      <arglist>(int imin, value_type yp1, int imax, value_type ypn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>a00437.html</anchorfile>
      <anchor>ab8f0efa6d82e1053a6cfc36e70b7c5fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDimGridFunctor</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>aba04023efdd27e4349a32b8b3885f2de</anchor>
      <arglist>(grid_type *gt=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OneDimGridFunctor</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a1e77f8a78f0f01b3470a6d7fd61075fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDimGridFunctor</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a15a97252259edc392ed645f2936d8035</anchor>
      <arglist>(const OneDimGridFunctor&lt; Td, Tg, CTd, CTg &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a425f66dee2eb3678e55eca443d7e2b56</anchor>
      <arglist>(const this_type &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>ad2a71e272f16a9bb8b218d5d016df54c</anchor>
      <arglist>(const T1 &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a852bbf07eaa786a132c90bec045cfbf9</anchor>
      <arglist>(const TT &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumOfNodes</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a5338162ecb26b7c1791956a866349304</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumOfNodes</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>adb44a7f0a51d5de08aef89de8d3ba0bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>value_type *</type>
      <name>data</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a6bf6a0e59b6079e8c24376c46aa460c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const value_type *</type>
      <name>data</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>afede1888459f37349efa78d77a8f2107</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>ab8e4e3e2a7bf18888b71bdf9dda0770b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a578be9c59132b8633a67a98c39318777</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>const grid_type &amp;</type>
      <name>grid</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>afa79c95c7e2dde5542a4a8e64b29fa8e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>grid_type &amp;</type>
      <name>grid</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a9fdd57578b0da2993eb79a953bf4248c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGridManager</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a7ba09d460448e1743491036886e4dcd4</anchor>
      <arglist>(bool willmanage)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator()</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a8241fba9250c054ff01e6ec138d60ebf</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>operator()</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>afcb8074d9cb5b91d454e2cc2b268cd2d</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>point_type</type>
      <name>dh</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>ad2fe62a10002b572ca72539d5a3ba1d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>point_type</type>
      <name>r</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>acccbb2b423370304184e972bbe52c32e</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>point_type</type>
      <name>dr</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a60adf72e6d810086bf687818cf1f650d</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>f</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>abac144a36bd4aebd04aebc2920204715</anchor>
      <arglist>(point_type r)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>df</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a493762e9fa785f5e77c701fab3334d27</anchor>
      <arglist>(point_type r)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>evaluate</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a8739dc032f012bb2ccd2763466a82e29</anchor>
      <arglist>(point_type r, point_type rinv)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>evaluateAll</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a54fc2fd3978f99121ce67d367e293230</anchor>
      <arglist>(point_type r, point_type rinv)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>evaluate</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>ad1bd2c7eec26189cdc1cc08156cbb989</anchor>
      <arglist>(point_type r, point_type rinv, value_type &amp;du, value_type &amp;d2u)</arglist>
    </member>
    <member kind="variable">
      <type>data_type</type>
      <name>m_Y1</name>
      <anchorfile>a00437.html</anchorfile>
      <anchor>af9845fcea8d770dd8c2e07d77139bd35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>First</name>
      <anchorfile>a00437.html</anchorfile>
      <anchor>a10a3fcd824154f6545a843a16ebf7abb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Last</name>
      <anchorfile>a00437.html</anchorfile>
      <anchor>a341cc2f3f0987c9467af85d3a7fe3754</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>r_min</name>
      <anchorfile>a00437.html</anchorfile>
      <anchor>afaee0f0fbf24437517aaf0b78d99c938</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>r_max</name>
      <anchorfile>a00437.html</anchorfile>
      <anchor>a5a718801c8c5c4dca9dee4ab95901f1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>ConstValue</name>
      <anchorfile>a00437.html</anchorfile>
      <anchor>a87da8ee147603f7932bfa6213935726d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>GridManager</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a79b41dd4ecf187e9976429aedc6764b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>OwnGrid</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>ae5a3ec93d2007c04f6dbc0bd7a11e793</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>grid_type *</type>
      <name>m_grid</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a1dfb4b72cbbc0ed165d6aa973ffe7fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Y</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a8d2a59b309eebc2d59b99a23865e67e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>dY</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a0199f71a22039479f0c198f8290f135f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>d2Y</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a614f551230c22bd91ea75a162ae99162</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>data_type</type>
      <name>m_Y</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>adcf2b59c4e62e26bb532382fa9c8c771</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumNodes</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a94f403de13048a589418ba65f52f3f17</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::OneDimCubicSplinePBC</name>
    <filename>a00438.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>qmcplusplus::OneDimGridFunctor</base>
    <member kind="typedef">
      <type>OneDimGridFunctor&lt; Td, Tg, CTd, CTg &gt;</type>
      <name>base_type</name>
      <anchorfile>a00438.html</anchorfile>
      <anchor>ae1940c2487902c0e9ce466b64111e871</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::value_type</type>
      <name>value_type</name>
      <anchorfile>a00438.html</anchorfile>
      <anchor>afabdc9b5f48b286e2d7676557d2b66ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::point_type</type>
      <name>point_type</name>
      <anchorfile>a00438.html</anchorfile>
      <anchor>a7ca7c963d77c804149f650c6c5f042ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::data_type</type>
      <name>data_type</name>
      <anchorfile>a00438.html</anchorfile>
      <anchor>a570c19a59289cf4c3849b780369d4a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::grid_type</type>
      <name>grid_type</name>
      <anchorfile>a00438.html</anchorfile>
      <anchor>ae0e66d7122800448c7f2e057226a7de3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDimCubicSplinePBC</name>
      <anchorfile>a00438.html</anchorfile>
      <anchor>af1b95b1241e3a9e45f17ed1e48dd35bc</anchor>
      <arglist>(grid_type *gt=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDimCubicSplinePBC</name>
      <anchorfile>a00438.html</anchorfile>
      <anchor>a8d694129e20a2c7887416e7d820c1f1a</anchor>
      <arglist>(grid_type *gt, const VV &amp;nv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>a00438.html</anchorfile>
      <anchor>a24b0c40670bf734517a006e3babd9fad</anchor>
      <arglist>(grid_type *gt, const VV &amp;nv)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>splint</name>
      <anchorfile>a00438.html</anchorfile>
      <anchor>a93552547459b4867fb5b9dcb98602846</anchor>
      <arglist>(point_type r)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>splint</name>
      <anchorfile>a00438.html</anchorfile>
      <anchor>a2f72e955bf919c0d886fefaf7e25aa90</anchor>
      <arglist>(point_type r, value_type &amp;du, value_type &amp;d2u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>a00438.html</anchorfile>
      <anchor>ac6e408e3d5a8a585bcc41f42e9cb2abc</anchor>
      <arglist>(int imin, value_type yp1, int imax, value_type ypn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>a00438.html</anchorfile>
      <anchor>ab8f0efa6d82e1053a6cfc36e70b7c5fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>data_type</type>
      <name>m_Y1</name>
      <anchorfile>a00438.html</anchorfile>
      <anchor>af9845fcea8d770dd8c2e07d77139bd35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>First</name>
      <anchorfile>a00438.html</anchorfile>
      <anchor>a10a3fcd824154f6545a843a16ebf7abb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Last</name>
      <anchorfile>a00438.html</anchorfile>
      <anchor>a341cc2f3f0987c9467af85d3a7fe3754</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Difference</name>
      <anchorfile>a00438.html</anchorfile>
      <anchor>adc0b37d600e2c6f03e4a7699287ced66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>Length</name>
      <anchorfile>a00438.html</anchorfile>
      <anchor>a17dc652fc313b6aa110d58c93bfafbe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>Linv</name>
      <anchorfile>a00438.html</anchorfile>
      <anchor>af1c4132c409a3fe79603a402d9b9679c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::OneDimCubicSpline</name>
    <filename>a00436.html</filename>
    <templarg>Td</templarg>
    <templarg>Tg</templarg>
    <templarg>CTd</templarg>
    <templarg>CTg</templarg>
    <base>qmcplusplus::OneDimGridFunctor</base>
    <member kind="typedef">
      <type>OneDimGridFunctor&lt; Td, Tg, CTd, CTg &gt;</type>
      <name>base_type</name>
      <anchorfile>a00436.html</anchorfile>
      <anchor>ae1940c2487902c0e9ce466b64111e871</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::value_type</type>
      <name>value_type</name>
      <anchorfile>a00436.html</anchorfile>
      <anchor>afabdc9b5f48b286e2d7676557d2b66ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::point_type</type>
      <name>point_type</name>
      <anchorfile>a00436.html</anchorfile>
      <anchor>a7ca7c963d77c804149f650c6c5f042ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::data_type</type>
      <name>data_type</name>
      <anchorfile>a00436.html</anchorfile>
      <anchor>a570c19a59289cf4c3849b780369d4a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::grid_type</type>
      <name>grid_type</name>
      <anchorfile>a00436.html</anchorfile>
      <anchor>ae0e66d7122800448c7f2e057226a7de3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDimCubicSpline</name>
      <anchorfile>a00436.html</anchorfile>
      <anchor>aefcd5a89beaeaf99d731d11aed19b083</anchor>
      <arglist>(grid_type *gt=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDimCubicSpline</name>
      <anchorfile>a00436.html</anchorfile>
      <anchor>aeaa0eba53d1383dbbbb83d93101027ad</anchor>
      <arglist>(grid_type *gt, const VV &amp;nv)</arglist>
    </member>
    <member kind="function">
      <type>OneDimCubicSpline&lt; Td, Tg, CTd, CTg &gt; *</type>
      <name>makeClone</name>
      <anchorfile>a00436.html</anchorfile>
      <anchor>a0c9ac46b35d0caa9d74e5de6a5523c24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDimCubicSpline</name>
      <anchorfile>a00436.html</anchorfile>
      <anchor>addcdb7957cf9ad75ffd5441303daf670</anchor>
      <arglist>(const OneDimCubicSpline&lt; Td, Tg, CTd, CTg &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const OneDimCubicSpline&lt; Td, Tg, CTd, CTg &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00436.html</anchorfile>
      <anchor>a32bf7f50504cccaa23f7f3b1587bc97c</anchor>
      <arglist>(const OneDimCubicSpline&lt; Td, Tg, CTd, CTg &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shallow_copy</name>
      <anchorfile>a00436.html</anchorfile>
      <anchor>a512dc6fd6d28e694cd2bdda5087f4ca0</anchor>
      <arglist>(const OneDimCubicSpline&lt; Td, Tg, CTd, CTg &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>splint</name>
      <anchorfile>a00436.html</anchorfile>
      <anchor>a93552547459b4867fb5b9dcb98602846</anchor>
      <arglist>(point_type r)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>splint</name>
      <anchorfile>a00436.html</anchorfile>
      <anchor>a2f72e955bf919c0d886fefaf7e25aa90</anchor>
      <arglist>(point_type r, value_type &amp;du, value_type &amp;d2u)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>splint</name>
      <anchorfile>a00436.html</anchorfile>
      <anchor>ac262b504e1e341935b63037387dda777</anchor>
      <arglist>(point_type r, value_type &amp;du, value_type &amp;d2u, value_type &amp;d3u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>a00436.html</anchorfile>
      <anchor>ac6e408e3d5a8a585bcc41f42e9cb2abc</anchor>
      <arglist>(int imin, value_type yp1, int imax, value_type ypn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>a00436.html</anchorfile>
      <anchor>ab8f0efa6d82e1053a6cfc36e70b7c5fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>data_type</type>
      <name>m_Y2</name>
      <anchorfile>a00436.html</anchorfile>
      <anchor>a602b5b255c3ca6114989a2f117e8ff54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>r_min</name>
      <anchorfile>a00436.html</anchorfile>
      <anchor>afaee0f0fbf24437517aaf0b78d99c938</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>r_max</name>
      <anchorfile>a00436.html</anchorfile>
      <anchor>a5a718801c8c5c4dca9dee4ab95901f1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>first_deriv</name>
      <anchorfile>a00436.html</anchorfile>
      <anchor>ad4f2f90e63da86f312e8aadeabb81b44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>last_deriv</name>
      <anchorfile>a00436.html</anchorfile>
      <anchor>ad5859b099eb5a5d795ea1f5446f8bbae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>ConstValue</name>
      <anchorfile>a00436.html</anchorfile>
      <anchor>a87da8ee147603f7932bfa6213935726d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::OneDimGridBase</name>
    <filename>a00439.html</filename>
    <templarg>T</templarg>
    <templarg>CT</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>a265a253612b46abed17c61b0a5e5ce30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CT</type>
      <name>Array_t</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>a0c4c24c90674f9742656ed48b669f2b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDimGridBase</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>abf5c4cd56e352188259183b74fbaaf3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual OneDimGridBase&lt; T, CT &gt; *</type>
      <name>makeClone</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>a25f5cd939e12420f63906dd24ae68efa</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGridTag</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>a6771f9b36e9908224cde9c0e0b86aa23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>currentIndex</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>aa2e27d8058dc139b411cbb091865963f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndex</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>aa9398759ade3d92667eec23f39c7d825</anchor>
      <arglist>(T r) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>a0534e977fc9fee424b3ef94f27a9ed61</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator()</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>adce494aef973cb47c29682e6e99dbc56</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>a8b36789e9ecc47ad57fc55d85015651d</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>ad0e4e848d2b4ddc9f50872e020ed3f2b</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>data</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>a92597b6ad54c8cebd6a987b7762eecfc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>data</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>a1699472936b80a88d3fc8096975d21b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dh</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>a70c844cb64b0ec4980e61ce307383c07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>r</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>a10ee6147f68ca4b16806cb245c35f59c</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dr</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>a221ae9ffd6bb93b43e736ebf908d4460</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>ab8e4e3e2a7bf18888b71bdf9dda0770b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rmin</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>ac7a918eb345c1d3a3d0220cead73a0d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rmax</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>aa68b7b02c2fe2c2ac61a5a9d0e41a6b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateFirstOrder</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>a4d1ae832cb83aa282ad5a4568728ac9a</anchor>
      <arglist>(T r, bool all)</arglist>
    </member>
    <member kind="function">
      <type>T1</type>
      <name>cubicInterpolateFirst</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>a4379083d09b5f7ad4a539c3113c3dc23</anchor>
      <arglist>(T1 a, T1 b, T1 a1, T1 b1)</arglist>
    </member>
    <member kind="function">
      <type>T1</type>
      <name>cubicInterpolateFirst</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>aa11973e6da61ffe868a5a46dbca283bb</anchor>
      <arglist>(T1 a, T1 b, T1 a1, T1 b1, T1 &amp;du, T1 &amp;d2u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateSecondOrder</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>a4da6e23dfe82972d99cf8a2ba74ee6d4</anchor>
      <arglist>(T r, bool all)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateForQuintic</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>a7ad3ae84bbd9c5be657ed157a4c826f8</anchor>
      <arglist>(T r, bool all)</arglist>
    </member>
    <member kind="function">
      <type>T1</type>
      <name>cubicInterpolateSecond</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>ab119a170117ae209b9e9ffb4a6844537</anchor>
      <arglist>(T1 y1, T1 y2, T1 d2y1, T1 d2y2)</arglist>
    </member>
    <member kind="function">
      <type>T1</type>
      <name>cubicInterpolateSecond</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>a09e7b20aba32437f1b73d10632828927</anchor>
      <arglist>(T1 y1, T1 y2, T1 d2y1, T1 d2y2, T &amp;du, T &amp;d2u)</arglist>
    </member>
    <member kind="function">
      <type>T1</type>
      <name>quinticInterpolate</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>a80ce83835a38c52ea3e3e90190bc9b4f</anchor>
      <arglist>(T1 a, T1 b, T1 c, T1 d, T1 e, T1 f)</arglist>
    </member>
    <member kind="function">
      <type>T1</type>
      <name>quinticInterpolate</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>a77ac57a2ab15c2fa8ebe155605c8b26a</anchor>
      <arglist>(T1 a, T1 b, T1 c, T1 d, T1 e, T1 f, T1 &amp;du, T1 &amp;d2u)</arglist>
    </member>
    <member kind="function">
      <type>T1</type>
      <name>quinticInterpolate</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>ab65f69b338d967be1b9d71e18a11b349</anchor>
      <arglist>(T1 a, T1 b, T1 c, T1 d, T1 e, T1 f, T1 &amp;du, T1 &amp;d2u, T1 &amp;d3u)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>locate</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>a34042c8824b5c96f104fc1bf41af54d6</anchor>
      <arglist>(T r)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>set</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>a13cc63f003132679d1f0a51c27d3e2fa</anchor>
      <arglist>(T ri, T rf, int n)=0</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Loc</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>a1936bcb1d6c50134c7fcb2b43c71cb43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>GridTag</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>ae378dc9e15b7ffb1e78c20d65ba0bf68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_points</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>abaef4f818f7fb7047b746a6cdd2bfdda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>lower_bound</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>a2f5e8169e1e0274917a8471e45adea03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>upper_bound</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>a31f48ec6ab9f34bc86739f0d610a8b52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Delta</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>ac583b62c5d23c6a086902f1494758825</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>dL</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>a135e4331be51c66d3408fa4de84e6346</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>dLinv</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>aef3ce1769bf0df750b914c275f95599b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>cL</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>ae6a9080d2848a4596b7c1ed613303afb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>cR</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>a99a6ecd266f5cbaa6f50e99d80ee216d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>p1</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>a5a083d37d64764f38584825fa5388133</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>p2</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>a0222d0eb9d0e908df271e3dace9749b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>q1</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>a258d1a5152ad7de64b7eba9a5fb159ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>q2</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>aaf105c74c6f3e07149b5a5a65fdf2b3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>dp1</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>af97654bb8157728386834e2724b232fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>dq1</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>a34278fdff2b85796cf2802feb173f49d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>dq2</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>a8ee80e6be08d9150c940b5a1fea422e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>d2p1</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>a18f9ea88acc44d89f0e82f2ed6722d09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>d2q1</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>a480ab90a1dfe36b9ce1aad1a7028cb02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>d2q2</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>adf092411c3183f8d9b9514a644f77416</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Array_t</type>
      <name>X</name>
      <anchorfile>a00439.html</anchorfile>
      <anchor>aaa183858e8fae33f14d80e9086d9f4be</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::LinearGrid</name>
    <filename>a00343.html</filename>
    <templarg>T</templarg>
    <templarg>CT</templarg>
    <base>qmcplusplus::OneDimGridBase</base>
    <member kind="function">
      <type>OneDimGridBase&lt; T, CT &gt; *</type>
      <name>makeClone</name>
      <anchorfile>a00343.html</anchorfile>
      <anchor>afe738afc08224f03dc419c23acb15379</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>locate</name>
      <anchorfile>a00343.html</anchorfile>
      <anchor>a838d757af0273607036ae8faa800a798</anchor>
      <arglist>(T r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00343.html</anchorfile>
      <anchor>abb7758518c0cc29f50b799b7144a2f22</anchor>
      <arglist>(T ri, T rf, int n)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>DeltaInv</name>
      <anchorfile>a00343.html</anchorfile>
      <anchor>abe68d96960c9a0dc473ca991dd437538</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::LogGrid</name>
    <filename>a00356.html</filename>
    <templarg>T</templarg>
    <templarg>CT</templarg>
    <base>qmcplusplus::OneDimGridBase</base>
    <member kind="function">
      <type>OneDimGridBase&lt; T, CT &gt; *</type>
      <name>makeClone</name>
      <anchorfile>a00356.html</anchorfile>
      <anchor>afe738afc08224f03dc419c23acb15379</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>locate</name>
      <anchorfile>a00356.html</anchorfile>
      <anchor>a838d757af0273607036ae8faa800a798</anchor>
      <arglist>(T r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00356.html</anchorfile>
      <anchor>abb7758518c0cc29f50b799b7144a2f22</anchor>
      <arglist>(T ri, T rf, int n)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>OneOverLogDelta</name>
      <anchorfile>a00356.html</anchorfile>
      <anchor>aff0319165c84fc9a70041a2f5a4015e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::LogGridZero</name>
    <filename>a00357.html</filename>
    <templarg>T</templarg>
    <templarg>CT</templarg>
    <base>qmcplusplus::OneDimGridBase</base>
    <member kind="function">
      <type>OneDimGridBase&lt; T, CT &gt; *</type>
      <name>makeClone</name>
      <anchorfile>a00357.html</anchorfile>
      <anchor>afe738afc08224f03dc419c23acb15379</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>locate</name>
      <anchorfile>a00357.html</anchorfile>
      <anchor>a838d757af0273607036ae8faa800a798</anchor>
      <arglist>(T r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00357.html</anchorfile>
      <anchor>abb7758518c0cc29f50b799b7144a2f22</anchor>
      <arglist>(T ri, T rf, int n)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>OneOverA</name>
      <anchorfile>a00357.html</anchorfile>
      <anchor>aaf091edb56f55ab9877c58900652d806</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>OneOverB</name>
      <anchorfile>a00357.html</anchorfile>
      <anchor>a250a9116652a4570f2cd7fdbc31f6cd4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::NumericalGrid</name>
    <filename>a00417.html</filename>
    <templarg>T</templarg>
    <templarg>CT</templarg>
    <base>qmcplusplus::OneDimGridBase</base>
    <member kind="function">
      <type></type>
      <name>NumericalGrid</name>
      <anchorfile>a00417.html</anchorfile>
      <anchor>ab86c1a7fa751e96f36146f51d9b0a0cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NumericalGrid</name>
      <anchorfile>a00417.html</anchorfile>
      <anchor>a05f4b7a59006848ea50bee057c05e654</anchor>
      <arglist>(const VA &amp;nv)</arglist>
    </member>
    <member kind="function">
      <type>OneDimGridBase&lt; T, CT &gt; *</type>
      <name>makeClone</name>
      <anchorfile>a00417.html</anchorfile>
      <anchor>afe738afc08224f03dc419c23acb15379</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>a00417.html</anchorfile>
      <anchor>a899796f997f70063d9bc32487ce18b23</anchor>
      <arglist>(IT g_first, IT g_last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00417.html</anchorfile>
      <anchor>a578be9c59132b8633a67a98c39318777</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>locate</name>
      <anchorfile>a00417.html</anchorfile>
      <anchor>a838d757af0273607036ae8faa800a798</anchor>
      <arglist>(T r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00417.html</anchorfile>
      <anchor>abb7758518c0cc29f50b799b7144a2f22</anchor>
      <arglist>(T ri, T rf, int n)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::OneDimGridFunctor</name>
    <filename>a00440.html</filename>
    <templarg>Td</templarg>
    <templarg>Tg</templarg>
    <templarg>CTd</templarg>
    <templarg>CTg</templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>splint</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a47e7333312de6bc49962728b483c86a2</anchor>
      <arglist>(point_type r, value_type &amp;du, value_type &amp;d2u)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>splint</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a99245c0d184c6dab792c050c0dfe4d67</anchor>
      <arglist>(point_type r)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>spline</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a1f3347da9c357f6fb90c902932b2203f</anchor>
      <arglist>(int imin, value_type yp1, int imax, value_type ypn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>spline</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a660f3bc156cd7a0deb24126cecc3b028</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::OneDimConstFunctor</name>
    <filename>a00435.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>qmcplusplus::OneDimGridFunctor</base>
    <member kind="typedef">
      <type>OneDimGridFunctor&lt; Td, Tg, CTd, CTg &gt;</type>
      <name>base_type</name>
      <anchorfile>a00435.html</anchorfile>
      <anchor>ae1940c2487902c0e9ce466b64111e871</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::value_type</type>
      <name>value_type</name>
      <anchorfile>a00435.html</anchorfile>
      <anchor>afabdc9b5f48b286e2d7676557d2b66ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::point_type</type>
      <name>point_type</name>
      <anchorfile>a00435.html</anchorfile>
      <anchor>a7ca7c963d77c804149f650c6c5f042ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::data_type</type>
      <name>data_type</name>
      <anchorfile>a00435.html</anchorfile>
      <anchor>a570c19a59289cf4c3849b780369d4a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::grid_type</type>
      <name>grid_type</name>
      <anchorfile>a00435.html</anchorfile>
      <anchor>ae0e66d7122800448c7f2e057226a7de3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDimConstFunctor</name>
      <anchorfile>a00435.html</anchorfile>
      <anchor>af7a8c2c6133426940b4f7cefabe434ec</anchor>
      <arglist>(grid_type *gt=0)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>splint</name>
      <anchorfile>a00435.html</anchorfile>
      <anchor>a93552547459b4867fb5b9dcb98602846</anchor>
      <arglist>(point_type r)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>splint</name>
      <anchorfile>a00435.html</anchorfile>
      <anchor>a2f72e955bf919c0d886fefaf7e25aa90</anchor>
      <arglist>(point_type r, value_type &amp;du, value_type &amp;d2u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>a00435.html</anchorfile>
      <anchor>ac6e408e3d5a8a585bcc41f42e9cb2abc</anchor>
      <arglist>(int imin, value_type yp1, int imax, value_type ypn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>a00435.html</anchorfile>
      <anchor>ab8f0efa6d82e1053a6cfc36e70b7c5fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Td</type>
      <name>ConstValue</name>
      <anchorfile>a00435.html</anchorfile>
      <anchor>abf7ce83431b7a9fc71a36c81ef107497</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::OneDimLinearSpline</name>
    <filename>a00441.html</filename>
    <templarg>Td</templarg>
    <templarg>Tg</templarg>
    <templarg>CTd</templarg>
    <templarg>CTg</templarg>
    <base>qmcplusplus::OneDimGridFunctor</base>
    <member kind="typedef">
      <type>OneDimGridFunctor&lt; Td, Tg, CTd, CTg &gt;</type>
      <name>base_type</name>
      <anchorfile>a00441.html</anchorfile>
      <anchor>ae1940c2487902c0e9ce466b64111e871</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::value_type</type>
      <name>value_type</name>
      <anchorfile>a00441.html</anchorfile>
      <anchor>afabdc9b5f48b286e2d7676557d2b66ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::point_type</type>
      <name>point_type</name>
      <anchorfile>a00441.html</anchorfile>
      <anchor>a7ca7c963d77c804149f650c6c5f042ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::data_type</type>
      <name>data_type</name>
      <anchorfile>a00441.html</anchorfile>
      <anchor>a570c19a59289cf4c3849b780369d4a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::grid_type</type>
      <name>grid_type</name>
      <anchorfile>a00441.html</anchorfile>
      <anchor>ae0e66d7122800448c7f2e057226a7de3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDimLinearSpline</name>
      <anchorfile>a00441.html</anchorfile>
      <anchor>a6954c02270804becf34273a5cbca9197</anchor>
      <arglist>(grid_type *gt=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDimLinearSpline</name>
      <anchorfile>a00441.html</anchorfile>
      <anchor>aa925733498a164424361fe3d39632e38</anchor>
      <arglist>(point_type ri, point_type rf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDimLinearSpline</name>
      <anchorfile>a00441.html</anchorfile>
      <anchor>ae95ba819d02d0b20fa8d694de0a379b2</anchor>
      <arglist>(grid_type *gt, const VV &amp;nv, bool pbc=false)</arglist>
    </member>
    <member kind="function">
      <type>OneDimLinearSpline&lt; Td, Tg, CTd, CTg &gt; *</type>
      <name>makeClone</name>
      <anchorfile>a00441.html</anchorfile>
      <anchor>aab71829ab0f7be6319dbcba672a46503</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>a00441.html</anchorfile>
      <anchor>af92c73d05f9ce5f1c4585e81b5af5233</anchor>
      <arglist>(IT d_first, IT d_last)</arglist>
    </member>
    <member kind="function">
      <type>point_type</type>
      <name>rmax</name>
      <anchorfile>a00441.html</anchorfile>
      <anchor>a86eb183c9f412134214c8aa17f1de03c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>splint</name>
      <anchorfile>a00441.html</anchorfile>
      <anchor>a93552547459b4867fb5b9dcb98602846</anchor>
      <arglist>(point_type r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>locate</name>
      <anchorfile>a00441.html</anchorfile>
      <anchor>ab874fdfec69daecf5261c4dacc40b609</anchor>
      <arglist>(point_type r, int &amp;k, point_type &amp;rfrac)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>f</name>
      <anchorfile>a00441.html</anchorfile>
      <anchor>a93e50fb001e4c9ea1803eb14812a26e4</anchor>
      <arglist>(int k, point_type rfrac)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>splint</name>
      <anchorfile>a00441.html</anchorfile>
      <anchor>a2f72e955bf919c0d886fefaf7e25aa90</anchor>
      <arglist>(point_type r, value_type &amp;du, value_type &amp;d2u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>a00441.html</anchorfile>
      <anchor>ac6e408e3d5a8a585bcc41f42e9cb2abc</anchor>
      <arglist>(int imin, value_type yp1, int imax, value_type ypn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>a00441.html</anchorfile>
      <anchor>ab8f0efa6d82e1053a6cfc36e70b7c5fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>First</name>
      <anchorfile>a00441.html</anchorfile>
      <anchor>a10a3fcd824154f6545a843a16ebf7abb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Last</name>
      <anchorfile>a00441.html</anchorfile>
      <anchor>a341cc2f3f0987c9467af85d3a7fe3754</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>ConstValue</name>
      <anchorfile>a00441.html</anchorfile>
      <anchor>a87da8ee147603f7932bfa6213935726d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>r_min</name>
      <anchorfile>a00441.html</anchorfile>
      <anchor>afaee0f0fbf24437517aaf0b78d99c938</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>r_max</name>
      <anchorfile>a00441.html</anchorfile>
      <anchor>a5a718801c8c5c4dca9dee4ab95901f1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>delta</name>
      <anchorfile>a00441.html</anchorfile>
      <anchor>a3639538798d9df93413236539fb2c5a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>delta_inv</name>
      <anchorfile>a00441.html</anchorfile>
      <anchor>a7c10b59bf8cb9959f2dd85f8ffcff60d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>data_type</type>
      <name>m_Y1</name>
      <anchorfile>a00441.html</anchorfile>
      <anchor>af9845fcea8d770dd8c2e07d77139bd35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::OneDimNumGridFunctor</name>
    <filename>a00443.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>NumericalGrid&lt; T &gt;</type>
      <name>GridType</name>
      <anchorfile>a00443.html</anchorfile>
      <anchor>aecdf17aa73aba87ab57589b636910243</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimCubicSpline&lt; T &gt;</type>
      <name>FuncType</name>
      <anchorfile>a00443.html</anchorfile>
      <anchor>ab6f7169e0ebc82d5141c10d81dabf9e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDimNumGridFunctor</name>
      <anchorfile>a00443.html</anchorfile>
      <anchor>a154119792beab3b4dd20e28cfcd73501</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>r</name>
      <anchorfile>a00443.html</anchorfile>
      <anchor>a10ee6147f68ca4b16806cb245c35f59c</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>a00443.html</anchorfile>
      <anchor>ad0e4e848d2b4ddc9f50872e020ed3f2b</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rmax</name>
      <anchorfile>a00443.html</anchorfile>
      <anchor>aa68b7b02c2fe2c2ac61a5a9d0e41a6b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rmin</name>
      <anchorfile>a00443.html</anchorfile>
      <anchor>ac7a918eb345c1d3a3d0220cead73a0d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>splint</name>
      <anchorfile>a00443.html</anchorfile>
      <anchor>a84299df33098eef9352e7de8740b15a1</anchor>
      <arglist>(T r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>a00443.html</anchorfile>
      <anchor>a37569c9ce7805b3886de2b4e952a30e5</anchor>
      <arglist>(int npoints, std::istream &amp;fin)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00443.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>GridType</type>
      <name>myGrid</name>
      <anchorfile>a00443.html</anchorfile>
      <anchor>a44e9d1d96039079fd97a37dd7dee0723</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FuncType</type>
      <name>myFunc</name>
      <anchorfile>a00443.html</anchorfile>
      <anchor>a1eceb1d28d9a67a2a595303eb3da3b70</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::OneDimQuinticSpline</name>
    <filename>a00444.html</filename>
    <templarg>Td</templarg>
    <templarg>Tg</templarg>
    <templarg>CTd</templarg>
    <templarg>CTg</templarg>
    <base>qmcplusplus::OneDimGridFunctor</base>
    <member kind="typedef">
      <type>OneDimGridFunctor&lt; Td, Tg, CTd, CTg &gt;</type>
      <name>base_type</name>
      <anchorfile>a00444.html</anchorfile>
      <anchor>ae1940c2487902c0e9ce466b64111e871</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::value_type</type>
      <name>value_type</name>
      <anchorfile>a00444.html</anchorfile>
      <anchor>afabdc9b5f48b286e2d7676557d2b66ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::point_type</type>
      <name>point_type</name>
      <anchorfile>a00444.html</anchorfile>
      <anchor>a7ca7c963d77c804149f650c6c5f042ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::data_type</type>
      <name>data_type</name>
      <anchorfile>a00444.html</anchorfile>
      <anchor>a570c19a59289cf4c3849b780369d4a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::grid_type</type>
      <name>grid_type</name>
      <anchorfile>a00444.html</anchorfile>
      <anchor>ae0e66d7122800448c7f2e057226a7de3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDimQuinticSpline</name>
      <anchorfile>a00444.html</anchorfile>
      <anchor>ab61a658999e8a2ceadef2fc8df8e3f73</anchor>
      <arglist>(grid_type *gt=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDimQuinticSpline</name>
      <anchorfile>a00444.html</anchorfile>
      <anchor>a4084f9f1893fd495e9d4f799170062da</anchor>
      <arglist>(grid_type *gt, const VV &amp;nv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00444.html</anchorfile>
      <anchor>a0fd9e3684494c8c3c4713a4834973157</anchor>
      <arglist>(Vector&lt; Td &gt; &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>OneDimQuinticSpline&lt; Td, Tg, CTd, CTg &gt; *</type>
      <name>makeClone</name>
      <anchorfile>a00444.html</anchorfile>
      <anchor>aa601f2e6fd9018e559a7c9628a67fda2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDimQuinticSpline</name>
      <anchorfile>a00444.html</anchorfile>
      <anchor>af65719f536f8158206c3bb25618c4b85</anchor>
      <arglist>(const OneDimQuinticSpline&lt; Td, Tg, CTd, CTg &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const OneDimQuinticSpline&lt; Td, Tg, CTd, CTg &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00444.html</anchorfile>
      <anchor>a7bf3a4a08762cd7d4d8bfc133689cc5f</anchor>
      <arglist>(const OneDimQuinticSpline&lt; Td, Tg, CTd, CTg &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shallow_copy</name>
      <anchorfile>a00444.html</anchorfile>
      <anchor>abc2428ac5587977895c093a8b0bd9200</anchor>
      <arglist>(const OneDimQuinticSpline&lt; Td, Tg, CTd, CTg &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>splint</name>
      <anchorfile>a00444.html</anchorfile>
      <anchor>a93552547459b4867fb5b9dcb98602846</anchor>
      <arglist>(point_type r)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>splint</name>
      <anchorfile>a00444.html</anchorfile>
      <anchor>a2f72e955bf919c0d886fefaf7e25aa90</anchor>
      <arglist>(point_type r, value_type &amp;du, value_type &amp;d2u)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>splint</name>
      <anchorfile>a00444.html</anchorfile>
      <anchor>ac262b504e1e341935b63037387dda777</anchor>
      <arglist>(point_type r, value_type &amp;du, value_type &amp;d2u, value_type &amp;d3u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>a00444.html</anchorfile>
      <anchor>ac6e408e3d5a8a585bcc41f42e9cb2abc</anchor>
      <arglist>(int imin, value_type yp1, int imax, value_type ypn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>a00444.html</anchorfile>
      <anchor>ab8f0efa6d82e1053a6cfc36e70b7c5fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>data_type</type>
      <name>m_Y2</name>
      <anchorfile>a00444.html</anchorfile>
      <anchor>a602b5b255c3ca6114989a2f117e8ff54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>data_type</type>
      <name>B</name>
      <anchorfile>a00444.html</anchorfile>
      <anchor>a8308fb210f0dcbc6402450e625bbc287</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>data_type</type>
      <name>D</name>
      <anchorfile>a00444.html</anchorfile>
      <anchor>a309322a187e1ff8e07ad09c55802124e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>data_type</type>
      <name>E</name>
      <anchorfile>a00444.html</anchorfile>
      <anchor>a99bb26a157d0ef1d7217420badf7207c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>data_type</type>
      <name>F</name>
      <anchorfile>a00444.html</anchorfile>
      <anchor>af7b17ff56698bbdc2687c905b95c1299</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>r_min</name>
      <anchorfile>a00444.html</anchorfile>
      <anchor>afaee0f0fbf24437517aaf0b78d99c938</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>r_max</name>
      <anchorfile>a00444.html</anchorfile>
      <anchor>a5a718801c8c5c4dca9dee4ab95901f1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>first_deriv</name>
      <anchorfile>a00444.html</anchorfile>
      <anchor>ad4f2f90e63da86f312e8aadeabb81b44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>last_deriv</name>
      <anchorfile>a00444.html</anchorfile>
      <anchor>ad5859b099eb5a5d795ea1f5446f8bbae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>ConstValue</name>
      <anchorfile>a00444.html</anchorfile>
      <anchor>a87da8ee147603f7932bfa6213935726d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::SymmetryGroup</name>
    <filename>a00598.html</filename>
    <member kind="function">
      <type></type>
      <name>SymmetryGroup</name>
      <anchorfile>a00598.html</anchorfile>
      <anchor>a25381a3dd36559af72333702fbf08cf1</anchor>
      <arglist>(string nm=&quot;invalid&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SymmetryGroup</name>
      <anchorfile>a00598.html</anchorfile>
      <anchor>a2cea4428409ff552e1b97d2a8d3acec5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOperator</name>
      <anchorfile>a00598.html</anchorfile>
      <anchor>a0fb82f30077b5ea75428a954cbd9754d</anchor>
      <arglist>(Matrix&lt; double &gt; op, vector&lt; double &gt; characterlist, int cls)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putClassCharacterTable</name>
      <anchorfile>a00598.html</anchorfile>
      <anchor>a14fb5a27131c63b885837a37c3c84cb6</anchor>
      <arglist>(vector&lt; vector&lt; double &gt; &gt; cct)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getsymmetryCharacter</name>
      <anchorfile>a00598.html</anchorfile>
      <anchor>a42c5621772fa75baf0a2545b26c15f96</anchor>
      <arglist>(int symmetryOperation, int irrep)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getclassCharacter</name>
      <anchorfile>a00598.html</anchorfile>
      <anchor>a6c5b6ef93d89061cc1547d89d918c59a</anchor>
      <arglist>(int clss, int irrep)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getClass</name>
      <anchorfile>a00598.html</anchorfile>
      <anchor>ae290749e4875ee1a77650dc4537f9e0e</anchor>
      <arglist>(int symmetryOperation)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSymmetriesSize</name>
      <anchorfile>a00598.html</anchorfile>
      <anchor>a65e858a78d020984a1c92a5f5b1130d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getClassesSize</name>
      <anchorfile>a00598.html</anchorfile>
      <anchor>aa758a0922d48df1c992a72a5108fa98f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TransformSinglePosition</name>
      <anchorfile>a00598.html</anchorfile>
      <anchor>a450f1e0b0dc41e3369df4e3c9c60dab9</anchor>
      <arglist>(ParticleSet::ParticlePos_t &amp;oldPos, int symNumber, int el=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TransformAllPositions</name>
      <anchorfile>a00598.html</anchorfile>
      <anchor>aa0f6fe0cd28c77a1ed26bcab4a5fc7f9</anchor>
      <arglist>(ParticleSet::ParticlePos_t &amp;oldPos, int symNumber)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; Matrix&lt; double &gt; &gt;</type>
      <name>SymOps</name>
      <anchorfile>a00598.html</anchorfile>
      <anchor>a0a007d1ec72ba1fc0755e62206459dde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; vector&lt; double &gt; &gt;</type>
      <name>Characters</name>
      <anchorfile>a00598.html</anchorfile>
      <anchor>a4a220acf01fdacfc47cbaa9ddc494ba2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; vector&lt; double &gt; &gt;</type>
      <name>CharacterTableByClass</name>
      <anchorfile>a00598.html</anchorfile>
      <anchor>a2611b0bc8405ef919311f4023272c537</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; int &gt;</type>
      <name>Classes</name>
      <anchorfile>a00598.html</anchorfile>
      <anchor>a294467c3ce7d9c8a7cf2cd2a1000d766</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nClasses</name>
      <anchorfile>a00598.html</anchorfile>
      <anchor>acc439fb2d0c89d161897fd07bc9551d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nSymmetries</name>
      <anchorfile>a00598.html</anchorfile>
      <anchor>a9d1b9780562614af533d08fb6634df4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>name</name>
      <anchorfile>a00598.html</anchorfile>
      <anchor>a8ccf841cb59e451791bcb2e1ac4f1edc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::SymmetryBuilder</name>
    <filename>a00597.html</filename>
    <member kind="function">
      <type></type>
      <name>SymmetryBuilder</name>
      <anchorfile>a00597.html</anchorfile>
      <anchor>ab66af105391841577ccc32c8b5d78e4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SymmetryBuilder</name>
      <anchorfile>a00597.html</anchorfile>
      <anchor>a96c9d348f0e1f0881e98a84d7d68c009</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SymmetryGroup *</type>
      <name>getSymmetryGroup</name>
      <anchorfile>a00597.html</anchorfile>
      <anchor>af9850e5eb832f0d60cdc635fca92e58a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>a00597.html</anchorfile>
      <anchor>a07db7cf4da452ea17f4f482c38b96ee9</anchor>
      <arglist>(xmlNodePtr q)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>buildI</name>
      <anchorfile>a00597.html</anchorfile>
      <anchor>a1a3b9b865c5a2bf33e63de686d9d9cb4</anchor>
      <arglist>(SymmetryGroup &amp;I, vector&lt; double &gt; ctable, int cls)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>buildC2Vx</name>
      <anchorfile>a00597.html</anchorfile>
      <anchor>a14fd296e7e731d9575888d2e4df541c5</anchor>
      <arglist>(SymmetryGroup &amp;C2, vector&lt; double &gt; ctable, int cls)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>buildC2Vy</name>
      <anchorfile>a00597.html</anchorfile>
      <anchor>aa5faf35b1386573a499a14e46d38b2b6</anchor>
      <arglist>(SymmetryGroup &amp;C2, vector&lt; double &gt; ctable, int cls)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>buildC2Vz</name>
      <anchorfile>a00597.html</anchorfile>
      <anchor>aa4def64c6a537881d91d1e4bab4a187e</anchor>
      <arglist>(SymmetryGroup &amp;C2, vector&lt; double &gt; ctable, int cls)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>buildD2Hx</name>
      <anchorfile>a00597.html</anchorfile>
      <anchor>ae854fcc72f9428988536b61fdd52f17e</anchor>
      <arglist>(SymmetryGroup &amp;C2, vector&lt; double &gt; ctable, int cls)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>buildD2Hy</name>
      <anchorfile>a00597.html</anchorfile>
      <anchor>a14afa13214fa50b455a138fd149ac64b</anchor>
      <arglist>(SymmetryGroup &amp;C2, vector&lt; double &gt; ctable, int cls)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>buildD2Hz</name>
      <anchorfile>a00597.html</anchorfile>
      <anchor>ad8b2e9841348370ed4cbd8c5b74c2c0b</anchor>
      <arglist>(SymmetryGroup &amp;C2, vector&lt; double &gt; ctable, int cls)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>buildD2H</name>
      <anchorfile>a00597.html</anchorfile>
      <anchor>a00a50419c105d5bbd520ca9accb35703</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>buildC2V</name>
      <anchorfile>a00597.html</anchorfile>
      <anchor>a85a1e29608b809be1cb183561a3f9b0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>buildByHand</name>
      <anchorfile>a00597.html</anchorfile>
      <anchor>a77f81167726f4ef68df7ee1174679b20</anchor>
      <arglist>(xmlNodePtr q)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SymmetryGroup</type>
      <name>symgrp</name>
      <anchorfile>a00597.html</anchorfile>
      <anchor>aa4be3d76e11a7fce89f8d76dc02a3096</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>symname</name>
      <anchorfile>a00597.html</anchorfile>
      <anchor>a15b6111bbd5aae7dcbb3a5ff2b67edfe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::XYZCubicGrid</name>
    <filename>a00643.html</filename>
    <templarg>T</templarg>
    <templarg>Tg</templarg>
    <member kind="typedef">
      <type>TinyVector&lt; T, 8 &gt;</type>
      <name>KnotType</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>ac897fda7148d87519cd9a08a36b6c80d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimGridBase&lt; Tg &gt;</type>
      <name>Grid1DType</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a33ee4aec585da1aa4bd2efdf23d9b7e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Tg</type>
      <name>p1</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>af4338235681c6b4963d8613d56733ce9</anchor>
      <arglist>(Tg t)</arglist>
    </member>
    <member kind="function">
      <type>Tg</type>
      <name>p2</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a8007d41ad6bbdfa3897c3088df14023a</anchor>
      <arglist>(Tg t)</arglist>
    </member>
    <member kind="function">
      <type>Tg</type>
      <name>q1</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a85cb64980c4f7a08a407be36d02fa32d</anchor>
      <arglist>(Tg t)</arglist>
    </member>
    <member kind="function">
      <type>Tg</type>
      <name>q2</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a0d79e4ff922244090dcdaa3cc7752a4f</anchor>
      <arglist>(Tg t)</arglist>
    </member>
    <member kind="function">
      <type>Tg</type>
      <name>dp1</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>ad749ae119d2489d85eb1f9c79d474125</anchor>
      <arglist>(Tg t)</arglist>
    </member>
    <member kind="function">
      <type>Tg</type>
      <name>dq1</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>ad2b6529ccc969f0e75b9e4a796524ea6</anchor>
      <arglist>(Tg t)</arglist>
    </member>
    <member kind="function">
      <type>Tg</type>
      <name>dp2</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a69762564d5beb5bd9bee3ffcc19843a1</anchor>
      <arglist>(Tg t)</arglist>
    </member>
    <member kind="function">
      <type>Tg</type>
      <name>dq2</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>ae67a332e52f901897bf7c38754d809f0</anchor>
      <arglist>(Tg t)</arglist>
    </member>
    <member kind="function">
      <type>Tg</type>
      <name>d2p1</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>afa3917e41ec784f80a3a90381f8e8706</anchor>
      <arglist>(Tg t)</arglist>
    </member>
    <member kind="function">
      <type>Tg</type>
      <name>d2q1</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>ab1c2491912cc28da25e075ad0af9814f</anchor>
      <arglist>(Tg t)</arglist>
    </member>
    <member kind="function">
      <type>Tg</type>
      <name>d2p2</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>ac59c9458b577d2148f211a70f1761bb2</anchor>
      <arglist>(Tg t)</arglist>
    </member>
    <member kind="function">
      <type>Tg</type>
      <name>d2q2</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a18b74f414fef923f2145fe9af612f0bc</anchor>
      <arglist>(Tg t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XYZCubicGrid</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a6fdb5c8516ae4e583487e774555871f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XYZCubicGrid</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a5c391a85bd00109ab57896f29475375d</anchor>
      <arglist>(Grid1DType *xgrid, Grid1DType *ygrid, Grid1DType *zgrid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGridXYZ</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>ac457ebede547ad76c5a6a9ff90ea2a35</anchor>
      <arglist>(Grid1DType *xgrid, Grid1DType *ygrid, Grid1DType *zgrid)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>af4b57d21919c42d55af03391f91a1c08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBC</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a1024a95be7377a40d62a4fe4f1da97ff</anchor>
      <arglist>(bool pbc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a449e5f5f4415fb19fa30be37d6ed8619</anchor>
      <arglist>(int i, int j, int k) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>locate</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a9cf074ac98c2c469a944629e8355c8e4</anchor>
      <arglist>(Tg x, Tg y, Tg z, bool updateall)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>acceec1dacf2c8c9968a2d62cca4f3709</anchor>
      <arglist>(bool all)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>af5d1a61a0fbdbdd6f4790b6ed4a278c5</anchor>
      <arglist>(const KnotType &amp;f000, const KnotType &amp;f001, const KnotType &amp;f010, const KnotType &amp;f011, const KnotType &amp;f100, const KnotType &amp;f101, const KnotType &amp;f110, const KnotType &amp;f111)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateAll</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a76ea8b53d156b582c01ea8d27d21e45d</anchor>
      <arglist>(const KnotType &amp;f000, const KnotType &amp;f001, const KnotType &amp;f010, const KnotType &amp;f011, const KnotType &amp;f100, const KnotType &amp;f101, const KnotType &amp;f110, const KnotType &amp;f111)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>OwnGrid</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>ae5a3ec93d2007c04f6dbc0bd7a11e793</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Periodic</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>aebdb003fba67937049b59b527119091c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Loc</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a1936bcb1d6c50134c7fcb2b43c71cb43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ix</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a61990b7f5388ef0010c75a5d80f58da9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>iy</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a50a0ba985d76ed4ef72a025ada75a5f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>iz</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a7a38348d8cc80d687ae1c4bad6d4da57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nX</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a9e82549fce3522a58dc1abd031ba34a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nY</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>ad2bac0afb554b0a8f6f5d16086c273e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nZ</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a9a1b8bfc82c10749a53eca873a85266e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>x_min</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a49933294f2a418bad3ea16b7055d903e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>x_max</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>aad59033f7d9b0be17995e4639f03dfdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>LengthX</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a7bff421b0236b3731a5d0b7eedfa86f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>OneOverLx</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a9c1002bcf76a1f6f456a3c0b3dc97984</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>y_min</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a77c71b032b7c3c76992a27f75b3ecad4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>y_max</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>afb457709fbc4c849e5bb1b4dc31630ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>LengthY</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>ad015e05cecc8f94137df3af04d45a8d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>OneOverLy</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>aa6a65831d4d3ae4992e46435a82ff491</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>z_min</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>ab8805d67310cc1310686e71e16a6b90b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>z_max</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a765b9c62e583db8e77b0f0c12505dc4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>LengthZ</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a52b2d6b4a7c5005534208e5852357ad3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>OneOverLz</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>ac346e13c390e9e96405194e6878ed1ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>h</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a627ff39452330029ef6a27dd1f5776ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>k</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a850ef652174b66a5a5f7be2e088aa3b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>l</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a87f93f0fd430f56346d2571e058628bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>hinv</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a706f0d3f323b50ed094c84ded2ad5bab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>kinv</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>ae6daeddb118f17bc833cea4871229b0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>linv</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a7e26862866837eebfbfdb1c3b8db6240</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>u</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a1a7a5328b9aef339aa1fdbc5c3fdf0c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>v</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a9e1f048757d8742eccb791f7218d6340</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>w</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a891ebb859c013d26985c88e6174eb5b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>a0</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a0d9a2d10aefe7edfbbe910bc687f5a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>a1</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a9ba0d92473a22b1f01740369142bfe4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>a2</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a7c185a1d323506ccb177dbe46e983541</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>a3</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a30de01d48b679c441faf3dbb8c8c0aa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>b0</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a4c095a9cecb72856448a184f8630da6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>b1</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>ab5719006173c66673129f20f8abd1eb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>b2</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>ad034b5c53dcc11f811407e1ea81f27be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>b3</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a082aff01a8bedb048c417fab1baf7919</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>c0</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a68656782eec6fd5004298f296dd2b499</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>c1</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a742a678a170534e17270c8ad20bc8fb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>c2</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>ab19de5f08932910e125ed96c3f33b116</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>c3</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a9997d8414051fab61f4b27fb1e27ccdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>da0</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a4d5f32c7897f550361aa7b81b3763447</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>da1</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a5338bc0e244086f744284d88eb23a00f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>da2</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a4a2babf56137b0df1b0f3fdb66c18a63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>da3</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a6be2ede6a9fd9f56cd041cf204a1cb33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>db0</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>af830d919003a43c4e193c53ac8dac82f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>db1</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a81ac9ad5634217a9184ceb05ca05dc87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>db2</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a02f3c8fb6f645a9c488865951b54e2cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>db3</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a76b6dfe2bd065ff22c4895ad83b57ad7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>dc0</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a1d373b82e81e77c6eb50dd9bdb910c32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>dc1</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a4a02c0a859459b999311fb6106b82561</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>dc2</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>aa597932e0a5e940df2ebc35fa1296744</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>dc3</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>ac18d5c9313981d31de8fe0e4cf8fdd9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>d2a0</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>aecb064a69552cf369d5d5c3d114c5d58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>d2a1</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>aa6f6dda52d6bde8fd1f221f7ed77337a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>d2a2</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a4a14fb6424bdeaf110d27521c81e2852</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>d2a3</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a8d6e417a1e68f94b1caf80e163293a67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>d2b0</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a0fcc641cfcad28ef0a22be5bce26b61c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>d2b1</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>ab1d0f688413caf79a06c94709b3240c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>d2b2</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a55d4b7244bbb86266b52df82cb31d996</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>d2b3</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>aad0447132ed3d3f0890346675f0f0afa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>d2c0</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a9f098f0ba543d332a5f04fa45ee33b04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>d2c1</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a087a64261a5d282c267d6e82f0b60cd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>d2c2</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a40b129c4ebc2cf61f2e3cdc8c866b34f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>d2c3</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>adc2301665161f868c326fd9c1249b63b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>val</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a31844d8ef66fe7930f88cc30cf53d08c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>gradfX</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a453d5529379914c191f1f6b00beb4417</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>gradfY</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>afa011af52a6bcfb7cb3273ce7ed88cf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>gradfZ</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a5b6f46202acf3b7a59157e7d89f82280</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>lapf</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a82cdeaa78038784c85b1047d70ade1f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Grid1DType *</type>
      <name>gridX</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a52dec4c2247f05437c6296e0be691f52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Grid1DType *</type>
      <name>gridY</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>a2990338bd0fdfe7d4608e7afcdcab962</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Grid1DType *</type>
      <name>gridZ</name>
      <anchorfile>a00643.html</anchorfile>
      <anchor>ac9a76e675ff55a7e033d4f9d35ee7663</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::AFMSPOBuilder</name>
    <filename>a00003.html</filename>
    <base>qmcplusplus::BasisSetBuilder</base>
    <member kind="function">
      <type></type>
      <name>AFMSPOBuilder</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>ab692ba3db5fa01c6e6bdd3fbc4f8d532</anchor>
      <arglist>(ParticleSet &amp;p, PtclPoolType &amp;psets, xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>SPOSetBase *</type>
      <name>createSPOSet</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>aace31b9b913d282640ce894186ba6ca4</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasisSetBuilder</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>a7bdb09ba456e3cbfdd0abe281eafd97d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BasisSetBuilder</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>a633c2a127a28c845126637f8851098c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>map&lt; string, ParticleSet * &gt;</type>
      <name>PtclPoolType</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a0878154607cbe00d8a425a977401e290</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>map&lt; string, SPOSetBase * &gt;</type>
      <name>SPOPoolType</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a0561f9826d935f6d6f37060db8ca66a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleSet *</type>
      <name>targetPtcl</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a38de935921735223bc6966d5b2d06efa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; string, SPOSetBase * &gt;</type>
      <name>SPOPool_t</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>a67f9d889a11477dbe0f169c8939c3fdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BasisSetBase&lt; RealType &gt; *</type>
      <name>myBasisSet</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>a9820981f59dfe7b783339ef29632d9d5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::AFMSPOSet</name>
    <filename>a00004.html</filename>
    <base>qmcplusplus::SPOSetBase</base>
    <member kind="function">
      <type></type>
      <name>AFMSPOSet</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>aede87c22b424fd2875543459bd855433</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AFMSPOSet</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>ae73912b7b7072a8aeab19186b5c85ea0</anchor>
      <arglist>(int num_orbs, SPOSetBase *gsOrbs, SPOSetBase *basisOrbs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setpm</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>adbd6eb733fc6cc45b0e150222dad96fe</anchor>
      <arglist>(int x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTheta</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>ae1dc4b438c1b4b88cfd79a1eb5331a1a</anchor>
      <arglist>(RealType x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrbitalSetSize</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>abe2573f29355b07956892dc6bd7f12ca</anchor>
      <arglist>(int norbs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>aa1f5fd5d7265225dc6c8e2efa2036111</anchor>
      <arglist>(xmlNodePtr node, SPOPool_t &amp;spo_pool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>aee70ac47d82bb68d8ceceead7c033fe2</anchor>
      <arglist>(const opt_variables_type &amp;optvars)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateDerivatives</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a82d71c91805526087a6de92b8a99e911</anchor>
      <arglist>(ParticleSet &amp;P, int iat, const opt_variables_type &amp;active, ValueMatrix_t &amp;d_phi, ValueMatrix_t &amp;d_lapl_phi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a55614decceadf408ddc308827faada58</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>ae85c8d3c691c6837e7715f32f33b07ea</anchor>
      <arglist>(const ParticleSet &amp;P, const PosType &amp;r, vector&lt; RealType &gt; &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a8d03182606ebdc99cb116d189b732f02</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi, GradVector_t &amp;dpsi, ValueVector_t &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a46be445602815c4c7ab824bf189d2b7b</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi, GradVector_t &amp;dpsi, HessVector_t &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>ae91b5a23fbd5208cf10757eea50386c8</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, ValueMatrix_t &amp;d2logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a625375c35e3d6917247acd1d76008768</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, HessMatrix_t &amp;grad_grad_logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>aa8c87ff012f3f2143027314b8024007f</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, HessMatrix_t &amp;grad_grad_logdet, GGGMatrix_t &amp;grad_grad_grad_logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateForDeriv</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>ab418670127757bea27370089d44c7922</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;val, GradMatrix_t &amp;grad, ValueMatrix_t &amp;lapl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a578be9c59132b8633a67a98c39318777</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>SPOSetBase *</type>
      <name>makeClone</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a554da28f08e243f4b89f64b2842c8749</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SPOSetBase</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>a4d1be280629afa06d29bc6445a710ae4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SPOSetBase</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>a260fb30b49ff3156599457a0674bd3fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOrbitalSetSize</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>a3a7697df4ea5246ef6b429e573bf0698</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBasisSetSize</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>a8c9f5712bbf29d7d8632144cfb9908eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setIdentity</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>a662efe5cccd3a4a344eb3c63a29b0b41</anchor>
      <arglist>(bool useIdentity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkObject</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>a88c54be4a58e3d967e7c8a809bb09b73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>evaluate</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>a3d375d651e896681aeb7ad7b931d389f</anchor>
      <arglist>(const ParticleSet &amp;P, PosType &amp;r, ValueVector_t &amp;psi)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>evaluate</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>a8460601757636d91c960472fbe762f1c</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, ValueMatrix_t &amp;d2logdet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>evaluate</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>a07c1a674284e046abca37a81f2ef7214</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, HessMatrix_t &amp;grad_grad_logdet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>evaluate</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>ae757e92cb2a09a1092c0029ee63ddad0</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, HessMatrix_t &amp;grad_grad_logdet, GGGMatrix_t &amp;grad_grad_grad_logdet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>evaluateThirdDeriv</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>ae6b2fa72296c2ae7f0e80f52efe320f4</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, GGGMatrix_t &amp;grad_grad_grad_logdet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>evaluateGradSource</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>adc408db89c79161af75eaf080c888b04</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, const ParticleSet &amp;source, int iat_src, GradMatrix_t &amp;gradphi)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>evaluateGradSource</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>a71ebae3626eca693a9731ac516a61db6</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, const ParticleSet &amp;source, int iat_src, GradMatrix_t &amp;grad_phi, HessMatrix_t &amp;grad_grad_phi, GradMatrix_t &amp;grad_lapl_phi)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>evaluateBasis</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>a533b54abf3aa95e6530759912f14c3fe</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;basis_val, GradMatrix_t &amp;basis_grad, ValueMatrix_t &amp;basis_lapl)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyParamsFromMatrix</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>a366ab15494354c5ee88935ae91b6c3bd</anchor>
      <arglist>(const opt_variables_type &amp;active, const ValueMatrix_t &amp;mat, vector&lt; RealType &gt; &amp;destVec)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PosType</type>
      <name>get_k</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>aad41de1c8779063e07397ad617ca3ee7</anchor>
      <arglist>(int orb)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>transformSPOSet</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>a15122a04eb346b6db427d9f07a8bda34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>N</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a7722c8ecbb62d99aee7ce68b1752f337</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>pm</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a56512c1978f0506986901ec9dd30867b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>theta</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a608f33221e9d7c2986ac12d35124bebb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>costheta</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a192317c9d55b62112094c09835fe7ecd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>sintheta</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a63a9369179e0f9a96a1ab70f72d3dc0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>dcostheta</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>ada42637b4b1fb8c0974e62095f467108</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>dsintheta</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a412edb0a65c925176aa4cad00b818755</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SPOSetBase *</type>
      <name>GSOrbitals</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a75b7134b225aa3bc4788416d07d8cd3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SPOSetBase *</type>
      <name>BasisOrbitals</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a0e3db831ace5bd4165fa4e6a71fb02d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueVector_t</type>
      <name>GSVal</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a08ae54d808a9a7bc3e527ac7a795fca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueVector_t</type>
      <name>BasisVal</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a018c95da56950c8cd2ed640eb4efb18b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueVector_t</type>
      <name>GSLapl</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a815dd23d91cbc32668e6baadde22d472</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueVector_t</type>
      <name>BasisLapl</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a3ecc0f97ae16248f6ed587c586160f66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GradVector_t</type>
      <name>GSGrad</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>ab4de051f8ea453e6f2eb3057e5a5eaab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GradVector_t</type>
      <name>BasisGrad</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>aa5e1bdf63324896e46beff5bd2e4e5bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueMatrix_t</type>
      <name>GSValMatrix</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a035a7cab966da544bf19b04cee07f02c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueMatrix_t</type>
      <name>BasisValMatrix</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a61de47a637e047496507e2c6dde43b7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueMatrix_t</type>
      <name>GSLaplMatrix</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a94ae53a71f43444f3b1188ad81c88c43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueMatrix_t</type>
      <name>BasisLaplMatrix</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>ad95dcdbb44518a883168766094c9d0d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueMatrix_t</type>
      <name>GradTmpSrc</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a2c4b8642034ef00197fef2594720dd7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueMatrix_t</type>
      <name>GradTmpDest</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a4e503baf1944c904c7ed82e9ccb6783a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GradMatrix_t</type>
      <name>GSGradMatrix</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>add00bd89e05a1ef787dc4108d545b3fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GradMatrix_t</type>
      <name>BasisGradMatrix</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a186fe3c73a5f8f08354b9dab67a129c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; ValueType &gt;::IndexVector_t</type>
      <name>IndexVector_t</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>ab2ca84294934f0eb4b729108305264ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; ValueType &gt;::ValueVector_t</type>
      <name>ValueVector_t</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>ad0172165062017a41c68bc07b92e7d3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; ValueType &gt;::ValueMatrix_t</type>
      <name>ValueMatrix_t</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>a2de3c67ba53d8f2ba51b45df13c5d41a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; ValueType &gt;::GradVector_t</type>
      <name>GradVector_t</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>a208653b5ccf74a237f5a1a786ee150ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; ValueType &gt;::GradMatrix_t</type>
      <name>GradMatrix_t</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>aa5070ce8df7d576c601174859f54b7ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; ValueType &gt;::HessVector_t</type>
      <name>HessVector_t</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>a8b0d80f17cb4a7fb2210260d85b2ce25</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; ValueType &gt;::HessMatrix_t</type>
      <name>HessMatrix_t</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>a4da43e29ce05e52087b1edf32ffe2976</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; ValueType &gt;::HessType</type>
      <name>HessType</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>a9f477d9122d5e76aacaa19792fe3ec54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array&lt; HessType, OHMMS_DIM &gt;</type>
      <name>HessArray_t</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>a76426a620609cd204b05108493468483</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; ValueType &gt;::GradHessType</type>
      <name>GGGType</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>a8a10d1f1ff88bb4011b172a0982872a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; ValueType &gt;::GradHessVector_t</type>
      <name>GGGVector_t</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>aca7462d0d0170239102a0fda58a7d719</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; ValueType &gt;::GradHessMatrix_t</type>
      <name>GGGMatrix_t</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>af69db66a22926f44d1848aa59c31c868</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleSet::Walker_t</type>
      <name>Walker_t</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>abbc77657579efa0cd83de2b985f92476</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; string, SPOSetBase * &gt;</type>
      <name>SPOPool_t</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>a67f9d889a11477dbe0f169c8939c3fdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Identity</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>ac5bec1b2ab1415cd152054618dba4c38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Optimizable</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>a92c20354cdb1900a8f7605ee9f1d70cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>ionDerivs</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>a93068dff7960e7522fdff98b8a44a11a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>TotalOrbitalSize</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>a8ba35317084a36eab995c4d10607a745</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>OrbitalSetSize</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>a64811667106af9c115bbdd3ca195e619</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>BasisSetSize</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>acadf2ecf82f07d9d752878fe2db483c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>ActivePtcl</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>aada03bd100177a3173009a08b1cce851</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>t_logpsi</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>a787efc14db14963101b4033c0a11ada0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>C</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>afc0d4ae51d2e1e64afef5aa941aa086c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; RealType &gt;</type>
      <name>Occ</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>a43ab7d453dbf058f5858e265f4418d6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>opt_variables_type</type>
      <name>myVars</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>aee7ccfd07712b8606ef965967b67e860</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>className</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>a11b4f5cbb5b79184b122f368284a61c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>objectName</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>a38f54a19c82889a0ec55c26512c7b8c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>putOccupation</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>a35a4aa2e914e0a4944d290c18961ef1b</anchor>
      <arglist>(xmlNodePtr occ_ptr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>putFromXML</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>a300d83e137acf1ac3c7445777b117391</anchor>
      <arglist>(xmlNodePtr coeff_ptr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>putFromH5</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>a02415dbd5361b90be50464637e4cb5b7</anchor>
      <arglist>(const char *fname, xmlNodePtr coeff_ptr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::AGPDeterminant</name>
    <filename>a00005.html</filename>
    <base>qmcplusplus::OrbitalBase</base>
    <member kind="typedef">
      <type>BasisSetBase&lt; RealType &gt;</type>
      <name>BasisSetType</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>ac49f2b96cf5fe756621e3456a3a906fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BasisSetType::IndexVector_t</type>
      <name>IndexVector_t</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>afb1c7f4a00d511cd08ec81ff5ce81fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BasisSetType::ValueVector_t</type>
      <name>ValueVector_t</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>aebd0db5ba03258273fced1e7a2c3a572</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BasisSetType::ValueMatrix_t</type>
      <name>ValueMatrix_t</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a149c1e7db4c5ac1b2782ba3d007e6253</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BasisSetType::GradVector_t</type>
      <name>GradVector_t</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a9ebb2430871d18bf107dfb19127ea23f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BasisSetType::GradMatrix_t</type>
      <name>GradMatrix_t</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a69ff489ce4bc441443e358e4e35aac97</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AGPDeterminant</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a3fc70dc181af0691ab7dcc23fcd37c22</anchor>
      <arglist>(BasisSetType *bs=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AGPDeterminant</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a575fc1820b22458e5ad34fc6195dc7e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportStatus</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a0a144256f92f2fa9e13e840bc30baef7</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a72de4be438f3d3cded578d0dd9620ea7</anchor>
      <arglist>(int nup, int ndown)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>registerData</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a1d5dffe095ac7ae274ad6e3041516c74</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>updateBuffer</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a57edbae9480adf044112ac36abfe4e0b</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf, bool fromscratch=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a5261ed49b5195980c91c0024b860fdb2</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dumpToBuffer</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>ab1a527695dc08648c2e975fddddcb117</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dumpFromBuffer</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>aa423c75ff4e6a458c49a5c4567a89df0</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>af72ccf3110c58d932793f5272d158cd2</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>ad4ac6ecacd80d95941026660c9799fd0</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ratioUp</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a218a614e6f518175df0131a115edff25</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ratioDown</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>af0e3c55b53504b85b037258f0928dd72</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>logRatio</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>af6fa7f27fa33e00e9097169c82dff776</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>af79a1f1637e80a729043600a7656054d</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a4fad6e178271bda6f6e70a5965041472</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>aeba37f5a7f9e1c209be41e1f8c2d316d</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluateLog</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>adbc390ce86beed4b790fa0878c7be78a</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeByWalkers</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>ac3a8b26e330a0ad5a0c55b71a12c4a84</anchor>
      <arglist>(int nwalkers)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluateLog</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a39920a87acab8d83f83d29733aaabd35</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a73560ed2b29d4e00896f262459f9e842</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>OrbitalBasePtr</type>
      <name>makeClone</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>ab68f5027a5eee70c7e4e130cfa9aab1b</anchor>
      <arglist>(ParticleSet &amp;tqp) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateLogAndStore</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a9e71788b87df26e5b240436267cf60aa</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="variable">
      <type>BasisSetType *</type>
      <name>GeminalBasis</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a5a63be4a83a645af9577d9d1adf9914d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumPtcls</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>ac696dd2e9e407dabdbda0ce636a569e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Nup</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a40e24f1d503ee273d65d4285094ffc78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Ndown</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a15c481daa68383e1d1a50a11c15f72c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>BasisSize</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a2180d68e324e5f0dfa3def364536c201</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>WorkingIndex</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a023f5923e42795109afe51badbe1145e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>Lambda</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a1d6b103707141efd54a51bc04256a76c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>LambdaUP</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a2c748d838b9c7214f53ada8a207ecb31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>psiM</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a5873b1ad34c9f4331d317667b4f3401d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>psiM_temp</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>ad3f6fcda3950d1b059bcde59ef3327be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>phiT</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>aada01e2a425f47f6a9344200a1a31c85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>psiMinv</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a7c5bbacf96f042d861e341ea0b3c6e5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradMatrix_t</type>
      <name>dY</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>aa378fda5e9177a82b4b61f1bbac34b7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>d2Y</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>afea936632cc49cfdbb696b25d1498794</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradMatrix_t</type>
      <name>dpsiU</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a680b8dd23c576371be138042630589e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradMatrix_t</type>
      <name>dpsiD</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>ac8bfe6bd046792498c4dcdde9e44d537</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>d2psiU</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>ac67ae0e2b58dd6a9d18f885c77c98f32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>d2psiD</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a4d2e6e719336fb85bb7aecd01485b335</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueVector_t</type>
      <name>phiTv</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a689580e7cb79d7984d9391f937b0ed2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueVector_t</type>
      <name>psiU</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>ae89d40100b7649e8e0442325513c1b2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueVector_t</type>
      <name>psiD</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a8deb44a49d5bddc04cb868ced7aeaa44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradVector_t</type>
      <name>dpsiUv</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>ac69853afb8e8fb9537515321f9667700</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradVector_t</type>
      <name>dpsiDv</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a2999089faa0d19219db438c583c25f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueVector_t</type>
      <name>d2psiUv</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a92a39375015224cb382902626ddcc589</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueVector_t</type>
      <name>d2psiDv</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a6087f3a98fbc005ed3a7407946580e49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueVector_t</type>
      <name>workV1</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a3da54446100cfd9aa48060200fc55a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueVector_t</type>
      <name>workV2</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>ab1693c6edd4fdc1d6b714334da5c73d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueVector_t</type>
      <name>WorkSpace</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a476ddc21ec0d9e40df586e29bad21194</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexVector_t</type>
      <name>Pivot</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a0138d5ca66bfc9c3ccb23233e90edd07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>curRatio</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a8cca87d6e19b1273db53fa057c46f4e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>cumRatio</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>ae3ad3302b1f4246675adf6d4b3bbf0fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BasisSetType::ValueType *</type>
      <name>FirstAddressOfdVU</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a8037473b4638bd56c33fa5e3c66b8175</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BasisSetType::ValueType *</type>
      <name>LastAddressOfdVU</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>acc94c8021bd44adf4ec37c8b437ca172</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BasisSetType::ValueType *</type>
      <name>FirstAddressOfdVD</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a7014ccd067f2add9487e5ccb379c4132</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BasisSetType::ValueType *</type>
      <name>LastAddressOfdVD</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a9275220b1ec6e901b24c35add74158b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType *</type>
      <name>FirstAddressOfG</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>aeae6622a6b99c85ea788a61e69f247ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType *</type>
      <name>LastAddressOfG</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>af271fc71c124dccd4a3b7c0fee8c6a76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BasisSetType::ValueType *</type>
      <name>FirstAddressOfdY</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a9b4cd7df68ec6073c883ddb23b3c387e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BasisSetType::ValueType *</type>
      <name>LastAddressOfdY</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>abbf0ba145bdf36819983131fa6d54111</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>myG</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>aa0dba9d4f5bcf53c9acb35826f95a05e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>myG_temp</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a855362d0cf4bade046252012629c970f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleLaplacian_t</type>
      <name>myL</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a44658be2f16a467db55191123408425f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleLaplacian_t</type>
      <name>myL_temp</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a606558266a45e3424bb76c10f28cbc8a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::AtomicOrbitalTraits&lt; double &gt;</name>
    <filename>a00021.html</filename>
    <member kind="typedef">
      <type>multi_UBspline_1d_d</type>
      <name>SplineType</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a6a9e32a6e75fac97c1ee064bae409231</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::AtomicOrbitalTraits&lt; complex&lt; double &gt; &gt;</name>
    <filename>a00020.html</filename>
    <member kind="typedef">
      <type>multi_UBspline_1d_z</type>
      <name>SplineType</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a880d967594b6fad6b3204c506a6163d6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::AtomicOrbital</name>
    <filename>a00018.html</filename>
    <templarg>StorageType</templarg>
    <member kind="typedef">
      <type>QMCTraits::PosType</type>
      <name>PosType</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a3fbed5cd2013a62776dac11862da2003</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>QMCTraits::RealType</type>
      <name>RealType</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a4228079a723a75bfce1ee275d2d9ad39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CrystalLattice&lt; RealType, OHMMS_DIM &gt;</type>
      <name>UnitCellType</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a30fdd55957d807d8a168610ad3341d5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; double &gt;</type>
      <name>RealValueVector_t</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a5ecacb3f0d061af7353dd0bc5f153fcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; TinyVector&lt; double, OHMMS_DIM &gt; &gt;</type>
      <name>RealGradVector_t</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>ab8bc93cb198f52c2e547426e4542dc24</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; complex&lt; double &gt; &gt;</type>
      <name>ComplexValueVector_t</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a65d180276e9da93ee5f66e91c33c9a9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; TinyVector&lt; complex&lt; double &gt;, OHMMS_DIM &gt; &gt;</type>
      <name>ComplexGradVector_t</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>af46b7996328d84a03b9d704286d319bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; Tensor&lt; double, OHMMS_DIM &gt; &gt;</type>
      <name>RealHessVector_t</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a880dbda4f44bf67bfae3a74f367136d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; Tensor&lt; complex&lt; double &gt;, OHMMS_DIM &gt; &gt;</type>
      <name>ComplexHessVector_t</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>ae448995498a16111ece9f83354b03562</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AtomicOrbitalTraits&lt; StorageType &gt;::SplineType</type>
      <name>SplineType</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>ad2ffc8d5f033484f3ed08ac75a454432</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_pos</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a07f1f61a457cf738ebb35c343c24e4ac</anchor>
      <arglist>(PosType pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_lmax</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>af8b2dda215413147fc630ec2f0078aa2</anchor>
      <arglist>(int lmax)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_cutoff</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a5c1fa67d4eddf53586b2c8b58a897231</anchor>
      <arglist>(RealType cutoff)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_spline</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>afc3cbf3c32fed16560054fdbcd7c279a</anchor>
      <arglist>(RealType radius, int points)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_polynomial</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>ad157b1beb7fefda489e8a503db98bd85</anchor>
      <arglist>(RealType radius, int order)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_num_bands</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a8cccdf67ba94c8b49a3d64cd13b63191</anchor>
      <arglist>(int num_bands)</arglist>
    </member>
    <member kind="function">
      <type>SplineType *</type>
      <name>get_radial_spline</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a9113839d7c6fd5e7be46ca99fc05be37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; StorageType, 3 &gt; &amp;</type>
      <name>get_poly_coefs</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a9db4c590b1d887bc27a39268836ee59f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerTimers</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a43dda6f0760a96661a60a054c6efb017</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocate</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>acaefe811b78a2fdc4a0dba0c4029c3ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_band</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>aaed53b34cfc3853f864455f5208df5ab</anchor>
      <arglist>(int band, Array&lt; complex&lt; double &gt;, 2 &gt; &amp;spline_data, Array&lt; complex&lt; double &gt;, 2 &gt; &amp;poly_coefs, PosType twist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CalcYlm</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a03307d664fa53347d001a416eaeab772</anchor>
      <arglist>(PosType rhat, vector&lt; complex&lt; double &gt; &gt; &amp;Ylm, vector&lt; complex&lt; double &gt; &gt; &amp;dYlm_dtheta, vector&lt; complex&lt; double &gt; &gt; &amp;dYlm_dphi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CalcYlm</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a65c3b655a1bb415f7a856be46ecd396e</anchor>
      <arglist>(PosType rhat, vector&lt; double &gt; &amp;Ylm, vector&lt; double &gt; &amp;dYlm_dtheta, vector&lt; double &gt; &amp;dYlm_dphi)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>evaluate</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a8a078c509fc3ab6bdee322f92d78cd6a</anchor>
      <arglist>(PosType r, ComplexValueVector_t &amp;vals)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>evaluate</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a288ff3e11b874ee8f45860fe7a49c2b4</anchor>
      <arglist>(PosType r, ComplexValueVector_t &amp;val, ComplexGradVector_t &amp;grad, ComplexValueVector_t &amp;lapl)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>evaluate</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a5a14c00e069584f0f59eabda197d5e4d</anchor>
      <arglist>(PosType r, ComplexValueVector_t &amp;val, ComplexGradVector_t &amp;grad, ComplexHessVector_t &amp;lapl)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>evaluate</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>aa431acfce3e7fcd6817f3250badb0636</anchor>
      <arglist>(PosType r, RealValueVector_t &amp;vals)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>evaluate</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a1962e9bf4291d85cc74233dd0dac0152</anchor>
      <arglist>(PosType r, RealValueVector_t &amp;val, RealGradVector_t &amp;grad, RealValueVector_t &amp;lapl)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>evaluate</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a5897871a3710c47667cda00045d5bca7</anchor>
      <arglist>(PosType r, RealValueVector_t &amp;val, RealGradVector_t &amp;grad, RealHessVector_t &amp;lapl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AtomicOrbital</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a9d50f5f9c642b285826f91fee15aa29d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocate</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a3575aa385664c6c48612f915b2e74169</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocate</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a3575aa385664c6c48612f915b2e74169</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_band</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>ab9b6679e33c27e9fa6df1977026d8d18</anchor>
      <arglist>(int band, Array&lt; complex&lt; double &gt;, 2 &gt; &amp;spline_data, Array&lt; complex&lt; double &gt;, 2 &gt; &amp;poly_coefs, PosType twist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_band</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>ab9b6679e33c27e9fa6df1977026d8d18</anchor>
      <arglist>(int band, Array&lt; complex&lt; double &gt;, 2 &gt; &amp;spline_data, Array&lt; complex&lt; double &gt;, 2 &gt; &amp;poly_coefs, PosType twist)</arglist>
    </member>
    <member kind="variable">
      <type>PosType</type>
      <name>Pos</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a39557cc84cb75046653567bbeab6fe9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>CutoffRadius</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>aa7bebe6c1fd008551525dce263f7311f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>SplineRadius</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a543a2fbd1682c8d8418d6fb58ebb60e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>PolyRadius</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a14ddd74dbafeb07240387f8fd17eed94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>SplinePoints</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a9964e7cdd86cb87ffd7ca2405edc0037</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>PolyOrder</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a9192e6969cfc950a8576903d90fc5485</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>lMax</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a899cb78f8cd6cf55f82c8deb04c1f916</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Numlm</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>af34c31e2ef96f9fa73d4815a457fd97c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumBands</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>aae8f2714151f9654f01400a8b2e7d2c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitCellType</type>
      <name>Lattice</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a211d92e3c168f83e68d4ada212d1cc88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; StorageType &gt;</type>
      <name>YlmVec</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a5098e177b35de1aea8a0dc15f8dc0a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; StorageType &gt;</type>
      <name>dYlm_dthetaVec</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a453b39fc215433a80848728582477b03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; StorageType &gt;</type>
      <name>dYlm_dphiVec</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a0d35508cc9dfcec3336b8d379aeecebf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; StorageType &gt;</type>
      <name>ulmVec</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a1ca7ce604a86d281e6669bf7c8622885</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; StorageType &gt;</type>
      <name>dulmVec</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>aaea014f94c3ac406719317a191e67b45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; StorageType &gt;</type>
      <name>d2ulmVec</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>abbb0f0835e807259c2cec093cf7affcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SplineType *</type>
      <name>RadialSpline</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a3b2299a79d72eb2c2098ddfa666bf8d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Array&lt; StorageType, 3 &gt;</type>
      <name>PolyCoefs</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a09e825640231b4406822aee49339cef6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NewTimer</type>
      <name>YlmTimer</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a45543ec20bd70b67c5349c9f8a4a8bd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NewTimer</type>
      <name>SplineTimer</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a4e9dd121c12bd291fdfb36231fc02021</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NewTimer</type>
      <name>SumTimer</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a22a73eca43c0d722882ceb9aa0c240d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>rmagLast</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a7108b834dc4fe6c48086bfc03d908369</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; PosType &gt;</type>
      <name>TwistAngles</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a3a7a9c5c7dad16cd898c84e71c32bdf4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HePresetHF</name>
    <filename>a00302.html</filename>
    <base>qmcplusplus::QMCTraits</base>
    <member kind="enumvalue">
      <type>@</type>
      <name>N</name>
      <anchorfile>a00302.html</anchorfile>
      <anchor>a0944a4353780132eeab7b06e3e42291da2c63acbe79d9f41ba6bb7766e9c37702</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DummyBasisSet</type>
      <name>BasisSet_t</name>
      <anchorfile>a00302.html</anchorfile>
      <anchor>afbcbe17aeeb9ec5fca7184a52dcb0c3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HePresetHF</name>
      <anchorfile>a00302.html</anchorfile>
      <anchor>a5a8d31ced101184c9f6963e5ab8068f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00302.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00302.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00302.html</anchorfile>
      <anchor>a628359bdca87248cdf9d72fa1b6e7d01</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, VV &amp;phi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00302.html</anchorfile>
      <anchor>a408cac9f1df9cbc6c6fa03b774e2793a</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, VV &amp;phi, GV &amp;dphi, VV &amp;d2phi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00302.html</anchorfile>
      <anchor>a8e937ff9692bdf96cc3885f8d43d2313</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, VM &amp;logdet, GM &amp;dlogdet, VM &amp;d2logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00302.html</anchorfile>
      <anchor>a5ca201d1d8a7480beab5013cab60e5f4</anchor>
      <arglist>(const WalkerSetRef &amp;W, int first, int last, vector&lt; VM &gt; &amp;logdet, vector&lt; GM &gt; &amp;dlogdet, vector&lt; VM &gt; &amp;d2logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTable</name>
      <anchorfile>a00302.html</anchorfile>
      <anchor>a8cc5359fac647671b51d970b7485cd2a</anchor>
      <arglist>(DistanceTableData *dtable)</arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; RealType, N &gt;</type>
      <name>C</name>
      <anchorfile>a00302.html</anchorfile>
      <anchor>aa4e9a1790db44d9c15b1a66b5496030f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; RealType, N &gt;</type>
      <name>Z</name>
      <anchorfile>a00302.html</anchorfile>
      <anchor>a50cc778036c50770a646bfea515460bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; RealType, N &gt;</type>
      <name>ZZ</name>
      <anchorfile>a00302.html</anchorfile>
      <anchor>ab339ba483ffa8c9d591816d4d96573fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>a00302.html</anchorfile>
      <anchor>a859bc2c01e2beb7537cd83f0b9e88921</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HePresetHFBuilder</name>
    <filename>a00303.html</filename>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>HePresetHFBuilder</name>
      <anchorfile>a00303.html</anchorfile>
      <anchor>ae09eafc0947c198c326242bdd3ccb249</anchor>
      <arglist>(ParticleSet &amp;els, TrialWaveFunction &amp;wfs, ParticleSet &amp;ions)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00303.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ComboSTO</name>
    <filename>a00081.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a265a253612b46abed17c61b0a5e5ce30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphericalTensor&lt; T, POS &gt;</type>
      <name>SphericalHarmonics_t</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a4037c877c85ed414e6209e720083b4b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericSTO&lt; T &gt;</type>
      <name>RadialOrbital_t</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>aac525ac795ecaafaccc8cc461f662dcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComboSTO</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a8fd670418ca5d27e37f0e2c3d8b9dcb1</anchor>
      <arglist>(const ComboSTO &amp;aSTO)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComboSTO</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a107effafc8496ba34c3e1b7495648eb4</anchor>
      <arglist>(int lm, SphericalHarmonics_t &amp;ylm, const vector&lt; RadialOrbital_t * &gt; &amp;rnl, T *c)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>f</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a765e7706e61198139c5a4966fc3684d1</anchor>
      <arglist>(T r)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>df</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>ad309a77d88e0f9ab5b402760ef29269e</anchor>
      <arglist>(T r)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a46e10ea2e8c2b43c8395c279b0a20ee5</anchor>
      <arglist>(T r, T rinv, T &amp;drnl, T &amp;d2rnl)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a9ded3da6c663530d70e82bab5b8b40ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a277e0a88e191db65811a8a60d98ea141</anchor>
      <arglist>(T r, T rinv, const POS &amp;dr, POS &amp;dy, T &amp;d2y)</arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>Name</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a7ee9065718e6628dc7791b756fa6c0f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>LM</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a373bc21c879c4b3b4beff903976b33c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SphericalHarmonics_t &amp;</type>
      <name>Ylm</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>af626e2b63c4b15615c2534a33881442e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RadialOrbital_t * &gt;</type>
      <name>Rnl</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>ae38923092d0f60bc80c43b5d36c30a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; T &gt;</type>
      <name>C</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>afada88761dcee54e32c78869f151150f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HFAtomicSTOSet</name>
    <filename>a00304.html</filename>
    <base>qmcplusplus::QMCTraits</base>
    <member kind="typedef">
      <type>SphericalTensor&lt; RealType, PosType &gt;</type>
      <name>SphericalHarmonics_t</name>
      <anchorfile>a00304.html</anchorfile>
      <anchor>a029f9048f6d6db566dafb1b1894b87cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericSTO&lt; RealType &gt;</type>
      <name>RadialOrbital_t</name>
      <anchorfile>a00304.html</anchorfile>
      <anchor>a063a38030979d1ac9ca5a0f755895152</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ComboSTO&lt; RealType, PosType &gt;</type>
      <name>SPO_t</name>
      <anchorfile>a00304.html</anchorfile>
      <anchor>a2cacb8f61755ea2747cf22eb55aefcb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DummyBasisSet</type>
      <name>BasisSet_t</name>
      <anchorfile>a00304.html</anchorfile>
      <anchor>afbcbe17aeeb9ec5fca7184a52dcb0c3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HFAtomicSTOSet</name>
      <anchorfile>a00304.html</anchorfile>
      <anchor>aea41ebbf2756d0345312110852002f75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HFAtomicSTOSet</name>
      <anchorfile>a00304.html</anchorfile>
      <anchor>a83eef43fc7d46c9007cb663ebe38b806</anchor>
      <arglist>(int lmax)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00304.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00304.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a00304.html</anchorfile>
      <anchor>ab8e4e3e2a7bf18888b71bdf9dda0770b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00304.html</anchorfile>
      <anchor>a628359bdca87248cdf9d72fa1b6e7d01</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, VV &amp;phi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00304.html</anchorfile>
      <anchor>a408cac9f1df9cbc6c6fa03b774e2793a</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, VV &amp;phi, GV &amp;dphi, VV &amp;d2phi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00304.html</anchorfile>
      <anchor>a8e937ff9692bdf96cc3885f8d43d2313</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, VM &amp;logdet, GM &amp;dlogdet, VM &amp;d2logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTable</name>
      <anchorfile>a00304.html</anchorfile>
      <anchor>a8cc5359fac647671b51d970b7485cd2a</anchor>
      <arglist>(DistanceTableData *dtable)</arglist>
    </member>
    <member kind="variable">
      <type>SphericalHarmonics_t</type>
      <name>Ylm</name>
      <anchorfile>a00304.html</anchorfile>
      <anchor>ac2613e548ce8a3c3a737dda8a1f4b646</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RadialOrbital_t * &gt;</type>
      <name>RnlPool</name>
      <anchorfile>a00304.html</anchorfile>
      <anchor>ab9572f2c71378d1abd1c6da932a17900</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; SPO_t * &gt;</type>
      <name>Orbital</name>
      <anchorfile>a00304.html</anchorfile>
      <anchor>a2267e90c8f27ab36d09dc03ddf1d7afb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>a00304.html</anchorfile>
      <anchor>a53956c224bd49abff541a1a7c2ad305d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::HFAtomicSTOSetBuilder</name>
    <filename>a00305.html</filename>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>HFAtomicSTOSetBuilder</name>
      <anchorfile>a00305.html</anchorfile>
      <anchor>af908e62bb70b5eb245e1d6f2f7df0bac</anchor>
      <arglist>(ParticleSet &amp;els, TrialWaveFunction &amp;psi, ParticleSet &amp;ions)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00305.html</anchorfile>
      <anchor>ae6546e37901ba4bbe82343f0bb0aaa53</anchor>
      <arglist>(xmlNodePtr)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>HFAtomicSTOSet::RadialOrbital_t</type>
      <name>RadialOrbital_t</name>
      <anchorfile>a00305.html</anchorfile>
      <anchor>a32777954c9915c9ef3dfd5f880f75753</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>HFAtomicSTOSet::SPO_t</type>
      <name>SPO_t</name>
      <anchorfile>a00305.html</anchorfile>
      <anchor>ac4f86532ceb5ef3ca1fabcaf33587c5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>getBasis</name>
      <anchorfile>a00305.html</anchorfile>
      <anchor>a889645b628a96f6d17e20f6b21056983</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>HFAtomicSTOSet *</type>
      <name>getOrbital</name>
      <anchorfile>a00305.html</anchorfile>
      <anchor>ad02330bd48319b6ecd413859d8747b01</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>a00305.html</anchorfile>
      <anchor>a859bc2c01e2beb7537cd83f0b9e88921</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>Lmax</name>
      <anchorfile>a00305.html</anchorfile>
      <anchor>a66220f2712ab879767e2b0b1f3e79c1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, int &gt;</type>
      <name>RnlID</name>
      <anchorfile>a00305.html</anchorfile>
      <anchor>a80bcccb9eb121df798f9ebf67a292250</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RadialOrbital_t * &gt;</type>
      <name>Rnl</name>
      <anchorfile>a00305.html</anchorfile>
      <anchor>ae38923092d0f60bc80c43b5d36c30a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, SPO_t * &gt;</type>
      <name>OrbSet</name>
      <anchorfile>a00305.html</anchorfile>
      <anchor>ac61e31c29ddc7341e94ec003335a9acf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::BasisSetBase</name>
    <filename>a00037.html</filename>
    <templarg>T</templarg>
    <base>qmcplusplus::OrbitalSetTraits</base>
    <member kind="enumvalue">
      <type>@</type>
      <name>MAXINDEX</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a4790f45dcc812c1b00184a2edccdddf5a161ddcca0d9d0e339a137c8e65b5a086</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; T &gt;::RealType</type>
      <name>RealType</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a74e6a24325c99f567c54c93467cf0b4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; T &gt;::ValueType</type>
      <name>ValueType</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>acb366a0ebdeeabed80c12e36910c0ed5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; T &gt;::IndexType</type>
      <name>IndexType</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>ac7148e99945ba02f1e429b46d0e403de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; T &gt;::HessType</type>
      <name>HessType</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a58b7a80dea1c1758e57ad88e898e9438</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; T &gt;::IndexVector_t</type>
      <name>IndexVector_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>ae29498520b02c5ef3ca7e11929c088f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; T &gt;::ValueVector_t</type>
      <name>ValueVector_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>ae759209a44e86cc2af33dc4d69e6df44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; T &gt;::ValueMatrix_t</type>
      <name>ValueMatrix_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a65b92c39a7420412a885bfa1c4577b6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; T &gt;::GradVector_t</type>
      <name>GradVector_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a93e3b64e8e4ac131290edcfba6fc3106</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; T &gt;::GradMatrix_t</type>
      <name>GradMatrix_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a5e7be7d3c6a044ee3c99dd95f63dfede</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; T &gt;::HessVector_t</type>
      <name>HessVector_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>afd2610339b8c7d45968099c1c256db68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; T &gt;::HessMatrix_t</type>
      <name>HessMatrix_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>aefeee4939147e0d54e4b7dafb26daf0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TinyVector&lt; HessType, OHMMS_DIM &gt;</type>
      <name>GGGType</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>aef1b45f2c244184714e5fcb6bb87ad2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; GGGType &gt;</type>
      <name>GGGVector_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a8fbe45949eb3665c4e9ce7562900ff13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; GGGType &gt;</type>
      <name>GGGMatrix_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>ad9d64609176495b009d086094279f5a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DIM</name>
      <anchorfile>a00450.html</anchorfile>
      <anchor>ac205be2172292384dd687b5471a87edda6c8e5f290be4be86fd5e7048654b4a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>scalar_traits&lt; T &gt;::real_type</type>
      <name>RealType</name>
      <anchorfile>a00450.html</anchorfile>
      <anchor>ad9d31d913d450f63f6c95b0e77759089</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>scalar_traits&lt; T &gt;::value_type</type>
      <name>ValueType</name>
      <anchorfile>a00450.html</anchorfile>
      <anchor>aecd205f12c410b3edb0ae812f6c7c1eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>IndexType</name>
      <anchorfile>a00450.html</anchorfile>
      <anchor>ab1b7173c76e5040d0161e695a129dafe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TinyVector&lt; RealType, DIM &gt;</type>
      <name>PosType</name>
      <anchorfile>a00450.html</anchorfile>
      <anchor>a2fb4a2cf24372ffb2efeaf47fc7de30d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TinyVector&lt; ValueType, DIM &gt;</type>
      <name>GradType</name>
      <anchorfile>a00450.html</anchorfile>
      <anchor>a978d841a8f80a2da012df5dbea6368c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tensor&lt; ValueType, DIM &gt;</type>
      <name>HessType</name>
      <anchorfile>a00450.html</anchorfile>
      <anchor>a5d01c407b78b0211d5b8cd73100d0904</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tensor&lt; ValueType, DIM &gt;</type>
      <name>TensorType</name>
      <anchorfile>a00450.html</anchorfile>
      <anchor>ac711e7d8db1da396d935f55fbd8396f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TinyVector&lt; Tensor&lt; ValueType, DIM &gt;, DIM &gt;</type>
      <name>GradHessType</name>
      <anchorfile>a00450.html</anchorfile>
      <anchor>a0087c5704bdc5467fd83764143fdaee1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; IndexType &gt;</type>
      <name>IndexVector_t</name>
      <anchorfile>a00450.html</anchorfile>
      <anchor>afc7fecff6dc6c0903d58b73c0f460cec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; ValueType &gt;</type>
      <name>ValueVector_t</name>
      <anchorfile>a00450.html</anchorfile>
      <anchor>adfe433549a23ec86b8ba4e52add14197</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; ValueType &gt;</type>
      <name>ValueMatrix_t</name>
      <anchorfile>a00450.html</anchorfile>
      <anchor>ada691a4322faea0b40b7f8f5842209aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; GradType &gt;</type>
      <name>GradVector_t</name>
      <anchorfile>a00450.html</anchorfile>
      <anchor>a40b08fe355b251891c3055064a3b2fef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; GradType &gt;</type>
      <name>GradMatrix_t</name>
      <anchorfile>a00450.html</anchorfile>
      <anchor>a004b0809b4054ce1b3f2c1d558488b64</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; HessType &gt;</type>
      <name>HessVector_t</name>
      <anchorfile>a00450.html</anchorfile>
      <anchor>a8ab9b6b2c9fba2def1bcbac9ef4e4d81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; HessType &gt;</type>
      <name>HessMatrix_t</name>
      <anchorfile>a00450.html</anchorfile>
      <anchor>a54d0fdcf47124e181b5dae60fcf93ee0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; GradHessType &gt;</type>
      <name>GradHessVector_t</name>
      <anchorfile>a00450.html</anchorfile>
      <anchor>ad825dbcee5c4f4389936e62dbcc2151a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; GradHessType &gt;</type>
      <name>GradHessMatrix_t</name>
      <anchorfile>a00450.html</anchorfile>
      <anchor>a2082066a1407e185877fb7c245d489ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasisSetBase</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a88f357bcb2ac8fabc8bcfebe39956a06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BasisSetBase</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>ac8b05fd8b0234cd0548f51c7ea29fca7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a4465d2d9a050e85505d637045b1b1b5d</anchor>
      <arglist>(int ntargets)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual BasisSetBase *</type>
      <name>makeClone</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>abd6962cedcd0acb308341f64b3d4de27</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>getBasisSetSize</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a65f6ac0bacce5e72fb08d576c652c385</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setBasisSetSize</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a67a32355f6dbad511ce68a4c447d28a8</anchor>
      <arglist>(int nbs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>ab15b21e79332cb44a36055f19b793c39</anchor>
      <arglist>(ParticleSet &amp;P)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluateWithHessian</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a5e9f51cf7133e2aa8d6f33cb1064017c</anchor>
      <arglist>(const ParticleSet &amp;P, int iat)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluateWithThirdDeriv</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a62b366a4f6a88f50f9cdff0872255af4</anchor>
      <arglist>(const ParticleSet &amp;P, int iat)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluateThirdDerivOnly</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a5ea03fac0c02da7f1998598e60acc3f8</anchor>
      <arglist>(const ParticleSet &amp;P, int iat)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluateForWalkerMove</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>aa82cf05ef7060d693f7e961e2e0706c8</anchor>
      <arglist>(const ParticleSet &amp;P)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluateForWalkerMove</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a4c7b0c5e9f7e52813110486de01111df</anchor>
      <arglist>(const ParticleSet &amp;P, int iat)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluateForPtclMove</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a88974abbc94f47bdb2001708d1bb9a2a</anchor>
      <arglist>(const ParticleSet &amp;P, int iat)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluateAllForPtclMove</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>ab276e516a95135f9aca493d13871a681</anchor>
      <arglist>(const ParticleSet &amp;P, int iat)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluateForPtclMoveWithHessian</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a7f40c66266e6c2fe423ae4afc0498738</anchor>
      <arglist>(const ParticleSet &amp;P, int iat)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkInVariables</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a88a6186be563e27aae6c96d5cb158a1c</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a5f6106b3d71cd4680414f394b491f076</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetParameters</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>ac24a8995185c831d553e16e08759051c</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>BasisSetSize</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>acadf2ecf82f07d9d752878fe2db483c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>ActivePtcl</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>aada03bd100177a3173009a08b1cce851</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>Counter</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a26ff1d8425b0bbfb0b1439580bfb5664</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueVector_t</type>
      <name>Phi</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>af31a2633801ddd347777c2a1f67e5b5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradVector_t</type>
      <name>dPhi</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>aab9eca8f4a35321944e5ae0c3b5b2d2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueVector_t</type>
      <name>d2Phi</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a3dbbab2af5137283e8cb5548372fc61b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HessVector_t</type>
      <name>grad_grad_Phi</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a65c24f6458b4490894382beef549be15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GGGVector_t</type>
      <name>grad_grad_grad_Phi</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>aea3d7ffe5c9429ed2fc19d3469704e6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>Temp</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a94c38b1e7928c125954ef399aa95708c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>Y</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a7f70e0a101dd19498a00bc8bedce07ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradMatrix_t</type>
      <name>dY</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>aa378fda5e9177a82b4b61f1bbac34b7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>d2Y</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>afea936632cc49cfdbb696b25d1498794</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::BasisSetBuilder</name>
    <filename>a00038.html</filename>
    <base>qmcplusplus::QMCTraits</base>
    <base>qmcplusplus::MPIObjectBase</base>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>put</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>ad5f66fd1dbe5e3c62ee5f7f326446dee</anchor>
      <arglist>(xmlNodePtr cur)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SPOSetBase *</type>
      <name>createSPOSet</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>a0e9d92d849ac63fff1700be0617eb2bc</anchor>
      <arglist>(xmlNodePtr cur)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::BasisSetFactory</name>
    <filename>a00039.html</filename>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>BasisSetFactory</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a15f09279a4c65bf72bf8d124181b4c8c</anchor>
      <arglist>(ParticleSet &amp;els, TrialWaveFunction &amp;psi, PtclPoolType &amp;psets)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BasisSetFactory</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a6e9b7e8cac1ca9854f506fdb383df77b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createBasisSet</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>aca9dbc99b56d578c2ed63f346df8dcf7</anchor>
      <arglist>(xmlNodePtr cur, xmlNodePtr rootNode=NULL)</arglist>
    </member>
    <member kind="function">
      <type>SPOSetBase *</type>
      <name>createSPOSet</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>aace31b9b913d282640ce894186ba6ca4</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>BasisSetBase&lt; RealType &gt; *</type>
      <name>getBasisSet</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>aac6630ae61727d4aa95ec6db85079f6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, BasisSetBuilder * &gt;</type>
      <name>basisBuilder</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a37ca1b5e796ed15d63e549bb4c2328e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PtclPoolType &amp;</type>
      <name>ptclPool</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a4fc7c3d5848a9235a0cf8803ff1f9fbf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::DistributedSPOSet</name>
    <filename>a00154.html</filename>
    <base>qmcplusplus::SPOSetBase</base>
    <member kind="typedef">
      <type>TricubicBsplineSPOSet&lt; ValueType, true, false &gt;</type>
      <name>BspilneSetType</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>a059e0568016910f35141c001da1432e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PooledBuffer&lt; RealType &gt;</type>
      <name>BufferType</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>aa6270b18a1e428b034625fdc90cf2385</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DistributedSPOSet</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>ae0c3225aad48626f60c0edd25acd9321</anchor>
      <arglist>(int norbs=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DistributedSPOSet</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>a39b27a419b8fcc68a35e4a4eb4bd4d0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCommunicator</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>a633f341af95ca58fda893c606d5e94d4</anchor>
      <arglist>(Communicate *c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrbitalSetSize</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>abe2573f29355b07956892dc6bd7f12ca</anchor>
      <arglist>(int norbs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>aa1c4194bf6e8a65be215bffd2a89801b</anchor>
      <arglist>(VarRegistry&lt; RealType &gt; &amp;optVariables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>a55614decceadf408ddc308827faada58</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>a8d03182606ebdc99cb116d189b732f02</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi, GradVector_t &amp;dpsi, ValueVector_t &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>ae91b5a23fbd5208cf10757eea50386c8</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, ValueMatrix_t &amp;d2logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>a625375c35e3d6917247acd1d76008768</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, HessMatrix_t &amp;grad_grad_logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>aa8c87ff012f3f2143027314b8024007f</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, HessMatrix_t &amp;grad_grad_logdet, GGGMatrix_t &amp;grad_grad_grad_logdet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>put</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>a0346b152608945bc9d007d6c7607d7cc</anchor>
      <arglist>(xmlNodePtr cur, SPOPool_t &amp;spo_pool)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resetParameters</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>ab05413d5b09355053cf17205bfc3d704</anchor>
      <arglist>(const opt_variables_type &amp;optVariables)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkInVariables</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>a88a6186be563e27aae6c96d5cb158a1c</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>a5f6106b3d71cd4680414f394b491f076</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>evaluateDerivatives</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>a7a12bee7662aff00c05b739b5e03477d</anchor>
      <arglist>(ParticleSet &amp;P, int iat, const opt_variables_type &amp;active, ValueMatrix_t &amp;d_phi, ValueMatrix_t &amp;d_lapl_phi)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluate</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>ac40b48e4141d4082c01705af1b082fec</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi, GradVector_t &amp;dpsi, HessVector_t &amp;grad_grad_psi)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>evaluateForDeriv</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>acfcf4e0a63dc9a386683dabdec93da2f</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;basis_val, GradMatrix_t &amp;basis_grad, ValueMatrix_t &amp;basis_lapl)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setpm</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>aba3d7f6e299f948c2ab803dba5f332f6</anchor>
      <arglist>(int x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SPOSetBase *</type>
      <name>makeClone</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>a554da28f08e243f4b89f64b2842c8749</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>BspineSetType *</type>
      <name>Phi</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>af696f518af448ef321643750e30b05b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>OrbitalIndex</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>aabc9af656678098a858bee7e1ae552d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Communicate *</type>
      <name>myComm</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>a6e290154265339db27f9a9bef2bd3aab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>RemoteNodes</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>a8a5d56c8c2845e558121b0f7e4246a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; PosType &gt;</type>
      <name>Rnow</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>af66b39e4c2c4ebcf8baf7d0e5d79304a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>OrbitalCount</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>a75ff9d36c1d22a887d13227dafa0b4b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>OrbitalOffset</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>a1402c3698ad478073a5e7d21e52a4695</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; BufferType * &gt;</type>
      <name>SendBuffer</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>a98e940cd2281f0b8c397b8b14d665f8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; BufferType * &gt;</type>
      <name>RecvBuffer</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>a8682227090c0f9bc9f73b825e2f8e8a9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::DummyBasisSet</name>
    <filename>a00188.html</filename>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a79c8b1c55d55fd99cbc0ef12ea209e6d</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::einspline_traits&lt; double, 3 &gt;</name>
    <filename>a00199.html</filename>
    <member kind="typedef">
      <type>multi_UBspline_3d_d</type>
      <name>SplineType</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a26e05fb3b9fbd68fb3b4be1fcc204fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UBspline_3d_d</type>
      <name>SingleSplineType</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>ac149a554946b9eae8763349758ec2b86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BCtype_d</type>
      <name>BCType</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>ae725b01a8335f3572027a08bb2481b93</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>DataType</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a89ac35ddf78fa70a2911ca0ad2f75579</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::einspline_traits&lt; complex&lt; double &gt;, 3 &gt;</name>
    <filename>a00197.html</filename>
    <member kind="typedef">
      <type>multi_UBspline_3d_z</type>
      <name>SplineType</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>ad880369ed03b1b3a5b82db5e8c57d73c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UBspline_3d_z</type>
      <name>SingleSplineType</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>a3d137132198e575f58299f76b0b40383</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BCtype_z</type>
      <name>BCType</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>a9731395e726f18705ec7480965f69967</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>complex&lt; double &gt;</type>
      <name>DataType</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>a93cc6023670eb70cceaedafbfbf8c4cc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::einspline_traits&lt; float, 3 &gt;</name>
    <filename>a00200.html</filename>
    <member kind="typedef">
      <type>multi_UBspline_3d_s</type>
      <name>SplineType</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a711a08d66c2e48489add19cab882f0e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UBspline_3d_s</type>
      <name>SingleSplineType</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>ae869333c99a8d43161360d33be645923</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BCtype_s</type>
      <name>BCType</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>acab06177e156fccef08e349f664e7670</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>float</type>
      <name>DataType</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a279b64f47fb2213ad73e59be937afcfa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::einspline_traits&lt; complex&lt; float &gt;, 3 &gt;</name>
    <filename>a00198.html</filename>
    <member kind="typedef">
      <type>multi_UBspline_3d_c</type>
      <name>SplineType</name>
      <anchorfile>a00198.html</anchorfile>
      <anchor>a2aef3ee5e5e495760bcdef60a87d8408</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UBspline_3d_c</type>
      <name>SingleSplineType</name>
      <anchorfile>a00198.html</anchorfile>
      <anchor>ad955eb207f6b7a0a7a249789c3e2a519</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BCtype_c</type>
      <name>BCType</name>
      <anchorfile>a00198.html</anchorfile>
      <anchor>abba2150d80c6ed07a0d11f2b7edf4e87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>complex&lt; float &gt;</type>
      <name>DataType</name>
      <anchorfile>a00198.html</anchorfile>
      <anchor>a535fdb170324379f14c21bd2399ff813</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::SplineAdoptorBase</name>
    <filename>a00580.html</filename>
    <templarg>ST</templarg>
    <templarg>D</templarg>
    <member kind="typedef">
      <type>TinyVector&lt; ST, D &gt;</type>
      <name>PointType</name>
      <anchorfile>a00580.html</anchorfile>
      <anchor>aa7582400bce7f31ea6268e8732be604f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UBspline_3d_d</type>
      <name>SingleSplineType</name>
      <anchorfile>a00580.html</anchorfile>
      <anchor>ac149a554946b9eae8763349758ec2b86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>einspline_traits&lt; ST, D &gt;::DataType</type>
      <name>DataType</name>
      <anchorfile>a00580.html</anchorfile>
      <anchor>ab1601782086ffc0d605db03ecb4c10b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SplineAdoptorBase</name>
      <anchorfile>a00580.html</anchorfile>
      <anchor>ac9e77e5db32a174d15e166b4800a1148</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init_base</name>
      <anchorfile>a00580.html</anchorfile>
      <anchor>a583b02b264adb933da351e46454dc987</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; int, D &gt;</type>
      <name>HalfG</name>
      <anchorfile>a00580.html</anchorfile>
      <anchor>a56570ce4b419c08171227772185a8d08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; bool &gt;</type>
      <name>MakeTwoCopies</name>
      <anchorfile>a00580.html</anchorfile>
      <anchor>a7e64f8144a40ac39f3d1a336911d3030</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tensor&lt; ST, D &gt;</type>
      <name>GGt</name>
      <anchorfile>a00580.html</anchorfile>
      <anchor>af693bfb347dab5b975c635d7171b3621</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; TinyVector&lt; ST, D &gt; &gt;</type>
      <name>kPoints</name>
      <anchorfile>a00580.html</anchorfile>
      <anchor>a188c6e4bb65263d9969b5f3320a676dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CrystalLattice&lt; ST, D &gt;</type>
      <name>SuperLattice</name>
      <anchorfile>a00580.html</anchorfile>
      <anchor>a73d805bc01512bf861408519d5510291</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CrystalLattice&lt; ST, D &gt;</type>
      <name>PrimLattice</name>
      <anchorfile>a00580.html</anchorfile>
      <anchor>a11180aa5a0e6c6ecc70633662c506f3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>is_complex</name>
      <anchorfile>a00580.html</anchorfile>
      <anchor>a70a265228ba1ded4ff8e8a73822f2a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>MyIndex</name>
      <anchorfile>a00580.html</anchorfile>
      <anchor>a46280489b980af47ac936bd3732b831d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>first_spo</name>
      <anchorfile>a00580.html</anchorfile>
      <anchor>a78bf4eef04182ab503a3dfa42fc29dab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>last_spo</name>
      <anchorfile>a00580.html</anchorfile>
      <anchor>a3d29a316b2e2a99f1a948243b90ceaa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>AdoptorName</name>
      <anchorfile>a00580.html</anchorfile>
      <anchor>a5759eed28babd5e503aa1441d8e24f34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>KeyWord</name>
      <anchorfile>a00580.html</anchorfile>
      <anchor>a4a93e7e8652d5ab01e10cb64615e7a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OrbitalSetTraits&lt; ST &gt;::ValueVector_t</type>
      <name>myV</name>
      <anchorfile>a00580.html</anchorfile>
      <anchor>a64206636613108065346073c90e3cb1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OrbitalSetTraits&lt; ST &gt;::ValueVector_t</type>
      <name>myL</name>
      <anchorfile>a00580.html</anchorfile>
      <anchor>ad9c344e537270295b90d095c78d47824</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OrbitalSetTraits&lt; ST &gt;::GradVector_t</type>
      <name>myG</name>
      <anchorfile>a00580.html</anchorfile>
      <anchor>a400507e38f458969a4e2ec75dbeb4c81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OrbitalSetTraits&lt; ST &gt;::HessVector_t</type>
      <name>myH</name>
      <anchorfile>a00580.html</anchorfile>
      <anchor>ac46a3eea12961b33889f069d9395968c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OrbitalSetTraits&lt; ST &gt;::GradHessVector_t</type>
      <name>myGH</name>
      <anchorfile>a00580.html</anchorfile>
      <anchor>aa3733ef175dd23022ed92d10185fe412</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::VectorViewer</name>
    <filename>a00626.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>VectorViewer</name>
      <anchorfile>a00626.html</anchorfile>
      <anchor>a078749bc49bdf5ac903dcc4f0c0f709c</anchor>
      <arglist>(T *a, int n)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>data</name>
      <anchorfile>a00626.html</anchorfile>
      <anchor>a1699472936b80a88d3fc8096975d21b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a00626.html</anchorfile>
      <anchor>ab8e4e3e2a7bf18888b71bdf9dda0770b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00626.html</anchorfile>
      <anchor>a0534e977fc9fee424b3ef94f27a9ed61</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>a00626.html</anchorfile>
      <anchor>a8b36789e9ecc47ad57fc55d85015651d</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="variable">
      <type>T *</type>
      <name>data_ptr</name>
      <anchorfile>a00626.html</anchorfile>
      <anchor>ac5735d29368ab553b498d36b2a8f48db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>data_size</name>
      <anchorfile>a00626.html</anchorfile>
      <anchor>af69e180c878a9c8f4e45ec7dc25a062f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::BsplineSet</name>
    <filename>a00055.html</filename>
    <templarg>SplineAdoptor</templarg>
    <base>qmcplusplus::SPOSetBase</base>
    <member kind="typedef">
      <type>SplineAdoptor::SplineType</type>
      <name>SplineType</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>aabba84aedc83a4e3047da8eb228506d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SplineAdoptor::PointType</type>
      <name>PointType</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>ae3f5aaf6a64f1abb98adb66ba3e72450</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BsplineSet</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a815ef05acdbac58fb4288c5e40f28b24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SPOSetBase *</type>
      <name>makeClone</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>ad79ed9698a35aa18e935d9cfd98bb97b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_spline</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a996a269b86d18cee5f36ecc88e6530ef</anchor>
      <arglist>(CT *spline_r, CT *spline_i, int twist, int ispline, int level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a55614decceadf408ddc308827faada58</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a8d03182606ebdc99cb116d189b732f02</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi, GradVector_t &amp;dpsi, ValueVector_t &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>aa0db9a91d8f079188aa5a428380bd075</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi, GradVector_t &amp;dpsi, HessVector_t &amp;grad_grad_psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>ab4bf48529a287862133667a16808e2a6</anchor>
      <arglist>(ParticleSet &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrbitalSetSize</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>abe2573f29355b07956892dc6bd7f12ca</anchor>
      <arglist>(int norbs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>ae91b5a23fbd5208cf10757eea50386c8</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, ValueMatrix_t &amp;d2logdet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a20b8f1e891a4cd478f410438c403f4e8</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, HessMatrix_t &amp;grad_grad_logdet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>aa8c87ff012f3f2143027314b8024007f</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, HessMatrix_t &amp;grad_grad_logdet, GGGMatrix_t &amp;grad_grad_grad_logdet)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::EinsplineSet</name>
    <filename>a00201.html</filename>
    <base>qmcplusplus::SPOSetBase</base>
    <member kind="typedef">
      <type>CrystalLattice&lt; RealType, OHMMS_DIM &gt;</type>
      <name>UnitCellType</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>a30fdd55957d807d8a168610ad3341d5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>UnitCellType</type>
      <name>GetLattice</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>ae242984cc8392720a579d26967239b03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetParameters</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>ac24a8995185c831d553e16e08759051c</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>ab4bf48529a287862133667a16808e2a6</anchor>
      <arglist>(ParticleSet &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetSourceParticleSet</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>aed073e70d05d4f9cf070bc3233a8964d</anchor>
      <arglist>(ParticleSet &amp;ions)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrbitalSetSize</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>abe2573f29355b07956892dc6bd7f12ca</anchor>
      <arglist>(int norbs)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>Type</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>af73c8d66e78d52193e1e094aa329369e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EinsplineSet</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>acb2ffe21afc644fb9716df3ceaea2298</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluate</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>aa34763ac8632a92f5a85d786328f47b8</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluate</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>a1301da2543b14516de826bbcf75a55a8</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi, GradVector_t &amp;dpsi, ValueVector_t &amp;d2psi)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>aa49dabe53e3d0a7131f14e537c055e39</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, ValueMatrix_t &amp;d2logdet)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>a625375c35e3d6917247acd1d76008768</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, HessMatrix_t &amp;grad_grad_logdet)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Orthorhombic</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>a6778f09e63a6d7850b7a0bf488446d87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Localized</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>a7dfb73d0229f56621a414c78d7b6fdf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Tiling</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>af7c97fd015b1ad2160f877cc74f80083</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; int, 3 &gt;</type>
      <name>TileFactor</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>a15871e34602a48bd5455a55ca2c1fa84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tensor&lt; int, OHMMS_DIM &gt;</type>
      <name>TileMatrix</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>a3edee8e28de6b0ea1861f37395324ea5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitCellType</type>
      <name>SuperLattice</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>acbc2bc92f7327e66f938cf7b464aee5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitCellType</type>
      <name>PrimLattice</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>ab1738eb64e92cc7ec564041422641165</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PosType</type>
      <name>TwistVector</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>ab4064a546296cfee14aa587bb51f6fd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PosType</type>
      <name>kVector</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>a5b59361d9d14f371a6ffa157d9df002e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>TwistNum</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>ab0de847717898d7d5c819c4f42fb0e8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tensor&lt; RealType, OHMMS_DIM &gt;</type>
      <name>GGt</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>a55e4e25a3b14a9107013adc7f4235948</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; MuffinTinClass &gt;</type>
      <name>MuffinTins</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>a8b705cf1c6113f372e88683bc53bdba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumValenceOrbs</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>a72b2e2ef128c8fa952ffe4ad7905836b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumCoreOrbs</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>a0d1276c80eca25afa230116958538261</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>EinsplineSetBuilder</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>a7bb2d12050b8843d9aa8a1872be03599</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::MultiOrbitalTraits&lt; double, 2 &gt;</name>
    <filename>a00399.html</filename>
    <member kind="typedef">
      <type>multi_UBspline_2d_d</type>
      <name>SplineType</name>
      <anchorfile>a00399.html</anchorfile>
      <anchor>ada62ef13530f1e8712440d97a2e37ef2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::MultiOrbitalTraits&lt; complex&lt; double &gt;, 2 &gt;</name>
    <filename>a00395.html</filename>
    <member kind="typedef">
      <type>multi_UBspline_2d_z</type>
      <name>SplineType</name>
      <anchorfile>a00395.html</anchorfile>
      <anchor>a84c80b8fc350d16e883dfd8f4528ad44</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::MultiOrbitalTraits&lt; float, 2 &gt;</name>
    <filename>a00401.html</filename>
    <member kind="typedef">
      <type>multi_UBspline_2d_s</type>
      <name>SplineType</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>a6394efbd808495981aa700c030e2e29a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::MultiOrbitalTraits&lt; complex&lt; float &gt;, 2 &gt;</name>
    <filename>a00397.html</filename>
    <member kind="typedef">
      <type>multi_UBspline_2d_c</type>
      <name>SplineType</name>
      <anchorfile>a00397.html</anchorfile>
      <anchor>a94f41873fbdad0f5da46665e463665cd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::MultiOrbitalTraits&lt; double, 3 &gt;</name>
    <filename>a00400.html</filename>
    <member kind="typedef">
      <type>multi_UBspline_3d_d</type>
      <name>SplineType</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>a26e05fb3b9fbd68fb3b4be1fcc204fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BCtype_d</type>
      <name>BCType</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ae725b01a8335f3572027a08bb2481b93</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>DataType</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>a89ac35ddf78fa70a2911ca0ad2f75579</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::MultiOrbitalTraits&lt; complex&lt; double &gt;, 3 &gt;</name>
    <filename>a00396.html</filename>
    <member kind="typedef">
      <type>multi_UBspline_3d_z</type>
      <name>SplineType</name>
      <anchorfile>a00396.html</anchorfile>
      <anchor>ad880369ed03b1b3a5b82db5e8c57d73c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BCtype_z</type>
      <name>BCType</name>
      <anchorfile>a00396.html</anchorfile>
      <anchor>a9731395e726f18705ec7480965f69967</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>complex&lt; double &gt;</type>
      <name>DataType</name>
      <anchorfile>a00396.html</anchorfile>
      <anchor>a93cc6023670eb70cceaedafbfbf8c4cc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::MultiOrbitalTraits&lt; float, 3 &gt;</name>
    <filename>a00402.html</filename>
    <member kind="typedef">
      <type>multi_UBspline_3d_s</type>
      <name>SplineType</name>
      <anchorfile>a00402.html</anchorfile>
      <anchor>a711a08d66c2e48489add19cab882f0e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BCtype_s</type>
      <name>BCType</name>
      <anchorfile>a00402.html</anchorfile>
      <anchor>acab06177e156fccef08e349f664e7670</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>float</type>
      <name>DataType</name>
      <anchorfile>a00402.html</anchorfile>
      <anchor>a279b64f47fb2213ad73e59be937afcfa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::MultiOrbitalTraits&lt; complex&lt; float &gt;, 3 &gt;</name>
    <filename>a00398.html</filename>
    <member kind="typedef">
      <type>multi_UBspline_3d_c</type>
      <name>SplineType</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a2aef3ee5e5e495760bcdef60a87d8408</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BCtype_c</type>
      <name>BCType</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>abba2150d80c6ed07a0d11f2b7edf4e87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>complex&lt; float &gt;</type>
      <name>DataType</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a535fdb170324379f14c21bd2399ff813</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::EinsplineSetExtended</name>
    <filename>a00203.html</filename>
    <templarg>StorageType</templarg>
    <base>qmcplusplus::EinsplineSet</base>
    <member kind="function">
      <type>void</type>
      <name>allocate</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a47a2e4772d36009dd8b15deb10fe3c26</anchor>
      <arglist>(GT &amp;xyz_g, BCT &amp;xyz_bc, int nv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeStorage</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a80c1e34ab5ac01b4da4779c0571eaa2f</anchor>
      <arglist>(int n, int nvals, int ncores=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>abb120a629b1a7b46a62f4257957b7e38</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, RealValueVector_t &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>abec4d3bb3a6e998e434a170c562171ba</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, RealValueVector_t &amp;psi, RealGradVector_t &amp;dpsi, RealValueVector_t &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>afdce0f0038c56ea5bf2162abd710cd37</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, RealValueVector_t &amp;psi, RealGradVector_t &amp;dpsi, RealHessVector_t &amp;grad_grad_psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a1cc77e2c808cafa286716b73f0850b15</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, RealValueMatrix_t &amp;psi, RealGradMatrix_t &amp;dpsi, RealValueMatrix_t &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>aebdf0317cf3b559593db263a1eb1fa35</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, RealValueMatrix_t &amp;psi, RealGradMatrix_t &amp;dpsi, RealHessMatrix_t &amp;grad_grad_psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a85eed465c95221fd70e2dd63feed8d1b</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, RealValueMatrix_t &amp;psi, RealGradMatrix_t &amp;dpsi, RealHessMatrix_t &amp;grad_grad_psi, RealGGGMatrix_t &amp;grad_grad_grad_logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateGradSource</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a7cd6b2058f189a24aebee1589bc153ec</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, const ParticleSet &amp;source, int iat_src, RealGradMatrix_t &amp;gradphi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateGradSource</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a2e9add892826ced4fb29cc00d898bbb1</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, const ParticleSet &amp;source, int iat_src, RealGradMatrix_t &amp;dphi, RealHessMatrix_t &amp;dgrad_phi, RealGradMatrix_t &amp;dlaplphi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateGradSource</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a2388949c45e4ba671048d8fbb2238d39</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, const ParticleSet &amp;source, int iat_src, ComplexGradMatrix_t &amp;gradphi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>ad526335516cc238a35311f9514238b3e</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ComplexValueVector_t &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>ab1ff3ea840b66f02de40c8706bf6e4d8</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ComplexValueVector_t &amp;psi, ComplexGradVector_t &amp;dpsi, ComplexValueVector_t &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>ae742694e5f1de96137f6e42747f80e68</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ComplexValueVector_t &amp;psi, ComplexGradVector_t &amp;dpsi, ComplexHessVector_t &amp;grad_grad_psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a4b4aff3edff87871abf5db496b338982</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ComplexValueMatrix_t &amp;psi, ComplexGradMatrix_t &amp;dpsi, ComplexValueMatrix_t &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>abc1f65bc482960809482d4ab3baba1f6</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ComplexValueMatrix_t &amp;psi, ComplexGradMatrix_t &amp;dpsi, ComplexHessMatrix_t &amp;grad_grad_psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a8523442a3f6478762f89c110597f92c4</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ComplexValueMatrix_t &amp;psi, ComplexGradMatrix_t &amp;dpsi, ComplexHessMatrix_t &amp;grad_grad_psi, ComplexGGGMatrix_t &amp;grad_grad_grad_logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>ab4bf48529a287862133667a16808e2a6</anchor>
      <arglist>(ParticleSet &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrbitalSetSize</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>abe2573f29355b07956892dc6bd7f12ca</anchor>
      <arglist>(int norbs)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>Type</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>af73c8d66e78d52193e1e094aa329369e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerTimers</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a43dda6f0760a96661a60a054c6efb017</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PosType</type>
      <name>get_k</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a8375da2c13ff1d4b791febc7fb6b3611</anchor>
      <arglist>(int orb)</arglist>
    </member>
    <member kind="function">
      <type>SPOSetBase *</type>
      <name>makeClone</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a554da28f08e243f4b89f64b2842c8749</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EinsplineSetExtended</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>ae3d63236d80f4789320c219eb406e077</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a12fec7e352afc2476d29dfd3e54ac5b0</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, RealValueVector_t &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a2bc02548673e014ad5f932392a05fa74</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, RealValueVector_t &amp;psi, RealGradVector_t &amp;dpsi, RealValueVector_t &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateGradSource</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>ab9acbfdfdb1a1644309ff93ddb8489bc</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, const ParticleSet &amp;source, int iat_src, RealGradMatrix_t &amp;dphi, RealHessMatrix_t &amp;dgrad_phi, RealGradMatrix_t &amp;dlapl_phi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateGradSource</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>ae2c8b15f9aec8a5fdc1b5e24d4200357</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, const ParticleSet &amp;source, int iat, RealGradMatrix_t &amp;dpsi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>aa8672ad4833a632493b148eb64cf00c9</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, RealValueMatrix_t &amp;psi, RealGradMatrix_t &amp;dpsi, RealValueMatrix_t &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>afa232c8067410e5083f525438ce687a8</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, RealValueMatrix_t &amp;psi, RealGradMatrix_t &amp;dpsi, RealHessMatrix_t &amp;grad_grad_psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>ab6d35379bd5e8435d5e042f75e808190</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ComplexValueMatrix_t &amp;psi, ComplexGradMatrix_t &amp;dpsi, ComplexHessMatrix_t &amp;grad_grad_psi, ComplexGGGMatrix_t &amp;grad_grad_grad_logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>adaccf3ccd59d325b2ec14897f38a88d2</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, RealValueMatrix_t &amp;psi, RealGradMatrix_t &amp;dpsi, RealHessMatrix_t &amp;grad_grad_psi, RealGGGMatrix_t &amp;grad_grad_grad_logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a57185547cb6b8e74e89dc82faa84581c</anchor>
      <arglist>(vector&lt; Walker_t * &gt; &amp;walkers, int iat, gpu::device_vector&lt; CudaRealType * &gt; &amp;phi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a57185547cb6b8e74e89dc82faa84581c</anchor>
      <arglist>(vector&lt; Walker_t * &gt; &amp;walkers, int iat, gpu::device_vector&lt; CudaRealType * &gt; &amp;phi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a457d15237d9c0d1f3169303a35542a86</anchor>
      <arglist>(vector&lt; Walker_t * &gt; &amp;walkers, vector&lt; PosType &gt; &amp;newpos, gpu::device_vector&lt; CudaRealType * &gt; &amp;phi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a457d15237d9c0d1f3169303a35542a86</anchor>
      <arglist>(vector&lt; Walker_t * &gt; &amp;walkers, vector&lt; PosType &gt; &amp;newpos, gpu::device_vector&lt; CudaRealType * &gt; &amp;phi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a48f1e6db8b8b115bc5aeee8818460642</anchor>
      <arglist>(vector&lt; Walker_t * &gt; &amp;walkers, vector&lt; PosType &gt; &amp;newpos, gpu::device_vector&lt; CudaRealType * &gt; &amp;phi, gpu::device_vector&lt; CudaRealType * &gt; &amp;grad_lapl, int row_stride)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a48f1e6db8b8b115bc5aeee8818460642</anchor>
      <arglist>(vector&lt; Walker_t * &gt; &amp;walkers, vector&lt; PosType &gt; &amp;newpos, gpu::device_vector&lt; CudaRealType * &gt; &amp;phi, gpu::device_vector&lt; CudaRealType * &gt; &amp;grad_lapl, int row_stride)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a8695689f81644142b9ebd00a3731c4d3</anchor>
      <arglist>(vector&lt; PosType &gt; &amp;pos, gpu::device_vector&lt; CudaRealType * &gt; &amp;phi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>abc61b0ae2e4d9f1540ea1e7b9b3dd25c</anchor>
      <arglist>(vector&lt; PosType &gt; &amp;pos, gpu::device_vector&lt; CudaComplexType * &gt; &amp;phi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a8695689f81644142b9ebd00a3731c4d3</anchor>
      <arglist>(vector&lt; PosType &gt; &amp;pos, gpu::device_vector&lt; CudaRealType * &gt; &amp;phi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>abc61b0ae2e4d9f1540ea1e7b9b3dd25c</anchor>
      <arglist>(vector&lt; PosType &gt; &amp;pos, gpu::device_vector&lt; CudaComplexType * &gt; &amp;phi)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>MultiOrbitalTraits&lt; StorageType, OHMMS_DIM &gt;::SplineType</type>
      <name>SplineType</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a9a826b4ff8f17a736d7f8c05bdbdc57e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>MultiOrbitalTraits&lt; StorageType, OHMMS_DIM &gt;::BCType</type>
      <name>BCType</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>ae3db8e0fdcb852c14542fe1104142066</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>OrbitalSetTraits&lt; StorageType &gt;::ValueVector_t</type>
      <name>StorageValueVector_t</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>ac54d873d0254e504eba7a4064599ab89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>OrbitalSetTraits&lt; StorageType &gt;::GradVector_t</type>
      <name>StorageGradVector_t</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a1681f9fb625a234a688809b55f512450</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>OrbitalSetTraits&lt; StorageType &gt;::HessVector_t</type>
      <name>StorageHessVector_t</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a65c6339da251fb0caed65b773d0bfcb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>OrbitalSetTraits&lt; StorageType &gt;::GradHessVector_t</type>
      <name>StorageGradHessVector_t</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a577c5b68b8d38bb2b763d5cec72edd16</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Vector&lt; double &gt;</type>
      <name>RealValueVector_t</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a5ecacb3f0d061af7353dd0bc5f153fcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Vector&lt; complex&lt; double &gt; &gt;</type>
      <name>ComplexValueVector_t</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a65d180276e9da93ee5f66e91c33c9a9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Vector&lt; TinyVector&lt; double, OHMMS_DIM &gt; &gt;</type>
      <name>RealGradVector_t</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>ab8bc93cb198f52c2e547426e4542dc24</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Vector&lt; TinyVector&lt; complex&lt; double &gt;, OHMMS_DIM &gt; &gt;</type>
      <name>ComplexGradVector_t</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>af46b7996328d84a03b9d704286d319bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Tensor&lt; double, OHMMS_DIM &gt;</type>
      <name>RealHessType</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a3d81c83d9f30addd247841d9f6be86af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Tensor&lt; complex&lt; double &gt;, OHMMS_DIM &gt;</type>
      <name>ComplexHessType</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a583e719f01ac639beff1ebb1bcf7c69b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Vector&lt; RealHessType &gt;</type>
      <name>RealHessVector_t</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>ad604edb8a0e46cfa8d1805dcd2d16d7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Matrix&lt; RealHessType &gt;</type>
      <name>RealHessMatrix_t</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>aed1732f8f91e72adca9c1ed1e0f6d840</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Vector&lt; ComplexHessType &gt;</type>
      <name>ComplexHessVector_t</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>af2a9579e4992a75ec3205f10960daf3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Matrix&lt; ComplexHessType &gt;</type>
      <name>ComplexHessMatrix_t</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a5d22765947dd2af9dd14f2190d37c30d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Matrix&lt; double &gt;</type>
      <name>RealValueMatrix_t</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a47b2b988f963ae209e3f1eac44d0c3b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Matrix&lt; complex&lt; double &gt; &gt;</type>
      <name>ComplexValueMatrix_t</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a68cd878e47c2b66e90d408b32a13892f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Matrix&lt; TinyVector&lt; double, OHMMS_DIM &gt; &gt;</type>
      <name>RealGradMatrix_t</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a84637c7ea2ef5a5627ba12bd1ce8e6b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Matrix&lt; TinyVector&lt; complex&lt; double &gt;, OHMMS_DIM &gt; &gt;</type>
      <name>ComplexGradMatrix_t</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a1a59355e9b40137acda9e5ed1d778bec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>TinyVector&lt; RealHessType, 3 &gt;</type>
      <name>RealGGGType</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a08a11f056fcc9f80ecd2421f2fe34241</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Vector&lt; RealGGGType &gt;</type>
      <name>RealGGGVector_t</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a10e5dcf52d7ca4596d5e7303cbd1c130</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Matrix&lt; RealGGGType &gt;</type>
      <name>RealGGGMatrix_t</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>aa23253e730c0cf5e571209a6082322c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>TinyVector&lt; ComplexHessType, 3 &gt;</type>
      <name>ComplexGGGType</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a1be407694e1024281f7067815526e8c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Vector&lt; ComplexGGGType &gt;</type>
      <name>ComplexGGGVector_t</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>ad23004b27dab067430b485dbc330df22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Matrix&lt; ComplexGGGType &gt;</type>
      <name>ComplexGGGMatrix_t</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a54152b02dc117fefc87e3e83d79d94d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computePhaseFactors</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a012402cd44ee780f105974de5c5c8c27</anchor>
      <arglist>(const TinyVector&lt; double, OHMMS_DIM &gt; &amp;r)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SplineType *</type>
      <name>MultiSpline</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a1ccfd48337a42228f4dc4373820311f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; AtomicOrbital&lt; StorageType &gt; &gt;</type>
      <name>AtomicOrbitals</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a2d240b7831a39dc70e4aff05e959340e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; TinyVector&lt; SplineType *, OHMMS_DIM &gt; &gt;</type>
      <name>FirstOrderSplines</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a5414c3eaaf91677d7b27a612a35fcbd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StorageValueVector_t</type>
      <name>StorageValueVector</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>ab819f3062f175a0e0ea47c6c5ff9c8b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StorageValueVector_t</type>
      <name>StorageLaplVector</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a59add6b51eb850daa6bd325b6fb82736</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StorageGradVector_t</type>
      <name>StorageGradVector</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a5df29d4eb8047f937516ab6584e5d763</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StorageHessVector_t</type>
      <name>StorageHessVector</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a03a7d6da40fe5ac7d21c08e5519ee672</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StorageGradHessVector_t</type>
      <name>StorageGradHessVector</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a8dedd4d459f301bf867de90b9ae47731</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StorageValueVector_t</type>
      <name>BlendValueVector</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>ab5409fe7834c348cc17201a7a55ad3ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StorageValueVector_t</type>
      <name>BlendLaplVector</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a0c24957da5dae6738dc63e6a9e769788</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StorageGradVector_t</type>
      <name>BlendGradVector</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>aa652f3d9d9d96b91f58d84b5cb9c33e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StorageHessVector_t</type>
      <name>BlendHessVector</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>ad7e0220511ef5e2f96d9404a3f6991c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; bool &gt;</type>
      <name>MakeTwoCopies</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a7e64f8144a40ac39f3d1a336911d3030</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector&lt; TinyVector&lt; double, OHMMS_DIM &gt; &gt;</type>
      <name>kPoints</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>ad09ce88d55f39876e642b2c3f8943268</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector&lt; double &gt;</type>
      <name>phase</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a3548fef075fe9a2799c3aa88ca19b194</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector&lt; complex&lt; double &gt; &gt;</type>
      <name>eikr</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>aca3483016f8e18f56880a317f944d512</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TinyVector&lt; int, OHMMS_DIM &gt;</type>
      <name>HalfG</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>ade2ab75ea82e8b41edd5ecd22d4f3bcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NewTimer</type>
      <name>ValueTimer</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>addc768116ad397009d08219aec13a817</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NewTimer</type>
      <name>VGLTimer</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a3e71a288889f61d5b3d7265108bc6de9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NewTimer</type>
      <name>VGLMatTimer</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a0067eb4bb60a59b742be65f224a2b33d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NewTimer</type>
      <name>EinsplineTimer</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a74cc5a49718b76c95753443c0a6be16d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>EinsplineSetBuilder</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a7bb2d12050b8843d9aa8a1872be03599</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::Int3less</name>
    <filename>a00310.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>a00310.html</anchorfile>
      <anchor>a82b4349418faaa6fe4d4321f8fa7e1b7</anchor>
      <arglist>(const TinyVector&lt; int, 3 &gt; &amp;a, const TinyVector&lt; int, 3 &gt; &amp;b) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::Int4less</name>
    <filename>a00311.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>a00311.html</anchorfile>
      <anchor>ad4ddae024beea1e6b57154ef84ab20f1</anchor>
      <arglist>(const TinyVector&lt; int, 4 &gt; &amp;a, const TinyVector&lt; int, 4 &gt; &amp;b) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::H5OrbSet</name>
    <filename>a00253.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>a4c74d8e586945057a41a0cf10623921f</anchor>
      <arglist>(const H5OrbSet &amp;a, const H5OrbSet &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>H5OrbSet</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>ad228b9efb8945326196e5e97380d5b9c</anchor>
      <arglist>(const H5OrbSet &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>H5OrbSet</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>af38c3e6dcd0288099f719113ec43d98c</anchor>
      <arglist>(string name, int spinSet, int numOrbs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>H5OrbSet</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>a98a75ae34313809e2858d82a45f543d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>OrbitalType</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>a6acf08f416ffa43726f4bd1580f94ecd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>SpinSet</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>aa7902e35f14d4ccddce5010cf288c359</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumOrbs</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>a87d75a6daf0d2a8d32f596d51287b9f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>FileName</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>ac56689c3ac56ce5bcecabd9b090880f8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::BandInfo</name>
    <filename>a00030.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>ab163259aa3596c6aecdd9f15f6a59cda</anchor>
      <arglist>(BandInfo other) const </arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>TwistIndex</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a7ce83e9693e960a913ab12f7c8878114</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>BandIndex</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a368ac2d4ce66ee1d8427313d8845b6c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Spin</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>ad3f59ba302f141aeedbc095f3402094d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>Energy</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a30227b8974f00e031efb6ba4aa8f980a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>MakeTwoCopies</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a40efaad6e07fd743f5726ac287b07456</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>IsCoreState</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>ae1f515b5624e3622797f32d033b6b6e1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::EinsplineSetBuilder</name>
    <filename>a00202.html</filename>
    <base>qmcplusplus::BasisSetBuilder</base>
    <member kind="enumeration">
      <type></type>
      <name>FormatType</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a8dcd21376da83902acea50d9deeb5990</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>QMCPACK</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a8dcd21376da83902acea50d9deeb5990aa25493f156d3ea34592f20c124ae584a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ESHDF</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a8dcd21376da83902acea50d9deeb5990aa0d15468209a98fa4b3d368d1e6468c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>QMCPACK</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a8dcd21376da83902acea50d9deeb5990aa25493f156d3ea34592f20c124ae584a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ESHDF</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a8dcd21376da83902acea50d9deeb5990aa0d15468209a98fa4b3d368d1e6468c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>map&lt; string, ParticleSet * &gt;</type>
      <name>PtclPoolType</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a0878154607cbe00d8a425a977401e290</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleSet::ParticleLayout_t</type>
      <name>UnitCellType</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>accb749a6c1d642520a9dabf59eda926c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EinsplineOrb&lt; complex&lt; double &gt;, OHMMS_DIM &gt;</type>
      <name>OrbType</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a143a1b6f621ebafb1dcafb568b408a3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EinsplineSetBuilder</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a0f41f336664330081c08f7d4333d3265</anchor>
      <arglist>(ParticleSet &amp;p, PtclPoolType &amp;psets, xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EinsplineSetBuilder</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a97e4b8fd95da553067d017ed720e6615</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>SPOSetBase *</type>
      <name>createSPOSet</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>aace31b9b913d282640ce894186ba6ca4</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CreateIonParticleSet</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a0524098752f01a54e80db0e6dce648bb</anchor>
      <arglist>(string sourceName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ReadOrbitalInfo</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>aaf715b83bb39acd5e2c9f0dea4e8fa31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ReadOrbitalInfo_ESHDF</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a3e43b0f5de3b923bd8692174fe670264</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BroadcastOrbitalInfo</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>af540b455abb82cdaf9239db3e060bc04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CheckLattice</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>aa42ff44f504e6dadedfa2d8acfb8bec8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ReadGvectors_ESHDF</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a6c38841a3f993b86874081a31ad8e2a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTiling</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>ad9eefac39c5c9b0cd725c210061480aa</anchor>
      <arglist>(SPE *oset, int numOrbs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TwistPair</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a43809d2f5c5d983d6f101d8315bb419b</anchor>
      <arglist>(PosType a, PosType b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AnalyzeTwists</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a89f40dda8eef94aaf60770fe1d669b7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AnalyzeTwists2</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>ae2fd31ecd44f0d860c3e70a809da766d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TileIons</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a0748b2487e6190d343332472ffe098c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OccupyBands</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a03d9a791ac36bce38c5f528409428be5</anchor>
      <arglist>(int spin, int sortBands)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OccupyBands_ESHDF</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>aebe864b3c70db1a1d12019a088ee8355</anchor>
      <arglist>(int spin, int sortBands)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReadBands</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>ab3789ae91a657fb502169c8450e64b48</anchor>
      <arglist>(int spin, EinsplineSetLocal *orbitalSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReadBands_ESHDF</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>ab5532ffb057d4f8ed19f4f2362b7a8c1</anchor>
      <arglist>(int spin, EinsplineSetLocal *orbitalSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReadBands</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a6859f1bcb37ef4e2917617bd6563ea8b</anchor>
      <arglist>(int spin, EinsplineSetExtended&lt; complex&lt; double &gt; &gt; *orbitalSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReadBands_ESHDF</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a1871764fbe9910c927f3e5361786c839</anchor>
      <arglist>(int spin, EinsplineSetExtended&lt; complex&lt; double &gt; &gt; *orbitalSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReadBands</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a84b8987c24a3819bbda1f8c42782eab4</anchor>
      <arglist>(int spin, EinsplineSetExtended&lt; double &gt; *orbitalSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReadBands_ESHDF</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>af9438902f47a159388758a2da3be097f</anchor>
      <arglist>(int spin, EinsplineSetExtended&lt; double &gt; *orbitalSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReadBands_ESHDF_Complex</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a607d56eb73ad20b03ea3e23aed2684ce</anchor>
      <arglist>(int spin, SPE *orbitalSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReadBands_ESHDF_Real</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>afcf311989b6dfc5b74271189589da09e</anchor>
      <arglist>(int spin, SPE *orbitalSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReadBands_ESHDF_Big</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>aad2596d18669cab98825d25a411f41f6</anchor>
      <arglist>(int spin, SPE *orbitalSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyBands</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a94369cd2afbe1d038e03f1774075d09f</anchor>
      <arglist>(int numOrbs)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>OrbitalPath</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a89c980915d8b49cafa4565b607d187a9</anchor>
      <arglist>(int ti, int bi)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>CoreStatePath</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>af3a46092ca2d518e7d8a5dfc53a48667</anchor>
      <arglist>(int ti, int bi)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>MuffinTinPath</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a28f28d9a4253a6611514d302c9570ee0</anchor>
      <arglist>(int ti, int bi, int tin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RotateBands_ESHDF</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a0c2e0fbe888fabef295a8dc99cfc5d7f</anchor>
      <arglist>(int spin, EinsplineSetExtended&lt; complex&lt; double &gt; &gt; *orbitalSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RotateBands_ESHDF</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>aca7c6f625d11c5d233783801840ab0f3</anchor>
      <arglist>(int spin, EinsplineSetExtended&lt; double &gt; *orbitalSet)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>bcastSortBands</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a6620f4e99ef58f748f6faa2da398ae63</anchor>
      <arglist>(int N, bool root)</arglist>
    </member>
    <member kind="variable">
      <type>PtclPoolType &amp;</type>
      <name>ParticleSets</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>af7ba64b15f68129808fab77ab21faee5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet &amp;</type>
      <name>TargetPtcl</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>aaeceb28a1e1231e627d1fcd49168ffa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; BandInfo &gt;</type>
      <name>SortBands</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a27569d863d2ab96488130180a9f8e5d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EinsplineSet *</type>
      <name>OrbitalSet</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>ac91bf80ad3d0d883f5548fc85bcd98e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EinsplineSet *</type>
      <name>LastOrbitalSet</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>ab656ed4a12e8862eba3b4be92ebc8696</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>HaveOrbDerivs</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>aea061e48d6dff0fc78f26d16ef17e9f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>xmlNodePtr</type>
      <name>XMLRoot</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a1ecc8f8dd4163354ab88f48e25176cdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hid_t</type>
      <name>H5FileID</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>ab6c41dfff0e14b3ebc130992f9e98db7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>H5FileName</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>ae31d068b9bd48217b9a42cd023da3738</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FormatType</type>
      <name>Format</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>ae75a60750f6bf72a560bac6ca63637d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; int, 3 &gt;</type>
      <name>Version</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a9edadfc88fed50a619054346ba525278</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>parameterGroup</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>aa7abc353d8e3ef4507dd02baa426514f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>ionsGroup</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a82ea7971e39aa0c146ec573c4d20b41c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>eigenstatesGroup</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>afef21edd74aa066dd1bb3fc1f2d3b6ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>Occ</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>afa65b47be5814e42c474007529af40e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>HaveLocalizedOrbs</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a6eb3bdd85bcec6778e32953b6893d84f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>HasCoreOrbs</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>ab774855624ffe7fe95a47e5b6f5326da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tensor&lt; double, OHMMS_DIM &gt;</type>
      <name>Lattice</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>ac5356c1e91507385c978d8ab726ddcdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tensor&lt; double, OHMMS_DIM &gt;</type>
      <name>RecipLattice</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a4f217ea5d7d045f65bc5a799b20d582c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tensor&lt; double, OHMMS_DIM &gt;</type>
      <name>LatticeInv</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a8133d15d0dfd16632657de2dcd402b21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tensor&lt; double, OHMMS_DIM &gt;</type>
      <name>SuperLattice</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a1193749b251d2da9243e0ab7a26f4167</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitCellType</type>
      <name>SuperCell</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>af7bc294ebeb84e0ece4f2d6bd7696cc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitCellType</type>
      <name>PrimCell</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>aa9712f1d7ab0725291784bed293cf5c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitCellType</type>
      <name>PrimCellInv</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>ac3b33a76de628bdb30760872e7bf5581</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumBands</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>aae8f2714151f9654f01400a8b2e7d2c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumElectrons</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a5d19cc85a2b0c5952ef3e4b71c71fa83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumSpins</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a63b3bd3210e9d72adf5065eb5e1fbe7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumTwists</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>aa20fc58243bb574e64525bf84d853118</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumCoreStates</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a2094c1da72ed534f74f1facfa6dd9d05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>MaxNumGvecs</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>adac622cb84d3495b0db7c7a8328c3995</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>MeshFactor</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a93505e558eabdabf212b40b79c686c33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>BufferLayer</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>ae1d1a020ecce9d9d0c03d919eb31b6b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>MatchingTol</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a3271b552bdd431bf2adc953b6e8072d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; int, 3 &gt;</type>
      <name>MeshSize</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>af44a300200d277730d34a3faebcf573a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; vector&lt; TinyVector&lt; int, 3 &gt; &gt; &gt;</type>
      <name>Gvecs</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a546cabe939e2edc498052bbf51452031</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; int &gt;</type>
      <name>IonTypes</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a0b96c6da78f3e5b8d4fa4fbd13de48b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; TinyVector&lt; double, OHMMS_DIM &gt; &gt;</type>
      <name>IonPos</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>aac026b88458319cc85be720f693ffbbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>TwistNum</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>ab0de847717898d7d5c819c4f42fb0e8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; double, OHMMS_DIM &gt;</type>
      <name>givenTwist</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>ad944b17cb88147785ff570e4800e8ff6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; PosType &gt;</type>
      <name>TwistAngles</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>ac6f48412b0c0e58f4baa936425b363a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>TwistSymmetry</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a7316969c22df3a53858658263d30397e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>TwistWeight</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a606af89c796e420f3170e439496477c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; int, OHMMS_DIM &gt;</type>
      <name>TileFactor</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a14f7849aa8216a940da1c3c7baaee96a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tensor&lt; int, OHMMS_DIM &gt;</type>
      <name>TileMatrix</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a3edee8e28de6b0ea1861f37395324ea5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; int, OHMMS_DIM &gt;</type>
      <name>TwistMesh</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a20be80108d0c2b927c17df060691feaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; TinyVector&lt; int, OHMMS_DIM &gt; &gt;</type>
      <name>UseTwists</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a1233fbd69577de7e742c5416b93d40a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>IncludeTwists</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>aaafd04b2ed265ab73a5bf1c1f11149eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>DistinctTwists</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a413c0a14be9f94c18dc7fb53f2033c2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>UseRealOrbitals</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>aac0973fc060224d18041d98ebd1e5c5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumDistinctOrbitals</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a6f570e52f36c4fa5fce7affbe73da926</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumCoreOrbs</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a0d1276c80eca25afa230116958538261</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumValenceOrbs</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a72b2e2ef128c8fa952ffe4ad7905836b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; bool &gt;</type>
      <name>MakeTwoCopies</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a7e64f8144a40ac39f3d1a336911d3030</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>map&lt; TinyVector&lt; int, OHMMS_DIM &gt;, int, Int3less &gt;</type>
      <name>TwistMap</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>ab0c9be6b80b7e07e37c730b682c137b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumMuffinTins</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a63b1ff9b694d1989f42c2c94e7594dd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; RealType &gt;</type>
      <name>MT_APW_radii</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>aa98dbfc3510fb4ba7504531fcc52ec32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Vector&lt; double &gt; &gt;</type>
      <name>MT_APW_rgrids</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a391d7f5077c7adbb6b0cdc717b9cfeb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>MT_APW_lmax</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>aeb65d4abf2e5ff720806325ef7bcffc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>MT_APW_num_radial_points</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a6d66ac42a0a0072ca0fcbe024f99e201</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; PosType &gt;</type>
      <name>MT_centers</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>ae4fd89fbc9bca0298a78423e09dbd0b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; AtomicOrbital&lt; complex&lt; double &gt; &gt; &gt;</type>
      <name>AtomicOrbitals</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a7955a9f74f4301e5a6952f08407023fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>LastSpinSet</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>acb8dc298aaa21c8888ab5b2fc01160ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumOrbitalsRead</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a9dd6aadb27a788df0dc37447d73040b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>occ_format</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>afdb95c2ee1a47fa1305335e3652d4d4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>qafm</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a169363845f88197d08f876be4ff15d2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>particle_hole_pairs</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a6982dc10d01579ae7c7af1c7c64c75fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>makeRotations</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a3515f1d2023fbb3f7b36b340ff4b9f5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; RealType &gt;</type>
      <name>rotationMatrix</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a56818f0d1f75eb9de4c425dd702b10c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>rotatedOrbitals</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a463b15e56186dca0c15e1853babae1cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::map&lt; TinyVector&lt; int, 4 &gt;, OrbType *, Int4less &gt;</type>
      <name>OrbitalMap</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>af657ad6300424aef08602794ea67c481</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::map&lt; H5OrbSet, SPOSetBase *, H5OrbSet &gt;</type>
      <name>SPOSetMap</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a06d9ca83183c80868f8f9eed66f79cb8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::EinsplineSetLocal</name>
    <filename>a00204.html</filename>
    <base>qmcplusplus::EinsplineSet</base>
    <member kind="function">
      <type>SPOSetBase *</type>
      <name>makeClone</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a554da28f08e243f4b89f64b2842c8749</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a55614decceadf408ddc308827faada58</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a8d03182606ebdc99cb116d189b732f02</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi, GradVector_t &amp;dpsi, ValueVector_t &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a431b0481ac33ea5b1edd172eb8f5ad62</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi, GradVector_t &amp;dpsi, HessVector_t &amp;gg_psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a6996ffe0946ac271ec78471506b25bd6</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;psi, GradMatrix_t &amp;dpsi, ValueMatrix_t &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a625375c35e3d6917247acd1d76008768</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, HessMatrix_t &amp;grad_grad_logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>aa8c87ff012f3f2143027314b8024007f</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, HessMatrix_t &amp;grad_grad_logdet, GGGMatrix_t &amp;grad_grad_grad_logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EinsplineSetLocal</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>abdd8ac4a6a4115185fabae5cdfad8b5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; EinsplineOrb&lt; complex&lt; double &gt;, OHMMS_DIM &gt; * &gt;</type>
      <name>Orbitals</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>ab5203f000d9dbff6b626e7448db10e60</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>EinsplineSetBuilder</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a7bb2d12050b8843d9aa8a1872be03599</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::EGOSet</name>
    <filename>a00196.html</filename>
    <base>qmcplusplus::SPOSetBase</base>
    <member kind="function">
      <type></type>
      <name>EGOSet</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a3c3c5bf1f91dc47aa536b293df4f1d86</anchor>
      <arglist>(const vector&lt; PosType &gt; &amp;k, const vector&lt; RealType &gt; &amp;k2)</arglist>
    </member>
    <member kind="function">
      <type>SPOSetBase *</type>
      <name>makeClone</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>ad79ed9698a35aa18e935d9cfd98bb97b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a39ea173c92dae81ac977359c07ff55db</anchor>
      <arglist>(const opt_variables_type &amp;optVariables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrbitalSetSize</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>abe2573f29355b07956892dc6bd7f12ca</anchor>
      <arglist>(int norbs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a55614decceadf408ddc308827faada58</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_p</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>ad80c5e09823c9ccdb1ae88eb4d40ff8d</anchor>
      <arglist>(const PosType &amp;r, ValueType *restrict psi, GradType *restrict dpsi, ValueType *restrict d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a8d03182606ebdc99cb116d189b732f02</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi, GradVector_t &amp;dpsi, ValueVector_t &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>aa0db9a91d8f079188aa5a428380bd075</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi, GradVector_t &amp;dpsi, HessVector_t &amp;grad_grad_psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>ae91b5a23fbd5208cf10757eea50386c8</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, ValueMatrix_t &amp;d2logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>aa8c87ff012f3f2143027314b8024007f</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, HessMatrix_t &amp;grad_grad_logdet, GGGMatrix_t &amp;grad_grad_grad_logdet)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>KptMax</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a165c10b5596d55b2b5f76ae35cd050f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; PosType &gt;</type>
      <name>K</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>ab9303413d522f6b6201db03cfa21d098</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>mK2</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>abb7fcdd8b7ea07d5ccd00264d27fc7bd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::ElectronGasComplexOrbitalBuilder</name>
    <filename>a00206.html</filename>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>ElectronGasComplexOrbitalBuilder</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a7d8e108c57e493bd87e293611c8f682b</anchor>
      <arglist>(ParticleSet &amp;els, TrialWaveFunction &amp;wfs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::ElectronGasBasisBuilder</name>
    <filename>a00205.html</filename>
    <base>qmcplusplus::BasisSetBuilder</base>
    <base>qmcplusplus::BasisSetBuilder</base>
    <member kind="function">
      <type></type>
      <name>ElectronGasBasisBuilder</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a3172ce265f4425ac73c2db533b463c8a</anchor>
      <arglist>(ParticleSet &amp;p, xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>SPOSetBase *</type>
      <name>createSPOSet</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a46e67eedf3dcc334af312180e006c06a</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ElectronGasBasisBuilder</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a3172ce265f4425ac73c2db533b463c8a</anchor>
      <arglist>(ParticleSet &amp;p, xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>SPOSetBase *</type>
      <name>createSPOSet</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a46e67eedf3dcc334af312180e006c06a</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>map&lt; string, ParticleSet * &gt;</type>
      <name>PtclPoolType</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a0878154607cbe00d8a425a977401e290</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>map&lt; string, SPOSetBase * &gt;</type>
      <name>SPOPoolType</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a0561f9826d935f6d6f37060db8ca66a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>map&lt; string, ParticleSet * &gt;</type>
      <name>PtclPoolType</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a0878154607cbe00d8a425a977401e290</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>map&lt; string, SPOSetBase * &gt;</type>
      <name>SPOPoolType</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a0561f9826d935f6d6f37060db8ca66a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleSet *</type>
      <name>targetPtcl</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>ae3854ab4d14a596be8922e72e12465cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EGOSet *</type>
      <name>myBasis</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>af437168a2caa6d0f8452a7a6d4a9983d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealEGOSet *</type>
      <name>myBasis</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a4dc1f8baaee075bba62ec34e5009b442</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::RealEGOSet</name>
    <filename>a00517.html</filename>
    <base>qmcplusplus::SPOSetBase</base>
    <member kind="function">
      <type></type>
      <name>RealEGOSet</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>ab6b07b29280fbad4f1c9d96885f2f5ec</anchor>
      <arglist>(const vector&lt; PosType &gt; &amp;k, const vector&lt; RealType &gt; &amp;k2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>a39ea173c92dae81ac977359c07ff55db</anchor>
      <arglist>(const opt_variables_type &amp;optVariables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrbitalSetSize</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>abe2573f29355b07956892dc6bd7f12ca</anchor>
      <arglist>(int norbs)</arglist>
    </member>
    <member kind="function">
      <type>SPOSetBase *</type>
      <name>makeClone</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>ad79ed9698a35aa18e935d9cfd98bb97b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PosType</type>
      <name>get_k</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>a2e8544d3877fa3efa0902ed69753bca0</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>f</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>a6b5477e849d96e9f46eb6ab1a8cb7f6f</anchor>
      <arglist>(const PosType &amp;pos, int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>a55614decceadf408ddc308827faada58</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_p</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>ad80c5e09823c9ccdb1ae88eb4d40ff8d</anchor>
      <arglist>(const PosType &amp;r, ValueType *restrict psi, GradType *restrict dpsi, ValueType *restrict d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_p</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>a5db1aca87c236b35e4c8dd77280f81fc</anchor>
      <arglist>(const PosType &amp;r, ValueType *restrict psi, GradType *restrict dpsi, HessType *restrict hess)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>a8d03182606ebdc99cb116d189b732f02</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi, GradVector_t &amp;dpsi, ValueVector_t &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>aa0db9a91d8f079188aa5a428380bd075</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi, GradVector_t &amp;dpsi, HessVector_t &amp;grad_grad_psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>ae91b5a23fbd5208cf10757eea50386c8</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, ValueMatrix_t &amp;d2logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>a625375c35e3d6917247acd1d76008768</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, HessMatrix_t &amp;grad_grad_logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>aa8c87ff012f3f2143027314b8024007f</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, HessMatrix_t &amp;grad_grad_logdet, GGGMatrix_t &amp;grad_grad_grad_logdet)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>KptMax</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>a165c10b5596d55b2b5f76ae35cd050f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>kdotr</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>aae00b4ae3263d5ba46f896363baa1e09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; PosType &gt;</type>
      <name>K</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>ab9303413d522f6b6201db03cfa21d098</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>mK2</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>abb7fcdd8b7ea07d5ccd00264d27fc7bd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::ElectronGasOrbitalBuilder</name>
    <filename>a00207.html</filename>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>ElectronGasOrbitalBuilder</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>ab28b998a4da4df32aa62a543618c61af</anchor>
      <arglist>(ParticleSet &amp;els, TrialWaveFunction &amp;wfs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>UseBackflow</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>a0e1374db15f330b4d94b42da1316cafa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BackflowTransformation *</type>
      <name>BFTrans</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>aa1a491a54b76fafb648fa3137be80cf6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HEGGrid&lt; T, 3 &gt;</name>
    <filename>a00301.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>CrystalLattice&lt; T, 3 &gt;</type>
      <name>PL_t</name>
      <anchorfile>a00301.html</anchorfile>
      <anchor>af59ea1c41a10cddfcfb09addb3bb2507</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PL_t::SingleParticlePos_t</type>
      <name>PosType</name>
      <anchorfile>a00301.html</anchorfile>
      <anchor>ae4abf6c896950feb2ce4e457bfcfaf75</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HEGGrid</name>
      <anchorfile>a00301.html</anchorfile>
      <anchor>a0ea7c4075dec3bedc62cb4556202149f</anchor>
      <arglist>(PL_t &amp;lat)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HEGGrid</name>
      <anchorfile>a00301.html</anchorfile>
      <anchor>af4de9499b829ad1e64737b5cfe9b699b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNC</name>
      <anchorfile>a00301.html</anchorfile>
      <anchor>ab3af4fe0a97f76bd13cb8e29ec2c6823</anchor>
      <arglist>(int nup) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfKpoints</name>
      <anchorfile>a00301.html</anchorfile>
      <anchor>ab62d204f1357be324afdf243e3916f16</anchor>
      <arglist>(int nsh) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getShellFromStates</name>
      <anchorfile>a00301.html</anchorfile>
      <anchor>a9c4f57a68cf14e925f525dcaed4110ae</anchor>
      <arglist>(int nst)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getShellIndex</name>
      <anchorfile>a00301.html</anchorfile>
      <anchor>a4e083dca40998699a98370e247a27e3c</anchor>
      <arglist>(int nkpt) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getCellLength</name>
      <anchorfile>a00301.html</anchorfile>
      <anchor>a4c48ab6072beedeaf5bf7cee988ec77d</anchor>
      <arglist>(int nptcl, T rs_in) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sortGrid</name>
      <anchorfile>a00301.html</anchorfile>
      <anchor>a2c5bc5b0a3961a57942b6a724f072870</anchor>
      <arglist>(int nc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createGrid</name>
      <anchorfile>a00301.html</anchorfile>
      <anchor>aafe47a8727ba30324a8cb5f244f273b3</anchor>
      <arglist>(int nc, int nkpts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createGrid</name>
      <anchorfile>a00301.html</anchorfile>
      <anchor>a44cc4665cac7e91d16559f1825c0cbcc</anchor>
      <arglist>(int nc, int nkpts, const PosType &amp;twistAngle)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumKptsHalf</name>
      <anchorfile>a00301.html</anchorfile>
      <anchor>a64ee8236c0135b745e20625ef9df9730</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>MaxKsq</name>
      <anchorfile>a00301.html</anchorfile>
      <anchor>af6bce331f826f4483ce301861f5afdd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PL_t &amp;</type>
      <name>Lattice</name>
      <anchorfile>a00301.html</anchorfile>
      <anchor>a3af7faf66e055ec0e30d798337b4424b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>map&lt; int, vector&lt; PosType &gt; * &gt;</type>
      <name>rs</name>
      <anchorfile>a00301.html</anchorfile>
      <anchor>aafc2faa6a0de6ef7481ed18b105e300c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; PosType &gt;</type>
      <name>kpt</name>
      <anchorfile>a00301.html</anchorfile>
      <anchor>ad2ccd55d8b76aa4d213c889fa4dfbb02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; T &gt;</type>
      <name>mk2</name>
      <anchorfile>a00301.html</anchorfile>
      <anchor>a214f9ba8b394faf642d681397da5e8f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>n_within_shell</name>
      <anchorfile>a00301.html</anchorfile>
      <anchor>a8766e6059a2206e1fb0445aa78e95965</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HEGGrid&lt; T, 2 &gt;</name>
    <filename>a00300.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>CrystalLattice&lt; T, 2 &gt;</type>
      <name>PL_t</name>
      <anchorfile>a00300.html</anchorfile>
      <anchor>a0156a4e79e012c5534684412f46968b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PL_t::SingleParticlePos_t</type>
      <name>PosType</name>
      <anchorfile>a00300.html</anchorfile>
      <anchor>ae4abf6c896950feb2ce4e457bfcfaf75</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HEGGrid</name>
      <anchorfile>a00300.html</anchorfile>
      <anchor>a0ea7c4075dec3bedc62cb4556202149f</anchor>
      <arglist>(PL_t &amp;lat)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HEGGrid</name>
      <anchorfile>a00300.html</anchorfile>
      <anchor>af4de9499b829ad1e64737b5cfe9b699b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNC</name>
      <anchorfile>a00300.html</anchorfile>
      <anchor>ab3af4fe0a97f76bd13cb8e29ec2c6823</anchor>
      <arglist>(int nup) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfKpoints</name>
      <anchorfile>a00300.html</anchorfile>
      <anchor>ab62d204f1357be324afdf243e3916f16</anchor>
      <arglist>(int nsh) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getShellIndex</name>
      <anchorfile>a00300.html</anchorfile>
      <anchor>a4e083dca40998699a98370e247a27e3c</anchor>
      <arglist>(int nkpt) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getShellFromStates</name>
      <anchorfile>a00300.html</anchorfile>
      <anchor>a9c4f57a68cf14e925f525dcaed4110ae</anchor>
      <arglist>(int nst)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getCellLength</name>
      <anchorfile>a00300.html</anchorfile>
      <anchor>a4c48ab6072beedeaf5bf7cee988ec77d</anchor>
      <arglist>(int nptcl, T rs_in) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sortGrid</name>
      <anchorfile>a00300.html</anchorfile>
      <anchor>a2c5bc5b0a3961a57942b6a724f072870</anchor>
      <arglist>(int nc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createGrid</name>
      <anchorfile>a00300.html</anchorfile>
      <anchor>aafe47a8727ba30324a8cb5f244f273b3</anchor>
      <arglist>(int nc, int nkpts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createGrid</name>
      <anchorfile>a00300.html</anchorfile>
      <anchor>a399fb1a94fea6f1f6b11e956d22fcc22</anchor>
      <arglist>(const PosType &amp;twistAngle)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumKptsHalf</name>
      <anchorfile>a00300.html</anchorfile>
      <anchor>a64ee8236c0135b745e20625ef9df9730</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>MaxKsq</name>
      <anchorfile>a00300.html</anchorfile>
      <anchor>af6bce331f826f4483ce301861f5afdd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PL_t &amp;</type>
      <name>Lattice</name>
      <anchorfile>a00300.html</anchorfile>
      <anchor>a3af7faf66e055ec0e30d798337b4424b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>map&lt; int, vector&lt; PosType &gt; * &gt;</type>
      <name>rs</name>
      <anchorfile>a00300.html</anchorfile>
      <anchor>aafc2faa6a0de6ef7481ed18b105e300c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; PosType &gt;</type>
      <name>kpt</name>
      <anchorfile>a00300.html</anchorfile>
      <anchor>ad2ccd55d8b76aa4d213c889fa4dfbb02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; T &gt;</type>
      <name>mk2</name>
      <anchorfile>a00300.html</anchorfile>
      <anchor>a214f9ba8b394faf642d681397da5e8f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>n_within_shell</name>
      <anchorfile>a00300.html</anchorfile>
      <anchor>a8766e6059a2206e1fb0445aa78e95965</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::Backflow_ee</name>
    <filename>a00023.html</filename>
    <templarg>FT</templarg>
    <base>qmcplusplus::BackflowFunctionBase</base>
    <member kind="function">
      <type></type>
      <name>Backflow_ee</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a29cab24ab5f0176b83c00f02a2396a46</anchor>
      <arglist>(ParticleSet &amp;ions, ParticleSet &amp;els)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Backflow_ee</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a3a60edd4bea5d8ea40396f8dbd1d681b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>BackflowFunctionBase *</type>
      <name>makeClone</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>af2f7d40d74198c0b139779784abc90e4</anchor>
      <arglist>(ParticleSet &amp;tqp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFunc</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a367743df86b379306fbc645405640c2a</anchor>
      <arglist>(int ia, int ib, FT *rf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerData</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>ad0bc32071f4a06959f4fbf56fe39d71d</anchor>
      <arglist>(PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportStatus</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a0a144256f92f2fa9e13e840bc30baef7</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOptimizable</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a37f4c45678967a2856b563492cd1fefa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOffset</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a456622eb0cc7e6c2e31913f59987f224</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a51f82f0e686d3c8a11bfe7b0ea132c0f</anchor>
      <arglist>(int iat, int UpdateMode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a057188c49e927fbc6910365a5db3a716</anchor>
      <arglist>(int iat, int UpdateType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>ab0c2fb02b5f89b736c409859701b1e1d</anchor>
      <arglist>(const ParticleSet &amp;P, ParticleSet &amp;QP)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a4272ca49edafd21e70ce7f95051f2f08</anchor>
      <arglist>(const ParticleSet &amp;P, ParticleSet &amp;QP, GradVector_t &amp;Bmat, HessMatrix_t &amp;Amat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>ad6b7106a6c0a41b91dc457c53dc5e16c</anchor>
      <arglist>(const ParticleSet &amp;P, ParticleSet &amp;QP, GradMatrix_t &amp;Bmat_full, HessMatrix_t &amp;Amat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluatePbyP</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a970dc1f543afda00b94208e8dde07a72</anchor>
      <arglist>(const ParticleSet &amp;P, ParticleSet::ParticlePos_t &amp;newQP, const vector&lt; int &gt; &amp;index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluatePbyP</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a0a590bb99a387749ebaa9fb4ef313dc6</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ParticleSet::ParticlePos_t &amp;newQP)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluatePbyP</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a4b9100a42b8fce5e0f203d9697e935ee</anchor>
      <arglist>(const ParticleSet &amp;P, ParticleSet::ParticlePos_t &amp;newQP, const vector&lt; int &gt; &amp;index, HessMatrix_t &amp;Amat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluatePbyP</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a6c31daf2c0b10cd07c03be14398e4479</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ParticleSet::ParticlePos_t &amp;newQP, HessMatrix_t &amp;Amat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluatePbyP</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>ac30ca3f8de2e3488516c463ed3b1e7ec</anchor>
      <arglist>(const ParticleSet &amp;P, ParticleSet::ParticlePos_t &amp;newQP, const vector&lt; int &gt; &amp;index, GradMatrix_t &amp;Bmat, HessMatrix_t &amp;Amat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluatePbyP</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a392102268515bb01db888eb0397d6d53</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ParticleSet::ParticlePos_t &amp;newQP, GradMatrix_t &amp;Bmat, HessMatrix_t &amp;Amat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateBmatOnly</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a63a586954c5d914f45d4aaa856cb5269</anchor>
      <arglist>(const ParticleSet &amp;P, GradMatrix_t &amp;Bmat_full)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateWithDerivatives</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a0e91832812012fe0326a32a519778e4e</anchor>
      <arglist>(const ParticleSet &amp;P, ParticleSet &amp;QP, GradMatrix_t &amp;Bmat_full, HessMatrix_t &amp;Amat, GradMatrix_t &amp;Cmat, GradMatrix_t &amp;Ymat, HessArray_t &amp;Xmat)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BackflowFunctionBase</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>ab1b941b09dea7f41c13d4c899b2a871a</anchor>
      <arglist>(ParticleSet &amp;ions, ParticleSet &amp;els)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a88dafa4dd709560f652fe537111c9590</anchor>
      <arglist>(int NT, int NC)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BackflowFunctionBase</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>ab19898cfec15344a9ec155ad087d94c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setParamIndex</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>abc8dfbb84eee36527512159ebe8a926b</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateBuffer</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a94eeefe3f3d32b34694fa7b25bab6137</anchor>
      <arglist>(PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a73e6a09b942a87453f53859232beb655</anchor>
      <arglist>(PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; FT * &gt;</type>
      <name>RadFun</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a5bbfed4fdfe4d0fad600a45d1e745384</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; FT * &gt;</type>
      <name>uniqueRadFun</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>acf0e69c2827501192f0be534a72245d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>offsetPrms</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>ae898a291685168b8c25db44b8739166d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumGroups</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>abe48fe1d890e3822a6889caa9b3f99b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; int &gt;</type>
      <name>PairID</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a0681630bcbf9bbc04e840b219fe6be11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>first</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a77e49fc0956d412a05337460c7778c6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>myTable</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a047d15b8b83895f2d7e6cf4bb1554d43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet &amp;</type>
      <name>CenterSys</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>afa7c0691ac130c4b8450f7d760bfaf62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumCenters</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a660b39b9516b5c23ab7bb18a6be11e3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumTargets</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>af9a4edd257b214e4a031b7752090a301</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numParams</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a729dc25fb74e3e87f98e2bffffa46a5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>indexOfFirstParam</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a056b093b903a2f4932086b591322737a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; TinyVector&lt; RealType, 3 &gt; &gt;</type>
      <name>derivs</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a00acfd7f22414230cd5de6866f2f9777</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; PosType &gt;</type>
      <name>UIJ</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a22dac5180b012c73521a0701bb0f7e31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; PosType &gt;</type>
      <name>UIJ_temp</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a4294d0a8cd2b12cad1b20d4f6feff530</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HessMatrix_t</type>
      <name>AIJ</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>ac727b5d64192367660eea52937ed8a70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HessVector_t</type>
      <name>AIJ_temp</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>ab76c7adde290708fcd5a05c26a1efc11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradMatrix_t</type>
      <name>BIJ</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>ab1ab4dd7c7d200b8e14a1020600ef6f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradVector_t</type>
      <name>BIJ_temp</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>ab6c3776e61926528de8bce20cd6db6a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType *</type>
      <name>FirstOfU</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a8e57ec9c6cac296827042796bfda4374</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType *</type>
      <name>LastOfU</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a128c5dfd788a50f9cbf5962d76cfc0c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType *</type>
      <name>FirstOfA</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>aa3b34bb80ddfde72adeb18af3b4eefb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType *</type>
      <name>LastOfA</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>abcf7b59e326a2cce3d6a552462d2efad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType *</type>
      <name>FirstOfB</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a8b3b461a553f7391551c06a0458560df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType *</type>
      <name>LastOfB</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a44e326337a957a726fbff33801f33aa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>uniqueFunctions</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a6d1b7bf1fc1e36cf7cdb298aa2fffea9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>opt_variables_type</type>
      <name>myVars</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>aee7ccfd07712b8606ef965967b67e860</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DIM</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a4caf8d8f829279fba122163d961608a4a6c8e5f290be4be86fd5e7048654b4a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SourceIndex</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a96a58e29e8dbf2b5bdeb775cba46556ea732385481fd4cdd65e2b03bf1e5a8391</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VisitorIndex</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a96a58e29e8dbf2b5bdeb775cba46556ea08b87a0f672e69b6c83e764232271b37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WalkerIndex</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a96a58e29e8dbf2b5bdeb775cba46556ea9d56f51d27fea9e97110028e87d4908a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ORB_PBYP_RATIO</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>ab48899087cc647f0f791ed0c459adc53a36688c5f60c79ea07f23643ca46ba2de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ORB_PBYP_ALL</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>ab48899087cc647f0f791ed0c459adc53a6928eef20aebef14a5d7217bf189bd00</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ORB_PBYP_PARTIAL</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>ab48899087cc647f0f791ed0c459adc53aaa80cfa484ee4c6156b6ed902612a893</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ORB_WALKER</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>ab48899087cc647f0f791ed0c459adc53a07a27a0ea3865d7ad4fa3725df5d0da2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ORB_ALLWALKER</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>ab48899087cc647f0f791ed0c459adc53a6ff6aca59c1077d061b4397c134877c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OHMMS_PRECISION</type>
      <name>RealType</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>ad7d82031a4d3e651238601719cfe874c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>IndexType</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>ab1b7173c76e5040d0161e695a129dafe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TinyVector&lt; RealType, DIM &gt;</type>
      <name>PosType</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a2fb4a2cf24372ffb2efeaf47fc7de30d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TinyVector&lt; RealType, DIM &gt;</type>
      <name>GradType</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a81e01bc6fc1db407245d0d503c3767e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tensor&lt; RealType, DIM &gt;</type>
      <name>HessType</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a7a91c930f7184005cafc21f6a51e4c5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; IndexType &gt;</type>
      <name>IndexVector_t</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>afc7fecff6dc6c0903d58b73c0f460cec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; GradType &gt;</type>
      <name>GradVector_t</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a40b08fe355b251891c3055064a3b2fef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; GradType &gt;</type>
      <name>GradMatrix_t</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a004b0809b4054ce1b3f2c1d558488b64</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; HessType &gt;</type>
      <name>HessVector_t</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a8ab9b6b2c9fba2def1bcbac9ef4e4d81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; HessType &gt;</type>
      <name>HessMatrix_t</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a54d0fdcf47124e181b5dae60fcf93ee0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array&lt; HessType, 3 &gt;</type>
      <name>HessArray_t</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>ac4a74d8105115cf95f8c6ce58c59d360</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::Backflow_ee_kSpace</name>
    <filename>a00024.html</filename>
    <base>qmcplusplus::BackflowFunctionBase</base>
    <member kind="function">
      <type></type>
      <name>Backflow_ee_kSpace</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a9c9bd713d7608e00f2a84d6955e7f2a5</anchor>
      <arglist>(ParticleSet &amp;ions, ParticleSet &amp;els)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ad545874c29267d22c89f37f6cbf22e0f</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; RealType &gt; &amp;yk)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>abbb6a3cee774597356081d412d6e3e6a</anchor>
      <arglist>(int NT)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Backflow_ee_kSpace</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a45d2a911c87717fe69802d0c47c864d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>BackflowFunctionBase *</type>
      <name>makeClone</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>af2f7d40d74198c0b139779784abc90e4</anchor>
      <arglist>(ParticleSet &amp;tqp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFunc</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ae408e4f0f0e9c498dc0f805490cf028e</anchor>
      <arglist>(int ia, int ib)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerData</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ad0bc32071f4a06959f4fbf56fe39d71d</anchor>
      <arglist>(PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportStatus</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a0a144256f92f2fa9e13e840bc30baef7</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOptimizable</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a37f4c45678967a2856b563492cd1fefa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOffset</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a456622eb0cc7e6c2e31913f59987f224</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a51f82f0e686d3c8a11bfe7b0ea132c0f</anchor>
      <arglist>(int iat, int UpdateMode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a057188c49e927fbc6910365a5db3a716</anchor>
      <arglist>(int iat, int UpdateType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ab0c2fb02b5f89b736c409859701b1e1d</anchor>
      <arglist>(const ParticleSet &amp;P, ParticleSet &amp;QP)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4272ca49edafd21e70ce7f95051f2f08</anchor>
      <arglist>(const ParticleSet &amp;P, ParticleSet &amp;QP, GradVector_t &amp;Bmat, HessMatrix_t &amp;Amat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ad6b7106a6c0a41b91dc457c53dc5e16c</anchor>
      <arglist>(const ParticleSet &amp;P, ParticleSet &amp;QP, GradMatrix_t &amp;Bmat_full, HessMatrix_t &amp;Amat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluatePbyP</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a970dc1f543afda00b94208e8dde07a72</anchor>
      <arglist>(const ParticleSet &amp;P, ParticleSet::ParticlePos_t &amp;newQP, const vector&lt; int &gt; &amp;index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluatePbyP</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a0a590bb99a387749ebaa9fb4ef313dc6</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ParticleSet::ParticlePos_t &amp;newQP)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluatePbyP</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4b9100a42b8fce5e0f203d9697e935ee</anchor>
      <arglist>(const ParticleSet &amp;P, ParticleSet::ParticlePos_t &amp;newQP, const vector&lt; int &gt; &amp;index, HessMatrix_t &amp;Amat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluatePbyP</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a6c31daf2c0b10cd07c03be14398e4479</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ParticleSet::ParticlePos_t &amp;newQP, HessMatrix_t &amp;Amat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluatePbyP</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ac30ca3f8de2e3488516c463ed3b1e7ec</anchor>
      <arglist>(const ParticleSet &amp;P, ParticleSet::ParticlePos_t &amp;newQP, const vector&lt; int &gt; &amp;index, GradMatrix_t &amp;Bmat, HessMatrix_t &amp;Amat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluatePbyP</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a392102268515bb01db888eb0397d6d53</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ParticleSet::ParticlePos_t &amp;newQP, GradMatrix_t &amp;Bmat, HessMatrix_t &amp;Amat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateBmatOnly</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a63a586954c5d914f45d4aaa856cb5269</anchor>
      <arglist>(const ParticleSet &amp;P, GradMatrix_t &amp;Bmat_full)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateWithDerivatives</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a0e91832812012fe0326a32a519778e4e</anchor>
      <arglist>(const ParticleSet &amp;P, ParticleSet &amp;QP, GradMatrix_t &amp;Bmat_full, HessMatrix_t &amp;Amat, GradMatrix_t &amp;Cmat, GradMatrix_t &amp;Ymat, HessArray_t &amp;Xmat)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Optimize</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ae9460f47c1b5dc8b96f8efb5e7b47efe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numParams</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a729dc25fb74e3e87f98e2bffffa46a5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Fk</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>af10f1fde6715b32ea3831c3196ffc094</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>offsetPrms</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ae898a291685168b8c25db44b8739166d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumGroups</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>abe48fe1d890e3822a6889caa9b3f99b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumKShells</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a805e62172619a3c0f060381f33f74c08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumKVecs</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aca7296e2b76f73d27134b4f601a85cc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; ComplexType &gt;</type>
      <name>Rhok</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a8bcb4d1845e0be2f9b866a2d71349741</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; int &gt;</type>
      <name>PairID</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a0681630bcbf9bbc04e840b219fe6be11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>first</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a77e49fc0956d412a05337460c7778c6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>opt_variables_type</type>
      <name>myVars</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aee7ccfd07712b8606ef965967b67e860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>QMCTraits::ComplexType</type>
      <name>ComplexType</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ad3ec0de1acc714638d7f2a715987a253</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>optimize::VariableSet</type>
      <name>opt_variables_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a7889af7f2cc8ecdb39b57a278df4d3c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>optimize::VariableSet::variable_map_type</type>
      <name>variable_map_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>afef3bb1526675128213cd4dacc3e789d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::Backflow_eI</name>
    <filename>a00025.html</filename>
    <templarg>FT</templarg>
    <base>qmcplusplus::BackflowFunctionBase</base>
    <member kind="function">
      <type></type>
      <name>Backflow_eI</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a0226293487e82c5ba6ceebcd468f86e9</anchor>
      <arglist>(ParticleSet &amp;ions, ParticleSet &amp;els)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Backflow_eI</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>aae3437dd64d27add727a2215b92a20cc</anchor>
      <arglist>(ParticleSet &amp;ions, ParticleSet &amp;els, FT *RF)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Backflow_eI</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>af0e0c30257a6f9933c5d3ecd35cfdc03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>BackflowFunctionBase *</type>
      <name>makeClone</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>af2f7d40d74198c0b139779784abc90e4</anchor>
      <arglist>(ParticleSet &amp;tqp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportStatus</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a0a144256f92f2fa9e13e840bc30baef7</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOptimizable</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a37f4c45678967a2856b563492cd1fefa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOffset</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a456622eb0cc7e6c2e31913f59987f224</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a51f82f0e686d3c8a11bfe7b0ea132c0f</anchor>
      <arglist>(int iat, int UpdateMode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a057188c49e927fbc6910365a5db3a716</anchor>
      <arglist>(int iat, int UpdateType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerData</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>ad0bc32071f4a06959f4fbf56fe39d71d</anchor>
      <arglist>(PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>ab0c2fb02b5f89b736c409859701b1e1d</anchor>
      <arglist>(const ParticleSet &amp;P, ParticleSet &amp;QP)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a4272ca49edafd21e70ce7f95051f2f08</anchor>
      <arglist>(const ParticleSet &amp;P, ParticleSet &amp;QP, GradVector_t &amp;Bmat, HessMatrix_t &amp;Amat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>ad6b7106a6c0a41b91dc457c53dc5e16c</anchor>
      <arglist>(const ParticleSet &amp;P, ParticleSet &amp;QP, GradMatrix_t &amp;Bmat_full, HessMatrix_t &amp;Amat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluatePbyP</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a970dc1f543afda00b94208e8dde07a72</anchor>
      <arglist>(const ParticleSet &amp;P, ParticleSet::ParticlePos_t &amp;newQP, const vector&lt; int &gt; &amp;index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluatePbyP</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a0a590bb99a387749ebaa9fb4ef313dc6</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ParticleSet::ParticlePos_t &amp;newQP)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluatePbyP</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a4b9100a42b8fce5e0f203d9697e935ee</anchor>
      <arglist>(const ParticleSet &amp;P, ParticleSet::ParticlePos_t &amp;newQP, const vector&lt; int &gt; &amp;index, HessMatrix_t &amp;Amat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluatePbyP</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a6c31daf2c0b10cd07c03be14398e4479</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ParticleSet::ParticlePos_t &amp;newQP, HessMatrix_t &amp;Amat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluatePbyP</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>ab659a2467fa5c31c2bf9763c20fe24f8</anchor>
      <arglist>(const ParticleSet &amp;P, ParticleSet::ParticlePos_t &amp;newQP, const vector&lt; int &gt; &amp;index, GradMatrix_t &amp;Bmat_full, HessMatrix_t &amp;Amat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluatePbyP</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a7ba575f1db92ac00b12ef087e5242e79</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ParticleSet::ParticlePos_t &amp;newQP, GradMatrix_t &amp;Bmat_full, HessMatrix_t &amp;Amat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateBmatOnly</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a63a586954c5d914f45d4aaa856cb5269</anchor>
      <arglist>(const ParticleSet &amp;P, GradMatrix_t &amp;Bmat_full)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateWithDerivatives</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a0e91832812012fe0326a32a519778e4e</anchor>
      <arglist>(const ParticleSet &amp;P, ParticleSet &amp;QP, GradMatrix_t &amp;Bmat_full, HessMatrix_t &amp;Amat, GradMatrix_t &amp;Cmat, GradMatrix_t &amp;Ymat, HessArray_t &amp;Xmat)</arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; FT * &gt;</type>
      <name>RadFun</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a5bbfed4fdfe4d0fad600a45d1e745384</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; FT * &gt;</type>
      <name>uniqueRadFun</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>acf0e69c2827501192f0be534a72245d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>offsetPrms</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>ae898a291685168b8c25db44b8739166d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::Backflow_eI_spin</name>
    <filename>a00026.html</filename>
    <templarg>FT</templarg>
    <base>qmcplusplus::BackflowFunctionBase</base>
    <member kind="function">
      <type></type>
      <name>Backflow_eI_spin</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a69e1f0477229d89230a57102c4eb0d8f</anchor>
      <arglist>(ParticleSet &amp;ions, ParticleSet &amp;els)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Backflow_eI_spin</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a314eb489ae079f4eb64c6505c6c56a1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFunc</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>ad93f65144252163b6e06f43e29bfea6e</anchor>
      <arglist>(int source_g, FT *afunc, int target_g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>BackflowFunctionBase *</type>
      <name>makeClone</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>af2f7d40d74198c0b139779784abc90e4</anchor>
      <arglist>(ParticleSet &amp;tqp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportStatus</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a0a144256f92f2fa9e13e840bc30baef7</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOptimizable</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a37f4c45678967a2856b563492cd1fefa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOffset</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a456622eb0cc7e6c2e31913f59987f224</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a51f82f0e686d3c8a11bfe7b0ea132c0f</anchor>
      <arglist>(int iat, int UpdateMode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a057188c49e927fbc6910365a5db3a716</anchor>
      <arglist>(int iat, int UpdateType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerData</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>ad0bc32071f4a06959f4fbf56fe39d71d</anchor>
      <arglist>(PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>ab0c2fb02b5f89b736c409859701b1e1d</anchor>
      <arglist>(const ParticleSet &amp;P, ParticleSet &amp;QP)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a4272ca49edafd21e70ce7f95051f2f08</anchor>
      <arglist>(const ParticleSet &amp;P, ParticleSet &amp;QP, GradVector_t &amp;Bmat, HessMatrix_t &amp;Amat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>ad6b7106a6c0a41b91dc457c53dc5e16c</anchor>
      <arglist>(const ParticleSet &amp;P, ParticleSet &amp;QP, GradMatrix_t &amp;Bmat_full, HessMatrix_t &amp;Amat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluatePbyP</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a970dc1f543afda00b94208e8dde07a72</anchor>
      <arglist>(const ParticleSet &amp;P, ParticleSet::ParticlePos_t &amp;newQP, const vector&lt; int &gt; &amp;index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluatePbyP</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a0a590bb99a387749ebaa9fb4ef313dc6</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ParticleSet::ParticlePos_t &amp;newQP)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluatePbyP</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a4b9100a42b8fce5e0f203d9697e935ee</anchor>
      <arglist>(const ParticleSet &amp;P, ParticleSet::ParticlePos_t &amp;newQP, const vector&lt; int &gt; &amp;index, HessMatrix_t &amp;Amat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluatePbyP</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a6c31daf2c0b10cd07c03be14398e4479</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ParticleSet::ParticlePos_t &amp;newQP, HessMatrix_t &amp;Amat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluatePbyP</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>ab659a2467fa5c31c2bf9763c20fe24f8</anchor>
      <arglist>(const ParticleSet &amp;P, ParticleSet::ParticlePos_t &amp;newQP, const vector&lt; int &gt; &amp;index, GradMatrix_t &amp;Bmat_full, HessMatrix_t &amp;Amat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluatePbyP</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a7ba575f1db92ac00b12ef087e5242e79</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ParticleSet::ParticlePos_t &amp;newQP, GradMatrix_t &amp;Bmat_full, HessMatrix_t &amp;Amat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateBmatOnly</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a63a586954c5d914f45d4aaa856cb5269</anchor>
      <arglist>(const ParticleSet &amp;P, GradMatrix_t &amp;Bmat_full)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateWithDerivatives</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a0e91832812012fe0326a32a519778e4e</anchor>
      <arglist>(const ParticleSet &amp;P, ParticleSet &amp;QP, GradMatrix_t &amp;Bmat_full, HessMatrix_t &amp;Amat, GradMatrix_t &amp;Cmat, GradMatrix_t &amp;Ymat, HessArray_t &amp;Xmat)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Spin</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a480deac19030a3a2a6c835c6f9d925d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; FT * &gt;</type>
      <name>RadFunc</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a19dd83fc6a045181f92716fba96b6478</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; int &gt;</type>
      <name>Fmask</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a03ce17081fd917c20a20b1026bf04ff2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; int &gt;</type>
      <name>offsetPrms</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a6401648ee184267437f33f3f9ea23c0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>s_offset</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>ad1526b9ca521470481e542a44d88bae6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>t_offset</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>ab3882ab0ae641522fe13319b3c5cdb9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::BackflowBuilder</name>
    <filename>a00027.html</filename>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>BackflowBuilder</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a6195eb87a2b87a14583514fe8e601d0e</anchor>
      <arglist>(ParticleSet &amp;p, PtclPoolType &amp;pool, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BackflowBuilder</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>ac2f1c9dc3fca0e7105fc7f3fc341ce64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>BackflowTransformation *</type>
      <name>getBFTrans</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a4579c4d0720109af719861119cf77bfe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>cutOff</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a120593ef0f75a1b3048a26983a40ab61</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>LRHandlerBase</type>
      <name>HandlerType</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>ae4f424c5b27648a26f50492604342b79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>LinearGrid&lt; RealType &gt;</type>
      <name>GridType</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a95c7d80f9182783d8971fc66413fd857</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>map&lt; string, ParticleSet * &gt;</type>
      <name>PtclPoolType</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a0878154607cbe00d8a425a977401e290</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>addOneBody</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>ada205dc494e84bdb9007d94e016fd18b</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>addTwoBody</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>ae2e5999ab46ce0864996bc5f39cd10c8</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>addRPA</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>abbc5ab8bee76e4daf07480aca61c7514</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>makeShortRange_oneBody</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a1d3ce553ae30804d9efb08e2ac3666be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>makeLongRange_oneBody</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>ac6cf348af427657fd60cb4738154602b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>makeShortRange_twoBody</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>afc4406e6f74f982ffb37806a1c125c3d</anchor>
      <arglist>(xmlNodePtr cur, Backflow_ee&lt; BsplineFunctor&lt; double &gt; &gt; *tbf, vector&lt; int &gt; &amp;offsets)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>makeLongRange_twoBody</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>af14e3ff102781f28e9111a21b037896f</anchor>
      <arglist>(xmlNodePtr cur, Backflow_ee_kSpace *tbf, vector&lt; int &gt; &amp;offsets)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PtclPoolType &amp;</type>
      <name>ptclPool</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a4fc7c3d5848a9235a0cf8803ff1f9fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BackflowTransformation *</type>
      <name>BFTrans</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>aa1a491a54b76fafb648fa3137be80cf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IgnoreSpin</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>adb1dcd295910065c3a481b810308383e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>Rs</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a98c1ef08c9694a97084354e5e85bc5a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>Kc</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a46555de4b3eba2a5c14007f217a8c7cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>Rcut</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a8120399ca4124221ed49dfa2f439359b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>OneBody</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a29e143bccd2fed066b80d4239ac05931</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>TwoBody</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a8ce23730eed571c457ea20ade39dbb19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>HandlerType *</type>
      <name>myHandler</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a7b4fdc238840c4280cdcc69f1675a6c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::BackflowFunctionBase</name>
    <filename>a00028.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual BackflowFunctionBase *</type>
      <name>makeClone</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>afdfb8a790896fb77838531c282a4f2c6</anchor>
      <arglist>(ParticleSet &amp;tqp)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>ab15b21e79332cb44a36055f19b793c39</anchor>
      <arglist>(ParticleSet &amp;P)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>acceptMove</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a343cdc985deba4218a6428ff40b21ca7</anchor>
      <arglist>(int iat, int UpdateType)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>restore</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>ae15f4f737cee36641d14e82cb68dea8d</anchor>
      <arglist>(int iat, int UpdateType)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reportStatus</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a4aa248797e96765d158f7fa96e50cb56</anchor>
      <arglist>(ostream &amp;os)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resetParameters</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a8c0c8f47cc4e0adc97b2a42f11223257</anchor>
      <arglist>(const opt_variables_type &amp;active)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>checkInVariables</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>adc2681d8748c0b42a2ffa45d21c7b466</anchor>
      <arglist>(opt_variables_type &amp;active)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>aa3438cc415984cdefb08b05f9ba36bc3</anchor>
      <arglist>(const opt_variables_type &amp;active)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isOptimizable</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a8234f38af92ebfad6b1add9625c9cad0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>indexOffset</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a95d0d2cb562ff6d5a07d5285f13f1ec8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>registerData</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a0b9cac09922c8dee7ba2c8a6c8260dcb</anchor>
      <arglist>(PooledData&lt; RealType &gt; &amp;buf)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluate</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a306134573a94adb47baa6d26497cc110</anchor>
      <arglist>(const ParticleSet &amp;P, ParticleSet &amp;QP)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluate</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>ac3ce5239ee4f08e79ef7373e4fbf414a</anchor>
      <arglist>(const ParticleSet &amp;P, ParticleSet &amp;QP, GradMatrix_t &amp;Bmat, HessMatrix_t &amp;Amat)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluatePbyP</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>af487368321ab8b291aca36d750dd19da</anchor>
      <arglist>(const ParticleSet &amp;P, ParticleSet::ParticlePos_t &amp;newQP, const vector&lt; int &gt; &amp;index)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluatePbyP</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>ac2d3a593c935d4f218d8ed1ed3eb9d98</anchor>
      <arglist>(const ParticleSet &amp;P, ParticleSet::ParticlePos_t &amp;newQP, const vector&lt; int &gt; &amp;index, HessMatrix_t &amp;Amat)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluatePbyP</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a094736d6abecaccbc5d3ad165a1f3053</anchor>
      <arglist>(const ParticleSet &amp;P, ParticleSet::ParticlePos_t &amp;newQP, const vector&lt; int &gt; &amp;index, GradMatrix_t &amp;Bmat, HessMatrix_t &amp;Amat)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluatePbyP</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a4cd34ec6610d40854fd27d3768dd51ac</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ParticleSet::ParticlePos_t &amp;newQP)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluatePbyP</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>aaeb9121429658967d423de9288116f5b</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ParticleSet::ParticlePos_t &amp;newQP, HessMatrix_t &amp;Amat)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluatePbyP</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a59d648a0f416e32d57e2e7c7ce12b246</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ParticleSet::ParticlePos_t &amp;newQP, GradMatrix_t &amp;Bmat, HessMatrix_t &amp;Amat)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluateBmatOnly</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a2947bd981db10c7be1fb95751721e002</anchor>
      <arglist>(const ParticleSet &amp;P, GradMatrix_t &amp;Bmat_full)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluateWithDerivatives</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>ab6639a2e734c22e4e265183c3954f3ff</anchor>
      <arglist>(const ParticleSet &amp;P, ParticleSet &amp;QP, GradMatrix_t &amp;Bmat, HessMatrix_t &amp;Amat, GradMatrix_t &amp;Cmat, GradMatrix_t &amp;Ymat, HessArray_t &amp;Xmat)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::BackflowTransformation</name>
    <filename>a00029.html</filename>
    <member kind="enumvalue">
      <type>@</type>
      <name>DIM</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a458e651af6690959efa2afb96be7d609a6c8e5f290be4be86fd5e7048654b4a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ORB_PBYP_RATIO</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a1f9aebf1de3ebbf4283a4dcf73308562a36688c5f60c79ea07f23643ca46ba2de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ORB_PBYP_ALL</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a1f9aebf1de3ebbf4283a4dcf73308562a6928eef20aebef14a5d7217bf189bd00</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ORB_PBYP_PARTIAL</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a1f9aebf1de3ebbf4283a4dcf73308562aaa80cfa484ee4c6156b6ed902612a893</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ORB_WALKER</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a1f9aebf1de3ebbf4283a4dcf73308562a07a27a0ea3865d7ad4fa3725df5d0da2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ORB_ALLWALKER</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a1f9aebf1de3ebbf4283a4dcf73308562a6ff6aca59c1077d061b4397c134877c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OHMMS_PRECISION</type>
      <name>RealType</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>ad7d82031a4d3e651238601719cfe874c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>IndexType</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>ab1b7173c76e5040d0161e695a129dafe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TinyVector&lt; RealType, DIM &gt;</type>
      <name>PosType</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a2fb4a2cf24372ffb2efeaf47fc7de30d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TinyVector&lt; RealType, DIM &gt;</type>
      <name>GradType</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a81e01bc6fc1db407245d0d503c3767e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tensor&lt; RealType, DIM &gt;</type>
      <name>HessType</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a7a91c930f7184005cafc21f6a51e4c5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; IndexType &gt;</type>
      <name>IndexVector_t</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>afc7fecff6dc6c0903d58b73c0f460cec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; GradType &gt;</type>
      <name>GradVector_t</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a40b08fe355b251891c3055064a3b2fef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; GradType &gt;</type>
      <name>GradMatrix_t</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a004b0809b4054ce1b3f2c1d558488b64</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; HessType &gt;</type>
      <name>HessVector_t</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a8ab9b6b2c9fba2def1bcbac9ef4e4d81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; HessType &gt;</type>
      <name>HessMatrix_t</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a54d0fdcf47124e181b5dae60fcf93ee0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array&lt; HessType, 3 &gt;</type>
      <name>HessArray_t</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>ac4a74d8105115cf95f8c6ce58c59d360</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MCWalkerConfiguration::Walker_t</type>
      <name>Walker_t</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>ac075f56c393d5ec9a998ec36c58ad7d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>map&lt; string, ParticleSet * &gt;</type>
      <name>PtclPoolType</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a0878154607cbe00d8a425a977401e290</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BackflowTransformation</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>ae143abd904986dbb126fecb27a08cbbf</anchor>
      <arglist>(ParticleSet &amp;els)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFrom</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>abda5add3d04c861f6bac8f65d99e8cbe</anchor>
      <arglist>(BackflowTransformation &amp;tr)</arglist>
    </member>
    <member kind="function">
      <type>BackflowTransformation *</type>
      <name>makeClone</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a58a659470b136936c1d793a1176eee2a</anchor>
      <arglist>(ParticleSet &amp;tqp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BackflowTransformation</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a24c84a73483747bf965537fadee067f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a37388336277774662582bb68a2e9f04b</anchor>
      <arglist>(const ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a6e2a0263327b04aedc11e7cbd9d8928a</anchor>
      <arglist>(int iat=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportStatus</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a0a144256f92f2fa9e13e840bc30baef7</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOptimizable</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a37f4c45678967a2856b563492cd1fefa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerData</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a626fb61633ffee310ea491277c0093a9</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateBuffer</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a40531bfb1cd6fb3a10f269d6d08a2d4a</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf, bool redo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a5261ed49b5195980c91c0024b860fdb2</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformOnly</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a1a1f36bbe181c8c1185768b6ae94dfa6</anchor>
      <arglist>(const ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluatePbyP</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>acd9bfb066e92134f2566f28293639654</anchor>
      <arglist>(const ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluatePbyPWithGrad</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a773b0b9bfc4637857c7be00f6f371770</anchor>
      <arglist>(const ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluatePbyPAll</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>ae01983ead11a745a9bcbe74a689af9a9</anchor>
      <arglist>(const ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateBmatOnly</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a8b4d1f1b65409048a0a9627ed0e129c5</anchor>
      <arglist>(const ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a0bb2ffda8422273ba3ef55b25eb07fe1</anchor>
      <arglist>(const ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a16814d2a02e2a5598e7ff50eb49336a7</anchor>
      <arglist>(const ParticleSet &amp;P, ParticleSet &amp;Pnew)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateDerivatives</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>ad8698dcfbb76bffd4a2692bb712855e0</anchor>
      <arglist>(const ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testDeriv</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a96c40f3a3b846a0c3515dffc5c37adff</anchor>
      <arglist>(const ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testPbyP</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a3483c282c99b1c25fade0c9992806908</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumTargets</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>af9a4edd257b214e4a031b7752090a301</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>activeParticle</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>adc757844732d540ad18c7dfe4c9cb7a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet</type>
      <name>QP</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a7486e74e107818ae1376ded7091f0624</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>myTable</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a047d15b8b83895f2d7e6cf4bb1554d43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numParams</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a729dc25fb74e3e87f98e2bffffa46a5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>UpdateMode</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a742b26dcec2d1a30c3b4fa0a5cc34304</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>map&lt; int, int &gt;</type>
      <name>optIndexMap</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a8c53d5b3dfa661d9217b0ce734028dc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>cutOff</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a120593ef0f75a1b3048a26983a40ab61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numVarBefore</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>afddb2cb499de1d5f6d6b3b4e3ebaa276</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet &amp;</type>
      <name>targetPtcl</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a1a952580e121ccf8f929cadf8d1e0a5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradVector_t</type>
      <name>Bmat</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>aee3261c5777d376c600e2c6fc942e63d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradMatrix_t</type>
      <name>Bmat_full</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a0d31c73fde79bc86e5531a54e3ca07aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradMatrix_t</type>
      <name>Bmat_temp</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a1f3cb1592d021b24dd09c1bc12779641</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HessMatrix_t</type>
      <name>Amat</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>ac5b25981490c38dbe4458814656f4e2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HessMatrix_t</type>
      <name>Amat_temp</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>ad229cd5b91a8fd5694ddfea9b0922970</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HessArray_t</type>
      <name>Xmat</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>ada83fb7d93fb817146ad253f1ed35b22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradMatrix_t</type>
      <name>Ymat</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a53c4d51089477dc74f551ba2a49280cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradMatrix_t</type>
      <name>Cmat</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>adeefbe67dafe2ad8bd4c4b7a1f0606c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType *</type>
      <name>FirstOfP</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a17a21981f3def5c09e136b5b54e69542</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType *</type>
      <name>LastOfP</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a74411a3bd73d1e8642970fd07039a5fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType *</type>
      <name>FirstOfA</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>aa3b34bb80ddfde72adeb18af3b4eefb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType *</type>
      <name>LastOfA</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>abcf7b59e326a2cce3d6a552462d2efad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType *</type>
      <name>FirstOfB</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a8b3b461a553f7391551c06a0458560df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType *</type>
      <name>LastOfB</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a44e326337a957a726fbff33801f33aa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType *</type>
      <name>FirstOfA_temp</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a11b105d35ec327cfdd7d296b696da901</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType *</type>
      <name>LastOfA_temp</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a1734c69e7a23580329912791d177a9ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType *</type>
      <name>FirstOfB_temp</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>acf019e9f8f60ce01060cd8cd885e4ab0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType *</type>
      <name>LastOfB_temp</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>ab6dfae11b98b15cb303dc0697457e635</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HessType</type>
      <name>HESS_ID</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>af3d52975a76a8f02ad99d6b75340a0dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HessType</type>
      <name>DummyHess</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a148ee9dedded31af09b14bc404193a2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; BackflowFunctionBase * &gt;</type>
      <name>bfFuns</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a2e0eaf1936cc3f4f72cd64a42665650b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>map&lt; string, int &gt;</type>
      <name>sources</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a59f1c2e4359da543afda74db955062f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; string &gt;</type>
      <name>names</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a101ef7ab66e8cda97cf4eeae60a44cc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticlePos_t</type>
      <name>newQP</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a2777023d493e7ac066162c60b03ac36e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticlePos_t</type>
      <name>oldQP</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a4026e83021845ff3d50ebf058bfaa617</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; PosType &gt;</type>
      <name>storeQP</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>ac3acbfae533613ce872f4753bc34632a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>indexQP</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a0169b7dc0c6065be896b63e1198ed89f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>index</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a73126dc70f868d763bc1d614a9a21010</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>opt_variables_type</type>
      <name>myVars</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>aee7ccfd07712b8606ef965967b67e860</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::BFsplineFunctor</name>
    <filename>a00041.html</filename>
    <templarg>T</templarg>
    <base>OptimizableFunctorBase</base>
    <member kind="typedef">
      <type>real_type</type>
      <name>value_type</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a80349dc942856ab617148301967b7ff0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BFsplineFunctor</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a467e2ee557cc31abb8045f819df82663</anchor>
      <arglist>(real_type cusp=0.0)</arglist>
    </member>
    <member kind="function">
      <type>OptimizableFunctorBase *</type>
      <name>makeClone</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a4747acd34f8d2daa0656125f1290e4d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReportLevel</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>afe5c9ec0d2dd8cff075f08a584b9c8ad</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a578be9c59132b8633a67a98c39318777</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a4860196a527546949f6366d22425c009</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>af08f1f70ecd1cddcf7d274cbcad42f40</anchor>
      <arglist>(real_type r, real_type rinv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateAll</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a1b404b15a77d0f3bd4e6ff6a527a518d</anchor>
      <arglist>(real_type r, real_type rinv)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a6d4da0f3cb2c37f2105f35aba1c3a813</anchor>
      <arglist>(real_type r, real_type &amp;dudr, real_type &amp;d2udr2)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>ac059e0873401047f0ec172926e036249</anchor>
      <arglist>(real_type r, real_type &amp;dudr, real_type &amp;d2udr2, real_type &amp;d3udr3)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>evaluateDerivatives</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>ad6d1fb2ec9788f67d5c09d67421efc8d</anchor>
      <arglist>(real_type r, vector&lt; TinyVector&lt; real_type, 3 &gt; &gt; &amp;derivs)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a6a91c8094ddd49aa8a2da9df6b439164</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>aff351ffb66160b6458d6057fa6bc2a5f</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a388f572c62279f839ee138a9afbdeeb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>aa0c53387f47a46bf4c549b8f3bc6a941</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumParams</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>ad6a9ff93babb132679b358f65cc4f74d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Dummy</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>af0d36ed1262fa1d8cc7c19a10b0ad433</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TinyVector&lt; real_type, 16 &gt;</type>
      <name>A</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a6d7fae8b4bdd51b5fa7b8338f36a8660</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TinyVector&lt; real_type, 16 &gt;</type>
      <name>dA</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a251bb4527e4fc67c4af2bde5226d9cd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TinyVector&lt; real_type, 16 &gt;</type>
      <name>d2A</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>af8357e9a2880b58f291c8b8d202f34d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TinyVector&lt; real_type, 16 &gt;</type>
      <name>d3A</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a4d4262cc5a98921ec32079e2ced239f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>DeltaR</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a6f765f548b34c52b0bb04cb1547a332f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>DeltaRInv</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>aa83e30a0f2cd68ac47d9109a9de8ee4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>CuspValue</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a42c349175cb918bc3d2d6db30343bfc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Y</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a8b4dc77b2f75ec3e80eb8987f98db7af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>dY</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a6a8818d83e16d75f6e13cc9df1e809ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>d2Y</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>ab2751661aab00028080a57c4747bd245</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; real_type &gt;</type>
      <name>SplineCoefs</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>ac6a09c7a76cf663384976ca941a8ec29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; TinyVector&lt; real_type, 3 &gt; &gt;</type>
      <name>SplineDerivs</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>ae08a1ebb60e2f570f2d3c577bee7a84a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; real_type &gt;</type>
      <name>Parameters</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a833f350789d91a7009bd5bfed436072d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>ParameterNames</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>ac741043bb199ff71a842b2fa7533b083</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>elementType</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>af9fb45fbb9f8eb930b69c8f527739a86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>pairType</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>acad0cf39a8afeaf743ed02f24f8a9f4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ResetCount</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>aa101f5cc56da77ba0b4840f11cb6f723</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ReportLevel</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a4508e8abc214ee5db33c185fd6594709</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ci_builder</name>
    <filename>a00069.html</filename>
    <templarg>CMAX</templarg>
    <member kind="typedef">
      <type>std::set&lt; unsigned long &gt;</type>
      <name>iset_type</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a05c0656e0dac228edf1ca77d2cd71757</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ci_builder</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a95d98bb42ee0ab955cd063d1749e19a2</anchor>
      <arglist>(int vmax=1, int cmax=CMAX)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ci_builder</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>abb782eca6a1850288e5f28e65f885a4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>singles</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>ac9024288d8c156ac000967fb64ffc818</anchor>
      <arglist>(vector&lt; NODETYPE &gt; &amp;excitations)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>promote</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a71db28161f8ba45b70c55f17a90034d5</anchor>
      <arglist>(vector&lt; NODETYPE &gt; &amp;excitations, int level)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>changed_bit</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>ae65b88b544b1be22903c018b46af3af0</anchor>
      <arglist>(std::bitset&lt; CMAX &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find_parent</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>ab0840bc4a4b98ff5bf3bf78a43778e05</anchor>
      <arglist>(NODETYPE &amp;anode, vector&lt; NODETYPE &gt; &amp;p)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>max_vbm</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>ae4c521fd2a00f396fb2f6039a8927aeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>max_cbm</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a46dc665474351f41c2983d1a092e26fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>v_offset</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a8260086b92fc84eead09becd58339b66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; iset_type * &gt;</type>
      <name>occupied</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a671b7131b8158e564382f7ef6d401f78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; iset_type * &gt;</type>
      <name>excited</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a64f2b39f89aa40ca3f81ed84c49c7c5c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ci_configuration</name>
    <filename>a00070.html</filename>
    <member kind="function">
      <type></type>
      <name>ci_configuration</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>aa94054d2f6061f84f0051db9e8bb7747</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ci_configuration</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>ad69261704934c341be35a1bf5131451a</anchor>
      <arglist>(vector&lt; bool &gt; &amp;v, int n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ci_configuration</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a147e92e2b11d49707d7abf50641a4526</anchor>
      <arglist>(const ci_configuration &amp;c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ci_configuration</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a9f0d0cdc7f9b63a8d828fe0ceb457639</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a67e87d0e15fc3dd26aa8be0d27959dd4</anchor>
      <arglist>(const ci_configuration &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSingle</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a4d92506c31559a71121f1a10d76d728e</anchor>
      <arglist>(const ci_configuration &amp;c, int &amp;rem, int &amp;add) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>count</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a0745638c9967e2ed90bc96c012288c55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; bool &gt;</type>
      <name>occup</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a85e30e42d951ca29a987c7edf53ebd7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>taken</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a2f82d1d1293c3de8527c67be4b2880f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nExct</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a5af199d08765c7b60dcfc98fc7a293ee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ci_configuration2</name>
    <filename>a00071.html</filename>
    <member kind="function">
      <type></type>
      <name>ci_configuration2</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>af5e2858f0d9606c6d051e55998019e46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ci_configuration2</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a1fd3eb2649488f901acb2b549c069cdb</anchor>
      <arglist>(vector&lt; int &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ci_configuration2</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>aa5afc68feab51a6e3ebec6d22524a0bd</anchor>
      <arglist>(const ci_configuration2 &amp;c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ci_configuration2</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a8ae4e9cca3954bdb13b58d9fba40eb5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>af76386b86e59da2071b392109f335e26</anchor>
      <arglist>(const ci_configuration2 &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>calculateNumOfExcitations</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a0cb3845a6c23c17a138e98ef698f4ff6</anchor>
      <arglist>(const ci_configuration2 &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>calculateExcitations</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>abbcffade312f0aa6c2c32de0999c7023</anchor>
      <arglist>(const ci_configuration2 &amp;c, int &amp;n, vector&lt; int &gt; &amp;pos, vector&lt; int &gt; &amp;ocp, vector&lt; int &gt; &amp;uno) const </arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>occup</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a4fcf7d05cbe8db8d4c6580540479749e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ci_node</name>
    <filename>a00072.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>scalar_traits&lt; T &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a98b3e0d4801b3d1a1d0f84987986a2cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>scalar_traits&lt; T &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a0837c2a0e2270d3a9b7f9e7373e2df49</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TinyVector&lt; value_type, OHMMS_DIM &gt;</type>
      <name>GradType</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ab54366d6050654ea84a84c430e7cbed8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TinyVector&lt; real_type, OHMMS_DIM &gt;</type>
      <name>PosType</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a03713a12577aff6ca1ba379da1ae11b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tensor&lt; value_type, OHMMS_DIM &gt;</type>
      <name>HessType</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ab00a28ac4dfd72651372bcb548c4b06a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; value_type &gt;</type>
      <name>ValueVector</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a448175bde670477befe0be1e19fbd472</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; value_type &gt;</type>
      <name>ValueMatrix</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a1089fa1c6b92e2b85ac15a90322be426</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; GradType &gt;</type>
      <name>GradVector</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a026d7edf4a43bac72cff7568783408d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; GradType &gt;</type>
      <name>GradMatrix</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a300785277936f307c1357f48a7525d87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; HessType &gt;</type>
      <name>HessVector</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a23196c3b5a63e35f6786e38ede72c780</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; HessType &gt;</type>
      <name>HessMatrix</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>afd114f51fb60a67904898951490ac502</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TinyVector&lt; HessType, OHMMS_DIM &gt;</type>
      <name>GGGType</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>aef1b45f2c244184714e5fcb6bb87ad2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; GGGType &gt;</type>
      <name>GGGVector</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a113e96385bd4f7a1e8b1926e01fc9733</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; GGGType &gt;</type>
      <name>GGGMatrix</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>aa5fc4466f40f759ac5fcf0fb3b42bd14</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ci_node</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a61b9ce0b586014e6d3e72104a54cab46</anchor>
      <arglist>(int m, int n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ci_node</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a07fe77323591f620dcc29522b8678d4e</anchor>
      <arglist>(const ci_node &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ci_node</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a7900790ec11f70396c444e56edf3e779</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>build_tree</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ad8525269c5dea00e70feba4ccb285855</anchor>
      <arglist>(std::vector&lt; configuration &gt; &amp;confg, configuration &amp;baseC, std::vector&lt; int &gt; &amp;map2det)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRatios</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a12831d959ab1591be3d51dd945d4404c</anchor>
      <arglist>(const ValueMatrix &amp;inv0, const ValueMatrix &amp;psi, const GradMatrix &amp;dpsi, const ValueMatrix &amp;d2psi, ValueVector &amp;ratios, GradMatrix &amp;grads, ValueMatrix &amp;lapls, bool replace_row=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRatios</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>acb41ef90338515f4818f3cab36f46aa7</anchor>
      <arglist>(const int iat, const ValueMatrix &amp;inv0, const ValueMatrix &amp;psi, const GradVector &amp;dpsi, const ValueVector &amp;d2psi, ValueVector &amp;ratios, GradMatrix &amp;grads, ValueMatrix &amp;lapls, bool replace_row=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRatios</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ae10150b04d0750e2322bbe068faec7ff</anchor>
      <arglist>(const ValueMatrix &amp;inv0, const ValueMatrix &amp;psi, ValueVector &amp;ratios, bool replace_row=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRatiosByColPromotion</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a05ac98bc1cc48b132742240a8334bc7e</anchor>
      <arglist>(const ValueMatrix &amp;inv0, const ValueMatrix &amp;psi, ValueVector &amp;ratios, T ratio_base)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRatiosByColPromotion</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a8c2cf45dd98f814fec83c3a0abd1948d</anchor>
      <arglist>(const int iat, const ValueMatrix &amp;inv0, const ValueMatrix &amp;psi, const GradVector &amp;dpsi, const ValueVector &amp;d2psi, ValueVector &amp;ratios, GradMatrix &amp;grads, ValueMatrix &amp;lapls, T ratio_base)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRatiosByColPromotion</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a8efe3c4e3f8da29c155117214f5ffff0</anchor>
      <arglist>(const ValueMatrix &amp;inv0, const ValueMatrix &amp;psi, const GradMatrix &amp;dpsi, const ValueMatrix &amp;d2psi, ValueVector &amp;ratios, GradMatrix &amp;grads, ValueMatrix &amp;lapls, T ratio_base)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>debugRatios</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>adb9e30a58f3c863db1970496a88b64ea</anchor>
      <arglist>(const ValueMatrix &amp;psi, ValueVector &amp;dets, bool replace_row=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>debugRatios</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a145061a0f3af1ac3e7b1a3eb999a136e</anchor>
      <arglist>(const ValueMatrix &amp;psi, const GradMatrix &amp;dpsi, const ValueMatrix &amp;d2psi, ValueVector &amp;ratios, GradMatrix &amp;grads, ValueMatrix &amp;lapls, bool replace_row=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>debugRatiosByColPromotion</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a65ad6d85727c5467442a7cc455bc9ced</anchor>
      <arglist>(const ValueMatrix &amp;psi0, const ValueMatrix &amp;psic, ValueVector &amp;dets)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>debugRatiosByColPromotion</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a9fd51996789e6da23b19df632d25ab3c</anchor>
      <arglist>(const ValueMatrix &amp;psi0, const ValueMatrix &amp;psi, const GradMatrix &amp;dpsi, const ValueMatrix &amp;d2psi, ValueVector &amp;ratios, GradMatrix &amp;grads, ValueMatrix &amp;lapls)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_node</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a4e9a26105a27daf5735df217b05d9b5e</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>my_id</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>af9650afe4b09491cf2583300c86c81fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>parent_id</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a62f7b4fcd2a5b25ad917f276876f592e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>from</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a16d981023742d3bd53f1385790714190</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>to</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ac0ed249f3db34b8135fd2717bda56844</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix</type>
      <name>inverse</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a91ea454032d6cfa2a75f7caaa36d9c24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>peers</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ad8d4ec018e3cca88ec7aa3f357d5e67a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; ci_node * &gt;</type>
      <name>children</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a6594385555df9f84379fcd62345e267c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>configuration</type>
      <name>myC</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>aa67cbbdd7ba79a7f796a7191a7a81ea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradMatrix</type>
      <name>dpsiM</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ae5aa956fb46c4695384f4780e0c00c8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradVector</type>
      <name>dpsiV</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a473498d9a3490b08862518ed2ac0f98e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix</type>
      <name>d2psiM</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>aaf2d9a34a98147cb006f63e19c01e247</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueVector</type>
      <name>d2psiV</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a92ef1fffaccdba1bb0fc36c8da1e8949</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ci_node</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ac5b9d16c9abd0605bc7676a0b05c9be7</anchor>
      <arglist>(int m, int n, int id, int parent, int r, int a, configuration c)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>look_for_peers</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a8dc0115469ba99290998b3b45c8a3588</anchor>
      <arglist>(vector&lt; configuration &gt; &amp;confg, int &amp;count, std::vector&lt; int &gt; &amp;map2det)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>set_peers</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a5833344dab0e9e31596b2549732833a8</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;p_peers)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::DiracDeterminantAFM</name>
    <filename>a00144.html</filename>
    <base>qmcplusplus::DiracDeterminantBase</base>
    <member kind="function">
      <type>DiracDeterminantBase *</type>
      <name>makeCopy</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a01928c751ed5f15622795d9f18a7004e</anchor>
      <arglist>(SPOSetBase *spo) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiracDeterminantAFM</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a7f042283a3f07e84941a7599fa5e5a8a</anchor>
      <arglist>(ParticleSet &amp;ptcl, SPOSetBasePtr const &amp;gs_spos, int first=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateDerivatives</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a291c52dc43d28edb9643f61b763e0952</anchor>
      <arglist>(ParticleSet &amp;P, const opt_variables_type &amp;active, vector&lt; RealType &gt; &amp;dlogpsi, vector&lt; RealType &gt; &amp;dhpsioverpsi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerTimers</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a43dda6f0760a96661a60a054c6efb017</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiracDeterminantBase</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a68bed559706ab0d46279711785324a5a</anchor>
      <arglist>(SPOSetBasePtr const &amp;spos, int first=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DiracDeterminantBase</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a80e4937c444503934716628f84f78312</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiracDeterminantBase</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>aab014b3fa1c77dae6c829c8848f610ba</anchor>
      <arglist>(const DiracDeterminantBase &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>DiracDeterminantBase &amp;</type>
      <name>operator=</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a355585ffac738afbf4f73eff625f487f</anchor>
      <arglist>(const DiracDeterminantBase &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>SPOSetBasePtr</type>
      <name>getPhi</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>ae66e8095581477b07ee5b234c9125c53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>rows</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>afcf2537c8fa2b126ce0bd439b718ac8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>cols</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a76ebb19de89034f2b0569b2b17099649</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>aeda7eeed68a4b565a648127d98932ee6</anchor>
      <arglist>(int first, int nel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealType</type>
      <name>getAlternatePhaseDiff</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a94fdfbb56af9d5f10930feed1d003b45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealType</type>
      <name>getAlternatePhaseDiff</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a7306c84cf71b68bdb9a2aa970f1f67a8</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBF</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a7afb2f20704b253609e753bea519d09b</anchor>
      <arglist>(BackflowTransformation *BFTrans)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetParameters</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>ac24a8995185c831d553e16e08759051c</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>evaluateDerivatives</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a0c6ec8f2148db39510d0908b5c544e8d</anchor>
      <arglist>(ParticleSet &amp;P, const opt_variables_type &amp;active, int offset, Matrix&lt; RealType &gt; &amp;dlogpsi, Array&lt; GradType, 3 &gt; &amp;dG, Matrix&lt; RealType &gt; &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportStatus</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a0a144256f92f2fa9e13e840bc30baef7</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>ac57c6e9fd2d3430971c0d2487bc97ceb</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resize</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a017712a05713204fcb4c0ebad7ae7af3</anchor>
      <arglist>(int nel, int morb)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealType</type>
      <name>registerData</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a3a9504682e4614b09fa9e2dc4a3492aa</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>registerDataForDerivatives</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>aec97befbe1039cb84368e2b645b0e7d8</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf, int storageType=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>memoryUsage_DataForDerivatives</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>ac376cd2b448d380a980f4a28d4b62855</anchor>
      <arglist>(ParticleSet &amp;P, long &amp;orbs_only, long &amp;orbs, long &amp;invs, long &amp;dets)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyToDerivativeBuffer</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>aa7a71e7dd1168c1adc2fb5b3023c74ee</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFromDerivativeBuffer</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>ad8ea342c169bde6d2499d2553a9681d6</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealType</type>
      <name>evaluateLogForDerivativeBuffer</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a238b23c4bc446262e3ad631789e0bfd5</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealType</type>
      <name>evaluateLogFromDerivativeBuffer</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a450ed9e8123dc4b9a41eafee8e409941</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealType</type>
      <name>updateBuffer</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a43d137b67ccd11fdd4a6e32956289a09</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf, bool fromscratch=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a5261ed49b5195980c91c0024b860fdb2</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dumpToBuffer</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>ab1a527695dc08648c2e975fddddcb117</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dumpFromBuffer</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>aa423c75ff4e6a458c49a5c4567a89df0</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ValueType</type>
      <name>ratio</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>aaf92d0a56eb21d0be9cc8d4858b2bb0d</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ValueType</type>
      <name>alternateRatio</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>af902814950fe1fa0f8df44ab5a7042ab</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ValueType</type>
      <name>ratio</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a9387b584be241ae39c5e6219d3c09630</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ValueType</type>
      <name>ratioGrad</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a335227714f2aa8204f1d6510bc816656</anchor>
      <arglist>(ParticleSet &amp;P, int iat, GradType &amp;grad_iat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradType</type>
      <name>evalGrad</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a1a139df3ca80dd840a60983fb6aefcbb</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradType</type>
      <name>evalGradSource</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>ada9e50b06c0d80cd01dad36e64fe70af</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet &amp;source, int iat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradType</type>
      <name>evalGradSource</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>aa9669ee203cdfc6181027b896a42e556</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet &amp;source, int iat, TinyVector&lt; ParticleSet::ParticleGradient_t, OHMMS_DIM &gt; &amp;grad_grad, TinyVector&lt; ParticleSet::ParticleLaplacian_t, OHMMS_DIM &gt; &amp;lapl_grad)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradType</type>
      <name>evalGradSourcep</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a5d1142067b80660c96e8cd39b50334cd</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet &amp;source, int iat, TinyVector&lt; ParticleSet::ParticleGradient_t, OHMMS_DIM &gt; &amp;grad_grad, TinyVector&lt; ParticleSet::ParticleLaplacian_t, OHMMS_DIM &gt; &amp;lapl_grad)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ValueType</type>
      <name>logRatio</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a5f5ae85a57832b3f71b6752e7a59594f</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>acceptMove</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>af79a1f1637e80a729043600a7656054d</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>restore</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a4fad6e178271bda6f6e70a5965041472</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>aeba37f5a7f9e1c209be41e1f8c2d316d</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>aafdf0e0d12e7430761a5298ecfb55296</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a1a52ecfd10c7131ed35170b1ab3f600e</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ValueType</type>
      <name>evaluate</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a6fcf6c5536c6d4f8188bf2ead4a20b5a</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OrbitalBasePtr</type>
      <name>makeClone</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>ab68f5027a5eee70c7e4e130cfa9aab1b</anchor>
      <arglist>(ParticleSet &amp;tqp) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>get_ratios</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a0afd740894bec6ecb30956568b7deeeb</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; ValueType &gt; &amp;ratios)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLogEpsilon</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>ac84518716fa021f95ea994e7c589b497</anchor>
      <arglist>(ValueType x)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>optimize::VariableSet</type>
      <name>opt_variables_type</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a7889af7f2cc8ecdb39b57a278df4d3c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opt_variables_type</type>
      <name>myVars</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>aee7ccfd07712b8606ef965967b67e860</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumOrbitals</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a092436aa5a88afa396b4df35f1f79395</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>pm</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a56512c1978f0506986901ec9dd30867b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueMatrix_t</type>
      <name>AoptInv</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a96973caaf5fdbe8d741fb49a07d0e32c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueMatrix_t</type>
      <name>BasisVals</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a47ee6c9b1e33a78b87e3b928072b07aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueMatrix_t</type>
      <name>BasisLapl</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a6f25797682c1f1b5dc845d43a1668c53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GradMatrix_t</type>
      <name>BasisGrad</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>adb64179fc4ad50b11e2f8a2049798a95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GradMatrix_t</type>
      <name>dgrad_dC</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>aa19cd82feb677d96fdd0fab879a1b204</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GradMatrix_t</type>
      <name>G_gamma</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>aa84f227e5de327baa956ec72ad7b7353</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueMatrix_t</type>
      <name>dlogdet_dC</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>afe2ba7e27dafd9e69e08f86fc38403b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueMatrix_t</type>
      <name>dlapl_dC</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a37eaf5a6727379d457ea4a00597b710f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueMatrix_t</type>
      <name>Gamma</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a8237eb25ca690dae6c0d3e91604fb64c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueMatrix_t</type>
      <name>L_gamma</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a3668aea9a13f78e38a2035e3d0124f71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; PosType &gt;</type>
      <name>MyG</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a7d0a3c3c2231e010d060d7f51dc19936</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleSet *</type>
      <name>targetPtcl</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a38de935921735223bc6966d5b2d06efa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::IndexVector_t</type>
      <name>IndexVector_t</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a48f397afe493fcd1fd83df18f620597c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::ValueVector_t</type>
      <name>ValueVector_t</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>af0072d026a739d6ea5b0b6dedd50f05c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::ValueMatrix_t</type>
      <name>ValueMatrix_t</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>af3413ac443a5faab8104995c447023e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::GradVector_t</type>
      <name>GradVector_t</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a4bc05716d8ac48c041d7f7ebb1a93e1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::GradMatrix_t</type>
      <name>GradMatrix_t</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>aea9f69b1090511c7ba964b0a1d5dae75</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::HessMatrix_t</type>
      <name>HessMatrix_t</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a1d4918327b0d0a4eb005688b9b4944d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::HessType</type>
      <name>HessType</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a14e990f5af087815f7b2a74f1c573476</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Optimizable</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a92c20354cdb1900a8f7605ee9f1d70cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NewTimer</type>
      <name>UpdateTimer</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a246fd5c732c167dd6ff44bd1d5ba860d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NewTimer</type>
      <name>RatioTimer</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a389dd73e741b46fd5c8a8d9f67367ee4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NewTimer</type>
      <name>InverseTimer</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a7517d4e5c7696bc2a07859835a313e6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NewTimer</type>
      <name>BufferTimer</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a49647a9caf1eb78ffe8e284dce5de913</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NewTimer</type>
      <name>SPOVTimer</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a1b6d0b3ac91babd355a341af417bb1b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NewTimer</type>
      <name>SPOVGLTimer</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a0e84b2a49c228868a5425bca8b2091f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>opt_variables_type</type>
      <name>myVars</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>aee7ccfd07712b8606ef965967b67e860</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NP</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a60c04f5f0a9da38f288ce36947d8a8b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumOrbitals</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a092436aa5a88afa396b4df35f1f79395</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumPtcls</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>ac696dd2e9e407dabdbda0ce636a569e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>FirstIndex</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>ae4f84e7f9eab061d98f9c4d1422b0ab4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>LastIndex</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a9da0233db61be933269e71059da27b34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>WorkingIndex</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a023f5923e42795109afe51badbe1145e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SPOSetBasePtr</type>
      <name>Phi</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>aa4b4af7bef2254ccaa86be0d76cc76f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>psiM</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a5873b1ad34c9f4331d317667b4f3401d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>psiM_temp</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>ad3f6fcda3950d1b059bcde59ef3327be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>psiMinv</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a7c5bbacf96f042d861e341ea0b3c6e5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradMatrix_t</type>
      <name>dpsiM</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a6bd5f6c172f77ad8c665ac07e25de0ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradMatrix_t</type>
      <name>dpsiM_temp</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>aa5f49a2a4460dc045c935883ef1600f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>d2psiM</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>af1b1bc3d5ef7b754872e6453bb8d3276</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>d2psiM_temp</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a28519b07bd374f9dd1e7a41d20a850b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradMatrix_t</type>
      <name>grad_source_psiM</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>af3082683221a9a48c36fc4e8267bf131</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradMatrix_t</type>
      <name>grad_lapl_source_psiM</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>aca55a2524b39ee051d4ed8e708846f48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HessMatrix_t</type>
      <name>grad_grad_source_psiM</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a8ce9914996cbbcc034864d954577d26b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradMatrix_t</type>
      <name>phi_alpha_Minv</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a52d450ed4c1ef2e08e7cda0805da049b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradMatrix_t</type>
      <name>grad_phi_Minv</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>abff884c2beec4c2d832d4dbb71712568</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>lapl_phi_Minv</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a892e99c2a33a948fca5db427a2417283</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HessMatrix_t</type>
      <name>grad_phi_alpha_Minv</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a2a14104f7afe35e74e2ae4b31f6af99b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueVector_t</type>
      <name>psiV</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a140e9126026e1e48dd94c10f78d5c53b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradVector_t</type>
      <name>dpsiV</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a7c914592db6f59c3930f449249df1a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueVector_t</type>
      <name>d2psiV</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>aff0b4a50ad52c7d5244f794295d12199</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueVector_t</type>
      <name>workV1</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a3da54446100cfd9aa48060200fc55a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueVector_t</type>
      <name>workV2</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>ab1693c6edd4fdc1d6b714334da5c73d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradVector_t</type>
      <name>workG</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>ab2aaa347b095ac33de661dc3e639180a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; ValueType &gt;</type>
      <name>WorkSpace</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a82acd766e4c9287d60caf8c9a0c9f21a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; IndexType &gt;</type>
      <name>Pivot</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a7f846ed193030661fcd2bb37e9e83667</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>curRatio</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a3223a5f5d9b426c097308900f6d26140</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>cumRatio</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a44e142b575d7a4520f467da760b01138</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType *</type>
      <name>FirstAddressOfG</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>aeae6622a6b99c85ea788a61e69f247ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType *</type>
      <name>LastAddressOfG</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>af271fc71c124dccd4a3b7c0fee8c6a76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType *</type>
      <name>FirstAddressOfdV</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>af9aaf6d5ef85cf881273486b3a00f901</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType *</type>
      <name>LastAddressOfdV</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>ac26ed38d27d895650b26887b89f6ced7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>myG</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>aa0dba9d4f5bcf53c9acb35826f95a05e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>myG_temp</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a855362d0cf4bade046252012629c970f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleLaplacian_t</type>
      <name>myL</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a44658be2f16a467db55191123408425f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleLaplacian_t</type>
      <name>myL_temp</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a606558266a45e3424bb76c10f28cbc8a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::DiracDeterminantBase</name>
    <filename>a00145.html</filename>
    <base>qmcplusplus::OrbitalBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkInVariables</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a88a6186be563e27aae6c96d5cb158a1c</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a5f6106b3d71cd4680414f394b491f076</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>evaluateDerivatives</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a291c52dc43d28edb9643f61b763e0952</anchor>
      <arglist>(ParticleSet &amp;P, const opt_variables_type &amp;active, vector&lt; RealType &gt; &amp;dlogpsi, vector&lt; RealType &gt; &amp;dhpsioverpsi)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DiracDeterminantBase *</type>
      <name>makeCopy</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a01928c751ed5f15622795d9f18a7004e</anchor>
      <arglist>(SPOSetBase *spo) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::DiracDeterminantCUDA</name>
    <filename>a00146.html</filename>
    <base>qmcplusplus::DiracDeterminantBase</base>
    <member kind="typedef">
      <type>SPOSetBase::IndexVector_t</type>
      <name>IndexVector_t</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a48f397afe493fcd1fd83df18f620597c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::ValueVector_t</type>
      <name>ValueVector_t</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>af0072d026a739d6ea5b0b6dedd50f05c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::ValueMatrix_t</type>
      <name>ValueMatrix_t</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>af3413ac443a5faab8104995c447023e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::GradVector_t</type>
      <name>GradVector_t</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a4bc05716d8ac48c041d7f7ebb1a93e1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::GradMatrix_t</type>
      <name>GradMatrix_t</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>aea9f69b1090511c7ba964b0a1d5dae75</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleSet::Walker_t</type>
      <name>Walker_t</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>abbc77657579efa0cd83de2b985f92476</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiracDeterminantCUDA</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>ad21d0574099d704da1fad628d28fbd84</anchor>
      <arglist>(SPOSetBasePtr const &amp;spos, int first=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiracDeterminantCUDA</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a764f2dd42d8ac96ffa4be1844a1b8705</anchor>
      <arglist>(const DiracDeterminantCUDA &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a5e4a7bd7e23a6beab0d8bc131be6ffc4</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>ad4ac6ecacd80d95941026660c9799fd0</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>aeba37f5a7f9e1c209be41e1f8c2d316d</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>aca440575f4e041f0f17ceeb85c6c2865</anchor>
      <arglist>(vector&lt; Walker_t * &gt; &amp;walkers, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>adc39ad0ba1da288400ea43f0139c77c0</anchor>
      <arglist>(const vector&lt; Walker_t * &gt; &amp;walkers, const vector&lt; int &gt; &amp;iatList)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a83f2c7b01b7a6e2fc1b6f1e897f427c2</anchor>
      <arglist>(PointerPool&lt; gpu::device_vector&lt; CudaRealType &gt; &gt; &amp;pool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recompute</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>aec25e8d4d6b5bedf0b8cd46e744bdada</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, bool firstTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLog</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>ae1d637e358143385c1f5cce32a88f076</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, vector&lt; RealType &gt; &amp;logPsi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGradient</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>aa86695e2b40516cb0c1fb59f680806ee</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, int iat, vector&lt; GradType &gt; &amp;grad)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcGradient</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>adfb00492389c1143eb4cc765f6770dae</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, int iat, vector&lt; GradType &gt; &amp;grad)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ratio</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a80f366490cae3b045e13a8b0383ce25e</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, int iat, vector&lt; ValueType &gt; &amp;psi_ratios)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ratio</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a9179c096d699ac78a5bb036680287a88</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, int iat, vector&lt; ValueType &gt; &amp;psi_ratios, vector&lt; GradType &gt; &amp;grad)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ratio</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>ada35f710eab25f8a7ce3ce209afb4dc4</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, int iat, vector&lt; ValueType &gt; &amp;psi_ratios, vector&lt; GradType &gt; &amp;grad, vector&lt; ValueType &gt; &amp;lapl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcRatio</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>af1aad054f76e6c545c1587cb9d08892b</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, int iat, vector&lt; ValueType &gt; &amp;psi_ratios, vector&lt; GradType &gt; &amp;grad, vector&lt; ValueType &gt; &amp;lapl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRatio</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a87ae6eadcb06dff4e011aa533a87a356</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, int iat, vector&lt; ValueType &gt; &amp;psi_ratios, vector&lt; GradType &gt; &amp;grad, vector&lt; ValueType &gt; &amp;lapl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ratio</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a180290d4b01ccd239bdab59e02b82902</anchor>
      <arglist>(vector&lt; Walker_t * &gt; &amp;walkers, vector&lt; int &gt; &amp;iatList, vector&lt; PosType &gt; &amp;rNew, vector&lt; ValueType &gt; &amp;psi_ratios, vector&lt; GradType &gt; &amp;grad, vector&lt; ValueType &gt; &amp;lapl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradLapl</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a8e190391940e269747262091f2af0241</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, GradMatrix_t &amp;grads, ValueMatrix_t &amp;lapl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NLratios</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a15bcbd3fba973ab8724980c8bfb009d5</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, vector&lt; NLjob &gt; &amp;jobList, vector&lt; PosType &gt; &amp;quadPoints, vector&lt; ValueType &gt; &amp;psi_ratios)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NLratios_CPU</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a7c56cf82f3e0d17e80af559e0ee33d99</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, vector&lt; NLjob &gt; &amp;jobList, vector&lt; PosType &gt; &amp;quadPoints, vector&lt; ValueType &gt; &amp;psi_ratios)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resizeLists</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a8685102b7ae7e89a9a27ab6c8e514360</anchor>
      <arglist>(int numWalkers)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>RowStride</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a13ca391d7b6d2be14bc0a7a9756b8df5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>AOffset</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a22ec7ee4712901f4d46b61d100713558</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>AinvOffset</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a1821cbcc3cf3798da490ff31b33e45bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>newRowOffset</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a9066571dc61c61290884042b940d0624</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>AinvDeltaOffset</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a92247ba454761a2ba6298fbb8ebdeda9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>AinvColkOffset</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>afac9d8236ec4cc04fa98682bff7a02d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>gradLaplOffset</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a3d157a9265f9ad306d4dd5c82bdf9c48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>newGradLaplOffset</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a7702806747a9e53e3f0ad3ae7fda06ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>workOffset</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>aba3f5a634df7c0c6e527001dbe0bf520</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::host_vector&lt; CudaRealType * &gt;</type>
      <name>UpdateList</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a427d378a8a3f61c92b10c3afd64c1f3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::device_vector&lt; CudaRealType * &gt;</type>
      <name>UpdateList_d</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a439f9d7482ca487d02efbcef551a962f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::host_vector&lt; updateJob &gt;</type>
      <name>UpdateJobList</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a48e9a96d25684a7ee9e9aa4d4df00e5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::device_vector&lt; updateJob &gt;</type>
      <name>UpdateJobList_d</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a7fd1a463fedd248047e28192c1bc0fdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; CudaRealType * &gt;</type>
      <name>srcList</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a8eb8674f0d96031c5fcc527ba3bbde8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; CudaRealType * &gt;</type>
      <name>destList</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a077f299c2c9671295fe094af43feb4d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; CudaRealType * &gt;</type>
      <name>AList</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a17de50556e3b1fcf8b75f7bbbd848bc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; CudaRealType * &gt;</type>
      <name>AinvList</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a8e9c90d9d1893859b5e54a08a977c4e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; CudaRealType * &gt;</type>
      <name>newRowList</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a9aeff0bc72eaa0fd2aebb9e69eeda8d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; CudaRealType * &gt;</type>
      <name>AinvDeltaList</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a9786da0c455607b45058a235c522860f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; CudaRealType * &gt;</type>
      <name>AinvColkList</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>aaa1a9007731cb8b50335087de630af37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; CudaRealType * &gt;</type>
      <name>gradLaplList</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>ac3076bbb30984ac0c1dcafff610dcb6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; CudaRealType * &gt;</type>
      <name>newGradLaplList</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>abd7b03dc57fdc0f0d58a52f208ce7ebd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; CudaRealType * &gt;</type>
      <name>workList</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a84bf5ab4815bbf0c9b88975e8125995d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; CudaRealType * &gt;</type>
      <name>GLList</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a81b9d7e4a001380b99f3678cf7cf86ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::device_vector&lt; CudaRealType * &gt;</type>
      <name>srcList_d</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>adfa2a585286a7fc58d6530b9bfe1b5a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::device_vector&lt; CudaRealType * &gt;</type>
      <name>destList_d</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a052c0808e49b9decf7fed8bc9e50bbcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::device_vector&lt; CudaRealType * &gt;</type>
      <name>AList_d</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a7eb02b2c264e0ea46b85d3bb2811b0dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::device_vector&lt; CudaRealType * &gt;</type>
      <name>AinvList_d</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>acc6a950aa10bdedd309f67594886ad41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::device_vector&lt; CudaRealType * &gt;</type>
      <name>newRowList_d</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a2da6ab4d53cca0e3333eb2fce4af521f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::device_vector&lt; CudaRealType * &gt;</type>
      <name>AinvDeltaList_d</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>aa41744d5af73585f9c6b25d2c5e6f907</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::device_vector&lt; CudaRealType * &gt;</type>
      <name>AinvColkList_d</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>ab26a258ffc1015452a51b52ea378fba2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::device_vector&lt; CudaRealType * &gt;</type>
      <name>gradLaplList_d</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>ad9932aec2d6007d4e868c7b0f7f7049f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::device_vector&lt; CudaRealType * &gt;</type>
      <name>newGradLaplList_d</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>acb61fafef6f07cee28b979581c297506</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::device_vector&lt; CudaRealType * &gt;</type>
      <name>workList_d</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a6cd7d85f468759f4c9c05a721cfa925b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::device_vector&lt; CudaRealType * &gt;</type>
      <name>GLList_d</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a92d526cf0e86dd48c560b49ae0ca620a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::device_vector&lt; CudaRealType &gt;</type>
      <name>ratio_d</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a32af189dce2cfb23b682ab02519e5f97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::host_vector&lt; CudaRealType &gt;</type>
      <name>ratio_host</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a780fdb2084a20e7adc504c5188623edc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::device_vector&lt; CudaRealType &gt;</type>
      <name>gradLapl_d</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a189145f48faf2809ee1918a581a415d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::host_vector&lt; CudaRealType &gt;</type>
      <name>gradLapl_host</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>aa909a59e846fd8ba7e9edb9f370524b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::device_vector&lt; int &gt;</type>
      <name>iatList_d</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>ae9d2c17a3e4473c186c22597fa81f25e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::host_vector&lt; int &gt;</type>
      <name>iatList</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a9ff7b3081f640b856214cc3ef05eb6b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::device_vector&lt; CudaRealType &gt;</type>
      <name>NLrowBuffer_d</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>af268c9eccc3fc2554a67ae43c4e9b92b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::host_vector&lt; CudaRealType &gt;</type>
      <name>NLrowBuffer_host</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a1dbda064a5575f08b8ec58f0716c8c1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::device_vector&lt; CudaRealType * &gt;</type>
      <name>SplineRowList_d</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>acdc95d5cf1210207b332e216bccf4b12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::host_vector&lt; CudaRealType * &gt;</type>
      <name>SplineRowList_host</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a4f8978d461247b43314698a59fde91be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::device_vector&lt; CudaRealType * &gt;</type>
      <name>RatioRowList_d</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a53a3319a1601191fc99a286d80bffa8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::host_vector&lt; CudaRealType * &gt;</type>
      <name>RatioRowList_host</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>ac1fa943eb6b8f590be804938050f81c4</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::device_vector&lt; CudaRealType &gt;</type>
      <name>NLposBuffer_d</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a98eee10e8554f12f972a0a3a1bfbd8c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::host_vector&lt; CudaRealType &gt;</type>
      <name>NLposBuffer_host</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>ae7dd84e35df99cb0b38a099edc752c01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::device_vector&lt; CudaRealType * &gt;</type>
      <name>NLAinvList_d</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a0d2a590cd20d923638739df60ecb1b68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::host_vector&lt; CudaRealType * &gt;</type>
      <name>NLAinvList_host</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a4ba32adc155ee4faa58acfd081a08b05</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::device_vector&lt; int &gt;</type>
      <name>NLnumRatioList_d</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a1d27ecde8d420fc24dd77e5656978012</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::host_vector&lt; int &gt;</type>
      <name>NLnumRatioList_host</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a27cec6efc3b4e873b48172b570777ac8</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::device_vector&lt; int &gt;</type>
      <name>NLelecList_d</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a401094a8bed2ffd4918b79f0f9f30f25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::host_vector&lt; int &gt;</type>
      <name>NLelecList_host</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a6824fe128baff6bc66e5e897a739172c</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::device_vector&lt; CudaRealType &gt;</type>
      <name>NLratios_d</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a1b0218fe8d05d7d9c56971a3f9fe096e</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::host_vector&lt; CudaRealType &gt;</type>
      <name>NLratios_host</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a7cb319ec3312b453d2f3f195e358ab4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::device_vector&lt; CudaRealType * &gt;</type>
      <name>NLratioList_d</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a23ec0afe71953337986a7b3420a3cc28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::host_vector&lt; CudaRealType * &gt;</type>
      <name>NLratioList_host</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a43719cf7cbee269509e4341b701c1989</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>NLrowBufferRows</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a2ae13bd1a83ee961a0e2870832e6ca74</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::DiracDeterminantIterative</name>
    <filename>a00147.html</filename>
    <base>qmcplusplus::DiracDeterminantBase</base>
    <member kind="typedef">
      <type>SPOSetBase::IndexVector_t</type>
      <name>IndexVector_t</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a48f397afe493fcd1fd83df18f620597c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::ValueVector_t</type>
      <name>ValueVector_t</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>af0072d026a739d6ea5b0b6dedd50f05c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::ValueMatrix_t</type>
      <name>ValueMatrix_t</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>af3413ac443a5faab8104995c447023e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::GradVector_t</type>
      <name>GradVector_t</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a4bc05716d8ac48c041d7f7ebb1a93e1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::GradMatrix_t</type>
      <name>GradMatrix_t</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>aea9f69b1090511c7ba964b0a1d5dae75</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiracDeterminantIterative</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a1949122a5905fc9b6eabd45bd67ef0fe</anchor>
      <arglist>(SPOSetBasePtr const &amp;spos, int first=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DiracDeterminantIterative</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a5213cf0e84f575c82e2239bece4d8de2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiracDeterminantIterative</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>ae3621a5a940df07fbdc015ee70b35fe4</anchor>
      <arglist>(const DiracDeterminantIterative &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>DiracDeterminantIterative &amp;</type>
      <name>operator=</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>af4cf854a38cb3bf05ac92d7f62c31321</anchor>
      <arglist>(const DiracDeterminantIterative &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>DiracDeterminantBase::ValueType</type>
      <name>ratio</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>aaf92d0a56eb21d0be9cc8d4858b2bb0d</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>DiracDeterminantBase::ValueType</type>
      <name>ratio</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a9387b584be241ae39c5e6219d3c09630</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a017712a05713204fcb4c0ebad7ae7af3</anchor>
      <arglist>(int nel, int morb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>aeda7eeed68a4b565a648127d98932ee6</anchor>
      <arglist>(int first, int nel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_iterative</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>ac9eb11c7d4b084e642b4fceccb82717e</anchor>
      <arglist>(int first, int nel, double &amp;temp_cutoff)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SparseToCSR</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>af70e9d924535ec260412cc6f390517ad</anchor>
      <arglist>(vector&lt; int &gt; &amp;Arp, vector&lt; int &gt; &amp;Ari, vector&lt; double &gt; &amp;Arx)</arglist>
    </member>
    <member kind="function">
      <type>DiracDeterminantBase::RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a1a52ecfd10c7131ed35170b1ab3f600e</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>DiracDeterminantBase::RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>aafdf0e0d12e7430761a5298ecfb55296</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; list&lt; pair&lt; int, double &gt; &gt; &gt;</type>
      <name>particleLists</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>ae3668fa2ede4e67f9f01bb83e864f163</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list&lt; pair&lt; int, double &gt; &gt;</type>
      <name>oldPtcl</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a77978706d9d918dfe9288f3ed55c2f1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>cutoff</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a034fbedcce0aee66ee125138543e2703</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::DiracDeterminantOpt</name>
    <filename>a00148.html</filename>
    <base>qmcplusplus::DiracDeterminantBase</base>
    <member kind="function">
      <type>DiracDeterminantBase *</type>
      <name>makeCopy</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a01928c751ed5f15622795d9f18a7004e</anchor>
      <arglist>(SPOSetBase *spo) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiracDeterminantOpt</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a17158a360ce858493a5c7e90f323c82a</anchor>
      <arglist>(ParticleSet &amp;ptcl, SPOSetBasePtr const &amp;gs_spos, int first=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>aee70ac47d82bb68d8ceceead7c033fe2</anchor>
      <arglist>(const opt_variables_type &amp;optvars)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateDerivatives</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a291c52dc43d28edb9643f61b763e0952</anchor>
      <arglist>(ParticleSet &amp;P, const opt_variables_type &amp;active, vector&lt; RealType &gt; &amp;dlogpsi, vector&lt; RealType &gt; &amp;dhpsioverpsi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>optimize::VariableSet</type>
      <name>opt_variables_type</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a7889af7f2cc8ecdb39b57a278df4d3c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opt_variables_type</type>
      <name>myVars</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>aee7ccfd07712b8606ef965967b67e860</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumOrbitals</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a092436aa5a88afa396b4df35f1f79395</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumBasis</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>ad31d99bfdb0cc5745c194bab1de89f32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueMatrix_t</type>
      <name>AoptInv</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a96973caaf5fdbe8d741fb49a07d0e32c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueMatrix_t</type>
      <name>BasisVals</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a47ee6c9b1e33a78b87e3b928072b07aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueMatrix_t</type>
      <name>BasisLapl</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a6f25797682c1f1b5dc845d43a1668c53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GradMatrix_t</type>
      <name>BasisGrad</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>adb64179fc4ad50b11e2f8a2049798a95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GradMatrix_t</type>
      <name>dgrad_dC</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>aa19cd82feb677d96fdd0fab879a1b204</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GradMatrix_t</type>
      <name>G_gamma</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>aa84f227e5de327baa956ec72ad7b7353</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueMatrix_t</type>
      <name>dlogdet_dC</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>afe2ba7e27dafd9e69e08f86fc38403b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueMatrix_t</type>
      <name>dlapl_dC</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a37eaf5a6727379d457ea4a00597b710f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueMatrix_t</type>
      <name>Gamma</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a8237eb25ca690dae6c0d3e91604fb64c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueMatrix_t</type>
      <name>L_gamma</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a3668aea9a13f78e38a2035e3d0124f71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; TinyVector&lt; int, 2 &gt; &gt;</type>
      <name>VarIndex</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a1c0cec3bc9bde496e79c305dd0f902c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; PosType &gt;</type>
      <name>MyG</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a7d0a3c3c2231e010d060d7f51dc19936</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::DiracDeterminantT</name>
    <filename>a00149.html</filename>
    <templarg></templarg>
    <base>qmcplusplus::DiracDeterminantBase</base>
    <member kind="function">
      <type></type>
      <name>DiracDeterminantT</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a6bdecad936ae4ca2f6d1a005068185c3</anchor>
      <arglist>(SPOSet &amp;spos, int first=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateSingle</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>aaf0e73668657cb96192fd8d3f95cca7c</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateSingleAll</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a2ca7266ec93cb07742377610a88d9072</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateAll</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a6d0c05efa665abf23d1fd25f215098cd</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SPOSet &amp;</type>
      <name>Phi</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a97cf3f457e00957a65228bd2d43569a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::DiracDeterminantTruncation</name>
    <filename>a00150.html</filename>
    <base>qmcplusplus::DiracDeterminantBase</base>
    <member kind="typedef">
      <type>SPOSetBase::IndexVector_t</type>
      <name>IndexVector_t</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a48f397afe493fcd1fd83df18f620597c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::ValueVector_t</type>
      <name>ValueVector_t</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>af0072d026a739d6ea5b0b6dedd50f05c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::ValueMatrix_t</type>
      <name>ValueMatrix_t</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>af3413ac443a5faab8104995c447023e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::GradVector_t</type>
      <name>GradVector_t</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a4bc05716d8ac48c041d7f7ebb1a93e1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::GradMatrix_t</type>
      <name>GradMatrix_t</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>aea9f69b1090511c7ba964b0a1d5dae75</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiracDeterminantTruncation</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a0bdc97f5fec14f8fd2a6090a288aabc6</anchor>
      <arglist>(SPOSetBasePtr const &amp;spos, int first=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DiracDeterminantTruncation</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>ad3d89ac035c5c3eb4ec6384ecf1a2332</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiracDeterminantTruncation</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>af7af31344bd3772e1db2417e745fd8f1</anchor>
      <arglist>(const DiracDeterminantTruncation &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>DiracDeterminantTruncation &amp;</type>
      <name>operator=</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a39a0691fecad5f48494f9f37847d3c55</anchor>
      <arglist>(const DiracDeterminantTruncation &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_truncation</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>ac9afb2003ff4b0371b0fea35c83a4546</anchor>
      <arglist>(int first, int nel, double &amp;temp_cutoff, double &amp;temp_radius)</arglist>
    </member>
    <member kind="function">
      <type>DiracDeterminantBase::ValueType</type>
      <name>ratio</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>aaf92d0a56eb21d0be9cc8d4858b2bb0d</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>DiracDeterminantBase::ValueType</type>
      <name>ratio</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a9387b584be241ae39c5e6219d3c09630</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a017712a05713204fcb4c0ebad7ae7af3</anchor>
      <arglist>(int nel, int morb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UpdatePsiM2</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>aaabc5d5cc30c7b078f82bd7ce48320ab</anchor>
      <arglist>(ValueVector_t &amp;vec, int ptcl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ChooseNearbyParticles</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a52bc26d46b7f29f063853763e00c3d65</anchor>
      <arglist>(int ptcl, list&lt; int &gt; &amp;nearbyPtcls)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>af79a1f1637e80a729043600a7656054d</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>DiracDeterminantBase::RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a1a52ecfd10c7131ed35170b1ab3f600e</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>DiracDeterminantBase::RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>aafdf0e0d12e7430761a5298ecfb55296</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="variable">
      <type>const DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a53956c224bd49abff541a1a7c2ad305d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>radius</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a3f67c53b80389c5f53961936edba04c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>psiM_actual</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>aa0782faf1c9ab9dc7d1426049b625894</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>psiM2</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>ab9f10fc2edcbe9c135cad901c0cb19b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>temp_psiM2</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>afe16c20ce9b7b4ee07cff909a2c3486e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueVector_t</type>
      <name>psi_diff</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a4b05c50f373ccd5a52ff85b6d5eaf437</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; list&lt; pair&lt; int, double &gt; &gt; &gt;</type>
      <name>particleLists</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>ae3668fa2ede4e67f9f01bb83e864f163</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list&lt; pair&lt; int, double &gt; &gt;</type>
      <name>oldPtcl</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a77978706d9d918dfe9288f3ed55c2f1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>cutoff</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a034fbedcce0aee66ee125138543e2703</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::DiracDeterminantWithBackflow</name>
    <filename>a00151.html</filename>
    <base>qmcplusplus::DiracDeterminantBase</base>
    <member kind="typedef">
      <type>SPOSetBase::IndexVector_t</type>
      <name>IndexVector_t</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a48f397afe493fcd1fd83df18f620597c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::ValueVector_t</type>
      <name>ValueVector_t</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>af0072d026a739d6ea5b0b6dedd50f05c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::ValueMatrix_t</type>
      <name>ValueMatrix_t</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>af3413ac443a5faab8104995c447023e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::GradVector_t</type>
      <name>GradVector_t</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a4bc05716d8ac48c041d7f7ebb1a93e1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::GradMatrix_t</type>
      <name>GradMatrix_t</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>aea9f69b1090511c7ba964b0a1d5dae75</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::HessMatrix_t</type>
      <name>HessMatrix_t</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a1d4918327b0d0a4eb005688b9b4944d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::HessVector_t</type>
      <name>HessVector_t</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>aed82701bfef1d7fbdcf5d4042d4dcfcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::HessType</type>
      <name>HessType</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a14e990f5af087815f7b2a74f1c573476</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::GGGType</type>
      <name>GGGType</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a415591283e99fe56a7c09fac7609bf53</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::GGGVector_t</type>
      <name>GGGVector_t</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>ab57cc9ea34edf7a5aa1c3f388f3cec10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::GGGMatrix_t</type>
      <name>GGGMatrix_t</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>af77b304a4d1e6b2aa0c731c17ea90873</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::HessArray_t</type>
      <name>HessArray_t</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a49fd71beb3662f2efe6086a56eac89f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiracDeterminantWithBackflow</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a698144fa60952f49f52189020d2abe6c</anchor>
      <arglist>(ParticleSet &amp;ptcl, SPOSetBasePtr const &amp;spos, BackflowTransformation *BF, int first=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DiracDeterminantWithBackflow</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a82938dbc11978680044e09fe1983bf4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiracDeterminantWithBackflow</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>aabd78190051d0bd860b7f6d2cc128140</anchor>
      <arglist>(const DiracDeterminantWithBackflow &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>DiracDeterminantWithBackflow &amp;</type>
      <name>operator=</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>ae851a1cecac853c9801b94c1c6a6839a</anchor>
      <arglist>(const DiracDeterminantWithBackflow &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBF</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a3f12ecd4ae2d2cfd41bc86b42ac75da6</anchor>
      <arglist>(BackflowTransformation *bf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateDerivatives</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a291c52dc43d28edb9643f61b763e0952</anchor>
      <arglist>(ParticleSet &amp;P, const opt_variables_type &amp;active, vector&lt; RealType &gt; &amp;dlogpsi, vector&lt; RealType &gt; &amp;dhpsioverpsi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateDerivatives</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>ae9ed12b675b2cb8c09a8a42dff3d5442</anchor>
      <arglist>(ParticleSet &amp;P, const opt_variables_type &amp;active, vector&lt; RealType &gt; &amp;dlogpsi, vector&lt; RealType &gt; &amp;dhpsioverpsi, ParticleSet::ParticleGradient_t *G0, ParticleSet::ParticleLaplacian_t *L0, int k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateDerivatives</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>aece0caf2c1053a012f0ba795a6b89aea</anchor>
      <arglist>(ParticleSet &amp;P, const opt_variables_type &amp;active, int offset, Matrix&lt; RealType &gt; &amp;dlogpsi, Array&lt; GradType, OHMMS_DIM &gt; &amp;dG, Matrix&lt; RealType &gt; &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a017712a05713204fcb4c0ebad7ae7af3</anchor>
      <arglist>(int nel, int morb)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>registerData</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a950a2efb03cc722e0570f6b08e7f2bca</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>updateBuffer</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a51ee2dca45cb227b58c7b32244052a87</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf, bool fromscratch=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a5261ed49b5195980c91c0024b860fdb2</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>ac06dfb62d992ea7cfc35fdf6e533f2df</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_ratios</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a0afd740894bec6ecb30956568b7deeeb</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; ValueType &gt; &amp;ratios)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>alternateRatio</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>ab3c7c00606afb0d2f1fc96e7ec897c8d</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a04f75b7f93ed0fd89f004b2fca0222e8</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratioGrad</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a47d4a48b4a01d9d75a12b6fc060d3e5e</anchor>
      <arglist>(ParticleSet &amp;P, int iat, GradType &amp;grad_iat)</arglist>
    </member>
    <member kind="function">
      <type>GradType</type>
      <name>evalGrad</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a220ce6b01804a18c5c334f17b5dd0ce2</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>GradType</type>
      <name>evalGradSource</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a295fcfc48601fad293ab6ab11152e7f8</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet &amp;source, int iat)</arglist>
    </member>
    <member kind="function">
      <type>GradType</type>
      <name>evalGradSource</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>af846a149ad568ba55a16a042c3aac66e</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet &amp;source, int iat, TinyVector&lt; ParticleSet::ParticleGradient_t, OHMMS_DIM &gt; &amp;grad_grad, TinyVector&lt; ParticleSet::ParticleLaplacian_t, OHMMS_DIM &gt; &amp;lapl_grad)</arglist>
    </member>
    <member kind="function">
      <type>GradType</type>
      <name>evalGradSourcep</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>aafae3b1fc32fad4cacd8edafcd4ed20b</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet &amp;source, int iat, TinyVector&lt; ParticleSet::ParticleGradient_t, OHMMS_DIM &gt; &amp;grad_grad, TinyVector&lt; ParticleSet::ParticleLaplacian_t, OHMMS_DIM &gt; &amp;lapl_grad)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>logRatio</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a9b7b5e18c62f45c14bc01760aeba96e3</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>af79a1f1637e80a729043600a7656054d</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a4fad6e178271bda6f6e70a5965041472</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>aeba37f5a7f9e1c209be41e1f8c2d316d</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a1f580ad61584350c65e9c6ef29873e4e</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLogForDerivativeBuffer</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a60bc387913f65a7b4b521780678b0861</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLogFromDerivativeBuffer</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a5a403f9ed90c743f1e44370e737d025a</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a3e7edf826dfe9d39fe320f04fc940d73</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>aeeb50c6d2010366ef6eda7dfbc1cff8f</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>OrbitalBasePtr</type>
      <name>makeClone</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>ab68f5027a5eee70c7e4e130cfa9aab1b</anchor>
      <arglist>(ParticleSet &amp;tqp) const </arglist>
    </member>
    <member kind="function">
      <type>DiracDeterminantWithBackflow *</type>
      <name>makeCopy</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a35ac4380b90a7067907ec8f393f82b48</anchor>
      <arglist>(SPOSetBase *spo) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLogEpsilon</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>ad025c44854e332efb36880d1cfc36949</anchor>
      <arglist>(ValueType x)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>rcdot</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a05df2ef9b4e47550c371a208979c6edd</anchor>
      <arglist>(TinyVector&lt; RealType, OHMMS_DIM &gt; &amp;lhs, TinyVector&lt; ValueType, OHMMS_DIM &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testDerivFjj</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>aad0cecd342cd29ad6e66b239e26ca277</anchor>
      <arglist>(ParticleSet &amp;P, int pa)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testGGG</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>afe0eff01a07538f128ce83b1ef4a9f32</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testGG</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>ad4f9e99f47ac394529d2a5d12f3b6405</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testDerivLi</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a4504df3cc8e126ce24fda9a498a369b0</anchor>
      <arglist>(ParticleSet &amp;P, int pa)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testL</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a821ecbd3d01a93f8e6d239a95d49609a</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dummyEvalLi</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>acc229eb14360a1e274e3f2da22674466</anchor>
      <arglist>(ValueType &amp;L1, ValueType &amp;L2, ValueType &amp;L3)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumParticles</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>afbe8bef86da55fb5c4c9ffebdf62eed5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradMatrix_t</type>
      <name>dFa</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a1f81ab7c99b85ede9d92136e403c19d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HessMatrix_t</type>
      <name>grad_grad_psiM</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a664115cc9310878213eebab1e00457ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HessVector_t</type>
      <name>grad_gradV</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>acc4f837b7b93b18ba61bb687fb0a6c35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HessMatrix_t</type>
      <name>grad_grad_psiM_temp</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a8d9777a5b83239b472bcb5bcc0acfe59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GGGMatrix_t</type>
      <name>grad_grad_grad_psiM</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>abd2d894d5e3b5ea390bcfd07866294c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BackflowTransformation *</type>
      <name>BFTrans</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>aa1a491a54b76fafb648fa3137be80cf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>Gtemp</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a8fd990a75ea6389ea0bd3ba107ca6d8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>La1</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>ac4db5c8866b913a70a4a1c8158c82eba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>La2</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a1e8c6215a1fedbfc01e55f5332a4dfc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>La3</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>ade9385528ce24cbeabc900130837dabd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HessMatrix_t</type>
      <name>Ajk_sum</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a6fc67bd077fff00607ddfe0b007413fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HessMatrix_t</type>
      <name>Qmat</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a559b300f8107e2bd9dd55f8661642621</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradMatrix_t</type>
      <name>Fmat</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>af60c616169f3b59ff52adab6f4e6f12e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradVector_t</type>
      <name>Fmatdiag</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a71b4bcc17866761b85b7d5ff2b8aafe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradVector_t</type>
      <name>Fmatdiag_temp</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a3e887729aaca8b0d91d872f893ff763c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>psiMinv_temp</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a6c183cc85a99ca2da9968cd2b77664c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType *</type>
      <name>FirstAddressOfGGG</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>aedd786014c39cf647c3ba455561491c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType *</type>
      <name>LastAddressOfGGG</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a4272495ec3d50a908cce6aca60d0b4b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType *</type>
      <name>FirstAddressOfFm</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a40b3706365fdcf3565f3290c13a207e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType *</type>
      <name>LastAddressOfFm</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>aea34daa816c79d9a99a8da4d86ef6fb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>usingDerivBuffer</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a789ef4e701592f1c473f8fec965886b3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::excitation_node</name>
    <filename>a00216.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Matrix&lt; T &gt;</type>
      <name>matrix_type</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a0139da31acc01844f8364047cb75baef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>excitation_node</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a12e4ee9ddee933f1dfed4ef7b419409f</anchor>
      <arglist>(unsigned long vid=0u, unsigned long cid=0u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a2d57c895730d348c78b2891221b5f66e</anchor>
      <arglist>(int m, int nv, std::vector&lt; excitation_node &gt; &amp;ci)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetOffset</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>ae4b3b2fc28291bfeaeed792bfa74b9a0</anchor>
      <arglist>(int m, std::vector&lt; int &gt; &amp;p_peers, std::vector&lt; excitation_node &gt; &amp;ci)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_child</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a12b216cc246a455006da3b77035f2633</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>closed</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a24c88f59fb7d18a293dbc5e6cbebd744</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRatios</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a8aa40457b218ead63f08efdd02326813</anchor>
      <arglist>(const matrix_type &amp;psi_big, std::vector&lt; excitation_node &gt; &amp;ci, std::vector&lt; T &gt; &amp;ratios, bool promote_row)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRatiosByColPromotion</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a50424e9cb3fdf7325deffe0402b40f6a</anchor>
      <arglist>(const matrix_type &amp;inv0, const matrix_type &amp;psi_big, std::vector&lt; excitation_node &gt; &amp;ci, std::vector&lt; T &gt; &amp;ratios, int m, T ratio_base)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRatiosByRowPromotion</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>adc08c28e3789f06231a83d8cefc8b02a</anchor>
      <arglist>(const matrix_type &amp;inv0, const matrix_type &amp;psi_big, std::vector&lt; excitation_node &gt; &amp;ci, std::vector&lt; T &gt; &amp;ratios, int m, T ratio_base)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inverseUpdate</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a0513c6fc962d6e7901c646f3df70c5d3</anchor>
      <arglist>(const matrix_type &amp;psi_big, std::vector&lt; excitation_node &gt; &amp;ci, std::vector&lt; T &gt; &amp;ratios, bool row_excitation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inverseUpdateByColumn</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a064fec13cd518ba02c7f1337e8f321c3</anchor>
      <arglist>(const matrix_type &amp;psi_big, std::vector&lt; excitation_node &gt; &amp;ci, std::vector&lt; T &gt; &amp;ratios, int m, T ratio_base)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inverseUpdateByRow</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a5feda616093906b7d2c0da1f34fdc98b</anchor>
      <arglist>(const matrix_type &amp;psi_big, std::vector&lt; excitation_node &gt; &amp;ci, std::vector&lt; T &gt; &amp;ratios, int m, T ratio_base)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRatioByColSubstitution</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a9d9e6c55681535e6fdc315236e91ba8f</anchor>
      <arglist>(vector&lt; T &gt; &amp;u_c, std::vector&lt; excitation_node &gt; &amp;ci, std::vector&lt; T &gt; &amp;ratios, int col_id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRatioByColSubstitution</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>ac3bf97e8138bf2c1dc66c4c2569874b7</anchor>
      <arglist>(vector&lt; T &gt; &amp;u_c, std::vector&lt; excitation_node &gt; &amp;ci, std::vector&lt; T &gt; &amp;ratios, int m, int col_id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRatioByRowSubstitution</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>af9f01a401529a33f6c8a8412b24d6618</anchor>
      <arglist>(vector&lt; T &gt; &amp;u_c, std::vector&lt; excitation_node &gt; &amp;ci, std::vector&lt; T &gt; &amp;ratios, int row_id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRatioByRowSubstitution</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a4a34ac23ed83e6d63f5759ac1935bffc</anchor>
      <arglist>(vector&lt; T &gt; &amp;u_c, std::vector&lt; excitation_node &gt; &amp;ci, std::vector&lt; T &gt; &amp;ratios, int m, int row_id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_node</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a262fc2992a7532d893954fd97a419171</anchor>
      <arglist>(ostream &amp;os, int level, int &amp;count, std::vector&lt; excitation_node &gt; &amp;ci)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>my_id</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>af9650afe4b09491cf2583300c86c81fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>parent_id</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a62f7b4fcd2a5b25ad917f276876f592e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>from</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a16d981023742d3bd53f1385790714190</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>to</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>ac0ed249f3db34b8135fd2717bda56844</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>ratio</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>aaab4e51a854ffabf972f798d21469398</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>utv</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a07957c1a384c1502bac774fadd46360b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>ground</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a9ba6c0fa6b461618190757d12f350c18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>excited</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a741045ed55f50b879b2efa2118a29d78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>matrix_type</type>
      <name>inverse</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a91ff7b4283209586ea1d5a9c3091494a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>children</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a7ef4ab13009573bc0274057b274c5aac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>peers</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>ad8d4ec018e3cca88ec7aa3f357d5e67a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::ExcitationClass</name>
    <filename>a00217.html</filename>
    <member kind="function">
      <type>void</type>
      <name>testMe</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a3931754059f1be26b5b7ecff2b8fcce0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TinyVector&lt; int, 2 &gt;</type>
      <name>begin</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a09a6c4b924e0f344f98c780c136122c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TinyVector&lt; int, 2 &gt;</type>
      <name>next</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a2bc00e7b591e790ad6fa1cc8633c6558</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BuildDotProducts</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>af9e6a8168dca73cbbb1aaf8fb82e9061</anchor>
      <arglist>(ValueMatrix_t &amp;gs_inverse, ValueMatrix_t &amp;psiM_actual)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BuildDotProducts_grad</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a13412f3a5e67ca8b3d657235146dbac8</anchor>
      <arglist>(ValueMatrix_t &amp;gs_inverse, ValueMatrix_t &amp;psiM_actual, GradMatrix_t &amp;dpsiM_actual, GradVector_t &amp;op2, GradType one_over_ratio, int WorkingIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CalcSingleExcitations_grad</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>ae20792b6af8f2e47c4cd9aa67b836bf6</anchor>
      <arglist>(ValueVector_t &amp;coefs, GradType &amp;val, int &amp;coefIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CalcDoubleExcitations_grad</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>aef07d5d26d40c988acc06ac4ec03633e</anchor>
      <arglist>(ValueVector_t &amp;coefs, GradType &amp;val, int &amp;coefIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BuildDotProducts_lapl</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a17d1f671fda7f7091584acf6f256fd80</anchor>
      <arglist>(ValueMatrix_t &amp;gs_inverse, ValueMatrix_t &amp;psiM_actual, ValueMatrix_t &amp;dpsiM_actual, ValueVector_t &amp;op2, GradType one_over_ratio, int WorkingIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CalcSingleExcitations_lapl</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a04ffdb0f75816db9a4e6823e09647b28</anchor>
      <arglist>(ValueVector_t &amp;coefs, GradType &amp;val, int &amp;coefIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CalcDoubleExcitations_lapl</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a40af363351331dd7b7e3a0592e684cf9</anchor>
      <arglist>(ValueVector_t &amp;coefs, GradType &amp;val, int &amp;coefIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CalcSingleExcitations</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a5891fd03f5b7e4fd7c7528743b2fd671</anchor>
      <arglist>(ValueVector_t &amp;coefs, ValueType &amp;val, int &amp;coefIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_excitations</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>af1a0041f44a2ec649961741195328aea</anchor>
      <arglist>(int start_uo, int end_uo, int start_rep, int end_rep, ValueVector_t &amp;coefs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CalcDoubleExcitations</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>adf089b9c941270d128f87d7b0f62831d</anchor>
      <arglist>(ValueVector_t &amp;coefs, ValueType &amp;val, int &amp;coefIndex)</arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>unoccupied_orbitals_to_use</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>ad469cda8d5509786c2c8258f564d75ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>orbitals_to_replace</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a937c7ee4fe23f0fd6f42787cdd33e8ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>dotProducts</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>aa0a656b9269f2965e78e1fd69c7ab0be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradMatrix_t</type>
      <name>dotProducts_grad</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a39d3d9ecaa0311ead355f2eb9bb72792</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; int, 2 &gt;</type>
      <name>ii</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a0b7418cbf0dc65436ca03ee9292bc5a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; int, 2 &gt;</type>
      <name>jj</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a12f9737e795cf6098bbebb1b43b9b981</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; int, 2 &gt;</type>
      <name>second_replaces_first</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>af62c03a0a52f382cc488b135f2f2ce92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list&lt; TinyVector&lt; int, 2 &gt; &gt;</type>
      <name>replaceList</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a48e4cb4512500307508cec38ee026b24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>orbitals_to_replace_index</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a86483e6124b13fe42d1617f1231cce56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>unoccupied_orbitals_to_use_index</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a3ed6e1ac258dd5e3604b725bce71a9fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>SPOSetBase::ValueMatrix_t</type>
      <name>ValueMatrix_t</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>af3413ac443a5faab8104995c447023e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>SPOSetBase::ValueVector_t</type>
      <name>ValueVector_t</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>af0072d026a739d6ea5b0b6dedd50f05c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>SPOSetBase::GradMatrix_t</type>
      <name>GradMatrix_t</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>aea9f69b1090511c7ba964b0a1d5dae75</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>SPOSetBase::GradVector_t</type>
      <name>GradVector_t</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a4bc05716d8ac48c041d7f7ebb1a93e1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>double</type>
      <name>ValueType</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a1dc68d62e3f16c62bd3258d42d867e49</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>TinyVector&lt; ValueType, 3 &gt;</type>
      <name>GradType</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a0a3a36c50da4128cd1ba4704fef76427</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::GaussianFunctor</name>
    <filename>a00236.html</filename>
    <templarg></templarg>
    <base>OptimizableFunctorBase</base>
    <base>OptimizableFunctorBase</base>
    <member kind="typedef">
      <type>OptimizableFunctorBase::real_type</type>
      <name>real_type</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>aa7c8aef29f0560ea0a426cb28d91e2e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianFunctor</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>a66a8bba13d78dfec7f084d5543cefc31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GaussianFunctor</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ae6941ffabc3dfd737bf39b3b63bd5eee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>a6a91c8094ddd49aa8a2da9df6b439164</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>aff351ffb66160b6458d6057fa6bc2a5f</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDensity</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>af265d27836f75528a0e0506f4ac4f2b9</anchor>
      <arglist>(real_type n)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>evaluateDerivatives</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>a8d132540414302b7c1b772bea1bfcdb5</anchor>
      <arglist>(real_type r, std::vector&lt; qmcplusplus::TinyVector&lt; real_type, 3 &gt; &gt; &amp;derivs)</arglist>
    </member>
    <member kind="function">
      <type>OptimizableFunctorBase *</type>
      <name>makeClone</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>a4747acd34f8d2daa0656125f1290e4d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>a4f4b6676f0607a95f5f8310806110888</anchor>
      <arglist>(real_type pos, real_type c, real_type exponent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createNGO</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>aa2dc4175dd89cce62291921c39f91a60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>adce5a2262a57aade6dd0bb2f674f72a7</anchor>
      <arglist>(const double r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>a914f101cc34117e8d07bc64ebcd64960</anchor>
      <arglist>(const double r, real_type &amp;du, real_type &amp;d2u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianFunctor</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>acbcec004985bf098c58efdde985516d4</anchor>
      <arglist>(real_type a=1.0, real_type c=1.0, real_type rc=1.0)</arglist>
    </member>
    <member kind="function">
      <type>OptimizableFunctorBase *</type>
      <name>makeClone</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>a4747acd34f8d2daa0656125f1290e4d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>a4860196a527546949f6366d22425c009</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ac059e0873401047f0ec172926e036249</anchor>
      <arglist>(real_type r, real_type &amp;dudr, real_type &amp;d2udr2, real_type &amp;d3udr3)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>a6d4da0f3cb2c37f2105f35aba1c3a813</anchor>
      <arglist>(real_type r, real_type &amp;dudr, real_type &amp;d2udr2)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>a6a91c8094ddd49aa8a2da9df6b439164</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>aff351ffb66160b6458d6057fa6bc2a5f</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>evaluateDerivatives</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ad6d1fb2ec9788f67d5c09d67421efc8d</anchor>
      <arglist>(real_type r, vector&lt; TinyVector&lt; real_type, 3 &gt; &gt; &amp;derivs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumFuns</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>a2a9a5032ca9877bf0744252883c9e900</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>IsOptimizing</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>abe95e3c9061bea64fd3101ef98206f6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; real_type &gt;</type>
      <name>R0</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>a43fe2a5d4672129240238752bc12fd42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; real_type &gt;</type>
      <name>alp</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ab4868d5f91849ba07e923c6b12cd6348</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; real_type &gt;</type>
      <name>expo</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>afbd648fc4d92b686a46c8248d9503d56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; string &gt;</type>
      <name>R0_id</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>a7481d5edcb69f7d467c6a470a68bfd7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; string &gt;</type>
      <name>alp_id</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>a26400e35854f0cceca03d8b472caf279</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; string &gt;</type>
      <name>expo_id</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>a12ddd597cb8373ca5869563ad7ccf0d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; bool &gt;</type>
      <name>activeOptm</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>aec94538a516631c5c25b23221771c0b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NGOrbital *</type>
      <name>NumOrb</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>a36e83368f1085a30a16b4922e15cbf79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>A</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>a2afa47a65c2e9f37e310b39710c74296</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>C</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ac198257702bb0ff4b30d8118d4784586</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>RC</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ab40838b0141ec542563324a09506ca7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>c0</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>aa1aaf4eb3afea51d2e21cf3d183aa98a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>c1</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>a55d0086dc0f598cfdb0587de5f2375c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>c2</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>af0e0ecbc75f22d0a11e9329e649b5f76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>c3</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>a683836f412f2c0996c82da39a1ae237f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>c4</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>aca8f19eabaec56f7d0af128bad65b6ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>ID_A</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>aeb8263f9885b65a7595c461984f24c1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>ID_C</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>a3fb4063beb0054832956a493c5fda8c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>ID_RC</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ab2a54110ef1900bd51976e55616f4eb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>optimizable</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>a010ddcc410eb8c270049186c685fd1c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::MultiDiracDeterminantBase</name>
    <filename>a00392.html</filename>
    <base>qmcplusplus::OrbitalBase</base>
    <base>qmcplusplus::OrbitalBase</base>
    <member kind="typedef">
      <type>SPOSetBase::IndexVector_t</type>
      <name>IndexVector_t</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a48f397afe493fcd1fd83df18f620597c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::ValueVector_t</type>
      <name>ValueVector_t</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>af0072d026a739d6ea5b0b6dedd50f05c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::ValueMatrix_t</type>
      <name>ValueMatrix_t</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>af3413ac443a5faab8104995c447023e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::GradVector_t</type>
      <name>GradVector_t</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a4bc05716d8ac48c041d7f7ebb1a93e1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::GradMatrix_t</type>
      <name>GradMatrix_t</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>aea9f69b1090511c7ba964b0a1d5dae75</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::HessMatrix_t</type>
      <name>HessMatrix_t</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a1d4918327b0d0a4eb005688b9b4944d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::HessType</type>
      <name>HessType</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a14e990f5af087815f7b2a74f1c573476</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::IndexVector_t</type>
      <name>IndexVector_t</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a48f397afe493fcd1fd83df18f620597c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::ValueVector_t</type>
      <name>ValueVector_t</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>af0072d026a739d6ea5b0b6dedd50f05c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::ValueMatrix_t</type>
      <name>ValueMatrix_t</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>af3413ac443a5faab8104995c447023e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::GradVector_t</type>
      <name>GradVector_t</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a4bc05716d8ac48c041d7f7ebb1a93e1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::GradMatrix_t</type>
      <name>GradMatrix_t</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>aea9f69b1090511c7ba964b0a1d5dae75</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::HessMatrix_t</type>
      <name>HessMatrix_t</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a1d4918327b0d0a4eb005688b9b4944d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::HessType</type>
      <name>HessType</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a14e990f5af087815f7b2a74f1c573476</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; ValueType &gt;::HessVector_t</type>
      <name>HessVector_t</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a8b0d80f17cb4a7fb2210260d85b2ce25</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TinyVector&lt; HessType, 3 &gt;</type>
      <name>GGGType</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>aa061426acbed47472a40837e91ff0ea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; GGGType &gt;</type>
      <name>GGGVector_t</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a8fbe45949eb3665c4e9ce7562900ff13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; GGGType &gt;</type>
      <name>GGGMatrix_t</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ad9d64609176495b009d086094279f5a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array&lt; HessType, 3 &gt;</type>
      <name>HessArray_t</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ac4a74d8105115cf95f8c6ce58c59d360</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerTimers</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a43dda6f0760a96661a60a054c6efb017</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiDiracDeterminantBase</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a9a5c9de824b990bcfc542b92a9f70eaf</anchor>
      <arglist>(SPOSetBasePtr const &amp;spos, int first=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MultiDiracDeterminantBase</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ad249f8a70188e261c673d0058bf89c61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiDiracDeterminantBase</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ad28a079df7821b99c911a393d451edc0</anchor>
      <arglist>(const MultiDiracDeterminantBase &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>MultiDiracDeterminantBase &amp;</type>
      <name>operator=</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a56fc95803e75fb27bd16bf666897873f</anchor>
      <arglist>(const MultiDiracDeterminantBase &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>SPOSetBasePtr</type>
      <name>clonePhi</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a391cdccd01aef5c19f6e149831922741</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SPOSetBasePtr</type>
      <name>getPhi</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ae66e8095581477b07ee5b234c9125c53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>rows</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>afcf2537c8fa2b126ce0bd439b718ac8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>cols</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a76ebb19de89034f2b0569b2b17099649</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a1dc928fc6f3f0c9e91dd049245dff2f1</anchor>
      <arglist>(int first, int nel, int norb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>aeda7eeed68a4b565a648127d98932ee6</anchor>
      <arglist>(int first, int nel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBF</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a3f12ecd4ae2d2cfd41bc86b42ac75da6</anchor>
      <arglist>(BackflowTransformation *bf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportStatus</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a0a144256f92f2fa9e13e840bc30baef7</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealType</type>
      <name>getAlternatePhaseDiff</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a94fdfbb56af9d5f10930feed1d003b45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealType</type>
      <name>getAlternatePhaseDiff</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a7306c84cf71b68bdb9a2aa970f1f67a8</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resize</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a017712a05713204fcb4c0ebad7ae7af3</anchor>
      <arglist>(int nel, int morb)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>registerData</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a27605f268e5a2a05f2d8da9558233b1e</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerDataForDerivatives</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>aec97befbe1039cb84368e2b645b0e7d8</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf, int storageType=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>memoryUsage_DataForDerivatives</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ac376cd2b448d380a980f4a28d4b62855</anchor>
      <arglist>(ParticleSet &amp;P, long &amp;orbs_only, long &amp;orbs, long &amp;invs, long &amp;dets)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyToDerivativeBuffer</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>aa7a71e7dd1168c1adc2fb5b3023c74ee</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromDerivativeBuffer</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ad8ea342c169bde6d2499d2553a9681d6</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>updateBuffer</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a214881fffb6bbe34c78e60fe7d52b20b</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf, bool fromscratch=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a5261ed49b5195980c91c0024b860fdb2</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dumpToBuffer</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ab1a527695dc08648c2e975fddddcb117</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dumpFromBuffer</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>aa423c75ff4e6a458c49a5c4567a89df0</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>af79a1f1637e80a729043600a7656054d</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a4fad6e178271bda6f6e70a5965041472</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>aeba37f5a7f9e1c209be41e1f8c2d316d</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>aeb2875ce2f2c7ad4cb3ae1fccdd6d5ea</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>OrbitalBasePtr</type>
      <name>makeClone</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ab68f5027a5eee70c7e4e130cfa9aab1b</anchor>
      <arglist>(ParticleSet &amp;tqp) const </arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a5e4a7bd7e23a6beab0d8bc131be6ffc4</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>GradType</type>
      <name>evalGrad</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a178607284b7ab1e4c389fce8e0c80de3</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratioGrad</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>af21351a5f07bfcec09d2f2c85c24ffee</anchor>
      <arglist>(ParticleSet &amp;P, int iat, GradType &amp;grad_iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ad4ac6ecacd80d95941026660c9799fd0</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>aee6c98df74fd951c23aedb0d38625d4e</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a17a690a835b951b7cb5ec17d890a1e2b</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createDetData</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ae8dbdc42e165f10cf5049d64d8221753</anchor>
      <arglist>(ci_configuration2 &amp;ref, vector&lt; int &gt; &amp;data, vector&lt; pair&lt; int, int &gt; &gt; &amp;pairs, vector&lt; double &gt; &amp;sign)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>CalculateRatioFromMatrixElements</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a0a5c4b87d7b0559736c20194c63746fe</anchor>
      <arglist>(int n, ValueMatrix_t &amp;dotProducts, vector&lt; int &gt;::iterator it)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BuildDotProductsAndCalculateRatios</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a2e2ecd14e009dd920e46e44035f54e36</anchor>
      <arglist>(int ref, int iat, ValueVector_t &amp;ratios, ValueMatrix_t &amp;psiinv, ValueMatrix_t &amp;psi, ValueMatrix_t &amp;dotProducts, vector&lt; int &gt; &amp;data, vector&lt; pair&lt; int, int &gt; &gt; &amp;pairs, vector&lt; double &gt; &amp;sign)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BuildDotProductsAndCalculateRatios</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a3007c8e1749c8d737b1b0511171a440c</anchor>
      <arglist>(int ref, int iat, GradMatrix_t &amp;ratios, ValueMatrix_t &amp;psiinv, ValueMatrix_t &amp;psi, ValueMatrix_t &amp;dotProducts, vector&lt; int &gt; &amp;data, vector&lt; pair&lt; int, int &gt; &gt; &amp;pairs, vector&lt; double &gt; &amp;sign, int dx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BuildDotProductsAndCalculateRatios</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a671b955711741fa4efbbd3144dc01ab8</anchor>
      <arglist>(int ref, int iat, ValueMatrix_t &amp;ratios, ValueMatrix_t &amp;psiinv, ValueMatrix_t &amp;psi, ValueMatrix_t &amp;dotProducts, vector&lt; int &gt; &amp;data, vector&lt; pair&lt; int, int &gt; &gt; &amp;pairs, vector&lt; double &gt; &amp;sign)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InverseUpdateByColumn_GRAD</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>af411b653249f485319f3866ff8e642bb</anchor>
      <arglist>(ValueMatrix_t &amp;Minv, GradVector_t &amp;newcol, ValueVector_t &amp;rvec, ValueVector_t &amp;rvecinv, int colchanged, ValueType c_ratio, int dx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDetInfo</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ad5148d52e67b6296a1dd71d8ed4904eb</anchor>
      <arglist>(int ref, vector&lt; ci_configuration2 &gt; list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateDetsForPtclMove</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a241a0fc0315e9f5f94b37316be3f0cb1</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateDetsAndGradsForPtclMove</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>aa3c7d61cf4e9da6b0eb01231ba824950</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateGrads</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>af5214e2a6bde9dd531a6cb36d3151eba</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateAllForPtclMove</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>af159f080856deb4bf188ff5a20df2be4</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateForWalkerMove</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>aaa0465d043357e4aa7514b5d121aff9f</anchor>
      <arglist>(ParticleSet &amp;P, bool fromScratch=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerTimers</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a43dda6f0760a96661a60a054c6efb017</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiDiracDeterminantBase</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a9a5c9de824b990bcfc542b92a9f70eaf</anchor>
      <arglist>(SPOSetBasePtr const &amp;spos, int first=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MultiDiracDeterminantBase</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ad249f8a70188e261c673d0058bf89c61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiDiracDeterminantBase</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ad28a079df7821b99c911a393d451edc0</anchor>
      <arglist>(const MultiDiracDeterminantBase &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>MultiDiracDeterminantBase &amp;</type>
      <name>operator=</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a56fc95803e75fb27bd16bf666897873f</anchor>
      <arglist>(const MultiDiracDeterminantBase &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>SPOSetBasePtr</type>
      <name>clonePhi</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a391cdccd01aef5c19f6e149831922741</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SPOSetBasePtr</type>
      <name>getPhi</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ae66e8095581477b07ee5b234c9125c53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>rows</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>afcf2537c8fa2b126ce0bd439b718ac8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>cols</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a76ebb19de89034f2b0569b2b17099649</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a1dc928fc6f3f0c9e91dd049245dff2f1</anchor>
      <arglist>(int first, int nel, int norb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>aeda7eeed68a4b565a648127d98932ee6</anchor>
      <arglist>(int first, int nel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBF</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a3f12ecd4ae2d2cfd41bc86b42ac75da6</anchor>
      <arglist>(BackflowTransformation *bf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportStatus</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a0a144256f92f2fa9e13e840bc30baef7</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealType</type>
      <name>getAlternatePhaseDiff</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a94fdfbb56af9d5f10930feed1d003b45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealType</type>
      <name>getAlternatePhaseDiff</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a7306c84cf71b68bdb9a2aa970f1f67a8</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resize</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a017712a05713204fcb4c0ebad7ae7af3</anchor>
      <arglist>(int nel, int morb)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>registerData</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a27605f268e5a2a05f2d8da9558233b1e</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerDataForDerivatives</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>aec97befbe1039cb84368e2b645b0e7d8</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf, int storageType=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>memoryUsage_DataForDerivatives</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ac376cd2b448d380a980f4a28d4b62855</anchor>
      <arglist>(ParticleSet &amp;P, long &amp;orbs_only, long &amp;orbs, long &amp;invs, long &amp;dets)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyToDerivativeBuffer</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>aa7a71e7dd1168c1adc2fb5b3023c74ee</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromDerivativeBuffer</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ad8ea342c169bde6d2499d2553a9681d6</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>updateBuffer</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a90a7c6c91ae13b2d7141fc8d1315d8d8</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf, bool fromscratch=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a5261ed49b5195980c91c0024b860fdb2</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dumpToBuffer</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ab1a527695dc08648c2e975fddddcb117</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dumpFromBuffer</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>aa423c75ff4e6a458c49a5c4567a89df0</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>af79a1f1637e80a729043600a7656054d</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a4fad6e178271bda6f6e70a5965041472</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>aeba37f5a7f9e1c209be41e1f8c2d316d</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>aeb2875ce2f2c7ad4cb3ae1fccdd6d5ea</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>OrbitalBasePtr</type>
      <name>makeClone</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ab68f5027a5eee70c7e4e130cfa9aab1b</anchor>
      <arglist>(ParticleSet &amp;tqp) const </arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a5e4a7bd7e23a6beab0d8bc131be6ffc4</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>GradType</type>
      <name>evalGrad</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a178607284b7ab1e4c389fce8e0c80de3</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratioGrad</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>af21351a5f07bfcec09d2f2c85c24ffee</anchor>
      <arglist>(ParticleSet &amp;P, int iat, GradType &amp;grad_iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ad4ac6ecacd80d95941026660c9799fd0</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>aee6c98df74fd951c23aedb0d38625d4e</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluate</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a8ce7ada9484f9c5fc12a01f98f860a3a</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createDetData</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ae8dbdc42e165f10cf5049d64d8221753</anchor>
      <arglist>(ci_configuration2 &amp;ref, vector&lt; int &gt; &amp;data, vector&lt; pair&lt; int, int &gt; &gt; &amp;pairs, vector&lt; double &gt; &amp;sign)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>CalculateRatioFromMatrixElements</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a0a5c4b87d7b0559736c20194c63746fe</anchor>
      <arglist>(int n, ValueMatrix_t &amp;dotProducts, vector&lt; int &gt;::iterator it)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BuildDotProductsAndCalculateRatios</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a2e2ecd14e009dd920e46e44035f54e36</anchor>
      <arglist>(int ref, int iat, ValueVector_t &amp;ratios, ValueMatrix_t &amp;psiinv, ValueMatrix_t &amp;psi, ValueMatrix_t &amp;dotProducts, vector&lt; int &gt; &amp;data, vector&lt; pair&lt; int, int &gt; &gt; &amp;pairs, vector&lt; double &gt; &amp;sign)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BuildDotProductsAndCalculateRatios</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a3007c8e1749c8d737b1b0511171a440c</anchor>
      <arglist>(int ref, int iat, GradMatrix_t &amp;ratios, ValueMatrix_t &amp;psiinv, ValueMatrix_t &amp;psi, ValueMatrix_t &amp;dotProducts, vector&lt; int &gt; &amp;data, vector&lt; pair&lt; int, int &gt; &gt; &amp;pairs, vector&lt; double &gt; &amp;sign, int dx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BuildDotProductsAndCalculateRatios</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a671b955711741fa4efbbd3144dc01ab8</anchor>
      <arglist>(int ref, int iat, ValueMatrix_t &amp;ratios, ValueMatrix_t &amp;psiinv, ValueMatrix_t &amp;psi, ValueMatrix_t &amp;dotProducts, vector&lt; int &gt; &amp;data, vector&lt; pair&lt; int, int &gt; &gt; &amp;pairs, vector&lt; double &gt; &amp;sign)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InverseUpdateByColumn_GRAD</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>af411b653249f485319f3866ff8e642bb</anchor>
      <arglist>(ValueMatrix_t &amp;Minv, GradVector_t &amp;newcol, ValueVector_t &amp;rvec, ValueVector_t &amp;rvecinv, int colchanged, ValueType c_ratio, int dx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDetInfo</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ad5148d52e67b6296a1dd71d8ed4904eb</anchor>
      <arglist>(int ref, vector&lt; ci_configuration2 &gt; list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateDetsForPtclMove</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a241a0fc0315e9f5f94b37316be3f0cb1</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateDetsAndGradsForPtclMove</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>aa3c7d61cf4e9da6b0eb01231ba824950</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateGrads</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>af5214e2a6bde9dd531a6cb36d3151eba</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateAllForPtclMove</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>af159f080856deb4bf188ff5a20df2be4</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateForWalkerMove</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>aaa0465d043357e4aa7514b5d121aff9f</anchor>
      <arglist>(ParticleSet &amp;P, bool fromScratch=true)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Optimizable</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a92c20354cdb1900a8f7605ee9f1d70cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NewTimer</type>
      <name>UpdateTimer</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a246fd5c732c167dd6ff44bd1d5ba860d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NewTimer</type>
      <name>RatioTimer</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a389dd73e741b46fd5c8a8d9f67367ee4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NewTimer</type>
      <name>InverseTimer</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a7517d4e5c7696bc2a07859835a313e6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NewTimer</type>
      <name>buildTableTimer</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a1f53977501256c31bd7db709c3baeee2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NewTimer</type>
      <name>readMatTimer</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>acbb1c539c21995ec03f59e06312bc70d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NewTimer</type>
      <name>evalWTimer</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ab1f8c6fa5fcda1174a331864b9b3044d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NewTimer</type>
      <name>evalOrbTimer</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a785ca214017b3b242a487046523f2910</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NewTimer</type>
      <name>evalOrb1Timer</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a91648152b936d8016f185eef5e88634a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NewTimer</type>
      <name>readMatGradTimer</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a8178c8530278a5d105aa888e931eefd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NewTimer</type>
      <name>buildTableGradTimer</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a1358aace5a1a5deb7adea988b4d3fbcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NewTimer</type>
      <name>ExtraStuffTimer</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a777ee6766bbc9b614cd7d1ad1a1bdecc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>opt_variables_type</type>
      <name>myVars</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>aee7ccfd07712b8606ef965967b67e860</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NP</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a60c04f5f0a9da38f288ce36947d8a8b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumOrbitals</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a092436aa5a88afa396b4df35f1f79395</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumPtcls</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ac696dd2e9e407dabdbda0ce636a569e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>FirstIndex</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ae4f84e7f9eab061d98f9c4d1422b0ab4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>LastIndex</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a9da0233db61be933269e71059da27b34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>WorkingIndex</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a023f5923e42795109afe51badbe1145e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SPOSetBasePtr</type>
      <name>Phi</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>aa4b4af7bef2254ccaa86be0d76cc76f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumDets</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a87c4d5e2494e6b46dfc87f5ebb854b09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; ci_configuration2 &gt;</type>
      <name>confgList</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ab2eeb0f1564db4bfc987dd45cb4ea7f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ReferenceDeterminant</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a3158cf1fa04f165ae93160a7d072edd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueVector_t</type>
      <name>detValues</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>aa13760e2325c9762516a389a81be3868</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueVector_t</type>
      <name>new_detValues</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a67ce3b44b81190a2208850fdc61b74f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradMatrix_t</type>
      <name>grads</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a74e1feea8df01552591e28db5473413a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradMatrix_t</type>
      <name>new_grads</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a86dffa8638972fd8dae93b749481479c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>lapls</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a9710a9fec27caa64106d84ee1bb4bb9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>new_lapls</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a772c6e829981124d42377ed00e4fb6fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>psiM</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a5873b1ad34c9f4331d317667b4f3401d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>psiM_temp</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ad3f6fcda3950d1b059bcde59ef3327be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>TpsiM</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ac2244d18840fc3bbec617cf467f0f2c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>psiMinv</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a7c5bbacf96f042d861e341ea0b3c6e5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>psiMinv_temp</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a6c183cc85a99ca2da9968cd2b77664c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradMatrix_t</type>
      <name>dpsiM</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a6bd5f6c172f77ad8c665ac07e25de0ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradMatrix_t</type>
      <name>dpsiM_temp</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>aa5f49a2a4460dc045c935883ef1600f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>dpsiMinv</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a434803eadf5cc24cd90a6aeb6495c2c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>d2psiM</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>af1b1bc3d5ef7b754872e6453bb8d3276</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>d2psiM_temp</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a28519b07bd374f9dd1e7a41d20a850b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueVector_t</type>
      <name>psiV</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a140e9126026e1e48dd94c10f78d5c53b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueVector_t</type>
      <name>psiV_temp</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>af80f1c5dcfcafe5c074b3ab915c990b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradVector_t</type>
      <name>dpsiV</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a7c914592db6f59c3930f449249df1a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueVector_t</type>
      <name>d2psiV</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>aff0b4a50ad52c7d5244f794295d12199</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueVector_t</type>
      <name>workV1</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a3da54446100cfd9aa48060200fc55a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueVector_t</type>
      <name>workV2</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ab1693c6edd4fdc1d6b714334da5c73d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>dotProducts</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>aa0a656b9269f2965e78e1fd69c7ab0be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; ValueType &gt;</type>
      <name>WorkSpace</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a2a04b7209a35983a29dfdd4c48f5fa11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; IndexType &gt;</type>
      <name>Pivot</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ae12f7fc91f163870b481b29ede6a8bb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>curRatio</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a3223a5f5d9b426c097308900f6d26140</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>cumRatio</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a44e142b575d7a4520f467da760b01138</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType *</type>
      <name>FirstAddressOfGrads</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ad3d24b1fd294a712bd74e82c0d106f4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType *</type>
      <name>LastAddressOfGrads</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>abb5f52f4112d8878b3d497c9b3ce450c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType *</type>
      <name>FirstAddressOfdpsiM</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a15e1a4d214f78b96d29d3c54c293eecd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType *</type>
      <name>LastAddressOfdpsiM</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a5a4c0c895e8513cb754c7d6719bd3b3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>detData</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>aba6baac777e395a888583ecda85c9b5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; pair&lt; int, int &gt; &gt;</type>
      <name>uniquePairs</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ac7209892e2f3d968dd4afc6ff71cd44d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; double &gt;</type>
      <name>DetSigns</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ac14f481c55f3d8ed13694c1ea4974ee0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>backup_reference</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a546de48d4caeb5172be19a4c4961dad6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>backup_detData</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>afd2c7de87d153000a1730ad870566696</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; pair&lt; int, int &gt; &gt;</type>
      <name>backup_uniquePairs</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a3de10aecbcba366ba1af31da5d63e593</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; double &gt;</type>
      <name>backup_DetSigns</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a937726bb36bcb0bc4de516a9eb4407e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MyDeterminant&lt; ValueType &gt;</type>
      <name>DetCalculator</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a4ec9a601e91a1378500dea1e7771e78b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradMatrix_t</type>
      <name>grads_bf</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a322e9e6e61a81269c9cb14e953b51002</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HessMatrix_t</type>
      <name>grad_grad_psiM</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a664115cc9310878213eebab1e00457ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HessVector_t</type>
      <name>grad_gradV</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>acc4f837b7b93b18ba61bb687fb0a6c35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HessMatrix_t</type>
      <name>grad_grad_psiM_temp</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a8d9777a5b83239b472bcb5bcc0acfe59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GGGMatrix_t</type>
      <name>grad_grad_grad_psiM</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>abd2d894d5e3b5ea390bcfd07866294c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>Gtemp</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a8fd990a75ea6389ea0bd3ba107ca6d8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HessMatrix_t</type>
      <name>Ajk_sum</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a6fc67bd077fff00607ddfe0b007413fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HessMatrix_t</type>
      <name>Qmat</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a559b300f8107e2bd9dd55f8661642621</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradMatrix_t</type>
      <name>Fmat</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>af60c616169f3b59ff52adab6f4e6f12e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradVector_t</type>
      <name>Fmatdiag</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a71b4bcc17866761b85b7d5ff2b8aafe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradVector_t</type>
      <name>Fmatdiag_temp</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a3e887729aaca8b0d91d872f893ff763c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradMatrix_t</type>
      <name>dFa</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a1f81ab7c99b85ede9d92136e403c19d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BackflowTransformation *</type>
      <name>BFTrans</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>aa1a491a54b76fafb648fa3137be80cf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>usingBF</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a124c557d65228f3d8244a0010383668b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::MyDeterminant</name>
    <filename>a00404.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>a578be9c59132b8633a67a98c39318777</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>af3d0d109a8599728dd538c48abb530fb</anchor>
      <arglist>(T a11, T a12, T a21, T a22)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>a5e09b7bc8a9cb58a2a1b6c57605a23eb</anchor>
      <arglist>(T a11, T a12, T a13, T a21, T a22, T a23, T a31, T a32, T a33)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>a1c07a554ebd0c268b9de971c5dc98eed</anchor>
      <arglist>(T a11, T a12, T a13, T a14, T a21, T a22, T a23, T a24, T a31, T a32, T a33, T a34, T a41, T a42, T a43, T a44)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>acfb795c055206b56281691c2b5885f8a</anchor>
      <arglist>(T a11, T a12, T a13, T a14, T a15, T a21, T a22, T a23, T a24, T a25, T a31, T a32, T a33, T a34, T a35, T a41, T a42, T a43, T a44, T a45, T a51, T a52, T a53, T a54, T a55)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>aab4d4cb2c14be442fc419154963c9002</anchor>
      <arglist>(T a11, T a12, T a13, T a14, T a15, T a16, T a21, T a22, T a23, T a24, T a25, T a26, T a31, T a32, T a33, T a34, T a35, T a36, T a41, T a42, T a43, T a44, T a45, T a46, T a51, T a52, T a53, T a54, T a55, T a56, T a61, T a62, T a63, T a64, T a65, T a66)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>a67dca1b98fedb3db260b11c4dce6c7b2</anchor>
      <arglist>(Matrix&lt; T &gt; &amp;dots, vector&lt; int &gt;::iterator it, int n)</arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; T &gt;</type>
      <name>M</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>a7caab765207ecb1fee3cdb62198cab4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>Pivot</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>a933ac6bf338a8248f32f82092790e379</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::RNDiracDeterminantBase</name>
    <filename>a00535.html</filename>
    <base>qmcplusplus::DiracDeterminantBase</base>
    <member kind="function">
      <type></type>
      <name>RNDiracDeterminantBase</name>
      <anchorfile>a00535.html</anchorfile>
      <anchor>af09c060d5ae07f4f32b08c4606a87048</anchor>
      <arglist>(SPOSetBasePtr const &amp;spos, int first=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RNDiracDeterminantBase</name>
      <anchorfile>a00535.html</anchorfile>
      <anchor>a792d11f52e3f0d0bf7e8fdfe14dc367b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RNDiracDeterminantBase</name>
      <anchorfile>a00535.html</anchorfile>
      <anchor>afe55d9c8e32bc6be1c36d14668456eba</anchor>
      <arglist>(const RNDiracDeterminantBase &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>RNDiracDeterminantBase &amp;</type>
      <name>operator=</name>
      <anchorfile>a00535.html</anchorfile>
      <anchor>adc30cf3787148049ddcbe5054ea49f3d</anchor>
      <arglist>(const RNDiracDeterminantBase &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>registerData</name>
      <anchorfile>a00535.html</anchorfile>
      <anchor>a4c1efcc8cb26e66554c61e5a6b4d27a2</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00535.html</anchorfile>
      <anchor>a017712a05713204fcb4c0ebad7ae7af3</anchor>
      <arglist>(int nel, int morb)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>updateBuffer</name>
      <anchorfile>a00535.html</anchorfile>
      <anchor>ab97b11f81a8633c86efd8141b35f9250</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf, bool fromscratch=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00535.html</anchorfile>
      <anchor>a5261ed49b5195980c91c0024b860fdb2</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00535.html</anchorfile>
      <anchor>ab570171844303f07f9f97e1e6ab52189</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>a00535.html</anchorfile>
      <anchor>a4fad6e178271bda6f6e70a5965041472</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getAlternatePhaseDiff</name>
      <anchorfile>a00535.html</anchorfile>
      <anchor>a6c055dc195e0d8526b8b8526dbf51993</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getAlternatePhaseDiff</name>
      <anchorfile>a00535.html</anchorfile>
      <anchor>a9345b83eb8076e816e872335e7e35d5e</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>alternateRatio</name>
      <anchorfile>a00535.html</anchorfile>
      <anchor>a89f99c01931755c363821c4f3b34d7d5</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>alternateGrad</name>
      <anchorfile>a00535.html</anchorfile>
      <anchor>af32081a8b79e7f736b54445a719717af</anchor>
      <arglist>(ParticleSet::ParticleGradient_t &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00535.html</anchorfile>
      <anchor>ad4ac6ecacd80d95941026660c9799fd0</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratioGrad</name>
      <anchorfile>a00535.html</anchorfile>
      <anchor>a472f14dcffe87053a6edf3f9a7b7ce54</anchor>
      <arglist>(ParticleSet &amp;P, int iat, GradType &amp;grad_iat)</arglist>
    </member>
    <member kind="function">
      <type>GradType</type>
      <name>evalGrad</name>
      <anchorfile>a00535.html</anchorfile>
      <anchor>ad45d4c13abf1b5453e84fe41cfc231b3</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>GradType</type>
      <name>evalGradSource</name>
      <anchorfile>a00535.html</anchorfile>
      <anchor>a0071589936462964c4067eb593f89f08</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet &amp;source, int iat)</arglist>
    </member>
    <member kind="function">
      <type>GradType</type>
      <name>evalGradSource</name>
      <anchorfile>a00535.html</anchorfile>
      <anchor>a1c252b33f5c6e8d46c7a0b72f45ae988</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet &amp;source, int iat, TinyVector&lt; ParticleSet::ParticleGradient_t, OHMMS_DIM &gt; &amp;grad_grad, TinyVector&lt; ParticleSet::ParticleLaplacian_t, OHMMS_DIM &gt; &amp;lapl_grad)</arglist>
    </member>
    <member kind="function">
      <type>GradType</type>
      <name>evalGradSourcep</name>
      <anchorfile>a00535.html</anchorfile>
      <anchor>a762af4cf2479d10b2d09ce81b0046c19</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet &amp;source, int iat, TinyVector&lt; ParticleSet::ParticleGradient_t, OHMMS_DIM &gt; &amp;grad_grad, TinyVector&lt; ParticleSet::ParticleLaplacian_t, OHMMS_DIM &gt; &amp;lapl_grad)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>a00535.html</anchorfile>
      <anchor>af79a1f1637e80a729043600a7656054d</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00535.html</anchorfile>
      <anchor>aeba37f5a7f9e1c209be41e1f8c2d316d</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00535.html</anchorfile>
      <anchor>af3780dff7cbab19d09233be6454a817b</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00535.html</anchorfile>
      <anchor>aee6c98df74fd951c23aedb0d38625d4e</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>DiracDeterminantBase *</type>
      <name>makeCopy</name>
      <anchorfile>a00535.html</anchorfile>
      <anchor>abe6768ddf3be352334c25d84c83c577e</anchor>
      <arglist>(SPOSetBase *spo) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLogEpsilon</name>
      <anchorfile>a00535.html</anchorfile>
      <anchor>ad025c44854e332efb36880d1cfc36949</anchor>
      <arglist>(ValueType x)</arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>alternateCurRatio</name>
      <anchorfile>a00535.html</anchorfile>
      <anchor>a21cd2c4a509343ae0fd1275121eb9502</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>myG_alternate</name>
      <anchorfile>a00535.html</anchorfile>
      <anchor>af958fb3473ae4fbd625dab98564bdb4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleLaplacian_t</type>
      <name>myL_alternate</name>
      <anchorfile>a00535.html</anchorfile>
      <anchor>aae0dcadc176c4b5493ce5d82d0d2cb8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>logepsilon</name>
      <anchorfile>a00535.html</anchorfile>
      <anchor>ac551642f23cec21e7ab45aec4ff3b147</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>alternatePhaseValue</name>
      <anchorfile>a00535.html</anchorfile>
      <anchor>af232d809fbb9d4d2e9cbbb19fe9392e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>alternateLogValue</name>
      <anchorfile>a00535.html</anchorfile>
      <anchor>a6263f30cc107696159e302bfa31115fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::RNDiracDeterminantBaseAlternate</name>
    <filename>a00536.html</filename>
    <base>qmcplusplus::DiracDeterminantBase</base>
    <member kind="function">
      <type></type>
      <name>RNDiracDeterminantBaseAlternate</name>
      <anchorfile>a00536.html</anchorfile>
      <anchor>aad0f2d19da8998d760df1bed785351c0</anchor>
      <arglist>(SPOSetBasePtr const &amp;spos, int first=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RNDiracDeterminantBaseAlternate</name>
      <anchorfile>a00536.html</anchorfile>
      <anchor>aade2edfa7b9a18ca7d58a05b347af796</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RNDiracDeterminantBaseAlternate</name>
      <anchorfile>a00536.html</anchorfile>
      <anchor>add9268298dd18aed894641202cef7c22</anchor>
      <arglist>(const RNDiracDeterminantBaseAlternate &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>RNDiracDeterminantBaseAlternate &amp;</type>
      <name>operator=</name>
      <anchorfile>a00536.html</anchorfile>
      <anchor>ae3cdd46d0db7555f14e6947e28782ea6</anchor>
      <arglist>(const RNDiracDeterminantBaseAlternate &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>registerData</name>
      <anchorfile>a00536.html</anchorfile>
      <anchor>a7423285f1ce7b2ceb61e567c6b83940b</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00536.html</anchorfile>
      <anchor>a017712a05713204fcb4c0ebad7ae7af3</anchor>
      <arglist>(int nel, int morb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>a00536.html</anchorfile>
      <anchor>a4fad6e178271bda6f6e70a5965041472</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>updateBuffer</name>
      <anchorfile>a00536.html</anchorfile>
      <anchor>a2463c779c0aa6afa6db59b3aa876e581</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf, bool fromscratch=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00536.html</anchorfile>
      <anchor>a5261ed49b5195980c91c0024b860fdb2</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00536.html</anchorfile>
      <anchor>ae48d26cda4ea333bd20dd41ff8e4aa15</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>alternateRatio</name>
      <anchorfile>a00536.html</anchorfile>
      <anchor>a5424bb9ef1b25436ed6511eabed515f7</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00536.html</anchorfile>
      <anchor>a9240fdf6763c7906c9f5b181f142ef13</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratioGrad</name>
      <anchorfile>a00536.html</anchorfile>
      <anchor>acf4aa7cda98769347e9597a18e98d47f</anchor>
      <arglist>(ParticleSet &amp;P, int iat, GradType &amp;grad_iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>alternateRatioGrad</name>
      <anchorfile>a00536.html</anchorfile>
      <anchor>ab2cea19be1d86a2e804b337103583f0e</anchor>
      <arglist>(ParticleSet &amp;P, int iat, GradType &amp;grad_iat)</arglist>
    </member>
    <member kind="function">
      <type>GradType</type>
      <name>evalGrad</name>
      <anchorfile>a00536.html</anchorfile>
      <anchor>a2474095c0c54c2248bdb4c99d0f01756</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>GradType</type>
      <name>alternateEvalGrad</name>
      <anchorfile>a00536.html</anchorfile>
      <anchor>a4f13d714216293560dea264cb9d03004</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>GradType</type>
      <name>evalGradSource</name>
      <anchorfile>a00536.html</anchorfile>
      <anchor>a6c70f8d91998ced2d5ae5aeb576b78d3</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet &amp;source, int iat)</arglist>
    </member>
    <member kind="function">
      <type>GradType</type>
      <name>evalGradSource</name>
      <anchorfile>a00536.html</anchorfile>
      <anchor>ac6dc8e298056dbb554bc7b7d89777a98</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet &amp;source, int iat, TinyVector&lt; ParticleSet::ParticleGradient_t, OHMMS_DIM &gt; &amp;grad_grad, TinyVector&lt; ParticleSet::ParticleLaplacian_t, OHMMS_DIM &gt; &amp;lapl_grad)</arglist>
    </member>
    <member kind="function">
      <type>GradType</type>
      <name>evalGradSourcep</name>
      <anchorfile>a00536.html</anchorfile>
      <anchor>ad2dfa415f70d9e1b50ed81e642ae6c14</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet &amp;source, int iat, TinyVector&lt; ParticleSet::ParticleGradient_t, OHMMS_DIM &gt; &amp;grad_grad, TinyVector&lt; ParticleSet::ParticleLaplacian_t, OHMMS_DIM &gt; &amp;lapl_grad)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>a00536.html</anchorfile>
      <anchor>af79a1f1637e80a729043600a7656054d</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00536.html</anchorfile>
      <anchor>aeba37f5a7f9e1c209be41e1f8c2d316d</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00536.html</anchorfile>
      <anchor>acd9e8c6f9aef3b9e702f3cf5c6bca1ba</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getAlternatePhaseDiff</name>
      <anchorfile>a00536.html</anchorfile>
      <anchor>a6c055dc195e0d8526b8b8526dbf51993</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getAlternatePhaseDiff</name>
      <anchorfile>a00536.html</anchorfile>
      <anchor>a9345b83eb8076e816e872335e7e35d5e</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00536.html</anchorfile>
      <anchor>aa0c5f16ad326ccf07ec7da4f731d65d2</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>DiracDeterminantBase *</type>
      <name>makeCopy</name>
      <anchorfile>a00536.html</anchorfile>
      <anchor>a0be97ef6da4a3d3a96c39bb96afbbb8f</anchor>
      <arglist>(SPOSetBase *spo) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLogEpsilon</name>
      <anchorfile>a00536.html</anchorfile>
      <anchor>ad025c44854e332efb36880d1cfc36949</anchor>
      <arglist>(ValueType x)</arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>alternateCurRatio</name>
      <anchorfile>a00536.html</anchorfile>
      <anchor>a21cd2c4a509343ae0fd1275121eb9502</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>myG_alternate</name>
      <anchorfile>a00536.html</anchorfile>
      <anchor>af958fb3473ae4fbd625dab98564bdb4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleLaplacian_t</type>
      <name>myL_alternate</name>
      <anchorfile>a00536.html</anchorfile>
      <anchor>aae0dcadc176c4b5493ce5d82d0d2cb8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>logepsilon</name>
      <anchorfile>a00536.html</anchorfile>
      <anchor>ac551642f23cec21e7ab45aec4ff3b147</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>alternateLogValue</name>
      <anchorfile>a00536.html</anchorfile>
      <anchor>a5f7b07798f0d2b4ee063e8f6ec531ad8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>alternatePhaseValue</name>
      <anchorfile>a00536.html</anchorfile>
      <anchor>a574db1fb1dc716cd1deba8d6e44f4e1d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::SlaterDet</name>
    <filename>a00564.html</filename>
    <base>qmcplusplus::OrbitalBase</base>
    <base>qmcplusplus::FermionBase</base>
    <member kind="typedef">
      <type>DiracDeterminantBase</type>
      <name>Determinant_t</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>a7fd03c13f8e72bfb60b148cdad2feac0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SlaterDet</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>a2742ab6403ae261c6da8aa7b8dbf7f47</anchor>
      <arglist>(ParticleSet &amp;targetPtcl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SlaterDet</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>a6c6868851ce18661d179cb9096050f16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>a2906b3c3bfed68f69ab2f01debe3ee6e</anchor>
      <arglist>(SPOSetBasePtr sposet, const string &amp;aname)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>a357172c769f60f39c0291f7fa9b38f2f</anchor>
      <arglist>(Determinant_t *det, int ispin)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBF</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>a7afb2f20704b253609e753bea519d09b</anchor>
      <arglist>(BackflowTransformation *BFTrans)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkInVariables</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetParameters</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>a39ea173c92dae81ac977359c07ff55db</anchor>
      <arglist>(const opt_variables_type &amp;optVariables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportStatus</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>a0a144256f92f2fa9e13e840bc30baef7</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ValueType</type>
      <name>evaluate</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>aa95200e25f815998dee4004cf8349f9f</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>a46bb0f48102e3377032b8f09ecdedce0</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>add27b9fe1578fb3916363812717ecc63</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L, PooledData&lt; RealType &gt; &amp;buf, bool fillBuffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerDataForDerivatives</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>aaa52fc94e8378c70746f4087f49fb88a</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf, int storageType=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>memoryUsage_DataForDerivatives</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>ac376cd2b448d380a980f4a28d4b62855</anchor>
      <arglist>(ParticleSet &amp;P, long &amp;orbs_only, long &amp;orbs, long &amp;invs, long &amp;dets)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFromDerivativeBuffer</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>af7e4fe6a13def8f9771c136dd0d56ec6</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>ab8e4e3e2a7bf18888b71bdf9dda0770b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>ab243ad95876992f71bfc9043b9a713bd</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealType</type>
      <name>registerData</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>afb3fc9fcc3553315c537c9db8b7d9a82</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealType</type>
      <name>updateBuffer</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>a87af762778cf2004af81a611018ed1f2</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf, bool fromscratch=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>a5261ed49b5195980c91c0024b860fdb2</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dumpToBuffer</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>ab1a527695dc08648c2e975fddddcb117</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dumpFromBuffer</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>aa423c75ff4e6a458c49a5c4567a89df0</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>a96dec4beacf1a9492f9f9abec2845f77</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ValueType</type>
      <name>ratio</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>a9a9c8f614e857c18fc75ef985d9015cc</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ValueType</type>
      <name>ratioGrad</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>abbb5d49715a43b66c809387225fd57eb</anchor>
      <arglist>(ParticleSet &amp;P, int iat, GradType &amp;grad_iat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ValueType</type>
      <name>alternateRatioGrad</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>aeb7ad5fc7e4871d5fd2880e442c9ff02</anchor>
      <arglist>(ParticleSet &amp;P, int iat, GradType &amp;grad_iat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradType</type>
      <name>evalGrad</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>a801b74da5174c0dd0fc461acde54f7dd</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradType</type>
      <name>alternateEvalGrad</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>a1aab7d4a53bf375e8ffefe91ba2b91fa</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradType</type>
      <name>evalGradSource</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>afa248fe4c3d667899c7270b45d0a7fe4</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet &amp;src, int iat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradType</type>
      <name>evalGradSource</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>a65cc72e706918c8dcf64503bb049e00c</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet &amp;src, int iat, TinyVector&lt; ParticleSet::ParticleGradient_t, OHMMS_DIM &gt; &amp;grad_grad, TinyVector&lt; ParticleSet::ParticleLaplacian_t, OHMMS_DIM &gt; &amp;lapl_grad)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ValueType</type>
      <name>logRatio</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>a52a145a92c6c448c1b84d429b01bea45</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>restore</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>a0efc5dcd1e9c06c27a656926eaec44f2</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getAlternatePhaseDiff</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>a6c055dc195e0d8526b8b8526dbf51993</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getAlternatePhaseDiff</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>a9345b83eb8076e816e872335e7e35d5e</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>acceptMove</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>a61e1e958631600570f80bfb521f8dc28</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ValueType</type>
      <name>ratio</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>a6f487de19815325246439e0cc21c690d</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ValueType</type>
      <name>alternateRatio</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>af902814950fe1fa0f8df44ab5a7042ab</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>alternateGrad</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>aacf962a922f3361335c084e1d22a10f1</anchor>
      <arglist>(ParticleSet::ParticleGradient_t &amp;G)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>aeba37f5a7f9e1c209be41e1f8c2d316d</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OrbitalBasePtr</type>
      <name>makeClone</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>ab68f5027a5eee70c7e4e130cfa9aab1b</anchor>
      <arglist>(ParticleSet &amp;tqp) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SPOSetBasePtr</type>
      <name>getPhi</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>a39c0e1541531b528e6c7a7dfd1d9516a</anchor>
      <arglist>(int i=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>get_ratios</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>a0afd740894bec6ecb30956568b7deeeb</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; ValueType &gt; &amp;ratios)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateDerivatives</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>a291c52dc43d28edb9643f61b763e0952</anchor>
      <arglist>(ParticleSet &amp;P, const opt_variables_type &amp;active, vector&lt; RealType &gt; &amp;dlogpsi, vector&lt; RealType &gt; &amp;dhpsioverpsi)</arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; Determinant_t * &gt;</type>
      <name>Dets</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>ab7684e66c4acb51b8ff21d04d6b87ee9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>M</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>a5a0985ff672bee47dc7b155123f6390f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>DetID</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>ae2e5823f4caf99558aa17b34edef149e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>map&lt; string, SPOSetBasePtr &gt;</type>
      <name>mySPOSet</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>aa68ca0189f96bbddd0c0720914b693e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>SlaterDet</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>a941b0e568bf3d71ab878f09ef2307e7f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::SlaterDetBuilder</name>
    <filename>a00565.html</filename>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <member kind="typedef">
      <type>SlaterDet</type>
      <name>SlaterDeterminant_t</name>
      <anchorfile>a00565.html</anchorfile>
      <anchor>a61ae2ed3c2577ed5876f3122698812ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MultiSlaterDeterminant</type>
      <name>MultiSlaterDeterminant_t</name>
      <anchorfile>a00565.html</anchorfile>
      <anchor>aaa9bb4a587e85301f6f5090c1bdd13d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiracDeterminantBase</type>
      <name>Det_t</name>
      <anchorfile>a00565.html</anchorfile>
      <anchor>a980596692507f2f8d7a0683b1e89bbeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SlaterDetBuilder</name>
      <anchorfile>a00565.html</anchorfile>
      <anchor>a63c7a49a704cd587ab7118c1e5b4d556</anchor>
      <arglist>(ParticleSet &amp;els, TrialWaveFunction &amp;psi, PtclPoolType &amp;psets)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SlaterDetBuilder</name>
      <anchorfile>a00565.html</anchorfile>
      <anchor>aa1d9fae7b01211427e3ef4f2424264f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00565.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>putDeterminant</name>
      <anchorfile>a00565.html</anchorfile>
      <anchor>ad100b2d7f751433223ab754ae8c0c5ec</anchor>
      <arglist>(xmlNodePtr cur, int firstIndex)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>createMSD</name>
      <anchorfile>a00565.html</anchorfile>
      <anchor>a2c144667fd8dc167ecbccbf6b1653dc0</anchor>
      <arglist>(MultiSlaterDeterminant *multiSD, xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>createMSDFast</name>
      <anchorfile>a00565.html</anchorfile>
      <anchor>a7a00de9943bb84e5f5a2d22f560294a9</anchor>
      <arglist>(MultiSlaterDeterminantFast *multiSD, xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>readDetList</name>
      <anchorfile>a00565.html</anchorfile>
      <anchor>ab91f86580acfca3e68d1dcce5f60e6d7</anchor>
      <arglist>(xmlNodePtr cur, vector&lt; ci_configuration &gt; &amp;uniqueConfg_up, vector&lt; ci_configuration &gt; &amp;uniqueConfg_dn, vector&lt; int &gt; &amp;C2node_up, vector&lt; int &gt; &amp;C2node_dn, vector&lt; std::string &gt; &amp;CItags, vector&lt; RealType &gt; &amp;coeff, bool &amp;optimizeCI, int nels_up, int nels_dn, vector&lt; RealType &gt; &amp;CSFcoeff, vector&lt; int &gt; &amp;DetsPerCSF, vector&lt; RealType &gt; &amp;CSFexpansion, bool &amp;usingCSF)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PtclPoolType &amp;</type>
      <name>ptclPool</name>
      <anchorfile>a00565.html</anchorfile>
      <anchor>a4fc7c3d5848a9235a0cf8803ff1f9fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BasisSetFactory *</type>
      <name>myBasisSetFactory</name>
      <anchorfile>a00565.html</anchorfile>
      <anchor>aa1ba8912516240739c8a6a5924b22407</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SlaterDeterminant_t *</type>
      <name>slaterdet_0</name>
      <anchorfile>a00565.html</anchorfile>
      <anchor>af5fae7f6497eecfbaac26690aa082199</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MultiSlaterDeterminant_t *</type>
      <name>multislaterdet_0</name>
      <anchorfile>a00565.html</anchorfile>
      <anchor>a2fb107acdcd0eb46e9a17ef682a9805a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MultiSlaterDeterminantFast *</type>
      <name>multislaterdetfast_0</name>
      <anchorfile>a00565.html</anchorfile>
      <anchor>a36ba252c4cb5ffbdae306a8189b6583b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>UseBackflow</name>
      <anchorfile>a00565.html</anchorfile>
      <anchor>a0e1374db15f330b4d94b42da1316cafa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BackflowTransformation *</type>
      <name>BFTrans</name>
      <anchorfile>a00565.html</anchorfile>
      <anchor>aa1a491a54b76fafb648fa3137be80cf6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::SlaterDetWithBackflow</name>
    <filename>a00566.html</filename>
    <base>qmcplusplus::SlaterDet</base>
    <member kind="function">
      <type></type>
      <name>SlaterDetWithBackflow</name>
      <anchorfile>a00566.html</anchorfile>
      <anchor>a067a4d8de5c570511369807a2aec8ace</anchor>
      <arglist>(ParticleSet &amp;targetPtcl, BackflowTransformation *BF)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SlaterDetWithBackflow</name>
      <anchorfile>a00566.html</anchorfile>
      <anchor>a2e5ad6c00ae2a0b7a23eb9bc10e2e65d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBF</name>
      <anchorfile>a00566.html</anchorfile>
      <anchor>a3f12ecd4ae2d2cfd41bc86b42ac75da6</anchor>
      <arglist>(BackflowTransformation *bf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00566.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00566.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00566.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00566.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>a00566.html</anchorfile>
      <anchor>af70e23946f4ec6e8c9d545315847a76f</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00566.html</anchorfile>
      <anchor>a9910dbd8f82ac32d3bfb982bd6875473</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>registerData</name>
      <anchorfile>a00566.html</anchorfile>
      <anchor>aeea6e3e81f0443125d160e2227ac1ef6</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>updateBuffer</name>
      <anchorfile>a00566.html</anchorfile>
      <anchor>aabfb477649a3e62a146832081a2c41c9</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf, bool fromscratch=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00566.html</anchorfile>
      <anchor>a5261ed49b5195980c91c0024b860fdb2</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dumpToBuffer</name>
      <anchorfile>a00566.html</anchorfile>
      <anchor>ab1a527695dc08648c2e975fddddcb117</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dumpFromBuffer</name>
      <anchorfile>a00566.html</anchorfile>
      <anchor>aa423c75ff4e6a458c49a5c4567a89df0</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00566.html</anchorfile>
      <anchor>a675a9728a2c0ac7db16d5eb1e91978aa</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00566.html</anchorfile>
      <anchor>ad4ac6ecacd80d95941026660c9799fd0</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratioGrad</name>
      <anchorfile>a00566.html</anchorfile>
      <anchor>af21351a5f07bfcec09d2f2c85c24ffee</anchor>
      <arglist>(ParticleSet &amp;P, int iat, GradType &amp;grad_iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>alternateRatioGrad</name>
      <anchorfile>a00566.html</anchorfile>
      <anchor>acb251e708016839295ccf82a25f0890c</anchor>
      <arglist>(ParticleSet &amp;P, int iat, GradType &amp;grad_iat)</arglist>
    </member>
    <member kind="function">
      <type>GradType</type>
      <name>evalGrad</name>
      <anchorfile>a00566.html</anchorfile>
      <anchor>a178607284b7ab1e4c389fce8e0c80de3</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>GradType</type>
      <name>alternateEvalGrad</name>
      <anchorfile>a00566.html</anchorfile>
      <anchor>a461f3b5a8e43c693c65b0b2bc6e77a63</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>GradType</type>
      <name>evalGradSource</name>
      <anchorfile>a00566.html</anchorfile>
      <anchor>afbb9f22766b3aece4caa49bfdc1c52ea</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet &amp;src, int iat)</arglist>
    </member>
    <member kind="function">
      <type>GradType</type>
      <name>evalGradSource</name>
      <anchorfile>a00566.html</anchorfile>
      <anchor>a3178e78d219966ce9d3660d00c0e0766</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet &amp;src, int iat, TinyVector&lt; ParticleSet::ParticleGradient_t, OHMMS_DIM &gt; &amp;grad_grad, TinyVector&lt; ParticleSet::ParticleLaplacian_t, OHMMS_DIM &gt; &amp;lapl_grad)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>logRatio</name>
      <anchorfile>a00566.html</anchorfile>
      <anchor>af6fa7f27fa33e00e9097169c82dff776</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>a00566.html</anchorfile>
      <anchor>af79a1f1637e80a729043600a7656054d</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>a00566.html</anchorfile>
      <anchor>a4fad6e178271bda6f6e70a5965041472</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00566.html</anchorfile>
      <anchor>a5e4a7bd7e23a6beab0d8bc131be6ffc4</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>alternateRatio</name>
      <anchorfile>a00566.html</anchorfile>
      <anchor>ab3c7c00606afb0d2f1fc96e7ec897c8d</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>alternateGrad</name>
      <anchorfile>a00566.html</anchorfile>
      <anchor>af32081a8b79e7f736b54445a719717af</anchor>
      <arglist>(ParticleSet::ParticleGradient_t &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00566.html</anchorfile>
      <anchor>aeba37f5a7f9e1c209be41e1f8c2d316d</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>OrbitalBasePtr</type>
      <name>makeClone</name>
      <anchorfile>a00566.html</anchorfile>
      <anchor>ab68f5027a5eee70c7e4e130cfa9aab1b</anchor>
      <arglist>(ParticleSet &amp;tqp) const </arglist>
    </member>
    <member kind="function">
      <type>SPOSetBasePtr</type>
      <name>getPhi</name>
      <anchorfile>a00566.html</anchorfile>
      <anchor>a5bd695e55a3be37e0f3eb2df4077c139</anchor>
      <arglist>(int i=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_ratios</name>
      <anchorfile>a00566.html</anchorfile>
      <anchor>a0afd740894bec6ecb30956568b7deeeb</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; ValueType &gt; &amp;ratios)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateDerivatives</name>
      <anchorfile>a00566.html</anchorfile>
      <anchor>aafd880c4d54de935e4fc244b1d7cd606</anchor>
      <arglist>(ParticleSet &amp;P, const opt_variables_type &amp;optvars, vector&lt; RealType &gt; &amp;dlogpsi, vector&lt; RealType &gt; &amp;dhpsioverpsi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testDerivGL</name>
      <anchorfile>a00566.html</anchorfile>
      <anchor>a7dddde0a4ef2099f51b9a7dacdab94f6</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="variable">
      <type>BackflowTransformation *</type>
      <name>BFTrans</name>
      <anchorfile>a00566.html</anchorfile>
      <anchor>aa1a491a54b76fafb648fa3137be80cf6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::SPOSetProxy</name>
    <filename>a00589.html</filename>
    <base>qmcplusplus::SPOSetBase</base>
    <member kind="function">
      <type></type>
      <name>SPOSetProxy</name>
      <anchorfile>a00589.html</anchorfile>
      <anchor>a0371a7c47a5d83802b3ce3ff834ad746</anchor>
      <arglist>(SPOSetBasePtr const &amp;spos, int first, int last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00589.html</anchorfile>
      <anchor>a39ea173c92dae81ac977359c07ff55db</anchor>
      <arglist>(const opt_variables_type &amp;optVariables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00589.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrbitalSetSize</name>
      <anchorfile>a00589.html</anchorfile>
      <anchor>abe2573f29355b07956892dc6bd7f12ca</anchor>
      <arglist>(int norbs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00589.html</anchorfile>
      <anchor>a55614decceadf408ddc308827faada58</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00589.html</anchorfile>
      <anchor>a8d03182606ebdc99cb116d189b732f02</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi, GradVector_t &amp;dpsi, ValueVector_t &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00589.html</anchorfile>
      <anchor>a46be445602815c4c7ab824bf189d2b7b</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi, GradVector_t &amp;dpsi, HessVector_t &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00589.html</anchorfile>
      <anchor>a8460601757636d91c960472fbe762f1c</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, ValueMatrix_t &amp;d2logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00589.html</anchorfile>
      <anchor>ae91b5a23fbd5208cf10757eea50386c8</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, ValueMatrix_t &amp;d2logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00589.html</anchorfile>
      <anchor>a07c1a674284e046abca37a81f2ef7214</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, HessMatrix_t &amp;grad_grad_logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00589.html</anchorfile>
      <anchor>ae757e92cb2a09a1092c0029ee63ddad0</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, HessMatrix_t &amp;grad_grad_logdet, GGGMatrix_t &amp;grad_grad_grad_logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00589.html</anchorfile>
      <anchor>a625375c35e3d6917247acd1d76008768</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, HessMatrix_t &amp;grad_grad_logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00589.html</anchorfile>
      <anchor>aa8c87ff012f3f2143027314b8024007f</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, HessMatrix_t &amp;grad_grad_logdet, GGGMatrix_t &amp;grad_grad_grad_logdet)</arglist>
    </member>
    <member kind="variable">
      <type>SPOSetBasePtr</type>
      <name>refPhi</name>
      <anchorfile>a00589.html</anchorfile>
      <anchor>a2cf9b0c39d7bd97b29d190cc49dd11ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>psiM</name>
      <anchorfile>a00589.html</anchorfile>
      <anchor>a5873b1ad34c9f4331d317667b4f3401d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradMatrix_t</type>
      <name>dpsiM</name>
      <anchorfile>a00589.html</anchorfile>
      <anchor>a6bd5f6c172f77ad8c665ac07e25de0ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>d2psiM</name>
      <anchorfile>a00589.html</anchorfile>
      <anchor>af1b1bc3d5ef7b754872e6453bb8d3276</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueVector_t</type>
      <name>psiV</name>
      <anchorfile>a00589.html</anchorfile>
      <anchor>a140e9126026e1e48dd94c10f78d5c53b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradVector_t</type>
      <name>dpsiV</name>
      <anchorfile>a00589.html</anchorfile>
      <anchor>a7c914592db6f59c3930f449249df1a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueVector_t</type>
      <name>d2psiV</name>
      <anchorfile>a00589.html</anchorfile>
      <anchor>aff0b4a50ad52c7d5244f794295d12199</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::SPOSetProxyForMSD</name>
    <filename>a00590.html</filename>
    <base>qmcplusplus::SPOSetBase</base>
    <member kind="function">
      <type></type>
      <name>SPOSetProxyForMSD</name>
      <anchorfile>a00590.html</anchorfile>
      <anchor>a29e895d23bef4c451a76b1cb822da458</anchor>
      <arglist>(SPOSetBasePtr const &amp;spos, int first, int last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00590.html</anchorfile>
      <anchor>a39ea173c92dae81ac977359c07ff55db</anchor>
      <arglist>(const opt_variables_type &amp;optVariables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00590.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrbitalSetSize</name>
      <anchorfile>a00590.html</anchorfile>
      <anchor>abe2573f29355b07956892dc6bd7f12ca</anchor>
      <arglist>(int norbs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00590.html</anchorfile>
      <anchor>a55614decceadf408ddc308827faada58</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00590.html</anchorfile>
      <anchor>a8d03182606ebdc99cb116d189b732f02</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi, GradVector_t &amp;dpsi, ValueVector_t &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00590.html</anchorfile>
      <anchor>a46be445602815c4c7ab824bf189d2b7b</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi, GradVector_t &amp;dpsi, HessVector_t &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00590.html</anchorfile>
      <anchor>a8460601757636d91c960472fbe762f1c</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, ValueMatrix_t &amp;d2logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00590.html</anchorfile>
      <anchor>ae91b5a23fbd5208cf10757eea50386c8</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, ValueMatrix_t &amp;d2logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00590.html</anchorfile>
      <anchor>a07c1a674284e046abca37a81f2ef7214</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, HessMatrix_t &amp;grad_grad_logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00590.html</anchorfile>
      <anchor>ae757e92cb2a09a1092c0029ee63ddad0</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, HessMatrix_t &amp;grad_grad_logdet, GGGMatrix_t &amp;grad_grad_grad_logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00590.html</anchorfile>
      <anchor>a625375c35e3d6917247acd1d76008768</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, HessMatrix_t &amp;grad_grad_logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00590.html</anchorfile>
      <anchor>aa8c87ff012f3f2143027314b8024007f</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, HessMatrix_t &amp;grad_grad_logdet, GGGMatrix_t &amp;grad_grad_grad_logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepareFor</name>
      <anchorfile>a00590.html</anchorfile>
      <anchor>a9f1d520e3e2c944eaa8f8d9dbc89511f</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateForWalkerMove</name>
      <anchorfile>a00590.html</anchorfile>
      <anchor>a2521d833be8fe1f51fc5489ffbff4fd9</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateForWalkerMoveWithHessian</name>
      <anchorfile>a00590.html</anchorfile>
      <anchor>a7a80049001c74c948a3f4863afada332</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateForWalkerMoveWithThirdDeriv</name>
      <anchorfile>a00590.html</anchorfile>
      <anchor>a85a573060b2daf20e6fbc17cee513aeb</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateForPtclMove</name>
      <anchorfile>a00590.html</anchorfile>
      <anchor>ac8389bd55ef2af388a7986b247910f9c</anchor>
      <arglist>(const ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateAllForPtclMove</name>
      <anchorfile>a00590.html</anchorfile>
      <anchor>a35a228e785ab4e4ba8bf19f25d385ef5</anchor>
      <arglist>(const ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="variable">
      <type>SPOSetBasePtr</type>
      <name>refPhi</name>
      <anchorfile>a00590.html</anchorfile>
      <anchor>a2cf9b0c39d7bd97b29d190cc49dd11ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>psiM</name>
      <anchorfile>a00590.html</anchorfile>
      <anchor>a5873b1ad34c9f4331d317667b4f3401d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradMatrix_t</type>
      <name>dpsiM</name>
      <anchorfile>a00590.html</anchorfile>
      <anchor>a6bd5f6c172f77ad8c665ac07e25de0ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>d2psiM</name>
      <anchorfile>a00590.html</anchorfile>
      <anchor>af1b1bc3d5ef7b754872e6453bb8d3276</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HessMatrix_t</type>
      <name>grad_grad_psiM</name>
      <anchorfile>a00590.html</anchorfile>
      <anchor>a664115cc9310878213eebab1e00457ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HessVector_t</type>
      <name>grad_gradV</name>
      <anchorfile>a00590.html</anchorfile>
      <anchor>acc4f837b7b93b18ba61bb687fb0a6c35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GGGMatrix_t</type>
      <name>grad_grad_grad_psiM</name>
      <anchorfile>a00590.html</anchorfile>
      <anchor>abd2d894d5e3b5ea390bcfd07866294c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GGGVector_t</type>
      <name>grad_grad_gradV</name>
      <anchorfile>a00590.html</anchorfile>
      <anchor>a985144456109657339bdae7125f35a07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueVector_t</type>
      <name>psiV</name>
      <anchorfile>a00590.html</anchorfile>
      <anchor>a140e9126026e1e48dd94c10f78d5c53b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradVector_t</type>
      <name>dpsiV</name>
      <anchorfile>a00590.html</anchorfile>
      <anchor>a7c914592db6f59c3930f449249df1a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueVector_t</type>
      <name>d2psiV</name>
      <anchorfile>a00590.html</anchorfile>
      <anchor>aff0b4a50ad52c7d5244f794295d12199</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; int &gt;</type>
      <name>occup</name>
      <anchorfile>a00590.html</anchorfile>
      <anchor>a405b4825a4e1c1b39a51f1505e121717</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>workingSet</name>
      <anchorfile>a00590.html</anchorfile>
      <anchor>a08316c684b7d0f6d888a64464062a12f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::FermionBase</name>
    <filename>a00219.html</filename>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::GroupedOrbitalSet</name>
    <filename>a00248.html</filename>
    <templarg></templarg>
    <base>qmcplusplus::SPOSetBase</base>
    <member kind="typedef">
      <type>vector&lt; OT * &gt;</type>
      <name>SPOContainer_t</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>af0ff6b7dacb545308b067b9f3088fd47</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OT::value_type</type>
      <name>value_type</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>a1f73a333a4c60863f3b365fa22f18e54</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GroupedOrbitalSet</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>a1b1d37327d8ec7bb7826a9d21f24e8ee</anchor>
      <arglist>(int norbs=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>add</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>a269dce98adeca430d69cadb9a4280a44</anchor>
      <arglist>(OT *afunction)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrbitalSetSize</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>abe2573f29355b07956892dc6bd7f12ca</anchor>
      <arglist>(int norbs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>a55614decceadf408ddc308827faada58</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>a8d03182606ebdc99cb116d189b732f02</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi, GradVector_t &amp;dpsi, ValueVector_t &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>a8460601757636d91c960472fbe762f1c</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, ValueMatrix_t &amp;d2logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ae91b5a23fbd5208cf10757eea50386c8</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, ValueMatrix_t &amp;d2logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>a625375c35e3d6917247acd1d76008768</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, HessMatrix_t &amp;grad_grad_logdet)</arglist>
    </member>
    <member kind="variable">
      <type>SPOContainer_t</type>
      <name>Phi</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>addc8c9080fe1b541b5a2c56b6ea85eb0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::IonOrbital</name>
    <filename>a00314.html</filename>
    <base>qmcplusplus::OrbitalBase</base>
    <member kind="function">
      <type></type>
      <name>IonOrbital</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aa07cefa548cd3b2e3d16d56cda666727</anchor>
      <arglist>(ParticleSet &amp;centers, ParticleSet &amp;ptcls)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IonOrbital</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ac29d43169c641972f43c1f122fe8a0b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ac9471334d6ff888e194a823d9f9061ae</anchor>
      <arglist>(const opt_variables_type &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ac66948db629989be1d9335e1d48dfeb0</anchor>
      <arglist>(opt_variables_type &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportStatus</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a0a144256f92f2fa9e13e840bc30baef7</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a17a690a835b951b7cb5ec17d890a1e2b</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a0b55a38d9d2e1b019641dbac501b8153</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ad4ac6ecacd80d95941026660c9799fd0</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a5e4a7bd7e23a6beab0d8bc131be6ffc4</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>af79a1f1637e80a729043600a7656054d</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a4fad6e178271bda6f6e70a5965041472</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aeba37f5a7f9e1c209be41e1f8c2d316d</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>registerData</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a8b2cf6f374fbe0fe540a90d92e7d4fa8</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>updateBuffer</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a4dc00e924ea24310e0492cfb63c83ef4</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf, bool fromscratch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a873b86d22a6078397525e16eae04ed7c</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>afe5e54c7c56e7d7e29833ab6b8741777</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>GradType</type>
      <name>evalGrad</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a178607284b7ab1e4c389fce8e0c80de3</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratioGrad</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>af21351a5f07bfcec09d2f2c85c24ffee</anchor>
      <arglist>(ParticleSet &amp;P, int iat, GradType &amp;grad_iat)</arglist>
    </member>
    <member kind="function">
      <type>OrbitalBase *</type>
      <name>makeClone</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ab68f5027a5eee70c7e4e130cfa9aab1b</anchor>
      <arglist>(ParticleSet &amp;tqp) const </arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>logRatio</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>af6fa7f27fa33e00e9097169c82dff776</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateLogAndStore</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>af2729bf726a29202c501a093cec75761</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>ParticleAlpha</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ac16b7d9b516d5cd95094ef286c235dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>ParticleCenter</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>acb323fb8b28078715109f7ccf0deaca7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleAttrib&lt; RealType &gt;</type>
      <name>U</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a5b43bd96312d140cb8feaead0dcf7ded</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleAttrib&lt; RealType &gt;</type>
      <name>d2U</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ae2a389d37b3a24fd59adba99921fd768</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleAttrib&lt; PosType &gt;</type>
      <name>dU</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a59f58fa10257e6758df81fdf1df34017</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType *</type>
      <name>FirstAddressOfdU</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a77538c1503ee95a4637198725fe78fb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType *</type>
      <name>LastAddressOfdU</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aa28d1447dcf13740b471c860cca9db18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a859bc2c01e2beb7537cd83f0b9e88921</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet &amp;</type>
      <name>CenterRef</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a951139875b64a2da0b23270f0e10b5d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet &amp;</type>
      <name>PtclRef</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ae290ee1445840129ec777fc9048508e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumTargetPtcls</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>af6c84c8f04128da163ab7af8198c0cf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumCenters</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a660b39b9516b5c23ab7bb18a6be11e3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>curVal</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a9d968af9e056fb5b523c54fb2b46b562</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>curLap</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>af231fbc54bac0d9508402e1a9ab6e445</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PosType</type>
      <name>curGrad</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a1f7818b1f57b3d6585ac950fecec6d07</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::IonOrbitalBuilder</name>
    <filename>a00315.html</filename>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>IonOrbitalBuilder</name>
      <anchorfile>a00315.html</anchorfile>
      <anchor>a0fa4c60409e3f812a92f28e7c4acf7ae</anchor>
      <arglist>(ParticleSet &amp;p, TrialWaveFunction &amp;psi, PtclPoolType &amp;psets)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00315.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>resetOptions</name>
      <anchorfile>a00315.html</anchorfile>
      <anchor>a7350df0356da600331916fc3bb3a61aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PtclPoolType &amp;</type>
      <name>ptclPool</name>
      <anchorfile>a00315.html</anchorfile>
      <anchor>a4fc7c3d5848a9235a0cf8803ff1f9fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>IonOrbitalType</name>
      <anchorfile>a00315.html</anchorfile>
      <anchor>a7138a380177bda0a411595ad56ce8b69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>nameOpt</name>
      <anchorfile>a00315.html</anchorfile>
      <anchor>a781bcecdfb5028f20ccad29fdb467ccb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>typeOpt</name>
      <anchorfile>a00315.html</anchorfile>
      <anchor>a043224143a880362881066c5d6e5af81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; RealType &gt;</type>
      <name>widthOpt</name>
      <anchorfile>a00315.html</anchorfile>
      <anchor>a883e9e5d5795b18a344545af49bdac87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>spinOpt</name>
      <anchorfile>a00315.html</anchorfile>
      <anchor>af456c0d71a633adea98eb10ca1c138c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>transformOpt</name>
      <anchorfile>a00315.html</anchorfile>
      <anchor>a0afed0c9b82a9448532799af87276f53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>sourceOpt</name>
      <anchorfile>a00315.html</anchorfile>
      <anchor>addb94bd9695ae343ac901394ca5ef0ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::BesselZero</name>
    <filename>a00040.html</filename>
    <templarg></templarg>
    <base>OptimizableFunctorBase</base>
    <member kind="typedef">
      <type>real_type</type>
      <name>value_type</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a80349dc942856ab617148301967b7ff0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BesselZero</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>affb35398add9d6754a9301fc99c0be2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OptimizableFunctorBase *</type>
      <name>makeClone</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a4747acd34f8d2daa0656125f1290e4d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a578be9c59132b8633a67a98c39318777</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a4860196a527546949f6366d22425c009</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>af08f1f70ecd1cddcf7d274cbcad42f40</anchor>
      <arglist>(real_type r, real_type rinv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateAll</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a1b404b15a77d0f3bd4e6ff6a527a518d</anchor>
      <arglist>(real_type r, real_type rinv)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a6d4da0f3cb2c37f2105f35aba1c3a813</anchor>
      <arglist>(real_type r, real_type &amp;dudr, real_type &amp;d2udr2)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>ac059e0873401047f0ec172926e036249</anchor>
      <arglist>(real_type r, real_type &amp;dudr, real_type &amp;d2udr2, real_type &amp;d3udr3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sumB</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>ab29b374dd3c370920166d461b299c6da</anchor>
      <arglist>(real_type X, real_type &amp;u, real_type &amp;du, real_type &amp;d2u)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>evaluateDerivatives</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>ad6d1fb2ec9788f67d5c09d67421efc8d</anchor>
      <arglist>(real_type r, vector&lt; TinyVector&lt; real_type, 3 &gt; &gt; &amp;derivs)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a6a91c8094ddd49aa8a2da9df6b439164</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>aff351ffb66160b6458d6057fa6bc2a5f</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a388f572c62279f839ee138a9afbdeeb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>aa0c53387f47a46bf4c549b8f3bc6a941</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumParams</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>ad6a9ff93babb132679b358f65cc4f74d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; real_type &gt;</type>
      <name>Parameters</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a833f350789d91a7009bd5bfed436072d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>R_B</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a8643b21102b71fa22dc0b41f9da6ba44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>R_Binv</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>afb52e8ab7ef55a756af6d1a690ed0c18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>C_0</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>af86f033e1e9d192380af1212cfa6da52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>C_0inv</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a382483d59a52dd4f1e807d517e463624</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>pr</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a70d2ec2ad590c3ebaea56752d44edcbb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::BsplineFunctor</name>
    <filename>a00050.html</filename>
    <templarg>T</templarg>
    <base>OptimizableFunctorBase</base>
    <member kind="typedef">
      <type>real_type</type>
      <name>value_type</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a80349dc942856ab617148301967b7ff0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BsplineFunctor</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a9e932ed5a84662cd202a610e187583de</anchor>
      <arglist>(real_type cusp=0.0)</arglist>
    </member>
    <member kind="function">
      <type>OptimizableFunctorBase *</type>
      <name>makeClone</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a4747acd34f8d2daa0656125f1290e4d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReportLevel</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>ab8e65c8882cc114fe58f8d7eb626e4fc</anchor>
      <arglist>(int i, const std::string &amp;fname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a578be9c59132b8633a67a98c39318777</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a4860196a527546949f6366d22425c009</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>af08f1f70ecd1cddcf7d274cbcad42f40</anchor>
      <arglist>(real_type r, real_type rinv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateAll</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a1b404b15a77d0f3bd4e6ff6a527a518d</anchor>
      <arglist>(real_type r, real_type rinv)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a6d4da0f3cb2c37f2105f35aba1c3a813</anchor>
      <arglist>(real_type r, real_type &amp;dudr, real_type &amp;d2udr2)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>ac059e0873401047f0ec172926e036249</anchor>
      <arglist>(real_type r, real_type &amp;dudr, real_type &amp;d2udr2, real_type &amp;d3udr3)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>evaluateDerivatives</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>ad6d1fb2ec9788f67d5c09d67421efc8d</anchor>
      <arglist>(real_type r, vector&lt; TinyVector&lt; real_type, 3 &gt; &gt; &amp;derivs)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a6a91c8094ddd49aa8a2da9df6b439164</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>aff351ffb66160b6458d6057fa6bc2a5f</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a2a91d4cfa4942dbf2c8b806376dda835</anchor>
      <arglist>(int numPoints, vector&lt; real_type &gt; &amp;x, vector&lt; real_type &gt; &amp;y, real_type cusp, real_type rcut, string &amp;id, string &amp;optimize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportStatus</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a0a144256f92f2fa9e13e840bc30baef7</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOptimizable</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a37f4c45678967a2856b563492cd1fefa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a388f572c62279f839ee138a9afbdeeb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>aa0c53387f47a46bf4c549b8f3bc6a941</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>const double</type>
      <name>A</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a5829390c11e31a340223a6c67debbdd8</anchor>
      <arglist>[16]</arglist>
    </member>
    <member kind="function">
      <type>const double</type>
      <name>dA</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a5996a235023cc8a6efa15ab1c4d50f32</anchor>
      <arglist>[16]</arglist>
    </member>
    <member kind="function">
      <type>const double</type>
      <name>d2A</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>aa468302346066b92c4998e19a886e3d0</anchor>
      <arglist>[16]</arglist>
    </member>
    <member kind="function">
      <type>const double</type>
      <name>d3A</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a3796d7fbaeac71ac6dca9630477b0f23</anchor>
      <arglist>[16]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumParams</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>ad6a9ff93babb132679b358f65cc4f74d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Dummy</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>af0d36ed1262fa1d8cc7c19a10b0ad433</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TinyVector&lt; real_type, 16 &gt;</type>
      <name>A</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a6d7fae8b4bdd51b5fa7b8338f36a8660</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TinyVector&lt; real_type, 16 &gt;</type>
      <name>dA</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a251bb4527e4fc67c4af2bde5226d9cd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TinyVector&lt; real_type, 16 &gt;</type>
      <name>d2A</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>af8357e9a2880b58f291c8b8d202f34d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TinyVector&lt; real_type, 16 &gt;</type>
      <name>d3A</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a4d4262cc5a98921ec32079e2ced239f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>DeltaR</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a6f765f548b34c52b0bb04cb1547a332f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>DeltaRInv</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>aa83e30a0f2cd68ac47d9109a9de8ee4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>CuspValue</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a42c349175cb918bc3d2d6db30343bfc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Y</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a8b4dc77b2f75ec3e80eb8987f98db7af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>dY</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a6a8818d83e16d75f6e13cc9df1e809ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>d2Y</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>ab2751661aab00028080a57c4747bd245</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; real_type &gt;</type>
      <name>SplineCoefs</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>ac6a09c7a76cf663384976ca941a8ec29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; TinyVector&lt; real_type, 3 &gt; &gt;</type>
      <name>SplineDerivs</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>ae08a1ebb60e2f570f2d3c577bee7a84a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; real_type &gt;</type>
      <name>Parameters</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a833f350789d91a7009bd5bfed436072d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>ParameterNames</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>ac741043bb199ff71a842b2fa7533b083</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>elementType</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>af9fb45fbb9f8eb930b69c8f527739a86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>pairType</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>acad0cf39a8afeaf743ed02f24f8a9f4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>fileName</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>ac81f9269c8d57eed4d5b56f054fc84de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ResetCount</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>aa101f5cc56da77ba0b4840f11cb6f723</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ReportLevel</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a4508e8abc214ee5db33c185fd6594709</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>notOpt</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a8d71fd336c311c6b9f44f0c2c0de3519</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::BsplineFunctor3D</name>
    <filename>a00051.html</filename>
    <base>OptimizableFunctorBase</base>
    <member kind="typedef">
      <type>real_type</type>
      <name>value_type</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a80349dc942856ab617148301967b7ff0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BsplineFunctor3D</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a862c5fe4526780fc3f8641146676094c</anchor>
      <arglist>(real_type ecusp=0.0, real_type icusp=0.0)</arglist>
    </member>
    <member kind="function">
      <type>OptimizableFunctorBase *</type>
      <name>makeClone</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a4747acd34f8d2daa0656125f1290e4d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a79ec5e2cc906feb8dc4a15d94e68126d</anchor>
      <arglist>(int neI, int nee)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumParameters</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>ae8f9746a00da6bf0d4e4737bf5702d6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a6b1a3d7adfc53fac72e6c934aa57994c</anchor>
      <arglist>(real_type r_12, real_type r_1I, real_type r_2I)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a11d1930c6dfbd9d4011b1c0657eb3030</anchor>
      <arglist>(real_type r_12, real_type r_1I, real_type r_2I, TinyVector&lt; real_type, 3 &gt; &amp;grad, Tensor&lt; real_type, 3 &gt; &amp;hess)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>ae01d66ca3e13d63038d81455d18b3182</anchor>
      <arglist>(real_type r_12, real_type r_1I, real_type r_2I, TinyVector&lt; real_type, 3 &gt; &amp;grad, Tensor&lt; real_type, 3 &gt; &amp;hess, TinyVector&lt; Tensor&lt; real_type, 3 &gt;, 3 &gt; &amp;d3)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>af08f1f70ecd1cddcf7d274cbcad42f40</anchor>
      <arglist>(real_type r, real_type rinv)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>evaluateDerivatives</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>ad6d1fb2ec9788f67d5c09d67421efc8d</anchor>
      <arglist>(real_type r, vector&lt; TinyVector&lt; real_type, 3 &gt; &gt; &amp;derivs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>evaluateDerivatives</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a613c72aebb8b6508a305ffdbfcc0c25f</anchor>
      <arglist>(real_type r_12, real_type r_1I, real_type r_2I, vector&lt; double &gt; &amp;d_vals, vector&lt; TinyVector&lt; real_type, 3 &gt; &gt; &amp;d_grads, vector&lt; Tensor&lt; real_type, 3 &gt; &gt; &amp;d_hess)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a6a91c8094ddd49aa8a2da9df6b439164</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>aff351ffb66160b6458d6057fa6bc2a5f</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a388f572c62279f839ee138a9afbdeeb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>aa0c53387f47a46bf4c549b8f3bc6a941</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumParams_eI</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a6e75a1d88ac539dc1469852d77aca6f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumParams_ee</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a15ece080d9e5be10053975a9169f31e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Dummy</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>af0d36ed1262fa1d8cc7c19a10b0ad433</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TinyVector&lt; real_type, 16 &gt;</type>
      <name>A</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a6d7fae8b4bdd51b5fa7b8338f36a8660</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TinyVector&lt; real_type, 16 &gt;</type>
      <name>dA</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a251bb4527e4fc67c4af2bde5226d9cd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TinyVector&lt; real_type, 16 &gt;</type>
      <name>d2A</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>af8357e9a2880b58f291c8b8d202f34d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TinyVector&lt; real_type, 16 &gt;</type>
      <name>d3A</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a4d4262cc5a98921ec32079e2ced239f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Deltax</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a98f3a6effe0b2e997a093db4b07fe009</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>DeltaxInv</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a10ebd685ce0a982b45a87585e7736dc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>DeltaR_eI</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a4941aa706f7d8ae88951d8043647432a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>DeltaRInv_eI</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>ad223520e9003a36da115273941568e18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Y</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a8b4dc77b2f75ec3e80eb8987f98db7af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>dY</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a6a8818d83e16d75f6e13cc9df1e809ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>d2Y</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>ab2751661aab00028080a57c4747bd245</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; real_type, 3 &gt;</type>
      <name>SplineCoefs</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a93b48d48d77c42f48c20d490823c0490</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; TinyVector&lt; real_type, 3 &gt; &gt;</type>
      <name>SplineDerivs</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>ae08a1ebb60e2f570f2d3c577bee7a84a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; real_type &gt;</type>
      <name>Parameters</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a833f350789d91a7009bd5bfed436072d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; real_type, 3 &gt;</type>
      <name>ParamArray</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a088696fcd1b204c46a62f0428f8e3cda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>ParameterNames</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>ac741043bb199ff71a842b2fa7533b083</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>iSpecies</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a28a7280299b72294e063cf3fe946b6fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>eSpecies1</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a5cad24fa7f6c4f52a84e97ad59fdeadc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>eSpecies2</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>aa935efe2cdcf3ff5b58f67cc1b65ef90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ResetCount</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>aa101f5cc56da77ba0b4840f11cb6f723</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::BsplineInitializer</name>
    <filename>a00052.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type>void</type>
      <name>initWithRPA</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a12d8d966ad34e653643fd35ae64c14bb</anchor>
      <arglist>(ParticleSet &amp;P, BsplineFunctor&lt; T &gt; &amp;bfunc, T fac)</arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; T &gt;</type>
      <name>rpaValues</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a39b721aecf9817e70c8cc8e7c2cdab37</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::BsplineJastrowBuilder</name>
    <filename>a00053.html</filename>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>BsplineJastrowBuilder</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a93b94b8627b51fd6bff950e730a5f1a8</anchor>
      <arglist>(ParticleSet &amp;target, TrialWaveFunction &amp;psi, ParticleSet &amp;source)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BsplineJastrowBuilder</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a06e9836cccb3948f3a50a2d3cd3c72ef</anchor>
      <arglist>(ParticleSet &amp;target, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>createOneBodyJastrow</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a4d73d777ea1655230803e90d8fa52b85</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet *</type>
      <name>sourcePtcl</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>ab08c7c37a309154c823dcce3178ee902</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::CBSOBuilder</name>
    <filename>a00062.html</filename>
    <base>qmcplusplus::QMCTraits</base>
    <member kind="typedef">
      <type>CubicBspline&lt; RealType, LINEAR_1DGRID, FIRSTDERIV_CONSTRAINTS &gt;</type>
      <name>SplineEngineType</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a3cf4ec4ff359cce2144a38eade343966</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CubicSplineSingle&lt; RealType, SplineEngineType &gt;</type>
      <name>RadialOrbitalType</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a223f1e7a71952a74bd88e18f9bb9b566</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphericalBasisSet&lt; RadialOrbitalType &gt;</type>
      <name>CenteredOrbitalType</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>af75a2105e61ed68bedf899d7ef7ad904</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CBSOBuilder</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a7df95ec54d92910b2f0aa726822ee316</anchor>
      <arglist>(xmlNodePtr cur=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrbitalSet</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a342aca906041233d6b8e006d46907edf</anchor>
      <arglist>(CenteredOrbitalType *oset, const std::string &amp;acenter)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addGrid</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a86d93b269a8b7026dd82eb38178e4955</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addRadialOrbital</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a19315bb0c0b191bbd2f73ad5ae126be9</anchor>
      <arglist>(xmlNodePtr cur, const QuantumNumberType &amp;nlms)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putCommon</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a06c38569428abd7d32c82f3763e8cf7a</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Normalized</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>aacbcd3c308ce1771fb38f921fb87a5d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumGridPoints</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>aba1ee92884e2e52ef3c4ec7b5ac860c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>m_rcut</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>adedde314eedd47c85644de82f95e6e71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>QuantumNumberType</type>
      <name>m_nlms</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a41b7ca2511163e4aaf9331fca4ad8fd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CenteredOrbitalType *</type>
      <name>m_orbitals</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a07ee3f19031609d943db8bf4d358cece</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_species</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a399e17fdbfe93ba51fc15d8930c68980</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::TruncatedPadeFunctor</name>
    <filename>a00612.html</filename>
    <templarg></templarg>
    <base>OptimizableFunctorBase</base>
    <member kind="function">
      <type></type>
      <name>TruncatedPadeFunctor</name>
      <anchorfile>a00612.html</anchorfile>
      <anchor>a88ba2b80087760f07ee561bfaa563e96</anchor>
      <arglist>(real_type a=-0.5, OptimizableFunctorBase *fin=0, real_type rmax=10)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>a00612.html</anchorfile>
      <anchor>a6a91c8094ddd49aa8a2da9df6b439164</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>a00612.html</anchorfile>
      <anchor>aff351ffb66160b6458d6057fa6bc2a5f</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00612.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00612.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyCuspCondition</name>
      <anchorfile>a00612.html</anchorfile>
      <anchor>a3a165fe330f2f9a06bb468ed44288755</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>A</name>
      <anchorfile>a00612.html</anchorfile>
      <anchor>a2afa47a65c2e9f37e310b39710c74296</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>B</name>
      <anchorfile>a00612.html</anchorfile>
      <anchor>a3252942e094b1e19e493677ef44d2a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>AB</name>
      <anchorfile>a00612.html</anchorfile>
      <anchor>af162c011b92ffdf9f27a2c8068bd47e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>B2</name>
      <anchorfile>a00612.html</anchorfile>
      <anchor>a6ec28e6ba3b306877ebf9548d3f33b0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>AoverB</name>
      <anchorfile>a00612.html</anchorfile>
      <anchor>ad5e352589436444aecdb4a61562f96c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Rcut</name>
      <anchorfile>a00612.html</anchorfile>
      <anchor>ad73c36a2b679e0a0a5e1f1f840862a0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Rmax</name>
      <anchorfile>a00612.html</anchorfile>
      <anchor>a363af4b5d9b8e97a1c0e983e4b0b2919</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>OffSet</name>
      <anchorfile>a00612.html</anchorfile>
      <anchor>a20398a239994c1e5d7eed39755b7eb7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OptimizableFunctorBase *</type>
      <name>inFunc</name>
      <anchorfile>a00612.html</anchorfile>
      <anchor>ab06de36d9c00926d7f4c9a65aa619740</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::AnyTimesRnFunctor</name>
    <filename>a00010.html</filename>
    <templarg>T</templarg>
    <base>OptimizableFunctorBase</base>
    <member kind="function">
      <type></type>
      <name>AnyTimesRnFunctor</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>af0b6058b5698aaba6be63b6c768daa55</anchor>
      <arglist>(OptimizableFunctorBase *infunc=0, int n=1)</arglist>
    </member>
    <member kind="function">
      <type>OptimizableFunctorBase *</type>
      <name>makeClone</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a4747acd34f8d2daa0656125f1290e4d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a6a91c8094ddd49aa8a2da9df6b439164</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>aff351ffb66160b6458d6057fa6bc2a5f</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="variable">
      <type>OptimizableFunctorBase *</type>
      <name>myFunc</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a59079a85f31716e6f008dff9c3ad8fdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Np</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a48d03588a24c2b9fa7e5dbe05df766c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::CuspCorrectionFunctor</name>
    <filename>a00131.html</filename>
    <templarg>T</templarg>
    <base>OptimizableFunctorBase</base>
    <member kind="function">
      <type></type>
      <name>CuspCorrectionFunctor</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a6e440eeb166b237a5e5e6efabcbb051c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OptimizableFunctorBase *</type>
      <name>makeClone</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a4747acd34f8d2daa0656125f1290e4d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CuspCorrectionFunctor</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>ad324f3dcf93c72d39bd86f58fd04fb8e</anchor>
      <arglist>(real_type e, real_type rc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a6a91c8094ddd49aa8a2da9df6b439164</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>aff351ffb66160b6458d6057fa6bc2a5f</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a4860196a527546949f6366d22425c009</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a4522798432165cd21de8c86d4d2f7b5c</anchor>
      <arglist>(real_type r, real_type &amp;du, real_type &amp;d2u)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>E</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a0591f63f04c66f2a5f9f6f8fbbb79c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>mOneOverE</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>abba98ff4418288aa6bb44f7f834dd2ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Rmax</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a363af4b5d9b8e97a1c0e983e4b0b2919</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Rcut</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>ad73c36a2b679e0a0a5e1f1f840862a0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>RmaxFixed</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>ad579bb65aaa8e374c90766c070c90df1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>R12</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>afad3f6c15b5a531d422c66b606ea62c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>dCosFac</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a668bdf0c91926c81bfe80a7d4e2ca7a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>d2CosFac</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a612bfd2c0ce40a1a9316d649f6463ce1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::DCuspCorrectionDEFunctor</name>
    <filename>a00137.html</filename>
    <templarg></templarg>
    <base>OptimizableFunctorBase</base>
    <member kind="function">
      <type></type>
      <name>DCuspCorrectionDEFunctor</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a4e8c043029a09db5bf8810d7630b7083</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DCuspCorrectionDEFunctor</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a301a9b74c58bfc967bfbf594b4b054b0</anchor>
      <arglist>(real_type e, real_type rc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a6a91c8094ddd49aa8a2da9df6b439164</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>aff351ffb66160b6458d6057fa6bc2a5f</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a4860196a527546949f6366d22425c009</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a4522798432165cd21de8c86d4d2f7b5c</anchor>
      <arglist>(real_type r, real_type &amp;du, real_type &amp;d2u)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>E</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a0591f63f04c66f2a5f9f6f8fbbb79c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>OneOverE</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a7161af5ecd6f330a4aebcff433238cc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Rmax</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a363af4b5d9b8e97a1c0e983e4b0b2919</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Rcut</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>ad73c36a2b679e0a0a5e1f1f840862a0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>RmaxFixed</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>ad579bb65aaa8e374c90766c070c90df1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>R12</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>afad3f6c15b5a531d422c66b606ea62c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>dCosFac</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a668bdf0c91926c81bfe80a7d4e2ca7a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>d2CosFac</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a612bfd2c0ce40a1a9316d649f6463ce1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::CubicBsplineGroup</name>
    <filename>a00117.html</filename>
    <templarg></templarg>
    <templarg>GRIDTYPE</templarg>
    <base>CubicBsplineGrid&lt; T, GRIDTYPE, FIRSTDERIV_CONSTRAINTS &gt;</base>
    <member kind="typedef">
      <type>OptimizableFunctorBase&lt; T &gt;</type>
      <name>FNIN</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>ae290973228a6f885a8be90fb6aa73f19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CubicBsplineGroup&lt; T, GRIDTYPE &gt;</type>
      <name>ThisType</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>aba59e606c5056191e117c15c7b24d926</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CubicBsplineGrid&lt; T, GRIDTYPE, FIRSTDERIV_CONSTRAINTS &gt;::point_type</type>
      <name>point_type</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>ab07b0da769d4a1f04298b3490c8ccbbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CubicBsplineGrid&lt; T, GRIDTYPE, FIRSTDERIV_CONSTRAINTS &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>addc555dc47137523bc3e9f37f615bb98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CubicBsplineGrid&lt; T, GRIDTYPE, FIRSTDERIV_CONSTRAINTS &gt;::container_type</type>
      <name>container_type</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a45267a6af119636b547735615ac4bf4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CubicBsplineGroup</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a059bd62d9e996ebdae850152af08d0c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>evaluate</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>ae4ddcee1673b415681992115127dd4db</anchor>
      <arglist>(point_type x, point_type xinv)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>evaluateAll</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>ae8f5d9846478661f1263fd82bc68b483</anchor>
      <arglist>(point_type x, point_type xin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a4ab83775476898bbe72a2d6d59c70400</anchor>
      <arglist>(point_type start, point_type end, const container_type &amp;datain, bool closed, T yp1, T ypn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a132e4b26a0c927185a37570f61438f59</anchor>
      <arglist>(FNIN *in_, point_type rmax, int npts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGridManager</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>aa5272fc300810050d2e8dc7b14bd1144</anchor>
      <arglist>(bool manage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSibling</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a3632110518b2bfd8c56874684491e594</anchor>
      <arglist>(ThisType *a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Y</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a8d2a59b309eebc2d59b99a23865e67e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>dY</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a0199f71a22039479f0c198f8290f135f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>d2Y</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a614f551230c22bd91ea75a162ae99162</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getValuesOnly</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a50e0451716cbc0911896c9ff24430f5d</anchor>
      <arglist>(point_type x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getValues</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a1a90df0fa938b977e567e7c651f76119</anchor>
      <arglist>(point_type x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>value_type</type>
      <name>interpolate</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a785418bd8e02d72fc2d7a424d303aa71</anchor>
      <arglist>(value_type p0, value_type p1, value_type p2, value_type p3, value_type &amp;dy, value_type &amp;d2y)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>value_type</type>
      <name>interpolate</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>aa1232f8a3fe938611d5e6b48086e363a</anchor>
      <arglist>(value_type p0, value_type p1, value_type p2, value_type p3)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>GridManager</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a79b41dd4ecf187e9976429aedc6764b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numSiblings</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>ab34dbb2cc194c304000747b02081d960</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>value_type</type>
      <name>OffSet</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a83e995acc41894f8a85b26c0b0340f86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FNIN *</type>
      <name>InFunc</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a3cb996530e65163e5296255673a212bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>container_type</type>
      <name>P</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a5de379e54a838b417cab1fbeeb3ea9cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; ThisType * &gt;</type>
      <name>Siblings</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>adea9c96d670ab54e3a14a3bf6702d96c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::CudaSpline</name>
    <filename>a00130.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a06f4feba49ca06ec120857d3b6995adb</anchor>
      <arglist>(BsplineFunctor&lt; T2 &gt; &amp;func)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>check_coefs</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a31c0715d2766741259aaba5ba8ad5d83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CudaSpline</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>ac43f0a3c3851ffa88795b54dbd99880e</anchor>
      <arglist>(BsplineFunctor&lt; T2 &gt; &amp;func)</arglist>
    </member>
    <member kind="variable">
      <type>gpu::device_vector&lt; T &gt;</type>
      <name>coefs</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a40e222978b8f6cd2f1e4674b35165665</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>rMax</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a597886848cc36c777f3960325182ad4a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::DPadeDBFunctor</name>
    <filename>a00173.html</filename>
    <templarg></templarg>
    <base>OptimizableFunctorBase&lt; T &gt;</base>
    <member kind="typedef">
      <type>OptimizableFunctorBase&lt; T &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a4d22e4b274d162a5ef83c2eefa76382e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OptimizableFunctorBase&lt; T &gt;::OptimizableSetType</type>
      <name>OptimizableSetType</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a40f0737eeb4322c46b13fefd63e8ebee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>optimize::VariableSet::real_type</type>
      <name>real_type</name>
      <anchorfile>a00446.html</anchorfile>
      <anchor>a63879bf32859613c81ae97ba371b24e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>optimize::VariableSet</type>
      <name>opt_variables_type</name>
      <anchorfile>a00446.html</anchorfile>
      <anchor>a7889af7f2cc8ecdb39b57a278df4d3c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>optimize::VariableSet::variable_map_type</type>
      <name>variable_map_type</name>
      <anchorfile>a00446.html</anchorfile>
      <anchor>afef3bb1526675128213cd4dacc3e789d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DPadeDBFunctor</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a19dcc5452f2495adf5991b170a95fe59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DPadeDBFunctor</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a8e8af47be9ecc6475cc398e3dc90cf13</anchor>
      <arglist>(real_type a, real_type b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DPadeDBFunctor</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a417f1f2abfe7d51ef89c36993f0100f1</anchor>
      <arglist>(const PadeFunctor&lt; T &gt; &amp;pade)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>ad4111915206b95f4d66470a658878bb2</anchor>
      <arglist>(real_type a, real_type b)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a4860196a527546949f6366d22425c009</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a6d4da0f3cb2c37f2105f35aba1c3a813</anchor>
      <arglist>(real_type r, real_type &amp;dudr, real_type &amp;d2udr2)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a6a91c8094ddd49aa8a2da9df6b439164</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>aff351ffb66160b6458d6057fa6bc2a5f</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOptimizables</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>ae91504e3587b00403eab6cd3da071d8d</anchor>
      <arglist>(OptimizableSetType &amp;vlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a7e671cf74dd3a1d20902c0b181e9c0c4</anchor>
      <arglist>(const OptimizableSetType &amp;optVariables)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptimizableFunctorBase</name>
      <anchorfile>a00446.html</anchorfile>
      <anchor>a3a4df520ebfd9ce0d749f91ddc76dd6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OptimizableFunctorBase</name>
      <anchorfile>a00446.html</anchorfile>
      <anchor>a0439c493f8df5054c1effd2da4fcee6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getIndex</name>
      <anchorfile>a00446.html</anchorfile>
      <anchor>a388226dc75b99262359e59d8083d6ae7</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>checkInVariables</name>
      <anchorfile>a00446.html</anchorfile>
      <anchor>adc2681d8748c0b42a2ffa45d21c7b466</anchor>
      <arglist>(opt_variables_type &amp;active)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00446.html</anchorfile>
      <anchor>aa3438cc415984cdefb08b05f9ba36bc3</anchor>
      <arglist>(const opt_variables_type &amp;active)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resetParameters</name>
      <anchorfile>a00446.html</anchorfile>
      <anchor>a8c0c8f47cc4e0adc97b2a42f11223257</anchor>
      <arglist>(const opt_variables_type &amp;active)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual OptimizableFunctorBase *</type>
      <name>makeClone</name>
      <anchorfile>a00446.html</anchorfile>
      <anchor>a58c887cc013416decc7fd21746824f7b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>a00446.html</anchorfile>
      <anchor>a20dcbdfbd0ec77afc802522bb7e379c1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual real_type</type>
      <name>f</name>
      <anchorfile>a00446.html</anchorfile>
      <anchor>ade4146d8e219dcda8847df4ddd12b593</anchor>
      <arglist>(real_type r)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual real_type</type>
      <name>df</name>
      <anchorfile>a00446.html</anchorfile>
      <anchor>aca0e2e8287055530c4700fdd424792f0</anchor>
      <arglist>(real_type r)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDensity</name>
      <anchorfile>a00446.html</anchorfile>
      <anchor>af35e4ce8d67b6f546bebf86fd0d14844</anchor>
      <arglist>(real_type n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluateDerivatives</name>
      <anchorfile>a00446.html</anchorfile>
      <anchor>aad983c0184558b41684c297f266743d3</anchor>
      <arglist>(real_type r, std::vector&lt; qmcplusplus::TinyVector&lt; real_type, 3 &gt; &gt; &amp;derivs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setGridManager</name>
      <anchorfile>a00446.html</anchorfile>
      <anchor>aec9d6d4b07f46d6c21a4a0f43595b94f</anchor>
      <arglist>(bool willmanage)</arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>A</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a2afa47a65c2e9f37e310b39710c74296</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>B</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a3252942e094b1e19e493677ef44d2a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>A2</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>ac68f60470562d4713f2386945ef557a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>B2</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a6ec28e6ba3b306877ebf9548d3f33b0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>ID_A</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a04da67323f2d1fcfdb06184c1027f0a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>ID_B</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a8c25a90405928d9d1760fee477b89596</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>cutoff_radius</name>
      <anchorfile>a00446.html</anchorfile>
      <anchor>a794d5142bc5bcf3a1938aacdea50dd99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>opt_variables_type</type>
      <name>myVars</name>
      <anchorfile>a00446.html</anchorfile>
      <anchor>aee7ccfd07712b8606ef965967b67e860</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::D2PadeDB2Functor</name>
    <filename>a00135.html</filename>
    <templarg></templarg>
    <base>OptimizableFunctorBase&lt; T &gt;</base>
    <member kind="typedef">
      <type>OptimizableFunctorBase&lt; T &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a4d22e4b274d162a5ef83c2eefa76382e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OptimizableFunctorBase&lt; T &gt;::OptimizableSetType</type>
      <name>OptimizableSetType</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a40f0737eeb4322c46b13fefd63e8ebee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>D2PadeDB2Functor</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a6ca2845c1f456310a3c7ef14de2e6b27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>D2PadeDB2Functor</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>ae25bfcf75c3d62be431da577f38e1493</anchor>
      <arglist>(real_type a, real_type b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>D2PadeDB2Functor</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>ae3a60ff580ebee7119b5a86f3692d75e</anchor>
      <arglist>(const PadeFunctor&lt; T &gt; &amp;pade)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>ad4111915206b95f4d66470a658878bb2</anchor>
      <arglist>(real_type a, real_type b)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a4860196a527546949f6366d22425c009</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a6d4da0f3cb2c37f2105f35aba1c3a813</anchor>
      <arglist>(real_type r, real_type &amp;dudr, real_type &amp;d2udr2)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a6a91c8094ddd49aa8a2da9df6b439164</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>aff351ffb66160b6458d6057fa6bc2a5f</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOptimizables</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>ae91504e3587b00403eab6cd3da071d8d</anchor>
      <arglist>(OptimizableSetType &amp;vlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a549838bc3e720cc4736317d64fdab0c8</anchor>
      <arglist>(OptimizableSetType &amp;optVariables)</arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>A</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a2afa47a65c2e9f37e310b39710c74296</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>B</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a3252942e094b1e19e493677ef44d2a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>A2</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>ac68f60470562d4713f2386945ef557a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>A6</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a11ae5dca3db2e5a921ebdeded4babc5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>A12</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a52f722a94b0ff04054eca1783e138fc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>B2</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a6ec28e6ba3b306877ebf9548d3f33b0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>ID_A</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a04da67323f2d1fcfdb06184c1027f0a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>ID_B</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a8c25a90405928d9d1760fee477b89596</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::DWMDBFunctor</name>
    <filename>a00190.html</filename>
    <templarg></templarg>
    <base>OptimizableFunctorBase&lt; T &gt;</base>
    <member kind="typedef">
      <type>OptimizableFunctorBase&lt; T &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a4d22e4b274d162a5ef83c2eefa76382e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OptimizableFunctorBase&lt; T &gt;::OptimizableSetType</type>
      <name>OptimizableSetType</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a40f0737eeb4322c46b13fefd63e8ebee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WMFunctor</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a4453532572c12764291292687712bab8</anchor>
      <arglist>(real_type b, real_type rc=7.5, const std::string &amp;bname=&quot;exponent&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a5ce7012832df4415efa0e5adf93beca6</anchor>
      <arglist>(real_type b, real_type rc)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a6a91c8094ddd49aa8a2da9df6b439164</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>aff351ffb66160b6458d6057fa6bc2a5f</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOptimizables</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>ae91504e3587b00403eab6cd3da071d8d</anchor>
      <arglist>(OptimizableSetType &amp;vlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a549838bc3e720cc4736317d64fdab0c8</anchor>
      <arglist>(OptimizableSetType &amp;optVariables)</arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>B0</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a06df497360346f4494f9ad56ce1d3699</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Bplus2</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a827c2f82de0734e4a1d1fbe3a4ba2744</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Rcut</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>ad73c36a2b679e0a0a5e1f1f840862a0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>OneOverRc</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a95bf1c6e87e3e3ffd4bddcf047e82524</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>ID_B</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a27d6dd114aa784a5805d6a80c96f9d64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>attribName</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a7257b460673e53064dba0d9655fab6e2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::D2WMDB2Functor</name>
    <filename>a00136.html</filename>
    <templarg></templarg>
    <base>OptimizableFunctorBase&lt; T &gt;</base>
    <member kind="typedef">
      <type>OptimizableFunctorBase&lt; T &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a4d22e4b274d162a5ef83c2eefa76382e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OptimizableFunctorBase&lt; T &gt;::OptimizableSetType</type>
      <name>OptimizableSetType</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a40f0737eeb4322c46b13fefd63e8ebee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>D2WMDB2Functor</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>af4d519edc5c5915fe9a5908e77eeed76</anchor>
      <arglist>(real_type b, real_type rc=7.5, const std::string &amp;bname=&quot;exponent&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a5ce7012832df4415efa0e5adf93beca6</anchor>
      <arglist>(real_type b, real_type rc)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a6a91c8094ddd49aa8a2da9df6b439164</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>aff351ffb66160b6458d6057fa6bc2a5f</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOptimizables</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>ae91504e3587b00403eab6cd3da071d8d</anchor>
      <arglist>(OptimizableSetType &amp;vlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a549838bc3e720cc4736317d64fdab0c8</anchor>
      <arglist>(OptimizableSetType &amp;optVariables)</arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>B0</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a06df497360346f4494f9ad56ce1d3699</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Bplus2</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a827c2f82de0734e4a1d1fbe3a4ba2744</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Bplus3</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a28b0987df8938e0fd60400ee73385b67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Rcut</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>ad73c36a2b679e0a0a5e1f1f840862a0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>OneOverRc</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a95bf1c6e87e3e3ffd4bddcf047e82524</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>ID_B</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a27d6dd114aa784a5805d6a80c96f9d64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>attribName</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a7257b460673e53064dba0d9655fab6e2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::eeI_JastrowBuilder</name>
    <filename>a00194.html</filename>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>eeI_JastrowBuilder</name>
      <anchorfile>a00194.html</anchorfile>
      <anchor>ac1f4ded81bf29b09216aa07182c7f869</anchor>
      <arglist>(ParticleSet &amp;target, TrialWaveFunction &amp;psi, ParticleSet &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00194.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putkids</name>
      <anchorfile>a00194.html</anchorfile>
      <anchor>ad7b9b90c70aa07058ee8939b36b94ad5</anchor>
      <arglist>(xmlNodePtr kids, J3type &amp;J3)</arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet *</type>
      <name>sourcePtcl</name>
      <anchorfile>a00194.html</anchorfile>
      <anchor>ab08c7c37a309154c823dcce3178ee902</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::IonData</name>
    <filename>a00313.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; int &gt;</type>
      <name>eListType</name>
      <anchorfile>a00313.html</anchorfile>
      <anchor>ad678be317cc9577b45a3b7f5fcb014d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IonData</name>
      <anchorfile>a00313.html</anchorfile>
      <anchor>aa5e48b534e3234cae7ba46c5a79acccf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>cutoff_radius</name>
      <anchorfile>a00313.html</anchorfile>
      <anchor>a4493ebd191b7393bb39e7aa937d0f0fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>eListType</type>
      <name>elecs_inside</name>
      <anchorfile>a00313.html</anchorfile>
      <anchor>ab62359f17fdd469adc392d8f2456cfd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>eListType::iterator</type>
      <name>current</name>
      <anchorfile>a00313.html</anchorfile>
      <anchor>a4a0e82810c92a3dd4e750b722beb154b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::TruncatedShiftedGaussianFunctor</name>
    <filename>a00613.html</filename>
    <templarg></templarg>
    <base>OptimizableFunctorBase</base>
    <member kind="typedef">
      <type>OptimizableFunctorBase::real_type</type>
      <name>real_type</name>
      <anchorfile>a00613.html</anchorfile>
      <anchor>aa7c8aef29f0560ea0a426cb28d91e2e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TruncatedShiftedGaussianFunctor</name>
      <anchorfile>a00613.html</anchorfile>
      <anchor>a318ed2e2278a1354d07eb5504a483fd8</anchor>
      <arglist>(real_type a=1.0, real_type b=1.0, real_type c=1.0)</arglist>
    </member>
    <member kind="function">
      <type>OptimizableFunctorBase *</type>
      <name>makeClone</name>
      <anchorfile>a00613.html</anchorfile>
      <anchor>a4747acd34f8d2daa0656125f1290e4d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00613.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00613.html</anchorfile>
      <anchor>a4860196a527546949f6366d22425c009</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00613.html</anchorfile>
      <anchor>ac059e0873401047f0ec172926e036249</anchor>
      <arglist>(real_type r, real_type &amp;dudr, real_type &amp;d2udr2, real_type &amp;d3udr3)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00613.html</anchorfile>
      <anchor>a6d4da0f3cb2c37f2105f35aba1c3a813</anchor>
      <arglist>(real_type r, real_type &amp;dudr, real_type &amp;d2udr2)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>a00613.html</anchorfile>
      <anchor>a6a91c8094ddd49aa8a2da9df6b439164</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>a00613.html</anchorfile>
      <anchor>aff351ffb66160b6458d6057fa6bc2a5f</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00613.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00613.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00613.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00613.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>A</name>
      <anchorfile>a00613.html</anchorfile>
      <anchor>a2afa47a65c2e9f37e310b39710c74296</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>B</name>
      <anchorfile>a00613.html</anchorfile>
      <anchor>a3252942e094b1e19e493677ef44d2a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>C</name>
      <anchorfile>a00613.html</anchorfile>
      <anchor>ac198257702bb0ff4b30d8118d4784586</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>RC</name>
      <anchorfile>a00613.html</anchorfile>
      <anchor>ab40838b0141ec542563324a09506ca7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>c0</name>
      <anchorfile>a00613.html</anchorfile>
      <anchor>aa1aaf4eb3afea51d2e21cf3d183aa98a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>c1</name>
      <anchorfile>a00613.html</anchorfile>
      <anchor>a55d0086dc0f598cfdb0587de5f2375c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>c2</name>
      <anchorfile>a00613.html</anchorfile>
      <anchor>af0e0ecbc75f22d0a11e9329e649b5f76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>c3</name>
      <anchorfile>a00613.html</anchorfile>
      <anchor>a683836f412f2c0996c82da39a1ae237f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>c4</name>
      <anchorfile>a00613.html</anchorfile>
      <anchor>aca8f19eabaec56f7d0af128bad65b6ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>c5</name>
      <anchorfile>a00613.html</anchorfile>
      <anchor>a644f118e3a80d99d81bf57824080e6b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>c6</name>
      <anchorfile>a00613.html</anchorfile>
      <anchor>a4178ac7871e4fcaf5390ca3451cb3f8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>ID_A</name>
      <anchorfile>a00613.html</anchorfile>
      <anchor>aeb8263f9885b65a7595c461984f24c1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>ID_B</name>
      <anchorfile>a00613.html</anchorfile>
      <anchor>a27d6dd114aa784a5805d6a80c96f9d64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>ID_RC</name>
      <anchorfile>a00613.html</anchorfile>
      <anchor>ab2a54110ef1900bd51976e55616f4eb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>ID_C</name>
      <anchorfile>a00613.html</anchorfile>
      <anchor>a3fb4063beb0054832956a493c5fda8c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::JAABuilder</name>
    <filename>a00316.html</filename>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>JAABuilder</name>
      <anchorfile>a00316.html</anchorfile>
      <anchor>afac03cb9888d334d3274b23e748c13cc</anchor>
      <arglist>(ParticleSet &amp;p, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00316.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>TwoBodyJastrowOrbital&lt; FN &gt; *</type>
      <name>createJAA</name>
      <anchorfile>a00316.html</anchorfile>
      <anchor>a810d795f6fcd3056afc765ad56c98617</anchor>
      <arglist>(xmlNodePtr cur, const string &amp;jname)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>IgnoreSpin</name>
      <anchorfile>a00316.html</anchorfile>
      <anchor>adb1dcd295910065c3a481b810308383e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>a00316.html</anchorfile>
      <anchor>a859bc2c01e2beb7537cd83f0b9e88921</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::JABBuilder</name>
    <filename>a00317.html</filename>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>JABBuilder</name>
      <anchorfile>a00317.html</anchorfile>
      <anchor>af2309b6821761d6c5a9e2f9c9217a491</anchor>
      <arglist>(ParticleSet &amp;p, TrialWaveFunction &amp;psi, PtclPoolType &amp;psets)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00317.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>createJAB</name>
      <anchorfile>a00317.html</anchorfile>
      <anchor>a70244a525ca432620be37d457655a49e</anchor>
      <arglist>(xmlNodePtr cur, const string &amp;jname)</arglist>
    </member>
    <member kind="variable">
      <type>PtclPoolType &amp;</type>
      <name>ptclPool</name>
      <anchorfile>a00317.html</anchorfile>
      <anchor>a4fc7c3d5848a9235a0cf8803ff1f9fbf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::JastrowBasisBuilder</name>
    <filename>a00318.html</filename>
    <base>qmcplusplus::BasisSetBuilder</base>
    <member kind="function">
      <type></type>
      <name>JastrowBasisBuilder</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a9d643de204f1e843b9db72858573245c</anchor>
      <arglist>(ParticleSet &amp;els, ParticleSet &amp;ions, const string &amp;functype, bool usespline=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~JastrowBasisBuilder</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a009c178c07231a014c6284799a17b67f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>SPOSetBase *</type>
      <name>createSPOSet</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a46e67eedf3dcc334af312180e006c06a</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>SizeOfBasisPerCenter</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a72580376ee1aabe659554c46ecbea3f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>createLocalizedBasisSet</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>addb94ff0d0f79f448e004ce4d7e5abfe</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>printRadialFunctors</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>af4519ab98253c7d42c66e7fad92ebfc5</anchor>
      <arglist>(const string &amp;elementType, COT *aoBasis)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet &amp;</type>
      <name>targetPtcl</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a1a952580e121ccf8f929cadf8d1e0a5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet &amp;</type>
      <name>sourcePtcl</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a521b26e24d441b710c7b5668002ed60f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>UseSpline</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>ae85c85fed1cd912fc2e9b60dea74a983</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>FuncType</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>ac6ab6ac89a83ca97505230dd7941ff05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, BasisSetBuilder * &gt;</type>
      <name>aoBuilders</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a433990d5a273c033573130ea914b0404</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::JastrowBuilder</name>
    <filename>a00319.html</filename>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>JastrowBuilder</name>
      <anchorfile>a00319.html</anchorfile>
      <anchor>a5b1cf174121f3763c0ad13638b47bdb5</anchor>
      <arglist>(ParticleSet &amp;p, TrialWaveFunction &amp;psi, PtclPoolType &amp;psets)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00319.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PtclPoolType &amp;</type>
      <name>ptclPool</name>
      <anchorfile>a00319.html</anchorfile>
      <anchor>a4fc7c3d5848a9235a0cf8803ff1f9fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>JastrowType</name>
      <anchorfile>a00319.html</anchorfile>
      <anchor>a5694d474714e279e5dc9a3e37f61fbc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>nameOpt</name>
      <anchorfile>a00319.html</anchorfile>
      <anchor>a781bcecdfb5028f20ccad29fdb467ccb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>typeOpt</name>
      <anchorfile>a00319.html</anchorfile>
      <anchor>a043224143a880362881066c5d6e5af81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>funcOpt</name>
      <anchorfile>a00319.html</anchorfile>
      <anchor>ab28c5cc2b5f92fdf98298552021d3b7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>spinOpt</name>
      <anchorfile>a00319.html</anchorfile>
      <anchor>af456c0d71a633adea98eb10ca1c138c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>transformOpt</name>
      <anchorfile>a00319.html</anchorfile>
      <anchor>a0afed0c9b82a9448532799af87276f53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>sourceOpt</name>
      <anchorfile>a00319.html</anchorfile>
      <anchor>addb94bd9695ae343ac901394ca5ef0ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>resetOptions</name>
      <anchorfile>a00319.html</anchorfile>
      <anchor>a7350df0356da600331916fc3bb3a61aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>addOneBody</name>
      <anchorfile>a00319.html</anchorfile>
      <anchor>a197a776d0d8fa1e7536855334766fd99</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>addTwoBody</name>
      <anchorfile>a00319.html</anchorfile>
      <anchor>a90eb5705a84b69e0690b6eb62b8540ee</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>addThreeBody</name>
      <anchorfile>a00319.html</anchorfile>
      <anchor>a035742fcaf6abdb5aa71ae06d302e915</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>add_eeI</name>
      <anchorfile>a00319.html</anchorfile>
      <anchor>a20ae5f5fc9511b2fa491967e19e2d334</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>addkSpace</name>
      <anchorfile>a00319.html</anchorfile>
      <anchor>a982d9d52c428dabd62e33fa6d952d199</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::magLess</name>
    <filename>a00362.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a47be353c213f37d9dc8d496113008cb5</anchor>
      <arglist>(kSpaceJastrow::PosType a, kSpaceJastrow::PosType b)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::RPA0</name>
    <filename>a00539.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>RPA0</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>a90c970532e31f95e3173b90cfcc1d1f8</anchor>
      <arglist>(T rs=1)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>aada8394a37ef5662378057024a42c831</anchor>
      <arglist>(T kk)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Rs</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>a49f71fcc137eed3a4a176f3e31e2e7b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>OneOverRsSq</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>abdb843744d4e30467eaf35647a58e375</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::kSpaceCoef</name>
    <filename>a00320.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00320.html</anchorfile>
      <anchor>aff232b7968434c9eab58990df6be429b</anchor>
      <arglist>(std::vector&lt; T &gt; &amp;unpackedCoefs)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>cG</name>
      <anchorfile>a00320.html</anchorfile>
      <anchor>a32b3e4d04123618223b49a9c297809ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>firstIndex</name>
      <anchorfile>a00320.html</anchorfile>
      <anchor>af87919d541c121e589f069b742138ee1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>lastIndex</name>
      <anchorfile>a00320.html</anchorfile>
      <anchor>a324693149865ca8eb63c6381b41d1bbb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::kSpaceJastrow</name>
    <filename>a00321.html</filename>
    <base>qmcplusplus::OrbitalBase</base>
    <member kind="enumeration">
      <type></type>
      <name>SymmetryType</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>aa481657d3c33ac77e7b7a1cebbdd6fe4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CRYSTAL</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>aa481657d3c33ac77e7b7a1cebbdd6fe4a86ec3df16edceee963043f857e409462</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ISOTROPIC</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>aa481657d3c33ac77e7b7a1cebbdd6fe4ab8d64119450bae921ab38a21c7974ba8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOSYMM</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>aa481657d3c33ac77e7b7a1cebbdd6fe4abf60ad9220abb42eaa82348235fb2218</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CRYSTAL</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>aa481657d3c33ac77e7b7a1cebbdd6fe4a86ec3df16edceee963043f857e409462</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ISOTROPIC</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>aa481657d3c33ac77e7b7a1cebbdd6fe4ab8d64119450bae921ab38a21c7974ba8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOSYMM</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>aa481657d3c33ac77e7b7a1cebbdd6fe4abf60ad9220abb42eaa82348235fb2218</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>kSpaceJastrow</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>a17a83e49da973cec6b25217a79a9a17e</anchor>
      <arglist>(ParticleSet &amp;ions, ParticleSet &amp;elecs, SymmetryType oneBodySymm, RealType oneBodyCutoff, string onebodyid, bool oneBodySpin, SymmetryType twoBodySymm, RealType twoBodyCutoff, string twobodyid, bool twoBodySpin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCoefficients</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>a6be08c0ed23b7fe17645d60b973499a8</anchor>
      <arglist>(std::vector&lt; RealType &gt; &amp;oneBodyCoefs, std::vector&lt; RealType &gt; &amp;twoBodyCoefs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportStatus</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>a0a144256f92f2fa9e13e840bc30baef7</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>a75dc219e074bc70cf3f50ed3e281e9c3</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>a17a690a835b951b7cb5ec17d890a1e2b</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>a5ac4e324e78ca03269c426379986100b</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>ad4ac6ecacd80d95941026660c9799fd0</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>GradType</type>
      <name>evalGrad</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>ab5d33c71d5eebd881d4cc700240cd2ac</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratioGrad</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>a115843210af819a38998e3eea79964fa</anchor>
      <arglist>(ParticleSet &amp;P, int iat, GradType &amp;grad_iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>logRatio</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>a72e6e5a4a7adbc3a9af41c854800772c</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>a4fad6e178271bda6f6e70a5965041472</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>af79a1f1637e80a729043600a7656054d</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>aeba37f5a7f9e1c209be41e1f8c2d316d</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>registerData</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>a88a77865dabaedb2c235d126b910921a</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>updateBuffer</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>af73d54335c3c72157d62572a6a426898</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf, bool fromscratch=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>a5261ed49b5195980c91c0024b860fdb2</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>a79e8f43d6294e1f9fe2f1c87f3ed3de0</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>aa1ed6c82b3889b5fd31122a6ab167b6e</anchor>
      <arglist>(PosType G1, PosType G2)</arglist>
    </member>
    <member kind="function">
      <type>OrbitalBasePtr</type>
      <name>makeClone</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>ab68f5027a5eee70c7e4e130cfa9aab1b</anchor>
      <arglist>(ParticleSet &amp;tqp) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateDerivatives</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>a291c52dc43d28edb9643f61b763e0952</anchor>
      <arglist>(ParticleSet &amp;P, const opt_variables_type &amp;active, vector&lt; RealType &gt; &amp;dlogpsi, vector&lt; RealType &gt; &amp;dhpsioverpsi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_ratios</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>a0afd740894bec6ecb30956568b7deeeb</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; ValueType &gt; &amp;ratios)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::complex&lt; RealType &gt;</type>
      <name>ComplexType</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>a7918175767584611b1989b7d708c77ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setupGvecs</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>a16434707d1656fe103137229282bf557</anchor>
      <arglist>(RealType kcut, std::vector&lt; PosType &gt; &amp;gvecs, bool useStructFact)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setupCoefs</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>a2c3527784d4a972ddf024d6d0b1762f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>sortGvecs</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>a890de35415133acba4ec7b6f91e83dc0</anchor>
      <arglist>(std::vector&lt; PosType &gt; &amp;gvecs, std::vector&lt; kSpaceCoef&lt; T &gt; &gt; &amp;coefs, SymmetryType symm)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>Equivalent</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>a6fd6f39b5b98b576d467871d36d0cdd6</anchor>
      <arglist>(PosType G1, PosType G2)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>StructureFactor</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>a9020f7e74c052a337e8f22c0744e5bd4</anchor>
      <arglist>(PosType G, std::vector&lt; ComplexType &gt; &amp;rho_G)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copyFrom</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>a66aba9d11330c14da69114c3e081febf</anchor>
      <arglist>(const kSpaceJastrow &amp;old)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>kSpaceJastrow</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>a93050bc6f7a66b272aaa896bb4f59b40</anchor>
      <arglist>(const ParticleSet &amp;ions, ParticleSet &amp;els)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>CellVolume</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>a0ccd8c45a238054e9f2acf828547e3cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>NormConstant</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>abf964613f040aee63efb772808f3d90e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumElecs</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>aa723c38d1be1cb6fbdcb3e07e8725b07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumSpins</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>a63b3bd3210e9d72adf5065eb5e1fbe7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumIons</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>aeb5b7c1abcc170df95212c6521e6139b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumIonSpecies</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>a32046cc266fef1cd4b8e66d2d9b0ad12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; PosType &gt;</type>
      <name>OneBodyGvecs</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>a42d369fd726b44279daae8e0aef7814d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; PosType &gt;</type>
      <name>TwoBodyGvecs</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>ab4a76c7b9e80179b653eff78b99101fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; kSpaceCoef&lt; ComplexType &gt; &gt;</type>
      <name>OneBodySymmCoefs</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>a828802c6b5f887b9ea47c6307232e089</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; kSpaceCoef&lt; RealType &gt; &gt;</type>
      <name>TwoBodySymmCoefs</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>ad90eda5b9862938e676491c56aead9de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; ComplexType &gt;</type>
      <name>OneBodyCoefs</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>acf001123af85ec074dbf05c11822c7be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; RealType &gt;</type>
      <name>TwoBodyCoefs</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>a9822bca3a337202d4dab3b3992c940ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SymmetryType</type>
      <name>OneBodySymmType</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>a4f74082c722b120876236c4226867449</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SymmetryType</type>
      <name>TwoBodySymmType</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>a1a7ce11a6ecf562672827779739be626</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; ComplexType &gt;</type>
      <name>Ion_rhoG</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>abd3fff5e65af64a373e7b1cfe9ec5b77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; ComplexType &gt;</type>
      <name>OneBody_rhoG</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>afe9d06913f57ffaabc5403125ba7d082</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; ComplexType &gt;</type>
      <name>TwoBody_rhoG</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>ae476d570ad139b09df5703e2484b5e8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; RealType &gt;</type>
      <name>OneBodyPhase</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>a04d0112fc89ce4daec9cd8871aaf3ff4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; RealType &gt;</type>
      <name>TwoBodyPhase</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>aa7ae8d572e91490fd4cc62805f84c7b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; ComplexType &gt;</type>
      <name>OneBody_e2iGr</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>a23601a82a1c6877a83bdb201f5a51ad5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; ComplexType &gt;</type>
      <name>TwoBody_e2iGr_new</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>abc387ef95a751a1c7975b37d039593f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; ComplexType &gt;</type>
      <name>TwoBody_e2iGr_old</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>a9edc04bfc68f673b188761afc25f724f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; ComplexType &gt;</type>
      <name>Delta_e2iGr</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>a5f507c8b5453a3046cbc316058e025a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const ParticleSet &amp;</type>
      <name>Ions</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>ae384e40d75d6a4f542853e344c81ed9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet &amp;</type>
      <name>Elecs</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>ae19ade9809b89fe6ecdce05d85ff1014</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>OneBodyID</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>a761a2790222ed8c99ce4cb8fff2ac7e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>TwoBodyID</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>ae98c4e785a915cb7531cfe02ee9fd869</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>Prefactor</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>af2e94e10dde6c4ee4efd066e1310a72c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; int &gt;</type>
      <name>TwoBodyVarMap</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>a865600d3978dd627ea70f8d2b7a62c41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; int &gt;</type>
      <name>OneBodyVarMap</name>
      <anchorfile>a00321.html</anchorfile>
      <anchor>aa57f4c34d084eed5ab5580699a0eda83</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::kSpaceJastrowBuilder</name>
    <filename>a00322.html</filename>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>kSpaceJastrowBuilder</name>
      <anchorfile>a00322.html</anchorfile>
      <anchor>a499db1e5f68730c0089d14317a544946</anchor>
      <arglist>(ParticleSet &amp;target, TrialWaveFunction &amp;psi, ParticleSet &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00322.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet</type>
      <name>sourcePtcl</name>
      <anchorfile>a00322.html</anchorfile>
      <anchor>ab21a16836c2ab4f2bdc4cd7ad5216627</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; string, kSpaceJastrow::SymmetryType &gt;</type>
      <name>SymmMap</name>
      <anchorfile>a00322.html</anchorfile>
      <anchor>a04392a37ead879d0a38ddd802e2e6f18</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::YukawaBreakup</name>
    <filename>a00644.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>YukawaBreakup</name>
      <anchorfile>a00644.html</anchorfile>
      <anchor>a773f0c12589eaedd690127f9714e9d7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00644.html</anchorfile>
      <anchor>a1173762d522f2b1b6b85ba759097f6b1</anchor>
      <arglist>(ParticleSet &amp;ref)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00644.html</anchorfile>
      <anchor>a449f8c10b6823a7d93324a6ce0a0f98f</anchor>
      <arglist>(ParticleSet &amp;ref, T rs)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>a00644.html</anchorfile>
      <anchor>afd97786bcabad6d60574cf60379747c6</anchor>
      <arglist>(T r, T rinv)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>df</name>
      <anchorfile>a00644.html</anchorfile>
      <anchor>ad309a77d88e0f9ab5b402760ef29269e</anchor>
      <arglist>(T r)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Fk</name>
      <anchorfile>a00644.html</anchorfile>
      <anchor>a5260367e254f1fa40fabde55126e08ed</anchor>
      <arglist>(T k, T rc)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Xk</name>
      <anchorfile>a00644.html</anchorfile>
      <anchor>a7c3416b61e648abc6e4c6559bc77623d</anchor>
      <arglist>(T k, T rc)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>integrate_r2</name>
      <anchorfile>a00644.html</anchorfile>
      <anchor>a61f7c341b8d17ad1efb6cc769826b9cf</anchor>
      <arglist>(T rc)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Uk</name>
      <anchorfile>a00644.html</anchorfile>
      <anchor>a53b00840da4c83bcbf6ea09d8c9f53d5</anchor>
      <arglist>(T kk)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>derivUk</name>
      <anchorfile>a00644.html</anchorfile>
      <anchor>a2b245894247019e549d4fa90cb1033e3</anchor>
      <arglist>(T kk)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Rs</name>
      <anchorfile>a00644.html</anchorfile>
      <anchor>a49f71fcc137eed3a4a176f3e31e2e7b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>SqrtRs</name>
      <anchorfile>a00644.html</anchorfile>
      <anchor>a53154a3bb037da596d43ee72b415ecca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>OneOverSqrtRs</name>
      <anchorfile>a00644.html</anchorfile>
      <anchor>a8787d1dced3170e6bd97bbc95f987cf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>NormFactor</name>
      <anchorfile>a00644.html</anchorfile>
      <anchor>ab954ba6dc4c558f46bc5b38f7133939a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::DerivRPABreakup</name>
    <filename>a00141.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>DerivRPABreakup</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a646999c1e14606f5c2c93d93a028ab4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a1173762d522f2b1b6b85ba759097f6b1</anchor>
      <arglist>(ParticleSet &amp;ref)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a449f8c10b6823a7d93324a6ce0a0f98f</anchor>
      <arglist>(ParticleSet &amp;ref, T rs)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>afd97786bcabad6d60574cf60379747c6</anchor>
      <arglist>(T r, T rinv)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>df</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>ad309a77d88e0f9ab5b402760ef29269e</anchor>
      <arglist>(T r)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Fk</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a5260367e254f1fa40fabde55126e08ed</anchor>
      <arglist>(T k, T rc)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Xk</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a7c3416b61e648abc6e4c6559bc77623d</anchor>
      <arglist>(T k, T rc)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>integrate_r2</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a61f7c341b8d17ad1efb6cc769826b9cf</anchor>
      <arglist>(T rc)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Uk</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a53b00840da4c83bcbf6ea09d8c9f53d5</anchor>
      <arglist>(T kk)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>derivUk</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a2b245894247019e549d4fa90cb1033e3</anchor>
      <arglist>(T kk)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Rs</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a49f71fcc137eed3a4a176f3e31e2e7b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Kf</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a88954ec5f62d854a32afaf556625b28e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Density</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>acb48ab20f0437f455bb26c4711558bc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>NormFactor</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>ab954ba6dc4c558f46bc5b38f7133939a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::RPABreakup</name>
    <filename>a00541.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>RPABreakup</name>
      <anchorfile>a00541.html</anchorfile>
      <anchor>a26015f2e0247108a6bb35efeb1017f64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00541.html</anchorfile>
      <anchor>a1173762d522f2b1b6b85ba759097f6b1</anchor>
      <arglist>(ParticleSet &amp;ref)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00541.html</anchorfile>
      <anchor>a449f8c10b6823a7d93324a6ce0a0f98f</anchor>
      <arglist>(ParticleSet &amp;ref, T rs)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>a00541.html</anchorfile>
      <anchor>afd97786bcabad6d60574cf60379747c6</anchor>
      <arglist>(T r, T rinv)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>df</name>
      <anchorfile>a00541.html</anchorfile>
      <anchor>ad309a77d88e0f9ab5b402760ef29269e</anchor>
      <arglist>(T r)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Fk</name>
      <anchorfile>a00541.html</anchorfile>
      <anchor>a5260367e254f1fa40fabde55126e08ed</anchor>
      <arglist>(T k, T rc)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Xk</name>
      <anchorfile>a00541.html</anchorfile>
      <anchor>a7c3416b61e648abc6e4c6559bc77623d</anchor>
      <arglist>(T k, T rc)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>integrate_r2</name>
      <anchorfile>a00541.html</anchorfile>
      <anchor>a61f7c341b8d17ad1efb6cc769826b9cf</anchor>
      <arglist>(T rc)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Uk</name>
      <anchorfile>a00541.html</anchorfile>
      <anchor>a53b00840da4c83bcbf6ea09d8c9f53d5</anchor>
      <arglist>(T kk)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>derivUk</name>
      <anchorfile>a00541.html</anchorfile>
      <anchor>a2b245894247019e549d4fa90cb1033e3</anchor>
      <arglist>(T kk)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Rs</name>
      <anchorfile>a00541.html</anchorfile>
      <anchor>a49f71fcc137eed3a4a176f3e31e2e7b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Kf</name>
      <anchorfile>a00541.html</anchorfile>
      <anchor>a88954ec5f62d854a32afaf556625b28e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Density</name>
      <anchorfile>a00541.html</anchorfile>
      <anchor>acb48ab20f0437f455bb26c4711558bc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>NormFactor</name>
      <anchorfile>a00541.html</anchorfile>
      <anchor>ab954ba6dc4c558f46bc5b38f7133939a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::DerivYukawaBreakup</name>
    <filename>a00142.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>DerivYukawaBreakup</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>aac0d8f0a153635e90510a62dde3530d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a1173762d522f2b1b6b85ba759097f6b1</anchor>
      <arglist>(ParticleSet &amp;ref)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a449f8c10b6823a7d93324a6ce0a0f98f</anchor>
      <arglist>(ParticleSet &amp;ref, T rs)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>afd97786bcabad6d60574cf60379747c6</anchor>
      <arglist>(T r, T rinv)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>df</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>ad309a77d88e0f9ab5b402760ef29269e</anchor>
      <arglist>(T r)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>integrate_r2</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a61f7c341b8d17ad1efb6cc769826b9cf</anchor>
      <arglist>(T rc)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Fk</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a5260367e254f1fa40fabde55126e08ed</anchor>
      <arglist>(T k, T rc)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Xk</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a7c3416b61e648abc6e4c6559bc77623d</anchor>
      <arglist>(T k, T rc)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Rc</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a3524d38be737db7783789b742fca8f00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Rs</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a49f71fcc137eed3a4a176f3e31e2e7b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>SqrtRs</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a53154a3bb037da596d43ee72b415ecca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>OneOverSqrtRs</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a8787d1dced3170e6bd97bbc95f987cf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>NormFactor</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>ab954ba6dc4c558f46bc5b38f7133939a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>OneOverSqrtRs3</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a3bdedb73fbd001c5da408a4851101bce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>OneOverRs</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>af3ba5aa41cfa6f6c6f629fd848f5ca6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>DerivSecondTaylorTerm</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>abee11d12cd367ac53f22d1625882d255</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>n2</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>aff14f39c00705990835bae9d36d9e61d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::EPRPABreakup</name>
    <filename>a00208.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>EPRPABreakup</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>a286bbd19574de52815b57af64d23cd84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>a1173762d522f2b1b6b85ba759097f6b1</anchor>
      <arglist>(ParticleSet &amp;ref)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>a449f8c10b6823a7d93324a6ce0a0f98f</anchor>
      <arglist>(ParticleSet &amp;ref, T rs)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>afd97786bcabad6d60574cf60379747c6</anchor>
      <arglist>(T r, T rinv)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>df</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>ad309a77d88e0f9ab5b402760ef29269e</anchor>
      <arglist>(T r)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Fk</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>a5260367e254f1fa40fabde55126e08ed</anchor>
      <arglist>(T k, T rc)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Xk</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>a7c3416b61e648abc6e4c6559bc77623d</anchor>
      <arglist>(T k, T rc)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>integrate_r2</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>a61f7c341b8d17ad1efb6cc769826b9cf</anchor>
      <arglist>(T rc)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Uk</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>a53b00840da4c83bcbf6ea09d8c9f53d5</anchor>
      <arglist>(T kk)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>derivUk</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>a2b245894247019e549d4fa90cb1033e3</anchor>
      <arglist>(T kk)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Rs</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>a49f71fcc137eed3a4a176f3e31e2e7b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Kf</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>a88954ec5f62d854a32afaf556625b28e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Density</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>acb48ab20f0437f455bb26c4711558bc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>NormFactor</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>ab954ba6dc4c558f46bc5b38f7133939a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::derivEPRPABreakup</name>
    <filename>a00140.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>derivEPRPABreakup</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>ab43526e432c7fa0256e54b8321b01619</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a1173762d522f2b1b6b85ba759097f6b1</anchor>
      <arglist>(ParticleSet &amp;ref)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a449f8c10b6823a7d93324a6ce0a0f98f</anchor>
      <arglist>(ParticleSet &amp;ref, T rs)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>afd97786bcabad6d60574cf60379747c6</anchor>
      <arglist>(T r, T rinv)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>df</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>ad309a77d88e0f9ab5b402760ef29269e</anchor>
      <arglist>(T r)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Fk</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a5260367e254f1fa40fabde55126e08ed</anchor>
      <arglist>(T k, T rc)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Xk</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a7c3416b61e648abc6e4c6559bc77623d</anchor>
      <arglist>(T k, T rc)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>integrate_r2</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a61f7c341b8d17ad1efb6cc769826b9cf</anchor>
      <arglist>(T rc)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Uk</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a53b00840da4c83bcbf6ea09d8c9f53d5</anchor>
      <arglist>(T kk)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>derivUk</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a2b245894247019e549d4fa90cb1033e3</anchor>
      <arglist>(T kk)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Rs</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a49f71fcc137eed3a4a176f3e31e2e7b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Kf</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a88954ec5f62d854a32afaf556625b28e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Density</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>acb48ab20f0437f455bb26c4711558bc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>NormFactor</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>ab954ba6dc4c558f46bc5b38f7133939a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ShortRangePartAdapter</name>
    <filename>a00551.html</filename>
    <templarg>T</templarg>
    <base>OptimizableFunctorBase</base>
    <member kind="typedef">
      <type>LRHandlerBase</type>
      <name>HandlerType</name>
      <anchorfile>a00551.html</anchorfile>
      <anchor>ae4f424c5b27648a26f50492604342b79</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ShortRangePartAdapter</name>
      <anchorfile>a00551.html</anchorfile>
      <anchor>ad25189fe69426b28097344bafdb261e8</anchor>
      <arglist>(HandlerType *inhandler)</arglist>
    </member>
    <member kind="function">
      <type>OptimizableFunctorBase *</type>
      <name>makeClone</name>
      <anchorfile>a00551.html</anchorfile>
      <anchor>a4747acd34f8d2daa0656125f1290e4d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00551.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRmax</name>
      <anchorfile>a00551.html</anchorfile>
      <anchor>a1a73019c812a85bbd70c6e9eabe6a28a</anchor>
      <arglist>(real_type rm)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00551.html</anchorfile>
      <anchor>a4860196a527546949f6366d22425c009</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>a00551.html</anchorfile>
      <anchor>a6a91c8094ddd49aa8a2da9df6b439164</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>a00551.html</anchorfile>
      <anchor>aff351ffb66160b6458d6057fa6bc2a5f</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00551.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00551.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00551.html</anchorfile>
      <anchor>a39ea173c92dae81ac977359c07ff55db</anchor>
      <arglist>(const opt_variables_type &amp;optVariables)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00551.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Uconst</name>
      <anchorfile>a00551.html</anchorfile>
      <anchor>a5d9c0b15b04db934c54be2cfadf89a3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HandlerType *</type>
      <name>myHandler</name>
      <anchorfile>a00551.html</anchorfile>
      <anchor>a7b4fdc238840c4280cdcc69f1675a6c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::RPABFeeBreakup</name>
    <filename>a00540.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>RPABFeeBreakup</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>a80f8ad0c8373f1aeaca33d2cbb3653e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>a1173762d522f2b1b6b85ba759097f6b1</anchor>
      <arglist>(ParticleSet &amp;ref)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>a449f8c10b6823a7d93324a6ce0a0f98f</anchor>
      <arglist>(ParticleSet &amp;ref, T rs)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>afd97786bcabad6d60574cf60379747c6</anchor>
      <arglist>(T r, T rinv)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>df</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ad309a77d88e0f9ab5b402760ef29269e</anchor>
      <arglist>(T r)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Fk</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>a5260367e254f1fa40fabde55126e08ed</anchor>
      <arglist>(T k, T rc)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Xk</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>a7c3416b61e648abc6e4c6559bc77623d</anchor>
      <arglist>(T k, T rc)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>integrate_r2</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>a61f7c341b8d17ad1efb6cc769826b9cf</anchor>
      <arglist>(T rc)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Uk</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>a53b00840da4c83bcbf6ea09d8c9f53d5</anchor>
      <arglist>(T kk)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>derivUk</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>a2b245894247019e549d4fa90cb1033e3</anchor>
      <arglist>(T kk)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>urpa</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>af0b0a1c72cd5893e8e30754f7a8fd37e</anchor>
      <arglist>(T q)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Dlindhard</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>a375a18cda6532a10c56dbcfc7bafd819</anchor>
      <arglist>(T q, T w)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Dlindhardp</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ac852b576f6cd0e1fdb7fffd4e08043a1</anchor>
      <arglist>(T q, T w)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Rs</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>a49f71fcc137eed3a4a176f3e31e2e7b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>kf</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>a8088a8935b29c6ff18dc07dedc3c6bfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>kfm</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>a24c3c172ee4cab98af0a724371971afe</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Density</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>acb48ab20f0437f455bb26c4711558bc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>volume</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ab1796c418171e53b6dd7d2821cf61793</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>hbs2m</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>a25d7dc29621d65a00e079dfe6a02fd93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nelec</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>a2c11daf3f83975d07985939f052ea0f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nspin</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>a336d0e46bcbdfc54f68dd6f1b655f6c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nppss</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>aa9f56a87422130a4b27a04c2f4453e3d</anchor>
      <arglist>[2]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::LRTwoBodyJastrow</name>
    <filename>a00361.html</filename>
    <base>qmcplusplus::OrbitalBase</base>
    <member kind="function">
      <type></type>
      <name>LRTwoBodyJastrow</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>a3b759c4009dcaba8714a64d795b7faeb</anchor>
      <arglist>(ParticleSet &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>ac9471334d6ff888e194a823d9f9061ae</anchor>
      <arglist>(const opt_variables_type &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>ac66948db629989be1d9335e1d48dfeb0</anchor>
      <arglist>(opt_variables_type &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportStatus</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>a0a144256f92f2fa9e13e840bc30baef7</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetByHandler</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>a848cc79fc5c6bc778b65b0f49894ac49</anchor>
      <arglist>(HandlerType *handler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>ad58aa3e24bf70bbcd08a617c7de0a44f</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetByFunction</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>a6a5495668d4e31782affcc53718edde1</anchor>
      <arglist>(RealType kc)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>a17a690a835b951b7cb5ec17d890a1e2b</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>a20f75d930b1a1251e8ec20498cd91c61</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>ad4ac6ecacd80d95941026660c9799fd0</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>logRatio</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>a07ac368f47228afe618587cdca325001</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>a4fad6e178271bda6f6e70a5965041472</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>af79a1f1637e80a729043600a7656054d</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>aeba37f5a7f9e1c209be41e1f8c2d316d</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>registerData</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>adbd447ce8cd91a57bfb1fae99dcbe810</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>updateBuffer</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>a59595d7f2c2505b5da3ba8ff690d1326</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf, bool fromscratch=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>a5261ed49b5195980c91c0024b860fdb2</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>a805d6c81830ef07ce09b1b59b1b21db1</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>OrbitalBasePtr</type>
      <name>makeClone</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>ab68f5027a5eee70c7e4e130cfa9aab1b</anchor>
      <arglist>(ParticleSet &amp;tqp) const </arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; RealType &gt;</type>
      <name>Fk</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>a480ffe46ff1e3cbdcf05746b71d62410</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; RealType &gt;</type>
      <name>Fk_symm</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>a3f1585669820b4a8c4bad3fa0787e85d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>LRHandlerBase</type>
      <name>HandlerType</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>ae4f424c5b27648a26f50492604342b79</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>resetInternals</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>ab7663a660031b10114a98f2f074e1996</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>a0fc3d585aa53859602ac79c9c421f2a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>NeedToRestore</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>a2c2223a13e04613a3c98a850fd74d369</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>NumPtcls</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>af77a802af14251669b5c66a17248faa2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>NumSpecies</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>addad073253ba28c4ac6dd29467592b9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>NumKpts</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>abbf33aa7dd8fe177d00da2d84edf7a83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>MaxK</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>a77cb534ce6307caac89f6f61097fc92a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>MaxKshell</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>aa99b2d1c6992b61fbeffa28b6a421ce1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>CellVolume</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>a0ccd8c45a238054e9f2acf828547e3cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>Rs</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>a98c1ef08c9694a97084354e5e85bc5a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>NormConstant</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>abf964613f040aee63efb772808f3d90e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>curVal</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>a9d968af9e056fb5b523c54fb2b46b562</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>curLap</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>af231fbc54bac0d9508402e1a9ab6e445</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PosType</type>
      <name>curGrad</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>a1f7818b1f57b3d6585ac950fecec6d07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType *</type>
      <name>FirstAddressOfdU</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>a77538c1503ee95a4637198725fe78fb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType *</type>
      <name>LastAddressOfdU</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>ae1bccd34c7362770ee412f580dcd5b9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>StructFact *</type>
      <name>skRef</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>a07e10c82aec01bfd2fdb8aebe82d6ae9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>HandlerType *</type>
      <name>handler</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>a874c10a8ff2e8432a75357c4bb9cb343</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; RealType &gt;</type>
      <name>U</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>a836c2d02e94a77023cadb92f283d1466</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; RealType &gt;</type>
      <name>d2U</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>abab57cfb0678fdc9f3aedce9b7c70b7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; PosType &gt;</type>
      <name>dU</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>af8d8e6c2aa14ab7016f8d0f5ba7c17a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; RealType &gt;</type>
      <name>offU</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>aab1a6c629589bf48fce8f67f6e7a3bfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; RealType &gt;</type>
      <name>offd2U</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>acc3d17df2fe71b28766b0baa77537179</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; PosType &gt;</type>
      <name>offdU</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>ac47e0632143f274b658769d57dfdcceb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; ComplexType &gt;</type>
      <name>rokbyF</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>af7079087e1769ddaf0ec39469ba8cb3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; ComplexType &gt;</type>
      <name>Rhok</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>a8bcb4d1845e0be2f9b866a2d71349741</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; ComplexType &gt;</type>
      <name>eikr</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>a7d5cdee91853577321f7e9690226882f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; ComplexType &gt;</type>
      <name>eikr_new</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>aa250e652a5a5d7f2953e9aed14fe81a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; ComplexType &gt;</type>
      <name>delta_eikr</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>af4eadcc24ccc4978c3739b8e88a521b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; int &gt;</type>
      <name>Kshell</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>afcc48749d0b0db93f75f8dc29ce06bf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>FkbyKK</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>a2ad5ad9004250d0423e9672a3f440aa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; RealType &gt;</type>
      <name>Fk_0</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>ad7646bcec5fc561b68744dd30de69128</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; RealType &gt;</type>
      <name>Fk_1</name>
      <anchorfile>a00361.html</anchorfile>
      <anchor>a6a1330734df8c6883f18885ddb26cc28</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::McMillanJ2Functor</name>
    <filename>a00372.html</filename>
    <templarg>T</templarg>
    <base>OptimizableFunctorBase</base>
    <member kind="typedef">
      <type>OptimizableFunctorBase::real_type</type>
      <name>real_type</name>
      <anchorfile>a00372.html</anchorfile>
      <anchor>aa7c8aef29f0560ea0a426cb28d91e2e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>McMillanJ2Functor</name>
      <anchorfile>a00372.html</anchorfile>
      <anchor>a10f0b8a320ebcf2c0b5089667cd13f8e</anchor>
      <arglist>(real_type a=5.0, real_type b=4.9133)</arglist>
    </member>
    <member kind="function">
      <type>OptimizableFunctorBase *</type>
      <name>makeClone</name>
      <anchorfile>a00372.html</anchorfile>
      <anchor>a4747acd34f8d2daa0656125f1290e4d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00372.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00372.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00372.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00372.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00372.html</anchorfile>
      <anchor>ad4111915206b95f4d66470a658878bb2</anchor>
      <arglist>(real_type a, real_type b)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00372.html</anchorfile>
      <anchor>a4860196a527546949f6366d22425c009</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00372.html</anchorfile>
      <anchor>a6d4da0f3cb2c37f2105f35aba1c3a813</anchor>
      <arglist>(real_type r, real_type &amp;dudr, real_type &amp;d2udr2)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>a00372.html</anchorfile>
      <anchor>a6a91c8094ddd49aa8a2da9df6b439164</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>a00372.html</anchorfile>
      <anchor>aff351ffb66160b6458d6057fa6bc2a5f</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00372.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>A</name>
      <anchorfile>a00372.html</anchorfile>
      <anchor>a2afa47a65c2e9f37e310b39710c74296</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>B</name>
      <anchorfile>a00372.html</anchorfile>
      <anchor>a3252942e094b1e19e493677ef44d2a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>ID_A</name>
      <anchorfile>a00372.html</anchorfile>
      <anchor>aeb8263f9885b65a7595c461984f24c1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>ID_B</name>
      <anchorfile>a00372.html</anchorfile>
      <anchor>a27d6dd114aa784a5805d6a80c96f9d64</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ModMcMillanJ2Functor</name>
    <filename>a00382.html</filename>
    <templarg>T</templarg>
    <base>OptimizableFunctorBase</base>
    <member kind="typedef">
      <type>OptimizableFunctorBase::real_type</type>
      <name>real_type</name>
      <anchorfile>a00382.html</anchorfile>
      <anchor>aa7c8aef29f0560ea0a426cb28d91e2e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ModMcMillanJ2Functor</name>
      <anchorfile>a00382.html</anchorfile>
      <anchor>a65cc05b05cf166b7d8b08fe74567cefa</anchor>
      <arglist>(real_type a=0.0, real_type b=0.0, real_type rc=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00382.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00382.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>OptimizableFunctorBase *</type>
      <name>makeClone</name>
      <anchorfile>a00382.html</anchorfile>
      <anchor>a4747acd34f8d2daa0656125f1290e4d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00382.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00382.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00382.html</anchorfile>
      <anchor>a4860196a527546949f6366d22425c009</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00382.html</anchorfile>
      <anchor>a6d4da0f3cb2c37f2105f35aba1c3a813</anchor>
      <arglist>(real_type r, real_type &amp;dudr, real_type &amp;d2udr2)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>a00382.html</anchorfile>
      <anchor>a6a91c8094ddd49aa8a2da9df6b439164</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>a00382.html</anchorfile>
      <anchor>aff351ffb66160b6458d6057fa6bc2a5f</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00382.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>A</name>
      <anchorfile>a00382.html</anchorfile>
      <anchor>a2afa47a65c2e9f37e310b39710c74296</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>B</name>
      <anchorfile>a00382.html</anchorfile>
      <anchor>a3252942e094b1e19e493677ef44d2a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>RC</name>
      <anchorfile>a00382.html</anchorfile>
      <anchor>ab40838b0141ec542563324a09506ca7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>cA</name>
      <anchorfile>a00382.html</anchorfile>
      <anchor>a72948e290cd369456fddeb6e0688c630</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>c0</name>
      <anchorfile>a00382.html</anchorfile>
      <anchor>aa1aaf4eb3afea51d2e21cf3d183aa98a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>c1</name>
      <anchorfile>a00382.html</anchorfile>
      <anchor>a55d0086dc0f598cfdb0587de5f2375c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>c2</name>
      <anchorfile>a00382.html</anchorfile>
      <anchor>af0e0ecbc75f22d0a11e9329e649b5f76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>c3</name>
      <anchorfile>a00382.html</anchorfile>
      <anchor>a683836f412f2c0996c82da39a1ae237f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>c4</name>
      <anchorfile>a00382.html</anchorfile>
      <anchor>aca8f19eabaec56f7d0af128bad65b6ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>c5</name>
      <anchorfile>a00382.html</anchorfile>
      <anchor>a644f118e3a80d99d81bf57824080e6b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>ID_A</name>
      <anchorfile>a00382.html</anchorfile>
      <anchor>aeb8263f9885b65a7595c461984f24c1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>ID_B</name>
      <anchorfile>a00382.html</anchorfile>
      <anchor>a27d6dd114aa784a5805d6a80c96f9d64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>ID_RC</name>
      <anchorfile>a00382.html</anchorfile>
      <anchor>ab2a54110ef1900bd51976e55616f4eb2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::comboMcMillanJ2Functor</name>
    <filename>a00079.html</filename>
    <templarg>T</templarg>
    <base>OptimizableFunctorBase</base>
    <member kind="typedef">
      <type>OptimizableFunctorBase::real_type</type>
      <name>real_type</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>aa7c8aef29f0560ea0a426cb28d91e2e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>comboMcMillanJ2Functor</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>ac4d069a7bab225799938174416bf5e72</anchor>
      <arglist>(real_type a=0.0, real_type b=0.0, real_type r0=0.0, real_type rc=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>OptimizableFunctorBase *</type>
      <name>makeClone</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a4747acd34f8d2daa0656125f1290e4d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a4860196a527546949f6366d22425c009</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a6d4da0f3cb2c37f2105f35aba1c3a813</anchor>
      <arglist>(real_type r, real_type &amp;dudr, real_type &amp;d2udr2)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a6a91c8094ddd49aa8a2da9df6b439164</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>aff351ffb66160b6458d6057fa6bc2a5f</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>A</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a2afa47a65c2e9f37e310b39710c74296</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>B</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a3252942e094b1e19e493677ef44d2a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>RC</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>ab40838b0141ec542563324a09506ca7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>R0</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a98ab8a2de91321b991511c217c0edf50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>cA</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a72948e290cd369456fddeb6e0688c630</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>c0</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>aa1aaf4eb3afea51d2e21cf3d183aa98a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>c1</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a55d0086dc0f598cfdb0587de5f2375c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>c2</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>af0e0ecbc75f22d0a11e9329e649b5f76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>c3</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a683836f412f2c0996c82da39a1ae237f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>c4</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>aca8f19eabaec56f7d0af128bad65b6ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>c5</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a644f118e3a80d99d81bf57824080e6b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>b0</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a284b7b2555357f3a18b69157e3113481</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>b1</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>aa35010fb9f97a079acb83f1212349760</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>b2</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a6854249b7d79ed4fd302b89ba8cb01a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>b3</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a10cda538a6a9ad53342c4ae5642b199b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>ID_A</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>aeb8263f9885b65a7595c461984f24c1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>ID_B</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a27d6dd114aa784a5805d6a80c96f9d64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>ID_RC</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>ab2a54110ef1900bd51976e55616f4eb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>ID_R0</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a3759cb70792592fd3eb8b0bd6d64b80b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::McMillanJ2GFunctor</name>
    <filename>a00373.html</filename>
    <templarg>T</templarg>
    <base>OptimizableFunctorBase</base>
    <member kind="typedef">
      <type>OptimizableFunctorBase::real_type</type>
      <name>real_type</name>
      <anchorfile>a00373.html</anchorfile>
      <anchor>aa7c8aef29f0560ea0a426cb28d91e2e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>McMillanJ2GFunctor</name>
      <anchorfile>a00373.html</anchorfile>
      <anchor>a4749c41a7ba3c6ba5becdcf08fdbfa14</anchor>
      <arglist>(real_type a=5.0, real_type b=5.7448)</arglist>
    </member>
    <member kind="function">
      <type>OptimizableFunctorBase *</type>
      <name>makeClone</name>
      <anchorfile>a00373.html</anchorfile>
      <anchor>a4747acd34f8d2daa0656125f1290e4d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00373.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00373.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00373.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00373.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00373.html</anchorfile>
      <anchor>ad4111915206b95f4d66470a658878bb2</anchor>
      <arglist>(real_type a, real_type b)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00373.html</anchorfile>
      <anchor>a4860196a527546949f6366d22425c009</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00373.html</anchorfile>
      <anchor>a6d4da0f3cb2c37f2105f35aba1c3a813</anchor>
      <arglist>(real_type r, real_type &amp;dudr, real_type &amp;d2udr2)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>a00373.html</anchorfile>
      <anchor>a6a91c8094ddd49aa8a2da9df6b439164</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>a00373.html</anchorfile>
      <anchor>aff351ffb66160b6458d6057fa6bc2a5f</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00373.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>A</name>
      <anchorfile>a00373.html</anchorfile>
      <anchor>a2afa47a65c2e9f37e310b39710c74296</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>B</name>
      <anchorfile>a00373.html</anchorfile>
      <anchor>a3252942e094b1e19e493677ef44d2a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>R0</name>
      <anchorfile>a00373.html</anchorfile>
      <anchor>a98ab8a2de91321b991511c217c0edf50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>c1</name>
      <anchorfile>a00373.html</anchorfile>
      <anchor>a55d0086dc0f598cfdb0587de5f2375c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>c2</name>
      <anchorfile>a00373.html</anchorfile>
      <anchor>af0e0ecbc75f22d0a11e9329e649b5f76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>ID_A</name>
      <anchorfile>a00373.html</anchorfile>
      <anchor>aeb8263f9885b65a7595c461984f24c1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>ID_B</name>
      <anchorfile>a00373.html</anchorfile>
      <anchor>a27d6dd114aa784a5805d6a80c96f9d64</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ModPadeFunctor</name>
    <filename>a00383.html</filename>
    <templarg>T</templarg>
    <base>OptimizableFunctorBase</base>
    <member kind="function">
      <type></type>
      <name>ModPadeFunctor</name>
      <anchorfile>a00383.html</anchorfile>
      <anchor>a99efe5f9822b41baf010d5605e53107f</anchor>
      <arglist>(real_type a=-0.5, real_type b=1)</arglist>
    </member>
    <member kind="function">
      <type>OptimizableFunctorBase *</type>
      <name>makeClone</name>
      <anchorfile>a00383.html</anchorfile>
      <anchor>a4747acd34f8d2daa0656125f1290e4d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00383.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00383.html</anchorfile>
      <anchor>a4860196a527546949f6366d22425c009</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00383.html</anchorfile>
      <anchor>a6d4da0f3cb2c37f2105f35aba1c3a813</anchor>
      <arglist>(real_type r, real_type &amp;dudr, real_type &amp;d2udr2)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00383.html</anchorfile>
      <anchor>a8335697bc87fcf13493bd28d2a61f22c</anchor>
      <arglist>(real_type r, real_type &amp;dudr, real_type &amp;d2udr2, real_type d3udr3)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>a00383.html</anchorfile>
      <anchor>a6a91c8094ddd49aa8a2da9df6b439164</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>a00383.html</anchorfile>
      <anchor>aff351ffb66160b6458d6057fa6bc2a5f</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00383.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00383.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00383.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00383.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>A</name>
      <anchorfile>a00383.html</anchorfile>
      <anchor>a2afa47a65c2e9f37e310b39710c74296</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>B</name>
      <anchorfile>a00383.html</anchorfile>
      <anchor>a3252942e094b1e19e493677ef44d2a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Zeff</name>
      <anchorfile>a00383.html</anchorfile>
      <anchor>a017f253f6281bf8b036f984eac7d40ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Coeff</name>
      <anchorfile>a00383.html</anchorfile>
      <anchor>ae85ee2daebeae15108684fa38c07c146</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>mAB</name>
      <anchorfile>a00383.html</anchorfile>
      <anchor>ad0def1609571635834b18368d7cb1706</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>ID_B</name>
      <anchorfile>a00383.html</anchorfile>
      <anchor>a27d6dd114aa784a5805d6a80c96f9d64</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::CutoffFunctor</name>
    <filename>a00132.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>CutoffFunctor</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a1f79480482caa15704470a23139ccf72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CutoffFunctor</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>abaf1862e9f0ab0e10fd656eb7971462a</anchor>
      <arglist>(T r1, T r2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>abad72a865573c4de8cd6a5f69780ac16</anchor>
      <arglist>(T r1, T r2)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a391e389c0f96cf030390bc52f49a6737</anchor>
      <arglist>(T r)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>R1</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>abed618a0352a85fbf88630bcd0177b88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>R2</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a2b0a53df926bd94f1e945abe6616c51a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>R12</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>ad0c43c5bab50be14014d6073c32badcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>pi</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>ab577e3cab4b21f3ea98b467d527e4e55</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::NumericalJastrow</name>
    <filename>a00418.html</filename>
    <templarg></templarg>
    <base>OptimizableFunctorBase</base>
    <member kind="typedef">
      <type>OptimizableFunctorBase</type>
      <name>FNIN</name>
      <anchorfile>a00418.html</anchorfile>
      <anchor>aa65fcc7fea35ad7a29620b9235f70019</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimCubicSpline&lt; real_type, real_type &gt;</type>
      <name>FNOUT</name>
      <anchorfile>a00418.html</anchorfile>
      <anchor>a4c655c40946742c617ab54c4bb0aa55e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NumericalJastrow</name>
      <anchorfile>a00418.html</anchorfile>
      <anchor>a10e1889a3700251df6a055ea683ec4f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInFunc</name>
      <anchorfile>a00418.html</anchorfile>
      <anchor>acb43a44d4db1c9fdbcddac1a4e4a41e7</anchor>
      <arglist>(FNIN *in_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutFunc</name>
      <anchorfile>a00418.html</anchorfile>
      <anchor>ad3cf5a8bc65a9bbd76f6d525ffd8471b</anchor>
      <arglist>(FNOUT *out_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCutoff</name>
      <anchorfile>a00418.html</anchorfile>
      <anchor>a2fdad987140bb1fc71217d55ddb8cd1b</anchor>
      <arglist>(real_type r1, real_type r2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00418.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00418.html</anchorfile>
      <anchor>a6d4da0f3cb2c37f2105f35aba1c3a813</anchor>
      <arglist>(real_type r, real_type &amp;dudr, real_type &amp;d2udr2)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00418.html</anchorfile>
      <anchor>a4860196a527546949f6366d22425c009</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>a00418.html</anchorfile>
      <anchor>a6a91c8094ddd49aa8a2da9df6b439164</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>a00418.html</anchorfile>
      <anchor>aff351ffb66160b6458d6057fa6bc2a5f</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00418.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00418.html</anchorfile>
      <anchor>a571580ea7471b01a50ca810c0cb59ebc</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a00418.html</anchorfile>
      <anchor>a76eeb88723ddd6819c86add0b1db60c6</anchor>
      <arglist>(FNIN *in_, typename FNOUT::grid_type *agrid, real_type rcut)</arglist>
    </member>
    <member kind="variable">
      <type>FNIN *</type>
      <name>InFunc</name>
      <anchorfile>a00418.html</anchorfile>
      <anchor>a3cb996530e65163e5296255673a212bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FNOUT *</type>
      <name>OutFunc</name>
      <anchorfile>a00418.html</anchorfile>
      <anchor>acf488e5ee71a5ce1449ecf615a0d77ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CutoffFunctor&lt; real_type &gt;</type>
      <name>Rcut</name>
      <anchorfile>a00418.html</anchorfile>
      <anchor>ab691b02573e970ddb42ed5791c4dd098</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::OneBodyJastrowOrbitalBspline</name>
    <filename>a00433.html</filename>
    <base>OneBodyJastrowOrbital&lt; BsplineFunctor&lt; OrbitalBase::RealType &gt; &gt;</base>
    <member kind="typedef">
      <type>BsplineFunctor&lt; OrbitalBase::RealType &gt;</type>
      <name>FT</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a35dcdeae6c5f97b3ac767c1f539d9e9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleSet::Walker_t</type>
      <name>Walker_t</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>abbc77657579efa0cd83de2b985f92476</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BsplineFunctor&lt; OrbitalBase::RealType &gt;</type>
      <name>FuncType</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a617b482486e44becbde6ea4cf2c96f16</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFunc</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>aac8b4a5d27686d508a42a8cfe3754ff0</anchor>
      <arglist>(int ig, FT *j, int jg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recompute</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>aec25e8d4d6b5bedf0b8cd46e744bdada</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, bool firstTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a83f2c7b01b7a6e2fc1b6f1e897f427c2</anchor>
      <arglist>(PointerPool&lt; gpu::device_vector&lt; CudaRealType &gt; &gt; &amp;pool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLog</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>ae1d637e358143385c1f5cce32a88f076</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, vector&lt; RealType &gt; &amp;logPsi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>aca440575f4e041f0f17ceeb85c6c2865</anchor>
      <arglist>(vector&lt; Walker_t * &gt; &amp;walkers, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>adc39ad0ba1da288400ea43f0139c77c0</anchor>
      <arglist>(const vector&lt; Walker_t * &gt; &amp;walkers, const vector&lt; int &gt; &amp;iatList)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ratio</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>ada35f710eab25f8a7ce3ce209afb4dc4</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, int iat, vector&lt; ValueType &gt; &amp;psi_ratios, vector&lt; GradType &gt; &amp;grad, vector&lt; ValueType &gt; &amp;lapl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcRatio</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>af1aad054f76e6c545c1587cb9d08892b</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, int iat, vector&lt; ValueType &gt; &amp;psi_ratios, vector&lt; GradType &gt; &amp;grad, vector&lt; ValueType &gt; &amp;lapl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRatio</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a87ae6eadcb06dff4e011aa533a87a356</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, int iat, vector&lt; ValueType &gt; &amp;psi_ratios, vector&lt; GradType &gt; &amp;grad, vector&lt; ValueType &gt; &amp;lapl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ratio</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a180290d4b01ccd239bdab59e02b82902</anchor>
      <arglist>(vector&lt; Walker_t * &gt; &amp;walkers, vector&lt; int &gt; &amp;iatList, vector&lt; PosType &gt; &amp;rNew, vector&lt; ValueType &gt; &amp;psi_ratios, vector&lt; GradType &gt; &amp;grad, vector&lt; ValueType &gt; &amp;lapl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcGradient</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>adfb00492389c1143eb4cc765f6770dae</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, int iat, vector&lt; GradType &gt; &amp;grad)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGradient</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>aa86695e2b40516cb0c1fb59f680806ee</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, int iat, vector&lt; GradType &gt; &amp;grad)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradLapl</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a8e190391940e269747262091f2af0241</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, GradMatrix_t &amp;grads, ValueMatrix_t &amp;lapl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NLratios</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a15bcbd3fba973ab8724980c8bfb009d5</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, vector&lt; NLjob &gt; &amp;jobList, vector&lt; PosType &gt; &amp;quadPoints, vector&lt; ValueType &gt; &amp;psi_ratios)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateDerivatives</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a2d379be764124f0bd17ceef4b0e28d16</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, const opt_variables_type &amp;optvars, ValueMatrix_t &amp;dlogpsi, ValueMatrix_t &amp;dlapl_over_psi)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneBodyJastrowOrbitalBspline</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a00d451e8b62637e54f5d65523630c994</anchor>
      <arglist>(ParticleSet &amp;centers, ParticleSet &amp;elecs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneBodyJastrowOrbital</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad56d95c46ab9b7ce341be0402bbadf4c</anchor>
      <arglist>(const ParticleSet &amp;centers, ParticleSet &amp;els)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OneBodyJastrowOrbital</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7dd29d305532053c6e3bf1635a0985fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFunc</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a190cef2a0438ac51e549cee213c205e5</anchor>
      <arglist>(int source_type, BsplineFunctor&lt; OrbitalBase::RealType &gt; *afunc, int target_type=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportStatus</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0a144256f92f2fa9e13e840bc30baef7</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aee6c98df74fd951c23aedb0d38625d4e</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a058a5a1e24105137f5509a585419d0ef</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a17a690a835b951b7cb5ec17d890a1e2b</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5e4a7bd7e23a6beab0d8bc131be6ffc4</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad4ac6ecacd80d95941026660c9799fd0</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_ratios</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0afd740894bec6ecb30956568b7deeeb</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; ValueType &gt; &amp;ratios)</arglist>
    </member>
    <member kind="function">
      <type>GradType</type>
      <name>evalGrad</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a178607284b7ab1e4c389fce8e0c80de3</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>GradType</type>
      <name>evalGradSource</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae22540bdd1acd95e3cbbc46f5cc66359</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet &amp;source, int isrc)</arglist>
    </member>
    <member kind="function">
      <type>GradType</type>
      <name>evalGradSource</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a26cffe0125748b9c12b3b37484872f04</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet &amp;source, int isrc, TinyVector&lt; ParticleSet::ParticleGradient_t, OHMMS_DIM &gt; &amp;grad_grad, TinyVector&lt; ParticleSet::ParticleLaplacian_t, OHMMS_DIM &gt; &amp;lapl_grad)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratioGrad</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af21351a5f07bfcec09d2f2c85c24ffee</anchor>
      <arglist>(ParticleSet &amp;P, int iat, GradType &amp;grad_iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>logRatio</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af6fa7f27fa33e00e9097169c82dff776</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4fad6e178271bda6f6e70a5965041472</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af79a1f1637e80a729043600a7656054d</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aeba37f5a7f9e1c209be41e1f8c2d316d</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateLogAndStore</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af2729bf726a29202c501a093cec75761</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>registerData</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a6c52a19e935c4f5e9bc363f535a1eb58</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>updateBuffer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5c8b7a72afdb083caddc5e57640b4549</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf, bool fromscratch=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5261ed49b5195980c91c0024b860fdb2</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>OrbitalBasePtr</type>
      <name>makeClone</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab68f5027a5eee70c7e4e130cfa9aab1b</anchor>
      <arglist>(ParticleSet &amp;tqp) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFrom</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af1a7c966102d2128341c24cf920adc49</anchor>
      <arglist>(const OrbitalBase &amp;old)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>CUDA_PRECISION</type>
      <name>CudaReal</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>aab6978b41afc161203ee33e35c8d5d9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>UsePBC</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a0509dd75e675cea3e1152928198029d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; CudaSpline&lt; CudaReal &gt; * &gt;</type>
      <name>GPUSplines</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a3bbdcdaefdae967b2eafb67f65fc1518</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; CudaSpline&lt; CudaReal &gt; * &gt;</type>
      <name>UniqueSplines</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a64427c96bfacba1e0c913b8dea588f6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>MaxCoefs</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a7a69fe8d5fd308fb6397cfad3cf7bb65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet &amp;</type>
      <name>ElecRef</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a1db223c2351115e0ab325945c5c91700</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::device_vector&lt; CudaReal &gt;</type>
      <name>L</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>ac54fe4abc9ac7cf6f539e2063ca6a65c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::device_vector&lt; CudaReal &gt;</type>
      <name>Linv</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>af6feb7becce2963a0a328dbfac2f2152</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::device_vector&lt; CudaReal &gt;</type>
      <name>C</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a11fcd02b7284ba06ea51a132c6f23e2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::device_vector&lt; CudaReal * &gt;</type>
      <name>UpdateListGPU</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a025cb6b8290bcf47400b5f33ee00c081</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::device_vector&lt; CudaReal &gt;</type>
      <name>SumGPU</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a16a5a1fa03a33f2f71e03764f15fdc43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::device_vector&lt; CudaReal &gt;</type>
      <name>GradLaplGPU</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a13b82fe909821441ebcb9ef04ef90503</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::device_vector&lt; CudaReal &gt;</type>
      <name>OneGradGPU</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a2edb5e171ddc28cf8146da5fbee332a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::host_vector&lt; CudaReal * &gt;</type>
      <name>UpdateListHost</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a9c38981962705d9c595276ff2c0bf385</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::host_vector&lt; CudaReal &gt;</type>
      <name>SumHost</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>aad28d6ba63739b9bdf9b8dfd21c7a05b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::host_vector&lt; CudaReal &gt;</type>
      <name>GradLaplHost</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>ab67f21f67446b34939cda297c83dc9ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::host_vector&lt; CudaReal &gt;</type>
      <name>OneGradHost</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>af968d85f407c20e5f21ce8b7edd897c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumCenterGroups</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a78dc012130b2f01f0dd513e3affe4393</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumElecGroups</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a8809610ef96eda8904086a38e26cf57d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; int &gt;</type>
      <name>CenterFirst</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>adf4402d5b326b19ed4678acc75b8a8e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; int &gt;</type>
      <name>CenterLast</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a392f36973357e4e203dfb27cede4e0c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::host_vector&lt; CudaReal &gt;</type>
      <name>SplineDerivsHost</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a01bcad17cc866dc520edb06c47b8872e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::device_vector&lt; CudaReal &gt;</type>
      <name>SplineDerivsGPU</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a22e1c0e29ad18a2a276841b4d4d61577</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::host_vector&lt; CudaReal * &gt;</type>
      <name>DerivListHost</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a791e2eb3a3a9d01a7efd550055fd8f5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::device_vector&lt; CudaReal * &gt;</type>
      <name>DerivListGPU</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a4b3a29a81963928fb99dd2db26832236</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::host_vector&lt; CudaReal * &gt;</type>
      <name>NL_SplineCoefsListHost</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a4523fa30c61bea7a8089ba5aedb593e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::device_vector&lt; CudaReal * &gt;</type>
      <name>NL_SplineCoefsListGPU</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a65408e3fd2a2a439ef126bbe5ff1c5f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::host_vector&lt; NLjobGPU&lt; CudaReal &gt; &gt;</type>
      <name>NL_JobListHost</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a983c9afc3af61999eeff61d0bbc18971</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::device_vector&lt; NLjobGPU&lt; CudaReal &gt; &gt;</type>
      <name>NL_JobListGPU</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>ae51e3229c67f59f6db7ee512f4d70282</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::host_vector&lt; int &gt;</type>
      <name>NL_NumCoefsHost</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>ae3316011fd81f96e934963b4aa55a3d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::host_vector&lt; int &gt;</type>
      <name>NL_NumQuadPointsHost</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a1b44cf3790184e1e1486f0e71e149665</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::device_vector&lt; int &gt;</type>
      <name>NL_NumCoefsGPU</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>ad8388926fbeaf3d89e252f2e4f4b9a80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::device_vector&lt; int &gt;</type>
      <name>NL_NumQuadPointsGPU</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a2a1d5fca05a40623cbb665917860e90e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::host_vector&lt; CudaReal &gt;</type>
      <name>NL_rMaxHost</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a05c3ea0b77dce3d5504704e79049e699</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::host_vector&lt; CudaReal &gt;</type>
      <name>NL_QuadPointsHost</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a9cea16c77ac243a2afe2585b077a4008</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::host_vector&lt; CudaReal &gt;</type>
      <name>NL_RatiosHost</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a36addf3444c37406715e5f96313d5a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::device_vector&lt; CudaReal &gt;</type>
      <name>NL_rMaxGPU</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a115cfc2decec3a0fba1d44f679a2c1a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::device_vector&lt; CudaReal &gt;</type>
      <name>NL_QuadPointsGPU</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a70bedd242db804bd7b32dabe934a0924</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::device_vector&lt; CudaReal &gt;</type>
      <name>NL_RatiosGPU</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>ab2e70435bd138b7f698e24d44f74f6ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>N</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a7722c8ecbb62d99aee7ce68b1752f337</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ParticleSet &amp;</type>
      <name>CenterRef</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab2185ecb80d978d74b01ab1450e115fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a53956c224bd49abff541a1a7c2ad305d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>curVal</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a9d968af9e056fb5b523c54fb2b46b562</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>curLap</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af231fbc54bac0d9508402e1a9ab6e445</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PosType</type>
      <name>curGrad</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a1f7818b1f57b3d6585ac950fecec6d07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleAttrib&lt; RealType &gt;</type>
      <name>U</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5b43bd96312d140cb8feaead0dcf7ded</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleAttrib&lt; RealType &gt;</type>
      <name>d2U</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae2a389d37b3a24fd59adba99921fd768</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleAttrib&lt; PosType &gt;</type>
      <name>dU</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a59f58fa10257e6758df81fdf1df34017</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType *</type>
      <name>FirstAddressOfdU</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a77538c1503ee95a4637198725fe78fb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType *</type>
      <name>LastAddressOfdU</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa28d1447dcf13740b471c860cca9db18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; BsplineFunctor&lt; OrbitalBase::RealType &gt; * &gt;</type>
      <name>Fs</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a9d69f560dc6e512b3145ad296273f4e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; BsplineFunctor&lt; OrbitalBase::RealType &gt; * &gt;</type>
      <name>Funique</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aab209055759a41d30f02dff8794b1c4b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::OneBodySpinJastrowOrbital</name>
    <filename>a00434.html</filename>
    <templarg>FT</templarg>
    <base>qmcplusplus::OrbitalBase</base>
    <member kind="typedef">
      <type>FT</type>
      <name>FuncType</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>a617b482486e44becbde6ea4cf2c96f16</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneBodySpinJastrowOrbital</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>a568fe7a8104f5814b192bbe5be94e9ad</anchor>
      <arglist>(const ParticleSet &amp;centers, ParticleSet &amp;els)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OneBodySpinJastrowOrbital</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>ab59d3713af32c043c5f03f1df4ee7727</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFunc</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>a122dee56593d0e246af6feb21906dcdc</anchor>
      <arglist>(int source_g, FT *afunc, int target_g=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportStatus</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>a0a144256f92f2fa9e13e840bc30baef7</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>aee6c98df74fd951c23aedb0d38625d4e</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>a17a690a835b951b7cb5ec17d890a1e2b</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>a5e4a7bd7e23a6beab0d8bc131be6ffc4</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_ratios</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>a0afd740894bec6ecb30956568b7deeeb</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; ValueType &gt; &amp;ratios)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>ad4ac6ecacd80d95941026660c9799fd0</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>GradType</type>
      <name>evalGrad</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>a178607284b7ab1e4c389fce8e0c80de3</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>GradType</type>
      <name>evalGradSource</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>ae22540bdd1acd95e3cbbc46f5cc66359</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet &amp;source, int isrc)</arglist>
    </member>
    <member kind="function">
      <type>GradType</type>
      <name>evalGradSource</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>a26cffe0125748b9c12b3b37484872f04</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet &amp;source, int isrc, TinyVector&lt; ParticleSet::ParticleGradient_t, OHMMS_DIM &gt; &amp;grad_grad, TinyVector&lt; ParticleSet::ParticleLaplacian_t, OHMMS_DIM &gt; &amp;lapl_grad)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratioGrad</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>af21351a5f07bfcec09d2f2c85c24ffee</anchor>
      <arglist>(ParticleSet &amp;P, int iat, GradType &amp;grad_iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>logRatio</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>af6fa7f27fa33e00e9097169c82dff776</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>a4fad6e178271bda6f6e70a5965041472</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>af79a1f1637e80a729043600a7656054d</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>aeba37f5a7f9e1c209be41e1f8c2d316d</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateLogAndStore</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>af2729bf726a29202c501a093cec75761</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>registerData</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>a6c52a19e935c4f5e9bc363f535a1eb58</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>updateBuffer</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>a5c8b7a72afdb083caddc5e57640b4549</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf, bool fromscratch=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>a5261ed49b5195980c91c0024b860fdb2</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>a058a5a1e24105137f5509a585419d0ef</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>OrbitalBasePtr</type>
      <name>makeClone</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>ab68f5027a5eee70c7e4e130cfa9aab1b</anchor>
      <arglist>(ParticleSet &amp;tqp) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFrom</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>af1a7c966102d2128341c24cf920adc49</anchor>
      <arglist>(const OrbitalBase &amp;old)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>Spin</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>a480deac19030a3a2a6c835c6f9d925d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const ParticleSet &amp;</type>
      <name>CenterRef</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>ab2185ecb80d978d74b01ab1450e115fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>a53956c224bd49abff541a1a7c2ad305d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>curVal</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>a9d968af9e056fb5b523c54fb2b46b562</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>curLap</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>af231fbc54bac0d9508402e1a9ab6e445</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PosType</type>
      <name>curGrad</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>a1f7818b1f57b3d6585ac950fecec6d07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleAttrib&lt; RealType &gt;</type>
      <name>U</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>a5b43bd96312d140cb8feaead0dcf7ded</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleAttrib&lt; RealType &gt;</type>
      <name>d2U</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>ae2a389d37b3a24fd59adba99921fd768</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleAttrib&lt; PosType &gt;</type>
      <name>dU</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>a59f58fa10257e6758df81fdf1df34017</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType *</type>
      <name>FirstAddressOfdU</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>a77538c1503ee95a4637198725fe78fb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType *</type>
      <name>LastAddressOfdU</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>ae1bccd34c7362770ee412f580dcd5b9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; FT * &gt;</type>
      <name>F</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>a995921ea57681acd34f206382702307a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; int &gt;</type>
      <name>Fmask</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>a03ce17081fd917c20a20b1026bf04ff2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; int &gt;</type>
      <name>s_offset</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>ad1526b9ca521470481e542a44d88bae6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; int &gt;</type>
      <name>t_offset</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>ab3882ab0ae641522fe13319b3c5cdb9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::OpenGaussianSlaterFunctor</name>
    <filename>a00445.html</filename>
    <templarg>T</templarg>
    <base>OptimizableFunctorBase</base>
    <member kind="typedef">
      <type>OptimizableFunctorBase::real_type</type>
      <name>real_type</name>
      <anchorfile>a00445.html</anchorfile>
      <anchor>aa7c8aef29f0560ea0a426cb28d91e2e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OpenGaussianSlaterFunctor</name>
      <anchorfile>a00445.html</anchorfile>
      <anchor>a538a9605c4e745181ecea5910967a38a</anchor>
      <arglist>(real_type a=1.0, real_type b=1.0)</arglist>
    </member>
    <member kind="function">
      <type>OptimizableFunctorBase *</type>
      <name>makeClone</name>
      <anchorfile>a00445.html</anchorfile>
      <anchor>a4747acd34f8d2daa0656125f1290e4d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00445.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00445.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00445.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00445.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00445.html</anchorfile>
      <anchor>a4860196a527546949f6366d22425c009</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00445.html</anchorfile>
      <anchor>ac059e0873401047f0ec172926e036249</anchor>
      <arglist>(real_type r, real_type &amp;dudr, real_type &amp;d2udr2, real_type &amp;d3udr3)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00445.html</anchorfile>
      <anchor>a6d4da0f3cb2c37f2105f35aba1c3a813</anchor>
      <arglist>(real_type r, real_type &amp;dudr, real_type &amp;d2udr2)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>a00445.html</anchorfile>
      <anchor>a6a91c8094ddd49aa8a2da9df6b439164</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>a00445.html</anchorfile>
      <anchor>aff351ffb66160b6458d6057fa6bc2a5f</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>evaluateDerivatives</name>
      <anchorfile>a00445.html</anchorfile>
      <anchor>ad6d1fb2ec9788f67d5c09d67421efc8d</anchor>
      <arglist>(real_type r, vector&lt; TinyVector&lt; real_type, 3 &gt; &gt; &amp;derivs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00445.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>A</name>
      <anchorfile>a00445.html</anchorfile>
      <anchor>a2afa47a65c2e9f37e310b39710c74296</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>B</name>
      <anchorfile>a00445.html</anchorfile>
      <anchor>a3252942e094b1e19e493677ef44d2a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>ID_A</name>
      <anchorfile>a00445.html</anchorfile>
      <anchor>aeb8263f9885b65a7595c461984f24c1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>ID_B</name>
      <anchorfile>a00445.html</anchorfile>
      <anchor>a27d6dd114aa784a5805d6a80c96f9d64</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::PadeFunctor</name>
    <filename>a00452.html</filename>
    <templarg>T</templarg>
    <base>OptimizableFunctorBase</base>
    <member kind="function">
      <type></type>
      <name>PadeFunctor</name>
      <anchorfile>a00452.html</anchorfile>
      <anchor>a365c3bcf89f3538a12d8264b21d96ce5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PadeFunctor</name>
      <anchorfile>a00452.html</anchorfile>
      <anchor>a1852e50ef41a590e4d4a1c5c49d57023</anchor>
      <arglist>(real_type a, real_type b, real_type s=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PadeFunctor</name>
      <anchorfile>a00452.html</anchorfile>
      <anchor>a33f847aa838e965594bb385e65b1d0d8</anchor>
      <arglist>(real_type a, const std::string &amp;ida)</arglist>
    </member>
    <member kind="function">
      <type>OptimizableFunctorBase *</type>
      <name>makeClone</name>
      <anchorfile>a00452.html</anchorfile>
      <anchor>a4747acd34f8d2daa0656125f1290e4d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00452.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00452.html</anchorfile>
      <anchor>a4860196a527546949f6366d22425c009</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00452.html</anchorfile>
      <anchor>a6d4da0f3cb2c37f2105f35aba1c3a813</anchor>
      <arglist>(real_type r, real_type &amp;dudr, real_type &amp;d2udr2)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00452.html</anchorfile>
      <anchor>ac059e0873401047f0ec172926e036249</anchor>
      <arglist>(real_type r, real_type &amp;dudr, real_type &amp;d2udr2, real_type &amp;d3udr3)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>a00452.html</anchorfile>
      <anchor>a6a91c8094ddd49aa8a2da9df6b439164</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>a00452.html</anchorfile>
      <anchor>aff351ffb66160b6458d6057fa6bc2a5f</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>evaluateDerivatives</name>
      <anchorfile>a00452.html</anchorfile>
      <anchor>ab4d87cd79e7e0834baba0bc636c244cd</anchor>
      <arglist>(real_type r, std::vector&lt; TinyVector&lt; real_type, 3 &gt; &gt; &amp;derivs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00452.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00452.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00452.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00452.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Opt_A</name>
      <anchorfile>a00452.html</anchorfile>
      <anchor>ae93c68be1ca65aed38f18f5e906922da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Opt_B</name>
      <anchorfile>a00452.html</anchorfile>
      <anchor>a33541881e8fcb970e66fe59ef63dadd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>A</name>
      <anchorfile>a00452.html</anchorfile>
      <anchor>a2afa47a65c2e9f37e310b39710c74296</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>B0</name>
      <anchorfile>a00452.html</anchorfile>
      <anchor>a06df497360346f4494f9ad56ce1d3699</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Scale</name>
      <anchorfile>a00452.html</anchorfile>
      <anchor>acfa009b2ec9bc8c54240bf84820a42e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>B</name>
      <anchorfile>a00452.html</anchorfile>
      <anchor>a3252942e094b1e19e493677ef44d2a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>AB</name>
      <anchorfile>a00452.html</anchorfile>
      <anchor>af162c011b92ffdf9f27a2c8068bd47e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>B2</name>
      <anchorfile>a00452.html</anchorfile>
      <anchor>a6ec28e6ba3b306877ebf9548d3f33b0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>AoverB</name>
      <anchorfile>a00452.html</anchorfile>
      <anchor>ad5e352589436444aecdb4a61562f96c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>ID_A</name>
      <anchorfile>a00452.html</anchorfile>
      <anchor>a04da67323f2d1fcfdb06184c1027f0a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>ID_B</name>
      <anchorfile>a00452.html</anchorfile>
      <anchor>a8c25a90405928d9d1760fee477b89596</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::Pade2ndOrderFunctor</name>
    <filename>a00451.html</filename>
    <templarg></templarg>
    <base>OptimizableFunctorBase</base>
    <member kind="function">
      <type></type>
      <name>Pade2ndOrderFunctor</name>
      <anchorfile>a00451.html</anchorfile>
      <anchor>a40f72ec44b2a1b8d1141014cece77fca</anchor>
      <arglist>(real_type a=1.0, real_type b=1.0, real_type c=1.0)</arglist>
    </member>
    <member kind="function">
      <type>OptimizableFunctorBase *</type>
      <name>makeClone</name>
      <anchorfile>a00451.html</anchorfile>
      <anchor>a4747acd34f8d2daa0656125f1290e4d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00451.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00451.html</anchorfile>
      <anchor>a4860196a527546949f6366d22425c009</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00451.html</anchorfile>
      <anchor>a6d4da0f3cb2c37f2105f35aba1c3a813</anchor>
      <arglist>(real_type r, real_type &amp;dudr, real_type &amp;d2udr2)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00451.html</anchorfile>
      <anchor>ac059e0873401047f0ec172926e036249</anchor>
      <arglist>(real_type r, real_type &amp;dudr, real_type &amp;d2udr2, real_type &amp;d3udr3)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>a00451.html</anchorfile>
      <anchor>a6a91c8094ddd49aa8a2da9df6b439164</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>a00451.html</anchorfile>
      <anchor>aff351ffb66160b6458d6057fa6bc2a5f</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>evaluateDerivatives</name>
      <anchorfile>a00451.html</anchorfile>
      <anchor>ab4d87cd79e7e0834baba0bc636c244cd</anchor>
      <arglist>(real_type r, std::vector&lt; TinyVector&lt; real_type, 3 &gt; &gt; &amp;derivs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00451.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00451.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00451.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00451.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>A</name>
      <anchorfile>a00451.html</anchorfile>
      <anchor>a2afa47a65c2e9f37e310b39710c74296</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>B</name>
      <anchorfile>a00451.html</anchorfile>
      <anchor>a3252942e094b1e19e493677ef44d2a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>C</name>
      <anchorfile>a00451.html</anchorfile>
      <anchor>ac198257702bb0ff4b30d8118d4784586</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>C2</name>
      <anchorfile>a00451.html</anchorfile>
      <anchor>aefb8e260145f33748d0127d6a19fda02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>ID_A</name>
      <anchorfile>a00451.html</anchorfile>
      <anchor>a04da67323f2d1fcfdb06184c1027f0a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>ID_B</name>
      <anchorfile>a00451.html</anchorfile>
      <anchor>a8c25a90405928d9d1760fee477b89596</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>ID_C</name>
      <anchorfile>a00451.html</anchorfile>
      <anchor>ad6e9f899fac7baf147d89668155311e7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::PadeTwo2ndOrderFunctor</name>
    <filename>a00455.html</filename>
    <templarg></templarg>
    <base>OptimizableFunctorBase</base>
    <member kind="function">
      <type></type>
      <name>PadeTwo2ndOrderFunctor</name>
      <anchorfile>a00455.html</anchorfile>
      <anchor>aff1ec7ea661128e5ae911d234e4ac8a9</anchor>
      <arglist>(real_type a=1.0, real_type b=1.0, real_type c=1.0, real_type d=1.0)</arglist>
    </member>
    <member kind="function">
      <type>OptimizableFunctorBase *</type>
      <name>makeClone</name>
      <anchorfile>a00455.html</anchorfile>
      <anchor>a4747acd34f8d2daa0656125f1290e4d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00455.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00455.html</anchorfile>
      <anchor>a4860196a527546949f6366d22425c009</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00455.html</anchorfile>
      <anchor>a6d4da0f3cb2c37f2105f35aba1c3a813</anchor>
      <arglist>(real_type r, real_type &amp;dudr, real_type &amp;d2udr2)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00455.html</anchorfile>
      <anchor>ac059e0873401047f0ec172926e036249</anchor>
      <arglist>(real_type r, real_type &amp;dudr, real_type &amp;d2udr2, real_type &amp;d3udr3)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>a00455.html</anchorfile>
      <anchor>a6a91c8094ddd49aa8a2da9df6b439164</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>a00455.html</anchorfile>
      <anchor>aff351ffb66160b6458d6057fa6bc2a5f</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>evaluateDerivatives</name>
      <anchorfile>a00455.html</anchorfile>
      <anchor>ab4d87cd79e7e0834baba0bc636c244cd</anchor>
      <arglist>(real_type r, std::vector&lt; TinyVector&lt; real_type, 3 &gt; &gt; &amp;derivs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00455.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00455.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00455.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00455.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>A</name>
      <anchorfile>a00455.html</anchorfile>
      <anchor>a2afa47a65c2e9f37e310b39710c74296</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>B</name>
      <anchorfile>a00455.html</anchorfile>
      <anchor>a3252942e094b1e19e493677ef44d2a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>C</name>
      <anchorfile>a00455.html</anchorfile>
      <anchor>ac198257702bb0ff4b30d8118d4784586</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>D</name>
      <anchorfile>a00455.html</anchorfile>
      <anchor>a149624d2feef13cada9c635b83f5a974</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>ID_A</name>
      <anchorfile>a00455.html</anchorfile>
      <anchor>a04da67323f2d1fcfdb06184c1027f0a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>ID_B</name>
      <anchorfile>a00455.html</anchorfile>
      <anchor>a8c25a90405928d9d1760fee477b89596</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>ID_C</name>
      <anchorfile>a00455.html</anchorfile>
      <anchor>ad6e9f899fac7baf147d89668155311e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>ID_D</name>
      <anchorfile>a00455.html</anchorfile>
      <anchor>a8d3ff7cc7fc9e821763463874f065f2a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ScaledPadeFunctor</name>
    <filename>a00546.html</filename>
    <templarg></templarg>
    <base>OptimizableFunctorBase</base>
    <member kind="function">
      <type></type>
      <name>ScaledPadeFunctor</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ad8dd4d5816191e32199f00b2067ae6fa</anchor>
      <arglist>(real_type a=1.0, real_type b=1.0, real_type c=1.0)</arglist>
    </member>
    <member kind="function">
      <type>OptimizableFunctorBase *</type>
      <name>makeClone</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a4747acd34f8d2daa0656125f1290e4d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a4860196a527546949f6366d22425c009</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a6d4da0f3cb2c37f2105f35aba1c3a813</anchor>
      <arglist>(real_type r, real_type &amp;dudr, real_type &amp;d2udr2)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a8335697bc87fcf13493bd28d2a61f22c</anchor>
      <arglist>(real_type r, real_type &amp;dudr, real_type &amp;d2udr2, real_type d3udr3)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a6a91c8094ddd49aa8a2da9df6b439164</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aff351ffb66160b6458d6057fa6bc2a5f</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>A</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a2afa47a65c2e9f37e310b39710c74296</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>B</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a3252942e094b1e19e493677ef44d2a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>C</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ac198257702bb0ff4b30d8118d4784586</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>OneOverC</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a2df596e2b58c0f7016bc49f97b372381</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>B2</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a6ec28e6ba3b306877ebf9548d3f33b0f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::PadeJastrowBuilder</name>
    <filename>a00453.html</filename>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>PadeJastrowBuilder</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>abfbf049363d8d5c6b288adb6ef4ecb67</anchor>
      <arglist>(ParticleSet &amp;target, TrialWaveFunction &amp;psi, PtclPoolType &amp;psets)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>PtclPoolType &amp;</type>
      <name>ptclPool</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a4fc7c3d5848a9235a0cf8803ff1f9fbf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::PolarizedJastrow</name>
    <filename>a00469.html</filename>
    <base>qmcplusplus::OrbitalBase</base>
    <member kind="function">
      <type></type>
      <name>PolarizedJastrow</name>
      <anchorfile>a00469.html</anchorfile>
      <anchor>aee47dbc388b87b0e664f5fc5863b3705</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PolarizedJastrow</name>
      <anchorfile>a00469.html</anchorfile>
      <anchor>ac41795f89b0dd3479e9d3214b3ece4ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00469.html</anchorfile>
      <anchor>a549838bc3e720cc4736317d64fdab0c8</anchor>
      <arglist>(OptimizableSetType &amp;optVariables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00469.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>a00469.html</anchorfile>
      <anchor>aa534784cf3cb50fb82a16845ff21a2f6</anchor>
      <arglist>(xmlNodePtr cur, VarRegistry&lt; RealType &gt; &amp;vlist)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluateLog</name>
      <anchorfile>a00469.html</anchorfile>
      <anchor>a39920a87acab8d83f83d29733aaabd35</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>a00469.html</anchorfile>
      <anchor>a17a690a835b951b7cb5ec17d890a1e2b</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00469.html</anchorfile>
      <anchor>aa6a055fab7fdd044a7af0f500cccbe86</anchor>
      <arglist>(WalkerSetRef &amp;W, ValueVectorType &amp;psi, WalkerSetRef::WalkerGradient_t &amp;G, WalkerSetRef::WalkerLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00469.html</anchorfile>
      <anchor>ad4ac6ecacd80d95941026660c9799fd0</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>logRatio</name>
      <anchorfile>a00469.html</anchorfile>
      <anchor>af6fa7f27fa33e00e9097169c82dff776</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>a00469.html</anchorfile>
      <anchor>a4fad6e178271bda6f6e70a5965041472</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>a00469.html</anchorfile>
      <anchor>af79a1f1637e80a729043600a7656054d</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00469.html</anchorfile>
      <anchor>a5e4a7bd7e23a6beab0d8bc131be6ffc4</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00469.html</anchorfile>
      <anchor>aeba37f5a7f9e1c209be41e1f8c2d316d</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>a00469.html</anchorfile>
      <anchor>abe1685352426b81dad951939f973a2ff</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>registerData</name>
      <anchorfile>a00469.html</anchorfile>
      <anchor>a3e4ada162ce7a9b5fdeced0370ef35b6</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>updateBuffer</name>
      <anchorfile>a00469.html</anchorfile>
      <anchor>ae2ffa3590490396557c0ad8ab6f24e68</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00469.html</anchorfile>
      <anchor>a5261ed49b5195980c91c0024b860fdb2</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="variable">
      <type>ParameterSet</type>
      <name>m_param</name>
      <anchorfile>a00469.html</anchorfile>
      <anchor>ac32cb2af3a464bc66f40d4e335d87f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>alpha</name>
      <anchorfile>a00469.html</anchorfile>
      <anchor>ad34301655a69cd22df0ca6f98660c80a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::PolyConstraints</name>
    <filename>a00470.html</filename>
    <base>qmcplusplus::OrbitalConstraintsBase</base>
    <member kind="typedef">
      <type>PolyFunctor&lt; RealType &gt;</type>
      <name>BasisGroupType</name>
      <anchorfile>a00470.html</anchorfile>
      <anchor>a36d4fb1638f1c6b3674fa367d7d4135f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>map&lt; string, BasisGroupType * &gt;</type>
      <name>BGContainerType</name>
      <anchorfile>a00470.html</anchorfile>
      <anchor>a164290671cacb1cf91a12f1ac18579ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MULTIPLE</name>
      <anchorfile>a00449.html</anchorfile>
      <anchor>afa231099d07583c3ed0981e0bb665f55aaf8c96015cff6125fed1860ea4e4e719</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LONGRANGE</name>
      <anchorfile>a00449.html</anchorfile>
      <anchor>afa231099d07583c3ed0981e0bb665f55aa5a9a66c2fb533d66f2ae52795698d52</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ONEBODY</name>
      <anchorfile>a00449.html</anchorfile>
      <anchor>afa231099d07583c3ed0981e0bb665f55a7ad5a78d20e86d8ca417e45a507d95cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TWOBODY</name>
      <anchorfile>a00449.html</anchorfile>
      <anchor>afa231099d07583c3ed0981e0bb665f55a2d0c340d1748bc4d6502fbd7f4695150</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>THREEBODY</name>
      <anchorfile>a00449.html</anchorfile>
      <anchor>afa231099d07583c3ed0981e0bb665f55a47450c21a6a94cd26f3c43b8681f7711</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FOURBODY</name>
      <anchorfile>a00449.html</anchorfile>
      <anchor>afa231099d07583c3ed0981e0bb665f55a2e3f71ee1cc4d42aeb81e5b08693a517</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimGridFactory::GridType</type>
      <name>RadialGridType</name>
      <anchorfile>a00449.html</anchorfile>
      <anchor>a9939158709ff0f36016efedff375b39e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolyConstraints</name>
      <anchorfile>a00470.html</anchorfile>
      <anchor>afc43d5f6d4ff2a678da5091343587411</anchor>
      <arglist>(ParticleSet &amp;p, TrialWaveFunction &amp;psi, bool spinInd=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PolyConstraints</name>
      <anchorfile>a00470.html</anchorfile>
      <anchor>ae3f045c99289928e06db68353dbd8414</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOptimizables</name>
      <anchorfile>a00470.html</anchorfile>
      <anchor>ae91504e3587b00403eab6cd3da071d8d</anchor>
      <arglist>(OptimizableSetType &amp;vlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00470.html</anchorfile>
      <anchor>a549838bc3e720cc4736317d64fdab0c8</anchor>
      <arglist>(OptimizableSetType &amp;optVariables)</arglist>
    </member>
    <member kind="function">
      <type>OrbitalBase *</type>
      <name>createTwoBody</name>
      <anchorfile>a00470.html</anchorfile>
      <anchor>ac32e09fe58ab068bb2aef468a2108f96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OrbitalBase *</type>
      <name>createOneBody</name>
      <anchorfile>a00470.html</anchorfile>
      <anchor>abbd12b97b4304c853ee75a5575ea98a0</anchor>
      <arglist>(ParticleSet &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addExtra2ComboOrbital</name>
      <anchorfile>a00470.html</anchorfile>
      <anchor>a01c9657c809bbc4ad4edac741c31109e</anchor>
      <arglist>(ComboOrbital *jcombo)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00470.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSingleBasisPerSpecies</name>
      <anchorfile>a00470.html</anchorfile>
      <anchor>a403a2a9d87c8bc697db7f3075a150f41</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createBasisGroup</name>
      <anchorfile>a00470.html</anchorfile>
      <anchor>ab451e1d420895573f07971dcffc36ce6</anchor>
      <arglist>(xmlNodePtr cur, const string &amp;elementType, RealType rcut)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrbitalConstraintsBase</name>
      <anchorfile>a00449.html</anchorfile>
      <anchor>a1f8c2e9ffe8f1f27c9a39074cc6e1ae8</anchor>
      <arglist>(ParticleSet &amp;p, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OrbitalConstraintsBase</name>
      <anchorfile>a00449.html</anchorfile>
      <anchor>a3cc521d7c1fa2fc2429785599e86cfec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resetParameters</name>
      <anchorfile>a00449.html</anchorfile>
      <anchor>ac9da3e584620ff2f8c115c1adb43e4e7</anchor>
      <arglist>(const opt_variables_type &amp;optVaraibles)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addExtra2ProductOrbital</name>
      <anchorfile>a00449.html</anchorfile>
      <anchor>a53f97094835d9b98edf9a82bbfea0e67</anchor>
      <arglist>(ProductOrbital *j)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getParam</name>
      <anchorfile>a00449.html</anchorfile>
      <anchor>a0b82a2f56e251de5fd0573a1ae5ac42f</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getVariables</name>
      <anchorfile>a00449.html</anchorfile>
      <anchor>a6ac0c98f7f2ca58edaa078ae926c116a</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadialGrid</name>
      <anchorfile>a00449.html</anchorfile>
      <anchor>a8644771d6139f12b9bf6394ac8562059</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>IgnoreSpin</name>
      <anchorfile>a00470.html</anchorfile>
      <anchor>adb1dcd295910065c3a481b810308383e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BGContainerType</type>
      <name>BasisGroups</name>
      <anchorfile>a00470.html</anchorfile>
      <anchor>aa174a02f47953c5d0ef43763e395e2d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bitset&lt; 8 &gt;</type>
      <name>JComponent</name>
      <anchorfile>a00449.html</anchorfile>
      <anchor>a35b9567fda4557f0bcaab7d1dffd3d4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RadialGridType *</type>
      <name>myGrid</name>
      <anchorfile>a00449.html</anchorfile>
      <anchor>ab012def59cf9566da6a8061b2e59beb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>PrintTables</name>
      <anchorfile>a00449.html</anchorfile>
      <anchor>ae239acc929ef2281ac94e37ca97ec6e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Rcut</name>
      <anchorfile>a00449.html</anchorfile>
      <anchor>a8120399ca4124221ed49dfa2f439359b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; std::string, std::pair&lt; std::string, RealType &gt; &gt;</type>
      <name>inVars</name>
      <anchorfile>a00449.html</anchorfile>
      <anchor>a2a3bdbbbf78d0f44936a711851a046ca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::PolyFunctor</name>
    <filename>a00471.html</filename>
    <templarg></templarg>
    <base>OptimizableFunctorBase&lt; T &gt;</base>
    <member kind="typedef">
      <type>OptimizableFunctorBase&lt; T &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a00471.html</anchorfile>
      <anchor>a4d22e4b274d162a5ef83c2eefa76382e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OptimizableFunctorBase&lt; T &gt;::OptimizableSetType</type>
      <name>OptimizableSetType</name>
      <anchorfile>a00471.html</anchorfile>
      <anchor>a40f0737eeb4322c46b13fefd63e8ebee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolyFunctor</name>
      <anchorfile>a00471.html</anchorfile>
      <anchor>a31cd29785d8e5e5d8c48c5a38ac8f03f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolyFunctor</name>
      <anchorfile>a00471.html</anchorfile>
      <anchor>a97e59b62fa37d9e9b8456337c2d7b4a1</anchor>
      <arglist>(real_type rc, int k)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00471.html</anchorfile>
      <anchor>a4860196a527546949f6366d22425c009</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00471.html</anchorfile>
      <anchor>a6d4da0f3cb2c37f2105f35aba1c3a813</anchor>
      <arglist>(real_type r, real_type &amp;dudr, real_type &amp;d2udr2)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>a00471.html</anchorfile>
      <anchor>a6a91c8094ddd49aa8a2da9df6b439164</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>a00471.html</anchorfile>
      <anchor>aff351ffb66160b6458d6057fa6bc2a5f</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00471.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOptimizables</name>
      <anchorfile>a00471.html</anchorfile>
      <anchor>ae91504e3587b00403eab6cd3da071d8d</anchor>
      <arglist>(OptimizableSetType &amp;vlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00471.html</anchorfile>
      <anchor>a549838bc3e720cc4736317d64fdab0c8</anchor>
      <arglist>(OptimizableSetType &amp;optVariables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setL</name>
      <anchorfile>a00471.html</anchorfile>
      <anchor>acb5b1840e2dadc6b3b668ffeadf56f41</anchor>
      <arglist>(real_type rc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetInternals</name>
      <anchorfile>a00471.html</anchorfile>
      <anchor>ab7663a660031b10114a98f2f074e1996</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00471.html</anchorfile>
      <anchor>af032727c33edb8a895a0edf9b6988a60</anchor>
      <arglist>(real_type c, int i)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>K</name>
      <anchorfile>a00471.html</anchorfile>
      <anchor>a2689c4b3931025b79053532a5f1b0a85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>N</name>
      <anchorfile>a00471.html</anchorfile>
      <anchor>a7722c8ecbb62d99aee7ce68b1752f337</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>L</name>
      <anchorfile>a00471.html</anchorfile>
      <anchor>a4df6d7cf4cfb207abafefb7efe788f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>OneOverL</name>
      <anchorfile>a00471.html</anchorfile>
      <anchor>a9d8b8ad2dfbe581dfc474039fbbf9001</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>KOverL</name>
      <anchorfile>a00471.html</anchorfile>
      <anchor>a91971bed2676f63c5e4fdc87fa0d2966</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>KKOverL2</name>
      <anchorfile>a00471.html</anchorfile>
      <anchor>acd05bff9313eb930496229b801a8208e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; T &gt;</type>
      <name>C</name>
      <anchorfile>a00471.html</anchorfile>
      <anchor>aa3287c77f9f72fa7b97d62d893096aeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; T &gt;</type>
      <name>dC</name>
      <anchorfile>a00471.html</anchorfile>
      <anchor>a87a172ae890b3efdc49e528c567b764e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; T &gt;</type>
      <name>d2C</name>
      <anchorfile>a00471.html</anchorfile>
      <anchor>ae98aaca42f7f6d7f14b6f76fb7627af0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; string &gt;</type>
      <name>ID_C</name>
      <anchorfile>a00471.html</anchorfile>
      <anchor>a36107e30ce84c0a012f36e305d7db9ee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::PolynomialFunctor3D</name>
    <filename>a00473.html</filename>
    <base>OptimizableFunctorBase</base>
    <member kind="typedef">
      <type>real_type</type>
      <name>value_type</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>a80349dc942856ab617148301967b7ff0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolynomialFunctor3D</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>a9d66be589c7d63f84cf00044d65e2243</anchor>
      <arglist>(real_type ee_cusp=0.0, real_type eI_cusp=0.0)</arglist>
    </member>
    <member kind="function">
      <type>OptimizableFunctorBase *</type>
      <name>makeClone</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>a4747acd34f8d2daa0656125f1290e4d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>a79ec5e2cc906feb8dc4a15d94e68126d</anchor>
      <arglist>(int neI, int nee)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_gamma</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>a29cbedd1be0a74850ce71fe2221a097a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>a6b1a3d7adfc53fac72e6c934aa57994c</anchor>
      <arglist>(real_type r_12, real_type r_1I, real_type r_2I)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>a11d1930c6dfbd9d4011b1c0657eb3030</anchor>
      <arglist>(real_type r_12, real_type r_1I, real_type r_2I, TinyVector&lt; real_type, 3 &gt; &amp;grad, Tensor&lt; real_type, 3 &gt; &amp;hess)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>ae01d66ca3e13d63038d81455d18b3182</anchor>
      <arglist>(real_type r_12, real_type r_1I, real_type r_2I, TinyVector&lt; real_type, 3 &gt; &amp;grad, Tensor&lt; real_type, 3 &gt; &amp;hess, TinyVector&lt; Tensor&lt; real_type, 3 &gt;, 3 &gt; &amp;d3)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>af08f1f70ecd1cddcf7d274cbcad42f40</anchor>
      <arglist>(real_type r, real_type rinv)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>evaluateDerivativesFD</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>a76dde98d28fe7b475d8bf556f7c7ae51</anchor>
      <arglist>(real_type r_12, real_type r_1I, real_type r_2I, vector&lt; double &gt; &amp;d_vals, vector&lt; TinyVector&lt; real_type, 3 &gt; &gt; &amp;d_grads, vector&lt; Tensor&lt; real_type, 3 &gt; &gt; &amp;d_hess)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>evaluateDerivatives</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>a613c72aebb8b6508a305ffdbfcc0c25f</anchor>
      <arglist>(real_type r_12, real_type r_1I, real_type r_2I, vector&lt; double &gt; &amp;d_vals, vector&lt; TinyVector&lt; real_type, 3 &gt; &gt; &amp;d_grads, vector&lt; Tensor&lt; real_type, 3 &gt; &gt; &amp;d_hess)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>a6a91c8094ddd49aa8a2da9df6b439164</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>aff351ffb66160b6458d6057fa6bc2a5f</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>a388f572c62279f839ee138a9afbdeeb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>aa0c53387f47a46bf4c549b8f3bc6a941</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumParameters</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>ae8f9746a00da6bf0d4e4737bf5702d6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>N_eI</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>a9e5e8e0891fd82e5bd67c486e7a327ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>N_ee</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>a7c08d9272f0edb0f551713df26ea1274</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; real_type, 3 &gt;</type>
      <name>gamma</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>a757540da7b8f05ff3a534afb19cbbf2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; real_type, 3 &gt;</type>
      <name>dval_dgamma</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>a5d83733624c72a212817d6402a350f6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; TinyVector&lt; real_type, 3 &gt;, 3 &gt;</type>
      <name>dgrad_dgamma</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>a360d7d68ff02ace290c23e52bbd80498</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; Tensor&lt; real_type, 3 &gt;, 3 &gt;</type>
      <name>dhess_dgamma</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>a36bc12d3f74073d1be8ba2757ac9c644</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>GammaPerm</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>ab55c6b559bafe8b9e2374ee6463db987</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; int, 3 &gt;</type>
      <name>index</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>a81a93bccee63be15821d2ce66fe45a3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; bool &gt;</type>
      <name>IndepVar</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>ab7ecf0ed38144fe3e994223f1fcf4746</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; real_type &gt;</type>
      <name>GammaVec</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>a02bd121349cde39d946e9855d055646b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; real_type &gt;</type>
      <name>dval_Vec</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>ad36debe681711b1c24efbb3414d48111</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; TinyVector&lt; real_type, 3 &gt; &gt;</type>
      <name>dgrad_Vec</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>a15f4abfb45983bb286a98f470d888127</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; Tensor&lt; real_type, 3 &gt; &gt;</type>
      <name>dhess_Vec</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>a8465698e824da5ead1faac042a0f0a1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumConstraints</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>adf5b49eafe36702fe73959c4c676167a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumGamma</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>a1221d65597bd7601790c90680e2187c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; real_type &gt;</type>
      <name>ConstraintMatrix</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>a2dfce3bdce00a7132140301ce159dc1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; real_type &gt;</type>
      <name>Parameters</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>a833f350789d91a7009bd5bfed436072d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; real_type &gt;</type>
      <name>d_valsFD</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>a1324a7c65f6b93465442196f970fdb2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; TinyVector&lt; real_type, 3 &gt; &gt;</type>
      <name>d_gradsFD</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>a6c19a9808807a32e6cd1d043adc96cca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Tensor&lt; real_type, 3 &gt; &gt;</type>
      <name>d_hessFD</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>a9b508b0c735a3b332a1e77093809a9ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>ParameterNames</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>ac741043bb199ff71a842b2fa7533b083</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>iSpecies</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>a28a7280299b72294e063cf3fe946b6fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>eSpecies1</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>a5cad24fa7f6c4f52a84e97ad59fdeadc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>eSpecies2</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>aa935efe2cdcf3ff5b58f67cc1b65ef90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ResetCount</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>aa101f5cc56da77ba0b4840f11cb6f723</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>scale</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>a04a018362e6a0c6eac9829f84f9d201d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>C</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>a4b7ae007b449bc3a3b6d4bc57fea3ca2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>notOpt</name>
      <anchorfile>a00473.html</anchorfile>
      <anchor>a8d71fd336c311c6b9f44f0c2c0de3519</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::RPAJastrow</name>
    <filename>a00542.html</filename>
    <base>qmcplusplus::OrbitalBase</base>
    <member kind="typedef">
      <type>LRHandlerBase</type>
      <name>HandlerType</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>ae4f424c5b27648a26f50492604342b79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CubicBspline&lt; RealType, LINEAR_1DGRID, FIRSTDERIV_CONSTRAINTS &gt;</type>
      <name>SplineEngineType</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>a3cf4ec4ff359cce2144a38eade343966</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CubicSplineSingle&lt; RealType, SplineEngineType &gt;</type>
      <name>FuncType</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>a11214d1d1ccaa922a77e48f3c82bc821</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinearGrid&lt; RealType &gt;</type>
      <name>GridType</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>a95c7d80f9182783d8971fc66413fd857</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RPAJastrow</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>aec8a20c64a9564e8a7a91b0738f5bd11</anchor>
      <arglist>(ParticleSet &amp;target, bool is_manager)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RPAJastrow</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>aa57d65e513e7be03835e3093be6cfe51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildOrbital</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>a97583ae0791ef24797e5e087b74a2d36</anchor>
      <arglist>(const string &amp;name, const string &amp;UL, const string &amp;US, const string &amp;RF, RealType R, RealType K)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeShortRange</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>a6c74bd900d245e98720f498c81003538</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeLongRange</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>a55b29c2f0f5f3ba3dba0367b81d4b2c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHandler</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>a558afb631f951ec30a73df14ebf93943</anchor>
      <arglist>(HandlerType *Handler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>ac9471334d6ff888e194a823d9f9061ae</anchor>
      <arglist>(const opt_variables_type &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>ac66948db629989be1d9335e1d48dfeb0</anchor>
      <arglist>(opt_variables_type &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportStatus</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>a0a144256f92f2fa9e13e840bc30baef7</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>a17a690a835b951b7cb5ec17d890a1e2b</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>a7847acabf6f8c03b242d26ef9803face</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>a27fc0fea767909d60eda45f7f1cc9b79</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>a9200b6c45876587a87528bb8a438cc71</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>af79a1f1637e80a729043600a7656054d</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>a4fad6e178271bda6f6e70a5965041472</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>aeba37f5a7f9e1c209be41e1f8c2d316d</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>registerData</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>a1ceeed788a1794961fd50390771b1cd7</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>updateBuffer</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>a8afd7cb1bc6a115c47a1b2ffadbd420c</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf, bool fromscratch=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>a873b86d22a6078397525e16eae04ed7c</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>a226ccbe4297a0e6667bbd89efa0525a1</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>OrbitalBase *</type>
      <name>makeClone</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>a294cae6c74a660d1fed7fbcb4382dd94</anchor>
      <arglist>(ParticleSet &amp;tqp) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IsManager</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>ab747aad6f7312f59bb477df8637005cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IgnoreSpin</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>adb1dcd295910065c3a481b810308383e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>DropLongRange</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>a30a4b3a67257ce05bc992b5513816856</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>DropShortRange</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>aaa6d172f1fbfef9615c8afccd2876aca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>Rs</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>a98c1ef08c9694a97084354e5e85bc5a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>Kc</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>a46555de4b3eba2a5c14007f217a8c7cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>Rcut</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>a8120399ca4124221ed49dfa2f439359b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>ID_Rs</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>a64e01cf739842e2cae90d2676fda50e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>rpafunc</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>a939ee4b0055ea231edde428084b6b3f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>MyName</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>ab4391b64f3b659132ca28ec00b4abe48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>HandlerType *</type>
      <name>myHandler</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>a7b4fdc238840c4280cdcc69f1675a6c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LRTwoBodyJastrow *</type>
      <name>LongRangeRPA</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>ab9738f66b5a49dad30c7321735f9e119</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OrbitalBase *</type>
      <name>ShortRangeRPA</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>aba372c64edc2573f4612db8b07f37e46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FuncType *</type>
      <name>nfunc</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>a6e6439f56756c4c3c52092c5f756ac0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GridType *</type>
      <name>myGrid</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>acc3ec2d9f5aaef0116f866501d8b483e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ShortRangePartAdapter&lt; RealType &gt; *</type>
      <name>SRA</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>a65ff7a581db229ea7ff9715f9e61685e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet &amp;</type>
      <name>targetPtcl</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>a1a952580e121ccf8f929cadf8d1e0a5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; OrbitalBase * &gt;</type>
      <name>Psi</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>aaa2eadc827fe26697c6368eb82467efe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::RPAJastrowFunctor</name>
    <filename>a00543.html</filename>
    <templarg></templarg>
    <base>OptimizableFunctorBase&lt; T &gt;</base>
    <member kind="typedef">
      <type>OptimizableFunctorBase&lt; T &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a00543.html</anchorfile>
      <anchor>a4d22e4b274d162a5ef83c2eefa76382e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OptimizableFunctorBase&lt; T &gt;::OptimizableSetType</type>
      <name>OptimizableSetType</name>
      <anchorfile>a00543.html</anchorfile>
      <anchor>a40f0737eeb4322c46b13fefd63e8ebee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RPAJastrowFunctor</name>
      <anchorfile>a00543.html</anchorfile>
      <anchor>ab5402da4b429d40991362ece444aae2a</anchor>
      <arglist>(bool samespin=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RPAJastrowFunctor</name>
      <anchorfile>a00543.html</anchorfile>
      <anchor>a56e7e3a8d89c1509599e9ec46ef29e97</anchor>
      <arglist>(RPAJastrow&lt; T &gt; *func)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00543.html</anchorfile>
      <anchor>a4d851768d1d7b24ec69c68005c855d13</anchor>
      <arglist>(real_type a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetInternals</name>
      <anchorfile>a00543.html</anchorfile>
      <anchor>ab7663a660031b10114a98f2f074e1996</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00543.html</anchorfile>
      <anchor>a4860196a527546949f6366d22425c009</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00543.html</anchorfile>
      <anchor>acdbd2fc76fba6f2d2f017e3e9247935c</anchor>
      <arglist>(real_type r, T &amp;dudr, T &amp;d2udr2)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>a00543.html</anchorfile>
      <anchor>a6a91c8094ddd49aa8a2da9df6b439164</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>a00543.html</anchorfile>
      <anchor>aff351ffb66160b6458d6057fa6bc2a5f</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDensity</name>
      <anchorfile>a00543.html</anchorfile>
      <anchor>af265d27836f75528a0e0506f4ac4f2b9</anchor>
      <arglist>(real_type n)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00543.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOptimizables</name>
      <anchorfile>a00543.html</anchorfile>
      <anchor>ae91504e3587b00403eab6cd3da071d8d</anchor>
      <arglist>(OptimizableSetType &amp;vlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00543.html</anchorfile>
      <anchor>a549838bc3e720cc4736317d64fdab0c8</anchor>
      <arglist>(OptimizableSetType &amp;optVariables)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>SameSpin</name>
      <anchorfile>a00543.html</anchorfile>
      <anchor>a759052ba9632f44136b6f4f91a36eaad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>A</name>
      <anchorfile>a00543.html</anchorfile>
      <anchor>a2afa47a65c2e9f37e310b39710c74296</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>B</name>
      <anchorfile>a00543.html</anchorfile>
      <anchor>a3252942e094b1e19e493677ef44d2a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>AB</name>
      <anchorfile>a00543.html</anchorfile>
      <anchor>af162c011b92ffdf9f27a2c8068bd47e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>ABB</name>
      <anchorfile>a00543.html</anchorfile>
      <anchor>a6160c1d8306b83a3fd37edd66793cd22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>ID_A</name>
      <anchorfile>a00543.html</anchorfile>
      <anchor>aeb8263f9885b65a7595c461984f24c1f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::singleRPAJastrowBuilder</name>
    <filename>a00556.html</filename>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <member kind="typedef">
      <type>LRHandlerBase</type>
      <name>HandlerType</name>
      <anchorfile>a00556.html</anchorfile>
      <anchor>ae4f424c5b27648a26f50492604342b79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CubicBspline&lt; RealType, LINEAR_1DGRID, FIRSTDERIV_CONSTRAINTS &gt;</type>
      <name>SplineEngineType</name>
      <anchorfile>a00556.html</anchorfile>
      <anchor>a3cf4ec4ff359cce2144a38eade343966</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CubicSplineSingle&lt; RealType, SplineEngineType &gt;</type>
      <name>FuncType</name>
      <anchorfile>a00556.html</anchorfile>
      <anchor>a11214d1d1ccaa922a77e48f3c82bc821</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinearGrid&lt; RealType &gt;</type>
      <name>GridType</name>
      <anchorfile>a00556.html</anchorfile>
      <anchor>a95c7d80f9182783d8971fc66413fd857</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneBodyJastrowOrbital&lt; FuncType &gt;</type>
      <name>JneType</name>
      <anchorfile>a00556.html</anchorfile>
      <anchor>a575308eddf827994a70682551b4b8b5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>singleRPAJastrowBuilder</name>
      <anchorfile>a00556.html</anchorfile>
      <anchor>a5083dd203bd73df6adb211858b6f3261</anchor>
      <arglist>(ParticleSet &amp;target, TrialWaveFunction &amp;psi, ParticleSet &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>OrbitalBase *</type>
      <name>getOrbital</name>
      <anchorfile>a00556.html</anchorfile>
      <anchor>a3911ba2555d8d444e074a41d02737c90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00556.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00556.html</anchorfile>
      <anchor>a2229001b687c3cabd203cf4065fc91d3</anchor>
      <arglist>(xmlNodePtr cur, int addOrbital)</arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Rs</name>
      <anchorfile>a00556.html</anchorfile>
      <anchor>a98c1ef08c9694a97084354e5e85bc5a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>tlen</name>
      <anchorfile>a00556.html</anchorfile>
      <anchor>a77848c1e4467e9ca642077dcc202ef23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Kc</name>
      <anchorfile>a00556.html</anchorfile>
      <anchor>a46555de4b3eba2a5c14007f217a8c7cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>Kc_max</name>
      <anchorfile>a00556.html</anchorfile>
      <anchor>a8f3f52559c0592011f05d733331884fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>indx</name>
      <anchorfile>a00556.html</anchorfile>
      <anchor>abde5caaaeb749f8c6b484527cb0564e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ng</name>
      <anchorfile>a00556.html</anchorfile>
      <anchor>a05dddf13e5d94b9b27a10b39fdd60c2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Rcut</name>
      <anchorfile>a00556.html</anchorfile>
      <anchor>a8120399ca4124221ed49dfa2f439359b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>ID_Rs</name>
      <anchorfile>a00556.html</anchorfile>
      <anchor>a64e01cf739842e2cae90d2676fda50e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>MyName</name>
      <anchorfile>a00556.html</anchorfile>
      <anchor>ab4391b64f3b659132ca28ec00b4abe48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HandlerType *</type>
      <name>myHandler</name>
      <anchorfile>a00556.html</anchorfile>
      <anchor>a7b4fdc238840c4280cdcc69f1675a6c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FuncType *</type>
      <name>nfunc</name>
      <anchorfile>a00556.html</anchorfile>
      <anchor>a6e6439f56756c4c3c52092c5f756ac0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ShortRangePartAdapter&lt; RealType &gt; *</type>
      <name>SRA</name>
      <anchorfile>a00556.html</anchorfile>
      <anchor>a65ff7a581db229ea7ff9715f9e61685e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>JneType *</type>
      <name>J1s</name>
      <anchorfile>a00556.html</anchorfile>
      <anchor>a4c41639012c3fba1a2eb09b6047288d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet *</type>
      <name>sourcePtcl</name>
      <anchorfile>a00556.html</anchorfile>
      <anchor>ab08c7c37a309154c823dcce3178ee902</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::CubicSplineSingle</name>
    <filename>a00126.html</filename>
    <templarg>RT</templarg>
    <templarg>FNOUT</templarg>
    <base>OptimizableFunctorBase</base>
    <member kind="typedef">
      <type>RT</type>
      <name>value_type</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a031410b325f19d0fbb6bcad4cbb55103</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OptimizableFunctorBase</type>
      <name>FNIN</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>aa65fcc7fea35ad7a29620b9235f70019</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimGridBase&lt; real_type &gt;</type>
      <name>grid_type</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>adf9f4feb83a86fdd269e9379f146a6d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CubicSplineSingle</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a7e6707940d345c7a04415729eb40fb62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CubicSplineSingle</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a2cb09acb4ae819e9e632e9cec25be14d</anchor>
      <arglist>(const CubicSplineSingle &amp;old)</arglist>
    </member>
    <member kind="function">
      <type>OptimizableFunctorBase *</type>
      <name>makeClone</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a4747acd34f8d2daa0656125f1290e4d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CubicSplineSingle</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a7e2d232de5e6a4d4fa4af1015fac5f5d</anchor>
      <arglist>(FNIN *in_, grid_type *agrid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CubicSplineSingle</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a55b83eca27be780a1775315d6b60a0da</anchor>
      <arglist>(FNIN *in_, real_type rc, int npts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInFunc</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>acb43a44d4db1c9fdbcddac1a4e4a41e7</anchor>
      <arglist>(FNIN *in_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportStatus</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a0a144256f92f2fa9e13e840bc30baef7</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOptimizable</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a37f4c45678967a2856b563492cd1fefa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>ac059e0873401047f0ec172926e036249</anchor>
      <arglist>(real_type r, real_type &amp;dudr, real_type &amp;d2udr2, real_type &amp;d3udr3)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a6d4da0f3cb2c37f2105f35aba1c3a813</anchor>
      <arglist>(real_type r, real_type &amp;dudr, real_type &amp;d2udr2)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a4860196a527546949f6366d22425c009</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>af08f1f70ecd1cddcf7d274cbcad42f40</anchor>
      <arglist>(real_type r, real_type rinv)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluateAll</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a0ca175b6352a6deda25ab8f2a24d3aa2</anchor>
      <arglist>(real_type r, real_type rinv)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a6a91c8094ddd49aa8a2da9df6b439164</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>aff351ffb66160b6458d6057fa6bc2a5f</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a571580ea7471b01a50ca810c0cb59ebc</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>ac2ba1657f838528c2e4f3f485ee47f44</anchor>
      <arglist>(FNIN *in_, grid_type *agrid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a74dfe95748ebb4243e3902925c598996</anchor>
      <arglist>(FNIN *in_, real_type rmax, int npts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumParams</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>ad6a9ff93babb132679b358f65cc4f74d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FNIN *</type>
      <name>InFunc</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a3cb996530e65163e5296255673a212bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FNOUT</type>
      <name>OutFunc</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>ac895009b4cee9a95cca3d44177b113a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumGridPoints</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>aba1ee92884e2e52ef3c4ec7b5ac860c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Rmax</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a363af4b5d9b8e97a1c0e983e4b0b2919</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>GridDelta</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>ac4ab0cafdc00a6c5c4dbcb9b95769d21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Y</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a8b4dc77b2f75ec3e80eb8987f98db7af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>dY</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a6a8818d83e16d75f6e13cc9df1e809ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>d2Y</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>ab2751661aab00028080a57c4747bd245</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::CubicSplineBasisSet</name>
    <filename>a00119.html</filename>
    <templarg></templarg>
    <base>OptimizableFunctorBase</base>
    <member kind="typedef">
      <type>OptimizableFunctorBase</type>
      <name>FNIN</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>aa65fcc7fea35ad7a29620b9235f70019</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CubicBspline&lt; RT, LINEAR_1DGRID, FIRSTDERIV_CONSTRAINTS &gt;</type>
      <name>FNOUT</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a8713a1faf937aa9736d8ac665fb7b317</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimGridBase&lt; real_type &gt;</type>
      <name>grid_type</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>adf9f4feb83a86fdd269e9379f146a6d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CubicSplineBasisSet</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>ad465ccc31347973b87033e1d5b453b73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CubicSplineBasisSet</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a99d81d3ae388bed8fa3eeeedd571ba71</anchor>
      <arglist>(FNIN *in_, grid_type *agrid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInFunc</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>acb43a44d4db1c9fdbcddac1a4e4a41e7</anchor>
      <arglist>(FNIN *in_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutFunc</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>ad3cf5a8bc65a9bbd76f6d525ffd8471b</anchor>
      <arglist>(FNOUT *out_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a6d4da0f3cb2c37f2105f35aba1c3a813</anchor>
      <arglist>(real_type r, real_type &amp;dudr, real_type &amp;d2udr2)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a4860196a527546949f6366d22425c009</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a6a91c8094ddd49aa8a2da9df6b439164</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>aff351ffb66160b6458d6057fa6bc2a5f</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a571580ea7471b01a50ca810c0cb59ebc</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>ac2ba1657f838528c2e4f3f485ee47f44</anchor>
      <arglist>(FNIN *in_, grid_type *agrid)</arglist>
    </member>
    <member kind="variable">
      <type>FNIN *</type>
      <name>InFunc</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a3cb996530e65163e5296255673a212bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FNOUT *</type>
      <name>OutFunc</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>acf488e5ee71a5ce1449ecf615a0d77ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumGridPoints</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>aba1ee92884e2e52ef3c4ec7b5ac860c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Rmax</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a363af4b5d9b8e97a1c0e983e4b0b2919</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>GridDelta</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>ac4ab0cafdc00a6c5c4dbcb9b95769d21</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::ThreeBodyJastrowOrbital</name>
    <filename>a00603.html</filename>
    <templarg></templarg>
    <base>qmcplusplus::OrbitalBase</base>
    <member kind="function">
      <type></type>
      <name>ThreeBodyJastrowOrbital</name>
      <anchorfile>a00603.html</anchorfile>
      <anchor>aa741021f17327e15b75a8b899bb5a790</anchor>
      <arglist>(ParticleSet &amp;ions, ParticleSet &amp;els)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ThreeBodyJastrowOrbital</name>
      <anchorfile>a00603.html</anchorfile>
      <anchor>a26fe470154482a028e06c0dab896f95a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00603.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00603.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00603.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00603.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluateLog</name>
      <anchorfile>a00603.html</anchorfile>
      <anchor>a39920a87acab8d83f83d29733aaabd35</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>a00603.html</anchorfile>
      <anchor>a17a690a835b951b7cb5ec17d890a1e2b</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00603.html</anchorfile>
      <anchor>a5e4a7bd7e23a6beab0d8bc131be6ffc4</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00603.html</anchorfile>
      <anchor>ad4ac6ecacd80d95941026660c9799fd0</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>logRatio</name>
      <anchorfile>a00603.html</anchorfile>
      <anchor>af6fa7f27fa33e00e9097169c82dff776</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>a00603.html</anchorfile>
      <anchor>a4fad6e178271bda6f6e70a5965041472</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00603.html</anchorfile>
      <anchor>a77f5337d013902172ea323f282da8711</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00603.html</anchorfile>
      <anchor>aeba37f5a7f9e1c209be41e1f8c2d316d</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFunc</name>
      <anchorfile>a00603.html</anchorfile>
      <anchor>ac3a0981094e9eaf99b6b90caeaedaad6</anchor>
      <arglist>(int source_type, FT *afunc)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>registerData</name>
      <anchorfile>a00603.html</anchorfile>
      <anchor>a3e4ada162ce7a9b5fdeced0370ef35b6</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>updateBuffer</name>
      <anchorfile>a00603.html</anchorfile>
      <anchor>aa66c0496eea134a873aedab43b1228d6</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00603.html</anchorfile>
      <anchor>a5261ed49b5195980c91c0024b860fdb2</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>a00603.html</anchorfile>
      <anchor>abe1685352426b81dad951939f973a2ff</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>a00603.html</anchorfile>
      <anchor>af79a1f1637e80a729043600a7656054d</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const ParticleSet &amp;</type>
      <name>CenterRef</name>
      <anchorfile>a00603.html</anchorfile>
      <anchor>ab2185ecb80d978d74b01ab1450e115fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>myTableIndex</name>
      <anchorfile>a00603.html</anchorfile>
      <anchor>acd3a1ed1297a8fceb38dedcc919ee2c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>NumCenters</name>
      <anchorfile>a00603.html</anchorfile>
      <anchor>a742c5ced4145509de0398d2ef755846d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>NumPtcls</name>
      <anchorfile>a00603.html</anchorfile>
      <anchor>af77a802af14251669b5c66a17248faa2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; RealType &gt;</type>
      <name>phi2</name>
      <anchorfile>a00603.html</anchorfile>
      <anchor>aeb65e0bb5f4b29fe7403113936f07bf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; PosType &gt;</type>
      <name>dphi2</name>
      <anchorfile>a00603.html</anchorfile>
      <anchor>af583f1ff3382ba694de122af007bd736</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; RealType &gt;</type>
      <name>d2phi2</name>
      <anchorfile>a00603.html</anchorfile>
      <anchor>a5e19df1f120d72f308923cd19fe82c38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>curVal</name>
      <anchorfile>a00603.html</anchorfile>
      <anchor>a9d968af9e056fb5b523c54fb2b46b562</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>curLap</name>
      <anchorfile>a00603.html</anchorfile>
      <anchor>af231fbc54bac0d9508402e1a9ab6e445</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PosType</type>
      <name>curGrad</name>
      <anchorfile>a00603.html</anchorfile>
      <anchor>a1f7818b1f57b3d6585ac950fecec6d07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueVectorType</type>
      <name>U</name>
      <anchorfile>a00603.html</anchorfile>
      <anchor>aecce1a86932f62cb0eeaa03dcf6bf50d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueVectorType</type>
      <name>d2U</name>
      <anchorfile>a00603.html</anchorfile>
      <anchor>aee713bcb2bdb9a51ac81d562124aecd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GradVectorType</type>
      <name>dU</name>
      <anchorfile>a00603.html</anchorfile>
      <anchor>add95eaeac2cb0bee0fd7af07d3945a68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType *</type>
      <name>FirstAddressOfdU</name>
      <anchorfile>a00603.html</anchorfile>
      <anchor>adf5a116ad0cb788b7bc63b76c28f4b48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType *</type>
      <name>LastAddressOfdU</name>
      <anchorfile>a00603.html</anchorfile>
      <anchor>a2aa6d32af56fdc81799bac6f1627624e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; FT * &gt;</type>
      <name>Funique</name>
      <anchorfile>a00603.html</anchorfile>
      <anchor>aab209055759a41d30f02dff8794b1c4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; FT * &gt;</type>
      <name>Fs</name>
      <anchorfile>a00603.html</anchorfile>
      <anchor>a9d69f560dc6e512b3145ad296273f4e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Array&lt; RealType, 3 &gt;</type>
      <name>C</name>
      <anchorfile>a00603.html</anchorfile>
      <anchor>a007dd0089551c83c049e9f524b9d629e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::ThreeBodyPade</name>
    <filename>a00604.html</filename>
    <base>qmcplusplus::OrbitalBase</base>
    <class kind="struct">qmcplusplus::ThreeBodyPade::Coeff</class>
    <member kind="typedef">
      <type>FT</type>
      <name>FuncType</name>
      <anchorfile>a00604.html</anchorfile>
      <anchor>a617b482486e44becbde6ea4cf2c96f16</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LoadC</name>
      <anchorfile>a00604.html</anchorfile>
      <anchor>a6f8f431ac9a0f760e8ed03b061d46037</anchor>
      <arglist>(int k, int m, int n, int o, double c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitC</name>
      <anchorfile>a00604.html</anchorfile>
      <anchor>a7bc6ad176890c93a93b0e5f197d9231d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ThreeBodyPade</name>
      <anchorfile>a00604.html</anchorfile>
      <anchor>a4c9031748e8fc85d46652f7a9063b868</anchor>
      <arglist>(ParticleSet &amp;ions, ParticleSet &amp;els)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ThreeBodyPade</name>
      <anchorfile>a00604.html</anchorfile>
      <anchor>a4177feb332bbfa4b934745e52b25c6ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00604.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00604.html</anchorfile>
      <anchor>a549838bc3e720cc4736317d64fdab0c8</anchor>
      <arglist>(OptimizableSetType &amp;optVariables)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>Delta</name>
      <anchorfile>a00604.html</anchorfile>
      <anchor>ac55a923a31670acf1116fe8a5201e530</anchor>
      <arglist>(int m, int n)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluateLog</name>
      <anchorfile>a00604.html</anchorfile>
      <anchor>a39920a87acab8d83f83d29733aaabd35</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>a00604.html</anchorfile>
      <anchor>a17a690a835b951b7cb5ec17d890a1e2b</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00604.html</anchorfile>
      <anchor>a5e4a7bd7e23a6beab0d8bc131be6ffc4</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00604.html</anchorfile>
      <anchor>ad4ac6ecacd80d95941026660c9799fd0</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>logRatio</name>
      <anchorfile>a00604.html</anchorfile>
      <anchor>af6fa7f27fa33e00e9097169c82dff776</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>a00604.html</anchorfile>
      <anchor>a4fad6e178271bda6f6e70a5965041472</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00604.html</anchorfile>
      <anchor>a77f5337d013902172ea323f282da8711</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00604.html</anchorfile>
      <anchor>aeba37f5a7f9e1c209be41e1f8c2d316d</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFunc</name>
      <anchorfile>a00604.html</anchorfile>
      <anchor>ac3a0981094e9eaf99b6b90caeaedaad6</anchor>
      <arglist>(int source_type, FT *afunc)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>registerData</name>
      <anchorfile>a00604.html</anchorfile>
      <anchor>a3e4ada162ce7a9b5fdeced0370ef35b6</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>updateBuffer</name>
      <anchorfile>a00604.html</anchorfile>
      <anchor>aa66c0496eea134a873aedab43b1228d6</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00604.html</anchorfile>
      <anchor>a5261ed49b5195980c91c0024b860fdb2</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>a00604.html</anchorfile>
      <anchor>abe1685352426b81dad951939f973a2ff</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>a00604.html</anchorfile>
      <anchor>af79a1f1637e80a729043600a7656054d</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>a00604.html</anchorfile>
      <anchor>aa534784cf3cb50fb82a16845ff21a2f6</anchor>
      <arglist>(xmlNodePtr cur, VarRegistry&lt; RealType &gt; &amp;vlist)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>int</type>
      <name>FT</name>
      <anchorfile>a00604.html</anchorfile>
      <anchor>abc95fd5d173a91854882d6c7e75a2e36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>a00604.html</anchorfile>
      <anchor>a53956c224bd49abff541a1a7c2ad305d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const DistanceTableData *</type>
      <name>ee_table</name>
      <anchorfile>a00604.html</anchorfile>
      <anchor>a98bad66970832adc6ab54b53bfb844f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType</type>
      <name>curVal</name>
      <anchorfile>a00604.html</anchorfile>
      <anchor>a1e4cad47d8819f0becb243113321f069</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType</type>
      <name>curLap</name>
      <anchorfile>a00604.html</anchorfile>
      <anchor>a40ed132873b9ec0c106f67dfc7446bb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GradType</type>
      <name>curGrad</name>
      <anchorfile>a00604.html</anchorfile>
      <anchor>a9cd84728a220a929a6d89492677bbf17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueVectorType</type>
      <name>U</name>
      <anchorfile>a00604.html</anchorfile>
      <anchor>aecce1a86932f62cb0eeaa03dcf6bf50d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueVectorType</type>
      <name>d2U</name>
      <anchorfile>a00604.html</anchorfile>
      <anchor>aee713bcb2bdb9a51ac81d562124aecd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GradVectorType</type>
      <name>dU</name>
      <anchorfile>a00604.html</anchorfile>
      <anchor>add95eaeac2cb0bee0fd7af07d3945a68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType *</type>
      <name>FirstAddressOfdU</name>
      <anchorfile>a00604.html</anchorfile>
      <anchor>adf5a116ad0cb788b7bc63b76c28f4b48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType *</type>
      <name>LastAddressOfdU</name>
      <anchorfile>a00604.html</anchorfile>
      <anchor>a2aa6d32af56fdc81799bac6f1627624e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; FT * &gt;</type>
      <name>Fs</name>
      <anchorfile>a00604.html</anchorfile>
      <anchor>a9d69f560dc6e512b3145ad296273f4e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; Coeff &gt;</type>
      <name>C</name>
      <anchorfile>a00604.html</anchorfile>
      <anchor>aece4a3482846017ff29768b23fa4b76c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ThreeBodyPade::Coeff</name>
    <filename>a00075.html</filename>
    <member kind="function">
      <type></type>
      <name>Coeff</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a3fdca660a782eeddae270e7d8b9159a1</anchor>
      <arglist>(int m0, int n0, int o0, ValueType c0, ValueType d0)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a742204794ea328ba293fe59cec79b990</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>n</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a76f11d9a0a47b94f72c2d0e77fb32240</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>o</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a8198753dd743101d6583a27b1454fc4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>c</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a6c1553583684c05b995e182e6451d52a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>d</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a918956d5351ed76be7ba37ebb4c8d3cc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::TwoBodyJastrowOrbitalBspline</name>
    <filename>a00614.html</filename>
    <base>TwoBodyJastrowOrbital&lt; BsplineFunctor&lt; OrbitalBase::RealType &gt; &gt;</base>
    <member kind="typedef">
      <type>BsplineFunctor&lt; OrbitalBase::RealType &gt;</type>
      <name>FT</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>a35dcdeae6c5f97b3ac767c1f539d9e9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleSet::Walker_t</type>
      <name>Walker_t</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>abbc77657579efa0cd83de2b985f92476</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BsplineFunctor&lt; OrbitalBase::RealType &gt;</type>
      <name>FuncType</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a617b482486e44becbde6ea4cf2c96f16</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeGPUmem</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>a76455d61912407a21c4d7815725e52da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFunc</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>ac882239a96b1b886b014f6afd37b4cde</anchor>
      <arglist>(int ia, int ib, FT *j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recompute</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>aec25e8d4d6b5bedf0b8cd46e744bdada</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, bool firstTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>a83f2c7b01b7a6e2fc1b6f1e897f427c2</anchor>
      <arglist>(PointerPool&lt; gpu::device_vector&lt; CudaRealType &gt; &gt; &amp;pool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLog</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>ae1d637e358143385c1f5cce32a88f076</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, vector&lt; RealType &gt; &amp;logPsi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>aca440575f4e041f0f17ceeb85c6c2865</anchor>
      <arglist>(vector&lt; Walker_t * &gt; &amp;walkers, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>adc39ad0ba1da288400ea43f0139c77c0</anchor>
      <arglist>(const vector&lt; Walker_t * &gt; &amp;walkers, const vector&lt; int &gt; &amp;iatList)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ratio</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>ada35f710eab25f8a7ce3ce209afb4dc4</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, int iat, vector&lt; ValueType &gt; &amp;psi_ratios, vector&lt; GradType &gt; &amp;grad, vector&lt; ValueType &gt; &amp;lapl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcRatio</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>af1aad054f76e6c545c1587cb9d08892b</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, int iat, vector&lt; ValueType &gt; &amp;psi_ratios, vector&lt; GradType &gt; &amp;grad, vector&lt; ValueType &gt; &amp;lapl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRatio</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>a87ae6eadcb06dff4e011aa533a87a356</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, int iat, vector&lt; ValueType &gt; &amp;psi_ratios, vector&lt; GradType &gt; &amp;grad, vector&lt; ValueType &gt; &amp;lapl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ratio</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>a180290d4b01ccd239bdab59e02b82902</anchor>
      <arglist>(vector&lt; Walker_t * &gt; &amp;walkers, vector&lt; int &gt; &amp;iatList, vector&lt; PosType &gt; &amp;rNew, vector&lt; ValueType &gt; &amp;psi_ratios, vector&lt; GradType &gt; &amp;grad, vector&lt; ValueType &gt; &amp;lapl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcGradient</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>adfb00492389c1143eb4cc765f6770dae</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, int iat, vector&lt; GradType &gt; &amp;grad)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGradient</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>aa86695e2b40516cb0c1fb59f680806ee</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, int iat, vector&lt; GradType &gt; &amp;grad)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradLapl</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>a8e190391940e269747262091f2af0241</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, GradMatrix_t &amp;grads, ValueMatrix_t &amp;lapl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NLratios</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>a15bcbd3fba973ab8724980c8bfb009d5</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, vector&lt; NLjob &gt; &amp;jobList, vector&lt; PosType &gt; &amp;quadPoints, vector&lt; ValueType &gt; &amp;psi_ratios)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateDerivatives</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>a2d379be764124f0bd17ceef4b0e28d16</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, const opt_variables_type &amp;optvars, ValueMatrix_t &amp;dlogpsi, ValueMatrix_t &amp;dlapl_over_psi)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TwoBodyJastrowOrbitalBspline</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>a36ae550c493a464cd02cb568e196956f</anchor>
      <arglist>(ParticleSet &amp;pset, int tid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TwoBodyJastrowOrbital</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4008fb4146ae603b74cf19b9af4b124b</anchor>
      <arglist>(ParticleSet &amp;p, int tid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TwoBodyJastrowOrbital</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a6914a04481f481879687936352e8df72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>afc240af166cfa1be747a1ddf159e007e</anchor>
      <arglist>(ParticleSet &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFunc</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac882239a96b1b886b014f6afd37b4cde</anchor>
      <arglist>(int ia, int ib, BsplineFunctor&lt; OrbitalBase::RealType &gt; *j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportStatus</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0a144256f92f2fa9e13e840bc30baef7</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aee6c98df74fd951c23aedb0d38625d4e</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a058a5a1e24105137f5509a585419d0ef</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a17a690a835b951b7cb5ec17d890a1e2b</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5e4a7bd7e23a6beab0d8bc131be6ffc4</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad4ac6ecacd80d95941026660c9799fd0</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_ratios</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0afd740894bec6ecb30956568b7deeeb</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; ValueType &gt; &amp;ratios)</arglist>
    </member>
    <member kind="function">
      <type>GradType</type>
      <name>evalGrad</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a178607284b7ab1e4c389fce8e0c80de3</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratioGrad</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af21351a5f07bfcec09d2f2c85c24ffee</anchor>
      <arglist>(ParticleSet &amp;P, int iat, GradType &amp;grad_iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4fad6e178271bda6f6e70a5965041472</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af79a1f1637e80a729043600a7656054d</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aeba37f5a7f9e1c209be41e1f8c2d316d</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateLogAndStore</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af2729bf726a29202c501a093cec75761</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>registerData</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a6c52a19e935c4f5e9bc363f535a1eb58</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>updateBuffer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a90a7c6c91ae13b2d7141fc8d1315d8d8</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf, bool fromscratch=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5261ed49b5195980c91c0024b860fdb2</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>OrbitalBasePtr</type>
      <name>makeClone</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab68f5027a5eee70c7e4e130cfa9aab1b</anchor>
      <arglist>(ParticleSet &amp;tqp) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFrom</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af1a7c966102d2128341c24cf920adc49</anchor>
      <arglist>(const OrbitalBase &amp;old)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>ChiesaKEcorrection</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a3d263f59a04f09512dc371881aa3808f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finalizeOptimization</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a48d91310b053ab96442a62668825b5cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>KECorrection</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a414075e013df97571266ce3cd0d6b0ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>CUDA_PRECISION</type>
      <name>CudaReal</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>aab6978b41afc161203ee33e35c8d5d9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>UsePBC</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>a0509dd75e675cea3e1152928198029d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; CudaSpline&lt; CudaReal &gt; * &gt;</type>
      <name>GPUSplines</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>a3bbdcdaefdae967b2eafb67f65fc1518</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; CudaSpline&lt; CudaReal &gt; * &gt;</type>
      <name>UniqueSplines</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>a64427c96bfacba1e0c913b8dea588f6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>MaxCoefs</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>a7a69fe8d5fd308fb6397cfad3cf7bb65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet &amp;</type>
      <name>PtclRef</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>a3f9ab4fbbe16e5484231525f5409f69c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::device_vector&lt; CudaReal &gt;</type>
      <name>L</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>ac54fe4abc9ac7cf6f539e2063ca6a65c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::device_vector&lt; CudaReal &gt;</type>
      <name>Linv</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>af6feb7becce2963a0a328dbfac2f2152</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::device_vector&lt; CudaReal * &gt;</type>
      <name>UpdateListGPU</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>a025cb6b8290bcf47400b5f33ee00c081</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::device_vector&lt; CudaReal &gt;</type>
      <name>SumGPU</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>a16a5a1fa03a33f2f71e03764f15fdc43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::device_vector&lt; CudaReal &gt;</type>
      <name>GradLaplGPU</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>a13b82fe909821441ebcb9ef04ef90503</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::device_vector&lt; CudaReal &gt;</type>
      <name>OneGradGPU</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>a2edb5e171ddc28cf8146da5fbee332a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::host_vector&lt; CudaReal * &gt;</type>
      <name>UpdateListHost</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>a9c38981962705d9c595276ff2c0bf385</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::host_vector&lt; CudaReal &gt;</type>
      <name>SumHost</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>aad28d6ba63739b9bdf9b8dfd21c7a05b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::host_vector&lt; CudaReal &gt;</type>
      <name>GradLaplHost</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>ab67f21f67446b34939cda297c83dc9ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::host_vector&lt; CudaReal &gt;</type>
      <name>OneGradHost</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>af968d85f407c20e5f21ce8b7edd897c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::host_vector&lt; CudaReal &gt;</type>
      <name>SplineDerivsHost</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>a01bcad17cc866dc520edb06c47b8872e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::device_vector&lt; CudaReal &gt;</type>
      <name>SplineDerivsGPU</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>a22e1c0e29ad18a2a276841b4d4d61577</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::host_vector&lt; CudaReal * &gt;</type>
      <name>DerivListHost</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>a791e2eb3a3a9d01a7efd550055fd8f5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::device_vector&lt; CudaReal * &gt;</type>
      <name>DerivListGPU</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>a4b3a29a81963928fb99dd2db26832236</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::host_vector&lt; CudaReal * &gt;</type>
      <name>NL_SplineCoefsListHost</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>a4523fa30c61bea7a8089ba5aedb593e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::device_vector&lt; CudaReal * &gt;</type>
      <name>NL_SplineCoefsListGPU</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>a65408e3fd2a2a439ef126bbe5ff1c5f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::host_vector&lt; NLjobGPU&lt; CudaReal &gt; &gt;</type>
      <name>NL_JobListHost</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>a983c9afc3af61999eeff61d0bbc18971</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::device_vector&lt; NLjobGPU&lt; CudaReal &gt; &gt;</type>
      <name>NL_JobListGPU</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>ae51e3229c67f59f6db7ee512f4d70282</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::host_vector&lt; int &gt;</type>
      <name>NL_NumCoefsHost</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>ae3316011fd81f96e934963b4aa55a3d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::host_vector&lt; int &gt;</type>
      <name>NL_NumQuadPointsHost</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>a1b44cf3790184e1e1486f0e71e149665</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::device_vector&lt; int &gt;</type>
      <name>NL_NumCoefsGPU</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>ad8388926fbeaf3d89e252f2e4f4b9a80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::device_vector&lt; int &gt;</type>
      <name>NL_NumQuadPointsGPU</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>a2a1d5fca05a40623cbb665917860e90e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::host_vector&lt; CudaReal &gt;</type>
      <name>NL_rMaxHost</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>a05c3ea0b77dce3d5504704e79049e699</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::host_vector&lt; CudaReal &gt;</type>
      <name>NL_QuadPointsHost</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>a9cea16c77ac243a2afe2585b077a4008</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::host_vector&lt; CudaReal &gt;</type>
      <name>NL_RatiosHost</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>a36addf3444c37406715e5f96313d5a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::device_vector&lt; CudaReal &gt;</type>
      <name>NL_rMaxGPU</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>a115cfc2decec3a0fba1d44f679a2c1a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::device_vector&lt; CudaReal &gt;</type>
      <name>NL_QuadPointsGPU</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>a70bedd242db804bd7b32dabe934a0924</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gpu::device_vector&lt; CudaReal &gt;</type>
      <name>NL_RatiosGPU</name>
      <anchorfile>a00614.html</anchorfile>
      <anchor>ab2e70435bd138b7f698e24d44f74f6ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; BsplineFunctor&lt; OrbitalBase::RealType &gt; * &gt;</type>
      <name>F</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af45b5a2c3984028fafeca7ff2d413ed2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>N</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7722c8ecbb62d99aee7ce68b1752f337</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NN</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a13fa86a226aeccab13ef11a89ebb97a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumGroups</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>abe48fe1d890e3822a6889caa9b3f99b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>TaskID</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae72e52383f4f7e13a1e0ae21346f07e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a53956c224bd49abff541a1a7c2ad305d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>DiffVal</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a02b7473369de9fd01b0fc872b3fd36f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>DiffValSum</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a9e21b4f663096af7e56903799492a832</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleAttrib&lt; RealType &gt;</type>
      <name>U</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5b43bd96312d140cb8feaead0dcf7ded</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleAttrib&lt; RealType &gt;</type>
      <name>d2U</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae2a389d37b3a24fd59adba99921fd768</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleAttrib&lt; RealType &gt;</type>
      <name>curLap</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad0aa9ebb71da5b47a855c04a7fc64298</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleAttrib&lt; RealType &gt;</type>
      <name>curVal</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af288489de344bff57b2a0b5445ef5ab9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleAttrib&lt; PosType &gt;</type>
      <name>dU</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a59f58fa10257e6758df81fdf1df34017</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleAttrib&lt; PosType &gt;</type>
      <name>curGrad</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a6bf6d5c80f047bf72a7e2b855820fabd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleAttrib&lt; PosType &gt;</type>
      <name>curGrad0</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a78a0733444a7b852ee570aa05445d9f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType *</type>
      <name>FirstAddressOfdU</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a77538c1503ee95a4637198725fe78fb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType *</type>
      <name>LastAddressOfdU</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa28d1447dcf13740b471c860cca9db18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix&lt; int &gt;</type>
      <name>PairID</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0681630bcbf9bbc04e840b219fe6be11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, BsplineFunctor&lt; OrbitalBase::RealType &gt; * &gt;</type>
      <name>J2Unique</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae0d2580a8ea1715ad680db498ff3eb21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleSet *</type>
      <name>PtclRef</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a810b9c6f4d1683f2d98db6a6ef6659c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>FirstTime</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af1d18579862309ebb383f534ece9efc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>KEcorr</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a92724b9302c290622038e20adb11a024</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::WMFunctor</name>
    <filename>a00638.html</filename>
    <templarg>T</templarg>
    <base>OptimizableFunctorBase</base>
    <member kind="function">
      <type></type>
      <name>WMFunctor</name>
      <anchorfile>a00638.html</anchorfile>
      <anchor>a4453532572c12764291292687712bab8</anchor>
      <arglist>(real_type b, real_type rc=7.5, const std::string &amp;bname=&quot;exponent&quot;)</arglist>
    </member>
    <member kind="function">
      <type>OptimizableFunctorBase *</type>
      <name>makeClone</name>
      <anchorfile>a00638.html</anchorfile>
      <anchor>a4747acd34f8d2daa0656125f1290e4d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00638.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>a00638.html</anchorfile>
      <anchor>a6a91c8094ddd49aa8a2da9df6b439164</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>a00638.html</anchorfile>
      <anchor>aff351ffb66160b6458d6057fa6bc2a5f</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00638.html</anchorfile>
      <anchor>a4860196a527546949f6366d22425c009</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00638.html</anchorfile>
      <anchor>a6d4da0f3cb2c37f2105f35aba1c3a813</anchor>
      <arglist>(real_type r, real_type &amp;dudr, real_type &amp;d2udr2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00638.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00638.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00638.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00638.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>B0</name>
      <anchorfile>a00638.html</anchorfile>
      <anchor>a06df497360346f4494f9ad56ce1d3699</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Rcut</name>
      <anchorfile>a00638.html</anchorfile>
      <anchor>ad73c36a2b679e0a0a5e1f1f840862a0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>OneOverRc</name>
      <anchorfile>a00638.html</anchorfile>
      <anchor>a95bf1c6e87e3e3ffd4bddcf047e82524</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>DxDr</name>
      <anchorfile>a00638.html</anchorfile>
      <anchor>a35e5cdb2a5fea07b5a945483cf8f6afd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>D2xDr2</name>
      <anchorfile>a00638.html</anchorfile>
      <anchor>addb05a73f28e72cdcab6eeb09beb4ed4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>ID_B</name>
      <anchorfile>a00638.html</anchorfile>
      <anchor>a8c25a90405928d9d1760fee477b89596</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>attribName</name>
      <anchorfile>a00638.html</anchorfile>
      <anchor>a9261bc4d9702d44d2fdd7cabc6c88a5e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::WMFunctorSet</name>
    <filename>a00639.html</filename>
    <templarg>T</templarg>
    <base>OptimizableFunctorBase</base>
    <member kind="typedef">
      <type>TinyVector&lt; real_type, 2 &gt;</type>
      <name>variable_type</name>
      <anchorfile>a00639.html</anchorfile>
      <anchor>a14413f2e7247e5878fefa50526b88647</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WMFunctorSet</name>
      <anchorfile>a00639.html</anchorfile>
      <anchor>a2b77d34fc8fd3f0264c21a9d0dab9cfc</anchor>
      <arglist>(real_type rc=7.5)</arglist>
    </member>
    <member kind="function">
      <type>OptimizableFunctorBase *</type>
      <name>makeClone</name>
      <anchorfile>a00639.html</anchorfile>
      <anchor>a4747acd34f8d2daa0656125f1290e4d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00639.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addComponent</name>
      <anchorfile>a00639.html</anchorfile>
      <anchor>adcd6844dad9e0ae33879affab67077c4</anchor>
      <arglist>(real_type c, real_type b, const string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00639.html</anchorfile>
      <anchor>a4860196a527546949f6366d22425c009</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00639.html</anchorfile>
      <anchor>ac00ca0a61bb4eeaa08de4ba5494e5dfa</anchor>
      <arglist>(real_type r, real_type &amp;dv, real_type &amp;d2v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>evaluateDerivatives</name>
      <anchorfile>a00639.html</anchorfile>
      <anchor>ad6d1fb2ec9788f67d5c09d67421efc8d</anchor>
      <arglist>(real_type r, vector&lt; TinyVector&lt; real_type, 3 &gt; &gt; &amp;derivs)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>a00639.html</anchorfile>
      <anchor>a6a91c8094ddd49aa8a2da9df6b439164</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>a00639.html</anchorfile>
      <anchor>aff351ffb66160b6458d6057fa6bc2a5f</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00639.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00639.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00639.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00639.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Rcut</name>
      <anchorfile>a00639.html</anchorfile>
      <anchor>ad73c36a2b679e0a0a5e1f1f840862a0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>OneOverRc</name>
      <anchorfile>a00639.html</anchorfile>
      <anchor>a95bf1c6e87e3e3ffd4bddcf047e82524</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>DxDr</name>
      <anchorfile>a00639.html</anchorfile>
      <anchor>a35e5cdb2a5fea07b5a945483cf8f6afd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>D2xDr2</name>
      <anchorfile>a00639.html</anchorfile>
      <anchor>addb05a73f28e72cdcab6eeb09beb4ed4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; variable_type &gt;</type>
      <name>Params</name>
      <anchorfile>a00639.html</anchorfile>
      <anchor>a139664232ab2552c9325070596d1c35c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::WMJastrowBuilder</name>
    <filename>a00640.html</filename>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <class kind="struct">qmcplusplus::WMJastrowBuilder::BasisGroupType</class>
    <member kind="function">
      <type></type>
      <name>WMJastrowBuilder</name>
      <anchorfile>a00640.html</anchorfile>
      <anchor>a02fd0e99b1e4a229aa39896f9ac55928</anchor>
      <arglist>(ParticleSet &amp;target, TrialWaveFunction &amp;psi, ParticleSet *source=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00640.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>OptimizableFunctorBase</type>
      <name>InFuncType</name>
      <anchorfile>a00640.html</anchorfile>
      <anchor>a23eb96d30f94d7e6c9669bb2decc916c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>CubicBspline&lt; RealType, LINEAR_1DGRID, FIRSTDERIV_CONSTRAINTS &gt;</type>
      <name>SplineEngineType</name>
      <anchorfile>a00640.html</anchorfile>
      <anchor>a3cf4ec4ff359cce2144a38eade343966</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>CubicSplineSingle&lt; RealType, SplineEngineType &gt;</type>
      <name>OutFuncType</name>
      <anchorfile>a00640.html</anchorfile>
      <anchor>aa94e8381a785aa0399a82a0a604f4555</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>WMFunctorSet&lt; RealType &gt;</type>
      <name>DerivFuncType</name>
      <anchorfile>a00640.html</anchorfile>
      <anchor>a88b219fe3b1510259c1d65544714a64a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>map&lt; string, BasisGroupType * &gt;</type>
      <name>BGContainerType</name>
      <anchorfile>a00640.html</anchorfile>
      <anchor>a164290671cacb1cf91a12f1ac18579ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>addOneBody</name>
      <anchorfile>a00640.html</anchorfile>
      <anchor>a197a776d0d8fa1e7536855334766fd99</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>addTwoBody</name>
      <anchorfile>a00640.html</anchorfile>
      <anchor>a90eb5705a84b69e0690b6eb62b8540ee</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>addSingleBasisPerSpecies</name>
      <anchorfile>a00640.html</anchorfile>
      <anchor>a403a2a9d87c8bc697db7f3075a150f41</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>BasisGroupType *</type>
      <name>createBasisGroup</name>
      <anchorfile>a00640.html</anchorfile>
      <anchor>a14ddcfdc05154149965f346c894eb35f</anchor>
      <arglist>(xmlNodePtr cur, const string &amp;elementType)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>add2BasisGroup</name>
      <anchorfile>a00640.html</anchorfile>
      <anchor>a65e2769f77fe57dfd1f3ce69630e70b7</anchor>
      <arglist>(BasisGroupType *curBG, xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet *</type>
      <name>sourcePtcl</name>
      <anchorfile>a00640.html</anchorfile>
      <anchor>ab08c7c37a309154c823dcce3178ee902</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IgnoreSpin</name>
      <anchorfile>a00640.html</anchorfile>
      <anchor>adb1dcd295910065c3a481b810308383e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BGContainerType</type>
      <name>BasisGroups</name>
      <anchorfile>a00640.html</anchorfile>
      <anchor>aa174a02f47953c5d0ef43763e395e2d4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::WMJastrowBuilder::BasisGroupType</name>
    <filename>a00036.html</filename>
    <member kind="function">
      <type></type>
      <name>BasisGroupType</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a5f1b6f2652a8082503a27373598a56d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGrid</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a7ff3673c060757c8329285b660a57db4</anchor>
      <arglist>(RealType rc, int npts)</arglist>
    </member>
    <member kind="variable">
      <type>InFuncType *</type>
      <name>In_</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>ab73e0c3c643a4eb2f9b13e6bd1451b09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DerivFuncType *</type>
      <name>Deriv_</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>ae045fdf4edb3aca84197f1f9309df7fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OutFuncType *</type>
      <name>Out_</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a14586ad705e0477724d860203ac3ec32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumGridPoints</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>aba1ee92884e2e52ef3c4ec7b5ac860c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Rcut</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a8120399ca4124221ed49dfa2f439359b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Cusp</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a9ef759048fb46a6ee6ddeab2e812756c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::LCOrbitals</name>
    <filename>a00328.html</filename>
    <templarg></templarg>
    <base>OhmmsElementBase</base>
    <member kind="typedef">
      <type>BS</type>
      <name>BasisSet_t</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>a193c9c490f4baa9bbb668234e3f5b3a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BS::RealType</type>
      <name>RealType</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>a74af124c5c98770e73647d4262cffe87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BS::ValueType</type>
      <name>ValueType</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>ae557259e75bace127b1fd5f7f55e7fcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BS::PosType</type>
      <name>PosType</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>a07e540c80056398f8adc622270af95f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BS::GradType</type>
      <name>GradType</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>aff2fe8d6e8b03c9bb3648e7a5656d611</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LCOrbitals</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>a21d4a49b66bd0f45390e7fb20d251a2a</anchor>
      <arglist>(BS *bs, int id)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LCOrbitals</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>af15de4a0039a7809907c5c3649fe1834</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTable</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>ac4e749e95d84c607f4531255cb79c1fd</anchor>
      <arglist>(DistanceTableData *atable)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numOrbitals</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>ac70f113821740fd2c12df9ec8922164f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numBasis</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>a0a333d34c0cb0c6728d5e7c83e4b6010</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>aa1c4194bf6e8a65be215bffd2a89801b</anchor>
      <arglist>(VarRegistry&lt; RealType &gt; &amp;optVariables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>ae830acd8d266340870f8c39671dc4cb4</anchor>
      <arglist>(int nptcl)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>a1aa463a265edd08d5a0077daca81ce48</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, int jorb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>a6cea53bb411dd081662db70c4bc4f884</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, VV &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>a5dd9583dfd5be8f7ea3743084660ba79</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, VV &amp;psi, GV &amp;dpsi, VV &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>a8e937ff9692bdf96cc3885f8d43d2313</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, VM &amp;logdet, GM &amp;dlogdet, VM &amp;d2logdet)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putOccupation</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>a35a4aa2e914e0a4944d290c18961ef1b</anchor>
      <arglist>(xmlNodePtr occ_ptr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putFromXML</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>a300d83e137acf1ac3c7445777b117391</anchor>
      <arglist>(xmlNodePtr coeff_ptr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putFromH5</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>a02415dbd5361b90be50464637e4cb5b7</anchor>
      <arglist>(const char *fname, xmlNodePtr coeff_ptr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>a110accc44e8e40fe2a92d79f146e09d5</anchor>
      <arglist>(std::ostream &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>a65590683adf948193180bd095592bc6c</anchor>
      <arglist>(std::istream &amp;)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Identity</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>ac5bec1b2ab1415cd152054618dba4c38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ID</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>af180e926633cde08a05ccbc3af397ee4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>BasisSize</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>a2180d68e324e5f0dfa3def364536c201</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumSPOs</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>ad218de2b5df55b98996b274f535d5d95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumPtcls</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>ac696dd2e9e407dabdbda0ce636a569e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BS *</type>
      <name>BasisSet</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>a239db09fb0576e69e8588c40f86c75fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; ValueType &gt;</type>
      <name>C</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>af4ed64eac4032a57014572a81ce359ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Occupation</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>afd56a5d9f2b9b71a6a96b4c5f312cf4d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::LCOrbitalSet</name>
    <filename>a00329.html</filename>
    <templarg>BS</templarg>
    <templarg>IDENTITY</templarg>
    <base>qmcplusplus::SPOSetBase</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>ab15b21e79332cb44a36055f19b793c39</anchor>
      <arglist>(ParticleSet &amp;P)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setOrbitalSetSize</name>
      <anchorfile>a00588.html</anchorfile>
      <anchor>ab410e515619abf76548da91ea054a89f</anchor>
      <arglist>(int norbs)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::LCOrbitalSet&lt; BS, true &gt;</name>
    <filename>a00331.html</filename>
    <templarg></templarg>
    <base>qmcplusplus::SPOSetBase</base>
    <member kind="function">
      <type></type>
      <name>LCOrbitalSet</name>
      <anchorfile>a00331.html</anchorfile>
      <anchor>a210757730139b7ff48b9c510904ba5a8</anchor>
      <arglist>(BS *bs=0, int rl=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LCOrbitalSet</name>
      <anchorfile>a00331.html</anchorfile>
      <anchor>ab4c68336154ed584808263c1a71af910</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SPOSetBase *</type>
      <name>makeClone</name>
      <anchorfile>a00331.html</anchorfile>
      <anchor>ad79ed9698a35aa18e935d9cfd98bb97b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00331.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00331.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrbitalSetSize</name>
      <anchorfile>a00331.html</anchorfile>
      <anchor>abe2573f29355b07956892dc6bd7f12ca</anchor>
      <arglist>(int norbs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBasisSet</name>
      <anchorfile>a00331.html</anchorfile>
      <anchor>af49762fbf26eed40022ffa311052c88a</anchor>
      <arglist>(BS *bs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBasisSetSize</name>
      <anchorfile>a00331.html</anchorfile>
      <anchor>a8c9f5712bbf29d7d8632144cfb9908eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00331.html</anchorfile>
      <anchor>a55614decceadf408ddc308827faada58</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00331.html</anchorfile>
      <anchor>a8d03182606ebdc99cb116d189b732f02</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi, GradVector_t &amp;dpsi, ValueVector_t &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00331.html</anchorfile>
      <anchor>aa0db9a91d8f079188aa5a428380bd075</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi, GradVector_t &amp;dpsi, HessVector_t &amp;grad_grad_psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00331.html</anchorfile>
      <anchor>ae91b5a23fbd5208cf10757eea50386c8</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, ValueMatrix_t &amp;d2logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00331.html</anchorfile>
      <anchor>a625375c35e3d6917247acd1d76008768</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, HessMatrix_t &amp;grad_grad_logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00331.html</anchorfile>
      <anchor>aa8c87ff012f3f2143027314b8024007f</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, HessMatrix_t &amp;grad_grad_logdet, GGGMatrix_t &amp;grad_grad_grad_logdet)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ReportLevel</name>
      <anchorfile>a00331.html</anchorfile>
      <anchor>a4508e8abc214ee5db33c185fd6594709</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BS *</type>
      <name>myBasisSet</name>
      <anchorfile>a00331.html</anchorfile>
      <anchor>a98c8f1b7b3977ede1b76cd15b979e6d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>Temp</name>
      <anchorfile>a00331.html</anchorfile>
      <anchor>a94c38b1e7928c125954ef399aa95708c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>Tempv</name>
      <anchorfile>a00331.html</anchorfile>
      <anchor>a05ce85669b142583e2f5637dcf322230</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::LCOrbitalSet&lt; BS, false &gt;</name>
    <filename>a00330.html</filename>
    <templarg></templarg>
    <base>qmcplusplus::SPOSetBase</base>
    <member kind="function">
      <type></type>
      <name>LCOrbitalSet</name>
      <anchorfile>a00330.html</anchorfile>
      <anchor>a210757730139b7ff48b9c510904ba5a8</anchor>
      <arglist>(BS *bs=0, int rl=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LCOrbitalSet</name>
      <anchorfile>a00330.html</anchorfile>
      <anchor>ab4c68336154ed584808263c1a71af910</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SPOSetBase *</type>
      <name>makeClone</name>
      <anchorfile>a00330.html</anchorfile>
      <anchor>ad79ed9698a35aa18e935d9cfd98bb97b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00330.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00330.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrbitalSetSize</name>
      <anchorfile>a00330.html</anchorfile>
      <anchor>abe2573f29355b07956892dc6bd7f12ca</anchor>
      <arglist>(int norbs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBasisSet</name>
      <anchorfile>a00330.html</anchorfile>
      <anchor>af49762fbf26eed40022ffa311052c88a</anchor>
      <arglist>(BS *bs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBasisSetSize</name>
      <anchorfile>a00330.html</anchorfile>
      <anchor>a8c9f5712bbf29d7d8632144cfb9908eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00330.html</anchorfile>
      <anchor>a55614decceadf408ddc308827faada58</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00330.html</anchorfile>
      <anchor>a8d03182606ebdc99cb116d189b732f02</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi, GradVector_t &amp;dpsi, ValueVector_t &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00330.html</anchorfile>
      <anchor>aa0db9a91d8f079188aa5a428380bd075</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi, GradVector_t &amp;dpsi, HessVector_t &amp;grad_grad_psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00330.html</anchorfile>
      <anchor>ae91b5a23fbd5208cf10757eea50386c8</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, ValueMatrix_t &amp;d2logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00330.html</anchorfile>
      <anchor>a625375c35e3d6917247acd1d76008768</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, HessMatrix_t &amp;grad_grad_logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00330.html</anchorfile>
      <anchor>aa8c87ff012f3f2143027314b8024007f</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, HessMatrix_t &amp;grad_grad_logdet, GGGMatrix_t &amp;grad_grad_grad_logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateThirdDeriv</name>
      <anchorfile>a00330.html</anchorfile>
      <anchor>ae6b2fa72296c2ae7f0e80f52efe320f4</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, GGGMatrix_t &amp;grad_grad_grad_logdet)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ReportLevel</name>
      <anchorfile>a00330.html</anchorfile>
      <anchor>a4508e8abc214ee5db33c185fd6594709</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BS *</type>
      <name>myBasisSet</name>
      <anchorfile>a00330.html</anchorfile>
      <anchor>a98c8f1b7b3977ede1b76cd15b979e6d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>Temp</name>
      <anchorfile>a00330.html</anchorfile>
      <anchor>a94c38b1e7928c125954ef399aa95708c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>Tempv</name>
      <anchorfile>a00330.html</anchorfile>
      <anchor>a05ce85669b142583e2f5637dcf322230</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::LocalizedBasisSet</name>
    <filename>a00353.html</filename>
    <templarg>COT</templarg>
    <base>BasisSetBase&lt; COT::value_type &gt;</base>
    <member kind="typedef">
      <type>COT</type>
      <name>ThisCOT_t</name>
      <anchorfile>a00353.html</anchorfile>
      <anchor>a2346bb66db5317b98d42823f588e5637</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>COT::RadialOrbital_t</type>
      <name>ThisRadialOrbital_t</name>
      <anchorfile>a00353.html</anchorfile>
      <anchor>a9bbdf902fc28916940a2bbe9074f2f80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BasisSetBase&lt; typename COT::value_type &gt;</type>
      <name>BasisSetType</name>
      <anchorfile>a00353.html</anchorfile>
      <anchor>aa30d050c441dc706b9ee875ef64f3a7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BasisSetType::RealType</type>
      <name>RealType</name>
      <anchorfile>a00353.html</anchorfile>
      <anchor>aae1e8eef3cb64c2a346b0a57829ff89a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BasisSetType::ValueType</type>
      <name>ValueType</name>
      <anchorfile>a00353.html</anchorfile>
      <anchor>a7d48227488df6ea490f2dc97d553c641</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BasisSetType::IndexType</type>
      <name>IndexType</name>
      <anchorfile>a00353.html</anchorfile>
      <anchor>af93ffd07c296b4df7ac79f4392be9bed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BasisSetType::IndexVector_t</type>
      <name>IndexVector_t</name>
      <anchorfile>a00353.html</anchorfile>
      <anchor>afb1c7f4a00d511cd08ec81ff5ce81fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BasisSetType::ValueVector_t</type>
      <name>ValueVector_t</name>
      <anchorfile>a00353.html</anchorfile>
      <anchor>aebd0db5ba03258273fced1e7a2c3a572</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BasisSetType::ValueMatrix_t</type>
      <name>ValueMatrix_t</name>
      <anchorfile>a00353.html</anchorfile>
      <anchor>a149c1e7db4c5ac1b2782ba3d007e6253</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BasisSetType::GradVector_t</type>
      <name>GradVector_t</name>
      <anchorfile>a00353.html</anchorfile>
      <anchor>a9ebb2430871d18bf107dfb19127ea23f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BasisSetType::GradMatrix_t</type>
      <name>GradMatrix_t</name>
      <anchorfile>a00353.html</anchorfile>
      <anchor>a69ff489ce4bc441443e358e4e35aac97</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; COT::value_type &gt;::RealType</type>
      <name>RealType</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a74e6a24325c99f567c54c93467cf0b4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; COT::value_type &gt;::ValueType</type>
      <name>ValueType</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>acb366a0ebdeeabed80c12e36910c0ed5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; COT::value_type &gt;::IndexType</type>
      <name>IndexType</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>ac7148e99945ba02f1e429b46d0e403de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; COT::value_type &gt;::HessType</type>
      <name>HessType</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a58b7a80dea1c1758e57ad88e898e9438</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; COT::value_type &gt;::IndexVector_t</type>
      <name>IndexVector_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>ae29498520b02c5ef3ca7e11929c088f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; COT::value_type &gt;::ValueVector_t</type>
      <name>ValueVector_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>ae759209a44e86cc2af33dc4d69e6df44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; COT::value_type &gt;::ValueMatrix_t</type>
      <name>ValueMatrix_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a65b92c39a7420412a885bfa1c4577b6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; COT::value_type &gt;::GradVector_t</type>
      <name>GradVector_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a93e3b64e8e4ac131290edcfba6fc3106</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; COT::value_type &gt;::GradMatrix_t</type>
      <name>GradMatrix_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a5e7be7d3c6a044ee3c99dd95f63dfede</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; COT::value_type &gt;::HessVector_t</type>
      <name>HessVector_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>afd2610339b8c7d45968099c1c256db68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; COT::value_type &gt;::HessMatrix_t</type>
      <name>HessMatrix_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>aefeee4939147e0d54e4b7dafb26daf0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TinyVector&lt; HessType, OHMMS_DIM &gt;</type>
      <name>GGGType</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>aef1b45f2c244184714e5fcb6bb87ad2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; GGGType &gt;</type>
      <name>GGGVector_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a8fbe45949eb3665c4e9ce7562900ff13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; GGGType &gt;</type>
      <name>GGGMatrix_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>ad9d64609176495b009d086094279f5a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>scalar_traits&lt; COT::value_type &gt;::real_type</type>
      <name>RealType</name>
      <anchorfile>a00450.html</anchorfile>
      <anchor>ad9d31d913d450f63f6c95b0e77759089</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>scalar_traits&lt; COT::value_type &gt;::value_type</type>
      <name>ValueType</name>
      <anchorfile>a00450.html</anchorfile>
      <anchor>aecd205f12c410b3edb0ae812f6c7c1eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>IndexType</name>
      <anchorfile>a00450.html</anchorfile>
      <anchor>ab1b7173c76e5040d0161e695a129dafe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TinyVector&lt; RealType, DIM &gt;</type>
      <name>PosType</name>
      <anchorfile>a00450.html</anchorfile>
      <anchor>a2fb4a2cf24372ffb2efeaf47fc7de30d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TinyVector&lt; ValueType, DIM &gt;</type>
      <name>GradType</name>
      <anchorfile>a00450.html</anchorfile>
      <anchor>a978d841a8f80a2da012df5dbea6368c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tensor&lt; ValueType, DIM &gt;</type>
      <name>HessType</name>
      <anchorfile>a00450.html</anchorfile>
      <anchor>a5d01c407b78b0211d5b8cd73100d0904</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tensor&lt; ValueType, DIM &gt;</type>
      <name>TensorType</name>
      <anchorfile>a00450.html</anchorfile>
      <anchor>ac711e7d8db1da396d935f55fbd8396f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TinyVector&lt; Tensor&lt; ValueType, DIM &gt;, DIM &gt;</type>
      <name>GradHessType</name>
      <anchorfile>a00450.html</anchorfile>
      <anchor>a0087c5704bdc5467fd83764143fdaee1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; IndexType &gt;</type>
      <name>IndexVector_t</name>
      <anchorfile>a00450.html</anchorfile>
      <anchor>afc7fecff6dc6c0903d58b73c0f460cec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; ValueType &gt;</type>
      <name>ValueVector_t</name>
      <anchorfile>a00450.html</anchorfile>
      <anchor>adfe433549a23ec86b8ba4e52add14197</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; ValueType &gt;</type>
      <name>ValueMatrix_t</name>
      <anchorfile>a00450.html</anchorfile>
      <anchor>ada691a4322faea0b40b7f8f5842209aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; GradType &gt;</type>
      <name>GradVector_t</name>
      <anchorfile>a00450.html</anchorfile>
      <anchor>a40b08fe355b251891c3055064a3b2fef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; GradType &gt;</type>
      <name>GradMatrix_t</name>
      <anchorfile>a00450.html</anchorfile>
      <anchor>a004b0809b4054ce1b3f2c1d558488b64</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; HessType &gt;</type>
      <name>HessVector_t</name>
      <anchorfile>a00450.html</anchorfile>
      <anchor>a8ab9b6b2c9fba2def1bcbac9ef4e4d81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; HessType &gt;</type>
      <name>HessMatrix_t</name>
      <anchorfile>a00450.html</anchorfile>
      <anchor>a54d0fdcf47124e181b5dae60fcf93ee0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; GradHessType &gt;</type>
      <name>GradHessVector_t</name>
      <anchorfile>a00450.html</anchorfile>
      <anchor>ad825dbcee5c4f4389936e62dbcc2151a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; GradHessType &gt;</type>
      <name>GradHessMatrix_t</name>
      <anchorfile>a00450.html</anchorfile>
      <anchor>a2082066a1407e185877fb7c245d489ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalizedBasisSet</name>
      <anchorfile>a00353.html</anchorfile>
      <anchor>a5f13c35a7543315281487372bf4f2d50</anchor>
      <arglist>(ParticleSet &amp;ions, ParticleSet &amp;els)</arglist>
    </member>
    <member kind="function">
      <type>LocalizedBasisSet&lt; COT &gt; *</type>
      <name>makeClone</name>
      <anchorfile>a00353.html</anchorfile>
      <anchor>a3b6ca5d32a7f966c92c0536ef51a722c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBasisSetSize</name>
      <anchorfile>a00353.html</anchorfile>
      <anchor>ad72930196e0b83bb67f1f954799b5edf</anchor>
      <arglist>(int nbs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00353.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00353.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateWithHessian</name>
      <anchorfile>a00353.html</anchorfile>
      <anchor>aa465275b00d2378301efcf1cb3450aab</anchor>
      <arglist>(const ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateWithThirdDeriv</name>
      <anchorfile>a00353.html</anchorfile>
      <anchor>afd33a6fc3cf9483b4a149f9dfc1576e0</anchor>
      <arglist>(const ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateThirdDerivOnly</name>
      <anchorfile>a00353.html</anchorfile>
      <anchor>ae5ec5d73995dbfe1430bfb665a9c6904</anchor>
      <arglist>(const ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateForWalkerMove</name>
      <anchorfile>a00353.html</anchorfile>
      <anchor>a293c140ece4859a971141eae5ddad2a6</anchor>
      <arglist>(const ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateForWalkerMove</name>
      <anchorfile>a00353.html</anchorfile>
      <anchor>a74350ed2c0fa924cc0b001b3a59ab000</anchor>
      <arglist>(const ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateForPtclMove</name>
      <anchorfile>a00353.html</anchorfile>
      <anchor>ac8389bd55ef2af388a7986b247910f9c</anchor>
      <arglist>(const ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateAllForPtclMove</name>
      <anchorfile>a00353.html</anchorfile>
      <anchor>a35a228e785ab4e4ba8bf19f25d385ef5</anchor>
      <arglist>(const ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateForPtclMoveWithHessian</name>
      <anchorfile>a00353.html</anchorfile>
      <anchor>a17ab143d63d269cb90db997c4803f87b</anchor>
      <arglist>(const ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00353.html</anchorfile>
      <anchor>aee77a8de1d71511dd0cbca6e50b3a797</anchor>
      <arglist>(int icenter, COT *aos)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasisSetBase</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a88f357bcb2ac8fabc8bcfebe39956a06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BasisSetBase</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>ac8b05fd8b0234cd0548f51c7ea29fca7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a4465d2d9a050e85505d637045b1b1b5d</anchor>
      <arglist>(int ntargets)</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>getBasisSetSize</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a65f6ac0bacce5e72fb08d576c652c385</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkInVariables</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a88a6186be563e27aae6c96d5cb158a1c</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a5f6106b3d71cd4680414f394b491f076</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="variable">
      <type>const ParticleSet &amp;</type>
      <name>CenterSys</name>
      <anchorfile>a00353.html</anchorfile>
      <anchor>a73497e973e6854a8cb17af7c8b8b1c17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumCenters</name>
      <anchorfile>a00353.html</anchorfile>
      <anchor>a660b39b9516b5c23ab7bb18a6be11e3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumTargets</name>
      <anchorfile>a00353.html</anchorfile>
      <anchor>af9a4edd257b214e4a031b7752090a301</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>BasisOffset</name>
      <anchorfile>a00353.html</anchorfile>
      <anchor>a3a2e42e48c1ef5f3bd9dc35b2f36da60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; COT * &gt;</type>
      <name>LOBasis</name>
      <anchorfile>a00353.html</anchorfile>
      <anchor>a6bc85309973ca933a7a591d15e3b94ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; COT * &gt;</type>
      <name>LOBasisSet</name>
      <anchorfile>a00353.html</anchorfile>
      <anchor>a5bb19847a8096a134118f72511ecbd63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DistanceTableData *</type>
      <name>myTable</name>
      <anchorfile>a00353.html</anchorfile>
      <anchor>a9f702016cb92cfe679a693f13489ae57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>BasisSetSize</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>acadf2ecf82f07d9d752878fe2db483c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>ActivePtcl</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>aada03bd100177a3173009a08b1cce851</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>Counter</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a26ff1d8425b0bbfb0b1439580bfb5664</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueVector_t</type>
      <name>Phi</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>af31a2633801ddd347777c2a1f67e5b5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradVector_t</type>
      <name>dPhi</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>aab9eca8f4a35321944e5ae0c3b5b2d2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueVector_t</type>
      <name>d2Phi</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a3dbbab2af5137283e8cb5548372fc61b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HessVector_t</type>
      <name>grad_grad_Phi</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a65c24f6458b4490894382beef549be15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GGGVector_t</type>
      <name>grad_grad_grad_Phi</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>aea3d7ffe5c9429ed2fc19d3469704e6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>Temp</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a94c38b1e7928c125954ef399aa95708c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>Y</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a7f70e0a101dd19498a00bc8bedce07ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradMatrix_t</type>
      <name>dY</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>aa378fda5e9177a82b4b61f1bbac34b7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>d2Y</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>afea936632cc49cfdbb696b25d1498794</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::MixedSPOSet</name>
    <filename>a00378.html</filename>
    <templarg></templarg>
    <base>qmcplusplus::QMCTraits</base>
    <member kind="typedef">
      <type>TriCubicSplineT&lt; ValueType, RealType &gt;</type>
      <name>NGOType</name>
      <anchorfile>a00378.html</anchorfile>
      <anchor>a4bb92762ded691eef3b437eb64378e56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LOType::BasisSet_t</type>
      <name>BasisSet_t</name>
      <anchorfile>a00378.html</anchorfile>
      <anchor>a5e922e5ed59b1c47592e0fe915b73dc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MixedSPOSet</name>
      <anchorfile>a00378.html</anchorfile>
      <anchor>af107d0018488bbc1d53dae30dda5e59b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MixedSPOSet</name>
      <anchorfile>a00378.html</anchorfile>
      <anchor>aef98fc4f9c5de295cbdff9537fbe6a86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a00378.html</anchorfile>
      <anchor>ab8e4e3e2a7bf18888b71bdf9dda0770b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00378.html</anchorfile>
      <anchor>a0415eed325850ae4394ea4b7e9b493c0</anchor>
      <arglist>(NGOType *ngorb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLocalizedOrbitals</name>
      <anchorfile>a00378.html</anchorfile>
      <anchor>a7fc9a901f15f7a26332f6e5db3a50a6c</anchor>
      <arglist>(LOType *lo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00378.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00378.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>a00378.html</anchorfile>
      <anchor>a1aa463a265edd08d5a0077daca81ce48</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, int jorb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00378.html</anchorfile>
      <anchor>a6cea53bb411dd081662db70c4bc4f884</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, VV &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00378.html</anchorfile>
      <anchor>a5dd9583dfd5be8f7ea3743084660ba79</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, VV &amp;psi, GV &amp;dpsi, VV &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00378.html</anchorfile>
      <anchor>a8e937ff9692bdf96cc3885f8d43d2313</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, VM &amp;logdet, GM &amp;dlogdet, VM &amp;d2logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00378.html</anchorfile>
      <anchor>a5ca201d1d8a7480beab5013cab60e5f4</anchor>
      <arglist>(const WalkerSetRef &amp;W, int first, int last, vector&lt; VM &gt; &amp;logdet, vector&lt; GM &gt; &amp;dlogdet, vector&lt; VM &gt; &amp;d2logdet)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumberOfOrbitals</name>
      <anchorfile>a00378.html</anchorfile>
      <anchor>a929c09ba2f4cecc9368bc8269df6911d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LOType *</type>
      <name>LocalizedOrbitals</name>
      <anchorfile>a00378.html</anchorfile>
      <anchor>afe1b7d6d37b9644df5f2032d7a9b940a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; NGOType * &gt;</type>
      <name>GridOrbitals</name>
      <anchorfile>a00378.html</anchorfile>
      <anchor>a11708218142565233e7afcc6be33812f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::AtomicBasisBuilder</name>
    <filename>a00017.html</filename>
    <templarg>RFB</templarg>
    <base>qmcplusplus::BasisSetBuilder</base>
    <member kind="enumvalue">
      <type>@</type>
      <name>DONOT_EXPAND</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a77867ab4129f63159b37bca3b652a798aaa59a98cae06abb092ecd33379168b7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>GAUSSIAN_EXPAND</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a77867ab4129f63159b37bca3b652a798ac27e7b29443a225017ef919bcd2d34ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NATURAL_EXPAND</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a77867ab4129f63159b37bca3b652a798a21bb1c7cd05a62d95b994a36890dd55e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CARTESIAN_EXPAND</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a77867ab4129f63159b37bca3b652a798a3ccb7b1669902384fecf0e342d0a8793</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RFB::CenteredOrbitalType</type>
      <name>COT</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ae8a2be736adfc806dc98885ac65c63c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AtomicBasisBuilder</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a604765b6bf02f826c7ae05419a8797db</anchor>
      <arglist>(const string &amp;eName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>SPOSetBase *</type>
      <name>createSPOSet</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a46e67eedf3dcc334af312180e006c06a</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>COT *</type>
      <name>createAOSet</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a113edf7628d96074082efda3ab3c4910</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>expandYlm</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ae46ca5cb2d931d9bc88ded423404adc0</anchor>
      <arglist>(const string &amp;rnl, const QuantumNumberType &amp;nlms, int num, COT *aos, xmlNodePtr cur1, int expandlm=DONOT_EXPAND)</arglist>
    </member>
    <member kind="variable">
      <type>RFB</type>
      <name>radFuncBuilder</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a1842d63cad3493e11134398b30fb4ef0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>addsignforM</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ada60e10cce749abffe9f530bafae0ac0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>expandlm</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>aeeab71f50d94ff7f176e88a278af6540</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>Morder</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a9111b2e9a817216ad8692e8e866db74b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>sph</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>acca4f10544231863f494e56e04d2ba01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>basisType</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>af8f452e12de33609ebb7a28ee5321691</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>elementType</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a9f501229adaf503a75e58d1bd2872e55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>map&lt; string, int &gt;</type>
      <name>RnlID</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a80bcccb9eb121df798f9ebf67a292250</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>map&lt; string, int &gt;</type>
      <name>nlms_id</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>aeb5be92aefdd7f2740fbb632789c51df</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::BsplineAOBuilder</name>
    <filename>a00049.html</filename>
    <base>qmcplusplus::QMCTraits</base>
    <member kind="typedef">
      <type>BsplineFunctor&lt; RealType &gt;</type>
      <name>RadialOrbitalType</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>ab65245a34553949d81dedf081ef87760</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphericalBasisSet&lt; RadialOrbitalType &gt;</type>
      <name>CenteredOrbitalType</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>af75a2105e61ed68bedf899d7ef7ad904</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BsplineAOBuilder</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a0b13dcfdc952235eafb3cc6e6b5e4de4</anchor>
      <arglist>(xmlNodePtr cur=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrbitalSet</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a342aca906041233d6b8e006d46907edf</anchor>
      <arglist>(CenteredOrbitalType *oset, const std::string &amp;acenter)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addGrid</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a86d93b269a8b7026dd82eb38178e4955</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addRadialOrbital</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>ad3bb5090308ec932ffd62a8892b2a8ee</anchor>
      <arglist>(xmlNodePtr cur, const QuantumNumberType &amp;nlms, bool useSphericalHarmonicsNormalization=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putCommon</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a06c38569428abd7d32c82f3763e8cf7a</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>CenteredOrbitalType *</type>
      <name>m_orbitals</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a07ee3f19031609d943db8bf4d358cece</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_species</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a399e17fdbfe93ba51fc15d8930c68980</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::GTOBuilder</name>
    <filename>a00251.html</filename>
    <base>qmcplusplus::QMCTraits</base>
    <member kind="typedef">
      <type>GaussianCombo&lt; RealType &gt;</type>
      <name>RadialOrbitalType</name>
      <anchorfile>a00251.html</anchorfile>
      <anchor>a78f3696fa40b965b9ed416838e5a3d90</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphericalBasisSet&lt; RadialOrbitalType &gt;</type>
      <name>CenteredOrbitalType</name>
      <anchorfile>a00251.html</anchorfile>
      <anchor>af75a2105e61ed68bedf899d7ef7ad904</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GTOBuilder</name>
      <anchorfile>a00251.html</anchorfile>
      <anchor>a76c6b4ee6eb969c44522c2cc11f74c8b</anchor>
      <arglist>(xmlNodePtr cur=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrbitalSet</name>
      <anchorfile>a00251.html</anchorfile>
      <anchor>a342aca906041233d6b8e006d46907edf</anchor>
      <arglist>(CenteredOrbitalType *oset, const std::string &amp;acenter)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addGrid</name>
      <anchorfile>a00251.html</anchorfile>
      <anchor>a86d93b269a8b7026dd82eb38178e4955</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addRadialOrbital</name>
      <anchorfile>a00251.html</anchorfile>
      <anchor>a19315bb0c0b191bbd2f73ad5ae126be9</anchor>
      <arglist>(xmlNodePtr cur, const QuantumNumberType &amp;nlms)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putCommon</name>
      <anchorfile>a00251.html</anchorfile>
      <anchor>a06c38569428abd7d32c82f3763e8cf7a</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Normalized</name>
      <anchorfile>a00251.html</anchorfile>
      <anchor>aacbcd3c308ce1771fb38f921fb87a5d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CenteredOrbitalType *</type>
      <name>m_orbitals</name>
      <anchorfile>a00251.html</anchorfile>
      <anchor>a07ee3f19031609d943db8bf4d358cece</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_species</name>
      <anchorfile>a00251.html</anchorfile>
      <anchor>a399e17fdbfe93ba51fc15d8930c68980</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::MolecularBasisBuilder</name>
    <filename>a00384.html</filename>
    <templarg>RFB</templarg>
    <base>qmcplusplus::BasisSetBuilder</base>
    <member kind="typedef">
      <type>RFB::CenteredOrbitalType</type>
      <name>COT</name>
      <anchorfile>a00384.html</anchorfile>
      <anchor>ae8a2be736adfc806dc98885ac65c63c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LocalizedBasisSet&lt; COT &gt;</type>
      <name>ThisBasisSetType</name>
      <anchorfile>a00384.html</anchorfile>
      <anchor>abc2d8f5498c5085233985d3b5102546e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MolecularBasisBuilder</name>
      <anchorfile>a00384.html</anchorfile>
      <anchor>a8e4ab557300f1572db5bc451e5afd389</anchor>
      <arglist>(ParticleSet &amp;els, ParticleSet &amp;ions, bool cusp=false, string cusp_info=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00384.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>SPOSetBase *</type>
      <name>createSPOSet</name>
      <anchorfile>a00384.html</anchorfile>
      <anchor>a46e67eedf3dcc334af312180e006c06a</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet &amp;</type>
      <name>targetPtcl</name>
      <anchorfile>a00384.html</anchorfile>
      <anchor>a1a952580e121ccf8f929cadf8d1e0a5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet &amp;</type>
      <name>sourcePtcl</name>
      <anchorfile>a00384.html</anchorfile>
      <anchor>a521b26e24d441b710c7b5668002ed60f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ThisBasisSetType *</type>
      <name>thisBasisSet</name>
      <anchorfile>a00384.html</anchorfile>
      <anchor>a218b21a920cb382258d05ebbfe7d0744</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, BasisSetBuilder * &gt;</type>
      <name>aoBuilders</name>
      <anchorfile>a00384.html</anchorfile>
      <anchor>a433990d5a273c033573130ea914b0404</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>cuspCorr</name>
      <anchorfile>a00384.html</anchorfile>
      <anchor>a995652c33a033444e794256952d491a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>cuspInfo</name>
      <anchorfile>a00384.html</anchorfile>
      <anchor>ae4798700606283473e8db2d2a40d75c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::PadeOrbital</name>
    <filename>a00454.html</filename>
    <templarg>T</templarg>
    <base>OptimizableFunctorBase</base>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a265a253612b46abed17c61b0a5e5ce30</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PadeOrbital</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a5cf9f6c24a0229637690d323124d8c84</anchor>
      <arglist>(const char *node_name=&quot;radfunc&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PadeOrbital</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a068fab196522aee5bff9b3b8404fe05c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OptimizableFunctorBase *</type>
      <name>makeClone</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4747acd34f8d2daa0656125f1290e4d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a6a91c8094ddd49aa8a2da9df6b439164</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aff351ffb66160b6458d6057fa6bc2a5f</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putBasisGroup</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a806f7ea26ab76c46abcf798b5d98c68d</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOptimizables</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab2f9dfe45260b011f6fcc8b2d12ee747</anchor>
      <arglist>(VarRegistry&lt; real_type &gt; &amp;vlist)</arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>a0</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a8c72ab9d142f2010aaa7e940fc18811b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>a1</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a463bbc1cefe0f84853840b77a823b4d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>a2</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a994b4f6db5fbbd9f8bea4c9b6721a088</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>a3</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a8a6caa41fc1917ebb01effede95630ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>rcut</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac0b4d11b912b1ab288453a4beec9f8aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>nodeName</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aab1a064968614e9937da4edb37bebfd9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::NGOrbital</name>
    <filename>a00407.html</filename>
    <base>OptimizableFunctorBase</base>
    <member kind="typedef">
      <type>real_type</type>
      <name>value_type</name>
      <anchorfile>a00407.html</anchorfile>
      <anchor>a80349dc942856ab617148301967b7ff0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>real_type</type>
      <name>point_type</name>
      <anchorfile>a00407.html</anchorfile>
      <anchor>a2217530b26699beaef9f07d3fd6bd441</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimGridBase&lt; real_type &gt;</type>
      <name>grid_type</name>
      <anchorfile>a00407.html</anchorfile>
      <anchor>adf9f4feb83a86fdd269e9379f146a6d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimCubicSpline&lt; real_type &gt;</type>
      <name>functor_type</name>
      <anchorfile>a00407.html</anchorfile>
      <anchor>aa98658d5a163acd862a991ab60598ef1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NGOrbital</name>
      <anchorfile>a00407.html</anchorfile>
      <anchor>a50713847083131409cf1cef587723f35</anchor>
      <arglist>(grid_type *agrid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NGOrbital</name>
      <anchorfile>a00407.html</anchorfile>
      <anchor>acfa252c26e1e16c52eb2d8170989a6fa</anchor>
      <arglist>(grid_type *agrid, const VV &amp;nv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00407.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00407.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00407.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00407.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>a00407.html</anchorfile>
      <anchor>a6a91c8094ddd49aa8a2da9df6b439164</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>a00407.html</anchorfile>
      <anchor>aff351ffb66160b6458d6057fa6bc2a5f</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00407.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>OptimizableFunctorBase *</type>
      <name>makeClone</name>
      <anchorfile>a00407.html</anchorfile>
      <anchor>a2c1afb20d9f50d666f13f6be2a346982</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>a00407.html</anchorfile>
      <anchor>af08f1f70ecd1cddcf7d274cbcad42f40</anchor>
      <arglist>(real_type r, real_type rinv)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>evaluateAll</name>
      <anchorfile>a00407.html</anchorfile>
      <anchor>ac64a0f2cc344ec472c7e18a49239c180</anchor>
      <arglist>(real_type r, real_type rinv)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>evaluateWithThirdDeriv</name>
      <anchorfile>a00407.html</anchorfile>
      <anchor>a3d13330ebb32fe1ce74bb6da69634dbb</anchor>
      <arglist>(real_type r, real_type rinv)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator()</name>
      <anchorfile>a00407.html</anchorfile>
      <anchor>a8241fba9250c054ff01e6ec138d60ebf</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>operator()</name>
      <anchorfile>a00407.html</anchorfile>
      <anchor>afcb8074d9cb5b91d454e2cc2b268cd2d</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>grid_type &amp;</type>
      <name>grid</name>
      <anchorfile>a00407.html</anchorfile>
      <anchor>a9fdd57578b0da2993eb79a953bf4248c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGridManager</name>
      <anchorfile>a00407.html</anchorfile>
      <anchor>a7ba09d460448e1743491036886e4dcd4</anchor>
      <arglist>(bool willmanage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>a00407.html</anchorfile>
      <anchor>ac6e408e3d5a8a585bcc41f42e9cb2abc</anchor>
      <arglist>(int imin, value_type yp1, int imax, value_type ypn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00407.html</anchorfile>
      <anchor>a578be9c59132b8633a67a98c39318777</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="variable">
      <type>functor_type</type>
      <name>myFunc</name>
      <anchorfile>a00407.html</anchorfile>
      <anchor>a44d2a3a616c6ede49151f0fb04fad000</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Y</name>
      <anchorfile>a00407.html</anchorfile>
      <anchor>a8b4dc77b2f75ec3e80eb8987f98db7af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>dY</name>
      <anchorfile>a00407.html</anchorfile>
      <anchor>a6a8818d83e16d75f6e13cc9df1e809ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>d2Y</name>
      <anchorfile>a00407.html</anchorfile>
      <anchor>ab2751661aab00028080a57c4747bd245</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>d3Y</name>
      <anchorfile>a00407.html</anchorfile>
      <anchor>ab1d41da3b5323d7b5813290c2f465e3a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::NGOBuilder</name>
    <filename>a00406.html</filename>
    <base>qmcplusplus::QMCTraits</base>
    <member kind="typedef">
      <type>NGOrbital</type>
      <name>RadialOrbitalType</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>a4530f061e747ba110b5dec195b8e809b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NGOrbital::grid_type</type>
      <name>GridType</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>acc1b891fe6eef7445a06ffdc0fd4f4aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphericalBasisSet&lt; RadialOrbitalType, GridType &gt;</type>
      <name>CenteredOrbitalType</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>a69e0689a4c6bf57a509c540c2fb7becb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NGOBuilder</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ae4b827d64424e49ae9fbb543040edf17</anchor>
      <arglist>(xmlNodePtr cur=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NGOBuilder</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ab8a4cc929540189e6ab10c21a2ace73a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrbitalSet</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>a342aca906041233d6b8e006d46907edf</anchor>
      <arglist>(CenteredOrbitalType *oset, const std::string &amp;acenter)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addGrid</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>a86d93b269a8b7026dd82eb38178e4955</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addRadialOrbital</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>a19315bb0c0b191bbd2f73ad5ae126be9</anchor>
      <arglist>(xmlNodePtr cur, const QuantumNumberType &amp;nlms)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putCommon</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>a06c38569428abd7d32c82f3763e8cf7a</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Normalized</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>aacbcd3c308ce1771fb38f921fb87a5d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CenteredOrbitalType *</type>
      <name>m_orbitals</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>a07ee3f19031609d943db8bf4d358cece</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GridType *</type>
      <name>input_grid</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>aeb95021b77ea6a125049f0dfa549b834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>m_rcut</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>adedde314eedd47c85644de82f95e6e71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>QuantumNumberType</type>
      <name>m_nlms</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>a41b7ca2511163e4aaf9331fca4ad8fd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_species</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>a399e17fdbfe93ba51fc15d8930c68980</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_infunctype</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ab1bd65f1e7ea82b4773d2de6fbd84948</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>addGaussian</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>a6f60776f3fb0e9e9ea3ebda8be52838b</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>addSlater</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ade5a070efaca1604f79e8053f1459802</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>addNumerical</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>a684ab6a501a1e13aa5e5753bc2a4db32</anchor>
      <arglist>(xmlNodePtr cur, const string &amp;dsname)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>addPade</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>accefa9694fe5e2fe0e85b5499f5baedc</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>hid_t</type>
      <name>m_fileid</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ae187974ba78eb06b7820133b16437ae6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::STOBuilder</name>
    <filename>a00594.html</filename>
    <base>qmcplusplus::QMCTraits</base>
    <member kind="typedef">
      <type>SlaterCombo&lt; RealType &gt;</type>
      <name>RadialOrbitalType</name>
      <anchorfile>a00594.html</anchorfile>
      <anchor>aac6905858543662f3719342d76d8e3f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphericalBasisSet&lt; RadialOrbitalType &gt;</type>
      <name>CenteredOrbitalType</name>
      <anchorfile>a00594.html</anchorfile>
      <anchor>af75a2105e61ed68bedf899d7ef7ad904</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>STOBuilder</name>
      <anchorfile>a00594.html</anchorfile>
      <anchor>a4e8e88463bc97d609cdaf7eabbf27c42</anchor>
      <arglist>(xmlNodePtr cur=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrbitalSet</name>
      <anchorfile>a00594.html</anchorfile>
      <anchor>a342aca906041233d6b8e006d46907edf</anchor>
      <arglist>(CenteredOrbitalType *oset, const std::string &amp;acenter)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addGrid</name>
      <anchorfile>a00594.html</anchorfile>
      <anchor>a86d93b269a8b7026dd82eb38178e4955</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addRadialOrbital</name>
      <anchorfile>a00594.html</anchorfile>
      <anchor>a19315bb0c0b191bbd2f73ad5ae126be9</anchor>
      <arglist>(xmlNodePtr cur, const QuantumNumberType &amp;nlms)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putCommon</name>
      <anchorfile>a00594.html</anchorfile>
      <anchor>a06c38569428abd7d32c82f3763e8cf7a</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Normalized</name>
      <anchorfile>a00594.html</anchorfile>
      <anchor>aacbcd3c308ce1771fb38f921fb87a5d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CenteredOrbitalType *</type>
      <name>m_orbitals</name>
      <anchorfile>a00594.html</anchorfile>
      <anchor>a07ee3f19031609d943db8bf4d358cece</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_species</name>
      <anchorfile>a00594.html</anchorfile>
      <anchor>a399e17fdbfe93ba51fc15d8930c68980</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::MuffinTinClass</name>
    <filename>a00391.html</filename>
    <member kind="function">
      <type>void</type>
      <name>set_lattice</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a017267ed094004a9930cc8f7933a9166</anchor>
      <arglist>(Tensor&lt; RealType, 3 &gt; lattice)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_center</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a95cc1805def0d55624a900939cf27eaa</anchor>
      <arglist>(TinyVector&lt; double, 3 &gt; center)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_APW_radius</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a9729ace45c1e0c5d10408e05f4b1fdb7</anchor>
      <arglist>(RealType radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_APW_num_points</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a536f82b7ff95d2f93a27f3809cc5bf42</anchor>
      <arglist>(int num_points)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init_APW</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a2f4abd5db145c93c365562da0a1eb357</anchor>
      <arglist>(Vector&lt; double &gt; rgrid, int lmax, int numOrbitals)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_APW</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a6a8b4f31aefd77f0ce81cc19fe77f6af</anchor>
      <arglist>(int orbNum, TinyVector&lt; double, 3 &gt; k, Array&lt; complex&lt; double &gt;, 2 &gt; &amp;u_lm, Array&lt; complex&lt; double &gt;, 1 &gt; &amp;du_lm_final, double Z)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inside</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a760a1edcab523c6b0aa4277d796bc317</anchor>
      <arglist>(TinyVector&lt; double, 3 &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inside</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a7596694febcb71c8e96fa7e200513721</anchor>
      <arglist>(TinyVector&lt; double, 3 &gt; r, bool &amp;in, bool &amp;needBlend)</arglist>
    </member>
    <member kind="function">
      <type>TinyVector&lt; double, 3 &gt;</type>
      <name>disp</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a7fb62e25619a43d6ae6811cc8bd2030a</anchor>
      <arglist>(TinyVector&lt; double, 3 &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a5144ac9eb9e9be0a718637914cca96c7</anchor>
      <arglist>(TinyVector&lt; double, 3 &gt; r, Vector&lt; complex&lt; double &gt; &gt; &amp;phi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a062ca3c3e57c8aab674c8c8223757710</anchor>
      <arglist>(TinyVector&lt; double, 3 &gt; r, Vector&lt; complex&lt; double &gt; &gt; &amp;phi, Vector&lt; TinyVector&lt; complex&lt; double &gt;, 3 &gt; &gt; &amp;grad, Vector&lt; complex&lt; double &gt; &gt; &amp;lapl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>ade66335df9b10c9ae9cb5c7311c5a03f</anchor>
      <arglist>(TinyVector&lt; double, 3 &gt; r, Vector&lt; complex&lt; double &gt; &gt; &amp;phi, Vector&lt; TinyVector&lt; complex&lt; double &gt;, 3 &gt; &gt; &amp;grad, Vector&lt; Tensor&lt; complex&lt; double &gt;, 3 &gt; &gt; &amp;hess)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFD</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a22ecb4c30bd86792e28ef132e30aa513</anchor>
      <arglist>(TinyVector&lt; double, 3 &gt; r, Vector&lt; complex&lt; double &gt; &gt; &amp;phi, Vector&lt; TinyVector&lt; complex&lt; double &gt;, 3 &gt; &gt; &amp;grad, Vector&lt; complex&lt; double &gt; &gt; &amp;lapl)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_num_orbitals</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a26ab93602e397eae8b4bfa8e98a99050</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_APW_radius</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a31d9593407be06e5f82dd16818f002ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_blend_radius</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>ace72600e1a76a99d76d3d2ea812dbd80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>blend_func</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a48e43990bbc77b498ed7daddb7501678</anchor>
      <arglist>(double r, double &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>blend_func</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a8e42cd39c59819adb1ada787f520cbcd</anchor>
      <arglist>(double r, double &amp;b, double &amp;db, double &amp;d2b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_num_core</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>afd2dc01bdb69dc082dbb90ffcc5df752</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCore</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>abcb72b567af1c0b419b626be76be806d</anchor>
      <arglist>(int l, int m, Vector&lt; double &gt; &amp;r, Vector&lt; double &gt; &amp;g0, TinyVector&lt; double, 3 &gt; k, double Z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateCore</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a586846de7d49f7a52cefe927d2f42fcb</anchor>
      <arglist>(TinyVector&lt; double, 3 &gt; r, Vector&lt; complex&lt; double &gt; &gt; &amp;phi, int first=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateCore</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a791a40eb4585dcc960a1d2fbb349250f</anchor>
      <arglist>(TinyVector&lt; double, 3 &gt; r, Vector&lt; complex&lt; double &gt; &gt; &amp;phi, Vector&lt; TinyVector&lt; complex&lt; double &gt;, 3 &gt; &gt; &amp;grad, Vector&lt; complex&lt; double &gt; &gt; &amp;lapl, int first=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateCore</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a6008b4c2a6d1c775abdfce43051ff908</anchor>
      <arglist>(TinyVector&lt; double, 3 &gt; r, Vector&lt; complex&lt; double &gt; &gt; &amp;phi, Vector&lt; TinyVector&lt; complex&lt; double &gt;, 3 &gt; &gt; &amp;grad, Vector&lt; Tensor&lt; complex&lt; double &gt;, 3 &gt; &gt; &amp;hess, int first=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MuffinTinClass</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>aff2aed02f03a13f1f43ad3ed71c937e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MuffinTinClass</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>ab48ddeac30c94b804c0856157cbbcbc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Atom</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>aee9da9ab4b5eec3e918cc4ebdb936654</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>QMCTraits::RealType</type>
      <name>RealType</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a4228079a723a75bfce1ee275d2d9ad39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>CrystalLattice&lt; RealType, OHMMS_DIM &gt;</type>
      <name>UnitCellType</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a30fdd55957d807d8a168610ad3341d5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>LinFit</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a7d60f8a5048138c3b7c5b7e1ab0995f9</anchor>
      <arglist>(vector&lt; double &gt; &amp;y, vector&lt; TinyVector&lt; double, 2 &gt; &gt; &amp;F, TinyVector&lt; double, 2 &gt; &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>LinFit</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>abdba9f2255ac76cff36e532ca10f60e0</anchor>
      <arglist>(vector&lt; double &gt; &amp;y, vector&lt; TinyVector&lt; double, 3 &gt; &gt; &amp;F, TinyVector&lt; double, 3 &gt; &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>evalYlm</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a2fd59c9e9a1851d5e6358dbcaee2cb62</anchor>
      <arglist>(TinyVector&lt; double, 3 &gt; rhat)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>UnitCellType</type>
      <name>PrimLattice</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>ab1738eb64e92cc7ec564041422641165</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TinyVector&lt; double, 3 &gt;</type>
      <name>Center</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>af920c7deda6d1c5182dd7b81b4be3868</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; TinyVector&lt; double, 3 &gt; &gt;</type>
      <name>kPoints</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a116f19873bd04a59092821ec3cf49d86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>APWRadius</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a8e14ed5cb97682506d2f98e2653c31e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>BlendRadius</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a0edea69077e2f5c19331baa2f52fc9d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>drMin</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a6d9fe9357237f30dd2a8eff4ca510a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumOrbitals</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a092436aa5a88afa396b4df35f1f79395</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>lMax</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a899cb78f8cd6cf55f82c8deb04c1f916</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; complex&lt; double &gt; &gt;</type>
      <name>YlmVec</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>ac43190d9f3ccb6f8b13b315b533c2b41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; complex&lt; double &gt; &gt;</type>
      <name>dYlmVec</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a78aa477dd85022b5461581f1a249a8e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NUgrid *</type>
      <name>RadialGrid</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>ae672b33aaa78e82a2ad5a1207f1b12d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>multi_NUBspline_1d_z *</type>
      <name>RadialSplines</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a4b70e80e2d359cd653caa65ee37b9585</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>iSmall</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a9aae2da2c6959fd57a3b3c786010fb04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>rSmall</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>adbcc28bb55d7e6583b01ef48de64c6ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; ComplexExpFitClass&lt; 4 &gt; &gt;</type>
      <name>Small_r_APW_Fits</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a5f4fd4eb13e4e4daf940a234beb7353b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; complex&lt; double &gt; &gt;</type>
      <name>RadialVec</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a87195f71308f50febe3547e10629f8ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; complex&lt; double &gt; &gt;</type>
      <name>dRadialVec</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a077cc85208fa409d965fbd3e72ded8b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; complex&lt; double &gt; &gt;</type>
      <name>d2RadialVec</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a68bf7d83328d9c8ea662602d0025f980</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumCore</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a823556f3277211abd73205cf8f4e8e14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; NUBspline_1d_d * &gt;</type>
      <name>CoreSplines</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a52366e17a423c2b83599c6f099d657ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>rSmallCore</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a986bed58806766950d90d3a7c444eb17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; ExpFitClass&lt; 4 &gt; &gt;</type>
      <name>Small_r_Core_Fits</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a6a669ae1914bb55959acf161653de11d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; ExpFitClass&lt; 2 &gt; &gt;</type>
      <name>Large_r_Core_Fits</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>ad1cada2cdad72832aa5cab0d22c7a84e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; TinyVector&lt; double, 2 &gt; &gt;</type>
      <name>LargerCoreCoefs</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a355dab904143f61d01abc08b60e10a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; TinyVector&lt; int, 2 &gt; &gt;</type>
      <name>Core_lm</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>abe9decc6db58c760404f2e09092e07a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; TinyVector&lt; double, 3 &gt; &gt;</type>
      <name>Core_kVecs</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a7503f3add1b23761eb5f062487936160</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; double &gt;</type>
      <name>CoreRadii</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a8bf1b84405e048b49d855c7c3ee13c67</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>LAPWClass</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>adc93c72a8c8452a82fdeec9b6f7ca30a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::OptimizableSPOBuilder</name>
    <filename>a00447.html</filename>
    <base>qmcplusplus::BasisSetBuilder</base>
    <member kind="function">
      <type></type>
      <name>OptimizableSPOBuilder</name>
      <anchorfile>a00447.html</anchorfile>
      <anchor>a85a160ea7671b8e37d817192b0d08260</anchor>
      <arglist>(ParticleSet &amp;p, PtclPoolType &amp;psets, xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00447.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>SPOSetBase *</type>
      <name>createSPOSet</name>
      <anchorfile>a00447.html</anchorfile>
      <anchor>aace31b9b913d282640ce894186ba6ca4</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>map&lt; string, ParticleSet * &gt;</type>
      <name>PtclPoolType</name>
      <anchorfile>a00447.html</anchorfile>
      <anchor>a0878154607cbe00d8a425a977401e290</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>map&lt; string, SPOSetBase * &gt;</type>
      <name>SPOPoolType</name>
      <anchorfile>a00447.html</anchorfile>
      <anchor>a0561f9826d935f6d6f37060db8ca66a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleSet *</type>
      <name>targetPtcl</name>
      <anchorfile>a00447.html</anchorfile>
      <anchor>a38de935921735223bc6966d5b2d06efa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::OptimizableSPOSet</name>
    <filename>a00448.html</filename>
    <base>qmcplusplus::SPOSetBase</base>
    <member kind="function">
      <type></type>
      <name>OptimizableSPOSet</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>a9ee210ee333f0a186bd575c151210c08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptimizableSPOSet</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>afec25ac7fa201a6e15a60d426e6e7274</anchor>
      <arglist>(int num_orbs, SPOSetBase *gsOrbs, SPOSetBase *basisOrbs=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrbitalSetSize</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>abe2573f29355b07956892dc6bd7f12ca</anchor>
      <arglist>(int norbs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_active_basis</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>a2e7571930c29a451ab871d75b28843f4</anchor>
      <arglist>(vector&lt; vector&lt; int &gt; &gt; &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>aa1f5fd5d7265225dc6c8e2efa2036111</anchor>
      <arglist>(xmlNodePtr node, SPOPool_t &amp;spo_pool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>aee70ac47d82bb68d8ceceead7c033fe2</anchor>
      <arglist>(const opt_variables_type &amp;optvars)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateDerivatives</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>a82d71c91805526087a6de92b8a99e911</anchor>
      <arglist>(ParticleSet &amp;P, int iat, const opt_variables_type &amp;active, ValueMatrix_t &amp;d_phi, ValueMatrix_t &amp;d_lapl_phi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>a55614decceadf408ddc308827faada58</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>ae85c8d3c691c6837e7715f32f33b07ea</anchor>
      <arglist>(const ParticleSet &amp;P, const PosType &amp;r, vector&lt; RealType &gt; &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>a8d03182606ebdc99cb116d189b732f02</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi, GradVector_t &amp;dpsi, ValueVector_t &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>a46be445602815c4c7ab824bf189d2b7b</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi, GradVector_t &amp;dpsi, HessVector_t &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>ae91b5a23fbd5208cf10757eea50386c8</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, ValueMatrix_t &amp;d2logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>a625375c35e3d6917247acd1d76008768</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, HessMatrix_t &amp;grad_grad_logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>aa8c87ff012f3f2143027314b8024007f</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, HessMatrix_t &amp;grad_grad_logdet, GGGMatrix_t &amp;grad_grad_grad_logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateBasis</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>a533b54abf3aa95e6530759912f14c3fe</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;basis_val, GradMatrix_t &amp;basis_grad, ValueMatrix_t &amp;basis_lapl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyParamsFromMatrix</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>a871b29abc38ea32fb0d789f742f5d269</anchor>
      <arglist>(const opt_variables_type &amp;active, const Matrix&lt; RealType &gt; &amp;mat, vector&lt; RealType &gt; &amp;destVec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyParamsFromMatrix</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>a823fd81222e3c275f48260234847a105</anchor>
      <arglist>(const opt_variables_type &amp;active, const Matrix&lt; ComplexType &gt; &amp;mat, vector&lt; RealType &gt; &amp;destVec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>ab90a196e0b316c604f2f02b4a3c8ad79</anchor>
      <arglist>(int n, int m)</arglist>
    </member>
    <member kind="function">
      <type>SPOSetBase *</type>
      <name>makeClone</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>a554da28f08e243f4b89f64b2842c8749</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; vector&lt; TinyVector&lt; int, 2 &gt; &gt; &gt;</type>
      <name>ActiveBasis</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>a99824d416d3cbb3c5c91917107df5367</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>optimize::VariableSet</type>
      <name>opt_variables_type</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>a7889af7f2cc8ecdb39b57a278df4d3c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>optimize::VariableSet::variable_map_type</type>
      <name>variable_map_type</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>afef3bb1526675128213cd4dacc3e789d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addParameter</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>a851751eba64f1731068d0fb15e290a77</anchor>
      <arglist>(string id, int iorb, int basis)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>N</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>a7722c8ecbb62d99aee7ce68b1752f337</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>M</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>a5e78dbd5fd0fc01ba7b98dd15e27221e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>derivScale</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>a5f26f75ce87248f47795c960575f8579</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>thr</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>ad945a34b4f17dbc0775a81c8e5976b69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SPOSetBase *</type>
      <name>GSOrbitals</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>a75b7134b225aa3bc4788416d07d8cd3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SPOSetBase *</type>
      <name>BasisOrbitals</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>a0e3db831ace5bd4165fa4e6a71fb02d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; RealType * &gt;</type>
      <name>ParamPointers</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>a31a7b0dda61f535589fb127efa8b02a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; TinyVector&lt; int, 2 &gt; &gt;</type>
      <name>ParamIndex</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>a58585da6ebae0644b7297692fa3ff71c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueVector_t</type>
      <name>GSVal</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>a08ae54d808a9a7bc3e527ac7a795fca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueVector_t</type>
      <name>BasisVal</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>a018c95da56950c8cd2ed640eb4efb18b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueVector_t</type>
      <name>GSLapl</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>a815dd23d91cbc32668e6baadde22d472</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueVector_t</type>
      <name>BasisLapl</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>a3ecc0f97ae16248f6ed587c586160f66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GradVector_t</type>
      <name>GSGrad</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>ab4de051f8ea453e6f2eb3057e5a5eaab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GradVector_t</type>
      <name>BasisGrad</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>aa5e1bdf63324896e46beff5bd2e4e5bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueMatrix_t</type>
      <name>GSValMatrix</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>a035a7cab966da544bf19b04cee07f02c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueMatrix_t</type>
      <name>BasisValMatrix</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>a61de47a637e047496507e2c6dde43b7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueMatrix_t</type>
      <name>GSLaplMatrix</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>a94ae53a71f43444f3b1188ad81c88c43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueMatrix_t</type>
      <name>BasisLaplMatrix</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>ad95dcdbb44518a883168766094c9d0d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueMatrix_t</type>
      <name>GradTmpSrc</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>a2c4b8642034ef00197fef2594720dd7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueMatrix_t</type>
      <name>GradTmpDest</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>a4e503baf1944c904c7ed82e9ccb6783a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GradMatrix_t</type>
      <name>GSGradMatrix</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>add00bd89e05a1ef787dc4108d545b3fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GradMatrix_t</type>
      <name>BasisGradMatrix</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>a186fe3c73a5f8f08354b9dab67a129c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; PosType &gt;</type>
      <name>CachedPos</name>
      <anchorfile>a00448.html</anchorfile>
      <anchor>a1b353f922a9ec3219377d0457744b3c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::OrbitalConstraintsBase</name>
    <filename>a00449.html</filename>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <member kind="function" virtualness="pure">
      <type>virtual OrbitalBase *</type>
      <name>createTwoBody</name>
      <anchorfile>a00449.html</anchorfile>
      <anchor>aa75a68df52b5ae8eb67e69db557f0033</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual OrbitalBase *</type>
      <name>createOneBody</name>
      <anchorfile>a00449.html</anchorfile>
      <anchor>ac6a9d841e265eb1e0bfae48168e7f469</anchor>
      <arglist>(ParticleSet &amp;source)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::DummyGrid</name>
    <filename>a00189.html</filename>
    <member kind="function">
      <type>void</type>
      <name>locate</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>afc971356918611e7a55adb44b1f75d7e</anchor>
      <arglist>(double r)</arglist>
    </member>
    <member kind="function">
      <type>DummyGrid *</type>
      <name>makeClone</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>afa99b6f5382c4e05e13695efbc2e41f5</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::OrbitalSetTraits</name>
    <filename>a00450.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::PWBasis</name>
    <filename>a00491.html</filename>
    <base>qmcplusplus::QMCTraits</base>
    <member kind="enumvalue">
      <type>@</type>
      <name>PW_VALUE</name>
      <anchorfile>a00491.html</anchorfile>
      <anchor>a157d5577a5b2f5986037d0d09c7dc77daa29d88315ac46d4c8d22784fc3d3f8e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PW_LAP</name>
      <anchorfile>a00491.html</anchorfile>
      <anchor>a157d5577a5b2f5986037d0d09c7dc77da3b24612f756360d7fdacdd4c06bf75e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PW_GRADX</name>
      <anchorfile>a00491.html</anchorfile>
      <anchor>a157d5577a5b2f5986037d0d09c7dc77dad0cf72630b1a928ff5cba09a428c40c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PW_GRADY</name>
      <anchorfile>a00491.html</anchorfile>
      <anchor>a157d5577a5b2f5986037d0d09c7dc77daf936cbf59b5ecb045192caeb2e12fd37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PW_GRADZ</name>
      <anchorfile>a00491.html</anchorfile>
      <anchor>a157d5577a5b2f5986037d0d09c7dc77dae9d7d277537caef75196c617eb16db2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PW_MAXINDEX</name>
      <anchorfile>a00491.html</anchorfile>
      <anchor>a157d5577a5b2f5986037d0d09c7dc77da6384ed4608f5d2e0ab7fbfc0c53c6e89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleSet::ParticleLayout_t</type>
      <name>ParticleLayout_t</name>
      <anchorfile>a00491.html</anchorfile>
      <anchor>accfc65540fd784272f9f2fd71851b8fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TinyVector&lt; IndexType, 3 &gt;</type>
      <name>GIndex_t</name>
      <anchorfile>a00491.html</anchorfile>
      <anchor>a420c282dc26fe012ba1ad9e20063e338</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PWBasis</name>
      <anchorfile>a00491.html</anchorfile>
      <anchor>ad635826112706517e43b93f51a746587</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PWBasis</name>
      <anchorfile>a00491.html</anchorfile>
      <anchor>a3542f815162f9a1e67c32d129b830cc0</anchor>
      <arglist>(const PosType &amp;twistangle)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PWBasis</name>
      <anchorfile>a00491.html</anchorfile>
      <anchor>a85e195390e1af1ca93871e92838fea06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>getBasisSetSize</name>
      <anchorfile>a00491.html</anchorfile>
      <anchor>a65f6ac0bacce5e72fb08d576c652c385</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTwistAngle</name>
      <anchorfile>a00491.html</anchorfile>
      <anchor>a185b12436cb39a6ed6a198547b5a1699</anchor>
      <arglist>(const PosType &amp;tang)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00491.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readbasis</name>
      <anchorfile>a00491.html</anchorfile>
      <anchor>a5d090f65bc098eca738ab803c02353a9</anchor>
      <arglist>(hid_t h5basisgroup, RealType ecutoff, ParticleLayout_t &amp;lat, const string &amp;pwname=&quot;planewaves&quot;, const string &amp;pwmultname=&quot;multipliers&quot;, bool resizeContainer=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>trimforecut</name>
      <anchorfile>a00491.html</anchorfile>
      <anchor>afe2558cdffed70629bdd0bcc3fbd1ed1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00491.html</anchorfile>
      <anchor>a4e0462e2988bc3b86c7ebf677b2a8a81</anchor>
      <arglist>(const PosType &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateAll</name>
      <anchorfile>a00491.html</anchorfile>
      <anchor>a324cd5800e4695b037f46b459e72a173</anchor>
      <arglist>(const ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; ComplexType &gt;</type>
      <name>Z</name>
      <anchorfile>a00491.html</anchorfile>
      <anchor>a09d4ba4c20d6a27327b4ef04558f5100</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; ComplexType &gt;</type>
      <name>Zv</name>
      <anchorfile>a00491.html</anchorfile>
      <anchor>a1d6be6b90e636878becbd65d40a2277b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>inputmap</name>
      <anchorfile>a00491.html</anchorfile>
      <anchor>a0a8afa001fdf53fd8137ec18ee0f4e66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumPlaneWaves</name>
      <anchorfile>a00491.html</anchorfile>
      <anchor>aae2f238d1cce4cb563f01f3775039b27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleLayout_t</type>
      <name>Lattice</name>
      <anchorfile>a00491.html</anchorfile>
      <anchor>a0d2cb760536b1d444fefd35557e89be1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>maxmaxg</name>
      <anchorfile>a00491.html</anchorfile>
      <anchor>ad1364b6c458a5b33c59146fca880e5e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GIndex_t</type>
      <name>maxg</name>
      <anchorfile>a00491.html</anchorfile>
      <anchor>a5c93df2c3ab2e10243a2822545072eab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>ecut</name>
      <anchorfile>a00491.html</anchorfile>
      <anchor>aa40a5ffae895b39b1563c823bc889dc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PosType</type>
      <name>twist</name>
      <anchorfile>a00491.html</anchorfile>
      <anchor>a414ecc74c7a20671d6775af617695cb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PosType</type>
      <name>twist_cart</name>
      <anchorfile>a00491.html</anchorfile>
      <anchor>a1b56ad0aab245b099060ae0f4d763387</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; GIndex_t &gt;</type>
      <name>gvecs</name>
      <anchorfile>a00491.html</anchorfile>
      <anchor>a926e701f474bdd18ef3f3534ac42842b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; GIndex_t &gt;</type>
      <name>gvecs_shifted</name>
      <anchorfile>a00491.html</anchorfile>
      <anchor>af7610c69a1ea33ed8b2a0da9dabcd74d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>minusModKplusG2</name>
      <anchorfile>a00491.html</anchorfile>
      <anchor>a29ee0ae177c4dd7049f678a230f56b7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; PosType &gt;</type>
      <name>kplusgvecs_cart</name>
      <anchorfile>a00491.html</anchorfile>
      <anchor>a3ea215ab72bf2a30387e1787f0b67356</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; ComplexType &gt;</type>
      <name>C</name>
      <anchorfile>a00491.html</anchorfile>
      <anchor>a53c5cbe28602893114f0580e50e5a01a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; int &gt;</type>
      <name>negative</name>
      <anchorfile>a00491.html</anchorfile>
      <anchor>ab7e518ddcb97b7b5986ecc7d0f58a50a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::PWOrbitalBuilder</name>
    <filename>a00492.html</filename>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>PWOrbitalBuilder</name>
      <anchorfile>a00492.html</anchorfile>
      <anchor>ab28b61f1b077372eb208f5d6983e9d01</anchor>
      <arglist>(ParticleSet &amp;els, TrialWaveFunction &amp;wfs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PWOrbitalBuilder</name>
      <anchorfile>a00492.html</anchorfile>
      <anchor>a9e23ed0ed961b2e5501b0a0553ce728a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00492.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>PWRealOrbitalSet</type>
      <name>SPOSetType</name>
      <anchorfile>a00492.html</anchorfile>
      <anchor>aa2cefa7c0b7218908efb62c76fd87b99</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>PWRealOrbitalSet::PWBasisPtr</type>
      <name>PWBasisPtr</name>
      <anchorfile>a00492.html</anchorfile>
      <anchor>a3b044c8d32b4faa164ccca58c21ee32a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ReadHDFWavefunction</name>
      <anchorfile>a00492.html</anchorfile>
      <anchor>af73108b52cb9b4cb876428b63929643b</anchor>
      <arglist>(hid_t hfile)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>hid_t</type>
      <name>getH5</name>
      <anchorfile>a00492.html</anchorfile>
      <anchor>a69e506cb03e6a85f016916a71d032346</anchor>
      <arglist>(xmlNodePtr cur, const char *aname)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>putSlaterDet</name>
      <anchorfile>a00492.html</anchorfile>
      <anchor>a3de92b49cdfa88f8174e3cf8a950597c</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>createPWBasis</name>
      <anchorfile>a00492.html</anchorfile>
      <anchor>a0dcbf0f64e7b88e14159103685a9e5d4</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>SPOSetBase *</type>
      <name>createPW</name>
      <anchorfile>a00492.html</anchorfile>
      <anchor>a354a04eb1fdb94aefc71de3430221c62</anchor>
      <arglist>(xmlNodePtr cur, int spinIndex)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>hid_t</type>
      <name>hfileID</name>
      <anchorfile>a00492.html</anchorfile>
      <anchor>adfb031f36ae06b21ac88e6c4ba8c2ace</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>xmlNodePtr</type>
      <name>rootNode</name>
      <anchorfile>a00492.html</anchorfile>
      <anchor>ac9191c14751641b6d3051e1c7051851e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PosType</type>
      <name>TwistAngle</name>
      <anchorfile>a00492.html</anchorfile>
      <anchor>aac4f685e85a459b4edc1c2a0f098452f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PWParameterSet *</type>
      <name>myParam</name>
      <anchorfile>a00492.html</anchorfile>
      <anchor>acda47a9feb3bf3fe2aec21c6aa667d38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PWBasisPtr</type>
      <name>myBasisSet</name>
      <anchorfile>a00492.html</anchorfile>
      <anchor>a3f27c01cc936d7fa2f521898142d57fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::PWOrbitalSet</name>
    <filename>a00493.html</filename>
    <base>qmcplusplus::SPOSetBase</base>
    <member kind="enumvalue">
      <type>@</type>
      <name>PW_VALUE</name>
      <anchorfile>a00493.html</anchorfile>
      <anchor>a1fb9092bcdeada2d206bdc74afbbe122aa29d88315ac46d4c8d22784fc3d3f8e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PW_LAP</name>
      <anchorfile>a00493.html</anchorfile>
      <anchor>a1fb9092bcdeada2d206bdc74afbbe122a3b24612f756360d7fdacdd4c06bf75e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PW_GRADX</name>
      <anchorfile>a00493.html</anchorfile>
      <anchor>a1fb9092bcdeada2d206bdc74afbbe122ad0cf72630b1a928ff5cba09a428c40c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PW_GRADY</name>
      <anchorfile>a00493.html</anchorfile>
      <anchor>a1fb9092bcdeada2d206bdc74afbbe122af936cbf59b5ecb045192caeb2e12fd37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PW_GRADZ</name>
      <anchorfile>a00493.html</anchorfile>
      <anchor>a1fb9092bcdeada2d206bdc74afbbe122ae9d7d277537caef75196c617eb16db2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PW_MAXINDEX</name>
      <anchorfile>a00493.html</anchorfile>
      <anchor>a1fb9092bcdeada2d206bdc74afbbe122a6384ed4608f5d2e0ab7fbfc0c53c6e89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PWBasis</type>
      <name>BasisSet_t</name>
      <anchorfile>a00493.html</anchorfile>
      <anchor>a2b53988f38d922de7f0f31b02aa2374e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PWBasis *</type>
      <name>PWBasisPtr</name>
      <anchorfile>a00493.html</anchorfile>
      <anchor>a6c8d5dfc8e5b34ed6a1d6d7d9ed27c4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PWOrbitalSet</name>
      <anchorfile>a00493.html</anchorfile>
      <anchor>a9825f007097347bf6b55765784ec5ba3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PWOrbitalSet</name>
      <anchorfile>a00493.html</anchorfile>
      <anchor>a22292b434fadb1c27d4f63a92cefdc12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SPOSetBase *</type>
      <name>makeClone</name>
      <anchorfile>a00493.html</anchorfile>
      <anchor>a554da28f08e243f4b89f64b2842c8749</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00493.html</anchorfile>
      <anchor>abac079a1d9f1f290e91a1e40e6842dbf</anchor>
      <arglist>(PWBasisPtr bset, int nbands, bool cleanup=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVector</name>
      <anchorfile>a00493.html</anchorfile>
      <anchor>ad28199618aec7ca6d9bf8b0dbe023568</anchor>
      <arglist>(const std::vector&lt; ComplexType &gt; &amp;coefs, int jorb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVector</name>
      <anchorfile>a00493.html</anchorfile>
      <anchor>a09f7f28f737668ab847496d54bb2dbdb</anchor>
      <arglist>(const std::vector&lt; RealType &gt; &amp;coefs, int jorb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00493.html</anchorfile>
      <anchor>a39ea173c92dae81ac977359c07ff55db</anchor>
      <arglist>(const opt_variables_type &amp;optVariables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrbitalSetSize</name>
      <anchorfile>a00493.html</anchorfile>
      <anchor>abe2573f29355b07956892dc6bd7f12ca</anchor>
      <arglist>(int norbs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00493.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>a00493.html</anchorfile>
      <anchor>a08d3fd2c7e9f95d79aad8daf3593d0cb</anchor>
      <arglist>(int ib, const PosType &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00493.html</anchorfile>
      <anchor>a55614decceadf408ddc308827faada58</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00493.html</anchorfile>
      <anchor>a8d03182606ebdc99cb116d189b732f02</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi, GradVector_t &amp;dpsi, ValueVector_t &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00493.html</anchorfile>
      <anchor>ae91b5a23fbd5208cf10757eea50386c8</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, ValueMatrix_t &amp;d2logdet)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>OwnBasisSet</name>
      <anchorfile>a00493.html</anchorfile>
      <anchor>ae07add6b7809e0631ba08b2ded4f6281</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PosType</type>
      <name>TwistAngle</name>
      <anchorfile>a00493.html</anchorfile>
      <anchor>aac4f685e85a459b4edc1c2a0f098452f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PWBasisPtr</type>
      <name>myBasisSet</name>
      <anchorfile>a00493.html</anchorfile>
      <anchor>a3f27c01cc936d7fa2f521898142d57fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; ValueType &gt;</type>
      <name>Temp</name>
      <anchorfile>a00493.html</anchorfile>
      <anchor>a8a6390380145a0e410474a65c147cf6a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::PWParameterSet</name>
    <filename>a00494.html</filename>
    <base>qmcplusplus::MPIObjectBase</base>
    <member kind="function">
      <type></type>
      <name>PWParameterSet</name>
      <anchorfile>a00494.html</anchorfile>
      <anchor>acb19dd625e49ce55b7020f7bd039d2c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00494.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkVersion</name>
      <anchorfile>a00494.html</anchorfile>
      <anchor>a2eb9bf23b361d2e39818ab5e42ed1f52</anchor>
      <arglist>(hid_t h)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEcut</name>
      <anchorfile>a00494.html</anchorfile>
      <anchor>a1b3a2d7e330862a1a1bce8e87beba868</anchor>
      <arglist>(double ecut)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getEigVectorType</name>
      <anchorfile>a00494.html</anchorfile>
      <anchor>a3ff74ee104c1c0497ee4abeb464d8a2a</anchor>
      <arglist>(hid_t h)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasComplexData</name>
      <anchorfile>a00494.html</anchorfile>
      <anchor>a76ba9369dfecd386cf0f68840d54b0a0</anchor>
      <arglist>(hid_t h)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>getTwistAngleName</name>
      <anchorfile>a00494.html</anchorfile>
      <anchor>a7b7a5e3c6414ed18128d1c5b05c76e7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>getTwistName</name>
      <anchorfile>a00494.html</anchorfile>
      <anchor>a8773833537c8bc3ab60376946e7c4c71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>getTwistName</name>
      <anchorfile>a00494.html</anchorfile>
      <anchor>a7dc4bba478b5c71cff36a6c01526f5c4</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>getBandName</name>
      <anchorfile>a00494.html</anchorfile>
      <anchor>a1f517d3d598e9e331ca9d2a6cd83a564</anchor>
      <arglist>(int ib, int ispin)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>getBandName</name>
      <anchorfile>a00494.html</anchorfile>
      <anchor>a6171cebf588a3ce112c651eabf3bde68</anchor>
      <arglist>(int ib)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>getSpinName</name>
      <anchorfile>a00494.html</anchorfile>
      <anchor>a9524e167d9007089ede672a1638a6a7b</anchor>
      <arglist>(int ispin)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>getEigVectorName</name>
      <anchorfile>a00494.html</anchorfile>
      <anchor>a5417706789a1dc4a921adfd10b23cc79</anchor>
      <arglist>(const string &amp;hg, int ib, int ispin)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>getEigVectorName</name>
      <anchorfile>a00494.html</anchorfile>
      <anchor>a412a75e7a503d67e5f64b6a10264ab14</anchor>
      <arglist>(int ib, int ispin)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>getCenterName</name>
      <anchorfile>a00494.html</anchorfile>
      <anchor>a60b660de5591e986a6a792fb9192d16b</anchor>
      <arglist>(const string &amp;hg, int ib)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>getOriginName</name>
      <anchorfile>a00494.html</anchorfile>
      <anchor>ae90d64d06e8f83d57fc8430f29847012</anchor>
      <arglist>(const string &amp;hg, int ib)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeParameters</name>
      <anchorfile>a00494.html</anchorfile>
      <anchor>a338b5a4fa84c3da7ec98fa0d4567ac55</anchor>
      <arglist>(hid_t gid)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasSpin</name>
      <anchorfile>a00494.html</anchorfile>
      <anchor>aeb76c438a8227205ae9d3629d223817c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; int, 2 &gt;</type>
      <name>version</name>
      <anchorfile>a00494.html</anchorfile>
      <anchor>a5938521ed3c925af7a202ddefbda2836</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>twistIndex</name>
      <anchorfile>a00494.html</anchorfile>
      <anchor>a1fd38222cd6e68e5bbbd057e7d15440e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numBands</name>
      <anchorfile>a00494.html</anchorfile>
      <anchor>a2e25891634241ab38554b7565b2dce0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>Ecut</name>
      <anchorfile>a00494.html</anchorfile>
      <anchor>a7f59d557c0e9d2ec2ba2a9c4941ef7a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>Rcut</name>
      <anchorfile>a00494.html</anchorfile>
      <anchor>abdc527aabcc3b20d2c4d81572e696e6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>BufferRadius</name>
      <anchorfile>a00494.html</anchorfile>
      <anchor>a67fbce86bf9602b2b6e2110cb47042e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; int, OHMMS_DIM &gt;</type>
      <name>BoxDup</name>
      <anchorfile>a00494.html</anchorfile>
      <anchor>a487e2d28adec29797662059aa99a6e09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>paramTag</name>
      <anchorfile>a00494.html</anchorfile>
      <anchor>a8a8cda925bfa04444129c380d5d641a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>basisTag</name>
      <anchorfile>a00494.html</anchorfile>
      <anchor>a24a5c3a1743996e512038a01263c5804</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>pwTag</name>
      <anchorfile>a00494.html</anchorfile>
      <anchor>a86bdda99eae1bf8a7da02bed61c8580a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>pwMultTag</name>
      <anchorfile>a00494.html</anchorfile>
      <anchor>a17fd5e727415a3bd72dbff7724fd4ed3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>eigTag</name>
      <anchorfile>a00494.html</anchorfile>
      <anchor>a852dab21b50737e2495210dd63a5068b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>twistTag</name>
      <anchorfile>a00494.html</anchorfile>
      <anchor>ab0bc498e029cef461d710365d49724f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>bandTag</name>
      <anchorfile>a00494.html</anchorfile>
      <anchor>afdc61dadc0eb5cde09794ae3d8c8e599</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>spinTag</name>
      <anchorfile>a00494.html</anchorfile>
      <anchor>a4670e4bc897671de84aa978a2a81a9ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>eigvecTag</name>
      <anchorfile>a00494.html</anchorfile>
      <anchor>a24f958abebeaf1ee20a790c75d3d8cc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParameterSet</type>
      <name>m_param</name>
      <anchorfile>a00494.html</anchorfile>
      <anchor>ac32cb2af3a464bc66f40d4e335d87f47</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::PWRealOrbitalSet</name>
    <filename>a00495.html</filename>
    <base>qmcplusplus::SPOSetBase</base>
    <member kind="enumvalue">
      <type>@</type>
      <name>PW_VALUE</name>
      <anchorfile>a00495.html</anchorfile>
      <anchor>a84627a72058502328269676b81780f89aa29d88315ac46d4c8d22784fc3d3f8e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PW_LAP</name>
      <anchorfile>a00495.html</anchorfile>
      <anchor>a84627a72058502328269676b81780f89a3b24612f756360d7fdacdd4c06bf75e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PW_GRADX</name>
      <anchorfile>a00495.html</anchorfile>
      <anchor>a84627a72058502328269676b81780f89ad0cf72630b1a928ff5cba09a428c40c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PW_GRADY</name>
      <anchorfile>a00495.html</anchorfile>
      <anchor>a84627a72058502328269676b81780f89af936cbf59b5ecb045192caeb2e12fd37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PW_GRADZ</name>
      <anchorfile>a00495.html</anchorfile>
      <anchor>a84627a72058502328269676b81780f89ae9d7d277537caef75196c617eb16db2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PW_MAXINDEX</name>
      <anchorfile>a00495.html</anchorfile>
      <anchor>a84627a72058502328269676b81780f89a6384ed4608f5d2e0ab7fbfc0c53c6e89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PWBasis</type>
      <name>BasisSet_t</name>
      <anchorfile>a00495.html</anchorfile>
      <anchor>a2b53988f38d922de7f0f31b02aa2374e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PWBasis *</type>
      <name>PWBasisPtr</name>
      <anchorfile>a00495.html</anchorfile>
      <anchor>a6c8d5dfc8e5b34ed6a1d6d7d9ed27c4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PWRealOrbitalSet</name>
      <anchorfile>a00495.html</anchorfile>
      <anchor>ae1c83279635105d3bf744f33d52edc91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PWRealOrbitalSet</name>
      <anchorfile>a00495.html</anchorfile>
      <anchor>a9de829cdcb615b16d2fd1b55f2c84641</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00495.html</anchorfile>
      <anchor>abac079a1d9f1f290e91a1e40e6842dbf</anchor>
      <arglist>(PWBasisPtr bset, int nbands, bool cleanup=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVector</name>
      <anchorfile>a00495.html</anchorfile>
      <anchor>a09f7f28f737668ab847496d54bb2dbdb</anchor>
      <arglist>(const std::vector&lt; RealType &gt; &amp;coefs, int jorb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVector</name>
      <anchorfile>a00495.html</anchorfile>
      <anchor>ad28199618aec7ca6d9bf8b0dbe023568</anchor>
      <arglist>(const std::vector&lt; ComplexType &gt; &amp;coefs, int jorb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00495.html</anchorfile>
      <anchor>a39ea173c92dae81ac977359c07ff55db</anchor>
      <arglist>(const opt_variables_type &amp;optVariables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrbitalSetSize</name>
      <anchorfile>a00495.html</anchorfile>
      <anchor>abe2573f29355b07956892dc6bd7f12ca</anchor>
      <arglist>(int norbs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00495.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>a00495.html</anchorfile>
      <anchor>a08d3fd2c7e9f95d79aad8daf3593d0cb</anchor>
      <arglist>(int ib, const PosType &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00495.html</anchorfile>
      <anchor>a55614decceadf408ddc308827faada58</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00495.html</anchorfile>
      <anchor>a8d03182606ebdc99cb116d189b732f02</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi, GradVector_t &amp;dpsi, ValueVector_t &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00495.html</anchorfile>
      <anchor>ae91b5a23fbd5208cf10757eea50386c8</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, ValueMatrix_t &amp;d2logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00495.html</anchorfile>
      <anchor>a431b0481ac33ea5b1edd172eb8f5ad62</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi, GradVector_t &amp;dpsi, HessVector_t &amp;gg_psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_notranspose</name>
      <anchorfile>a00495.html</anchorfile>
      <anchor>a625375c35e3d6917247acd1d76008768</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, HessMatrix_t &amp;grad_grad_logdet)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>OwnBasisSet</name>
      <anchorfile>a00495.html</anchorfile>
      <anchor>ae07add6b7809e0631ba08b2ded4f6281</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PosType</type>
      <name>TwistAngle</name>
      <anchorfile>a00495.html</anchorfile>
      <anchor>aac4f685e85a459b4edc1c2a0f098452f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PWBasisPtr</type>
      <name>myBasisSet</name>
      <anchorfile>a00495.html</anchorfile>
      <anchor>a3f27c01cc936d7fa2f521898142d57fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; ComplexType &gt;</type>
      <name>CC</name>
      <anchorfile>a00495.html</anchorfile>
      <anchor>a4af8613e5735d98e3712eeb695e67405</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; ComplexType &gt;</type>
      <name>Temp</name>
      <anchorfile>a00495.html</anchorfile>
      <anchor>a30f58de45f36f770318749dbed957a5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; ComplexType &gt;</type>
      <name>tempPsi</name>
      <anchorfile>a00495.html</anchorfile>
      <anchor>a8c9dbbd2553d2f527c223a0163900720</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ProductOrbital</name>
    <filename>a00485.html</filename>
    <base>qmcplusplus::OrbitalBase</base>
    <member kind="function">
      <type></type>
      <name>ProductOrbital</name>
      <anchorfile>a00485.html</anchorfile>
      <anchor>aad23ba9a5b390844a9f892e764d8c2d0</anchor>
      <arglist>(OrbitalConstraintsBase *control)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ProductOrbital</name>
      <anchorfile>a00485.html</anchorfile>
      <anchor>aba573b048ce662f60cba50bedcfa6eda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContraints</name>
      <anchorfile>a00485.html</anchorfile>
      <anchor>a3e80a9cf8f2f5739b3b9322ce15c6d8b</anchor>
      <arglist>(OrbitalConstraintsBase *control)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00485.html</anchorfile>
      <anchor>ac9471334d6ff888e194a823d9f9061ae</anchor>
      <arglist>(const opt_variables_type &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00485.html</anchorfile>
      <anchor>ac66948db629989be1d9335e1d48dfeb0</anchor>
      <arglist>(opt_variables_type &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportStatus</name>
      <anchorfile>a00485.html</anchorfile>
      <anchor>a0a144256f92f2fa9e13e840bc30baef7</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00485.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00485.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>a00485.html</anchorfile>
      <anchor>a17a690a835b951b7cb5ec17d890a1e2b</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00485.html</anchorfile>
      <anchor>a9aeb2f38e230790e553547122fc833a4</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00485.html</anchorfile>
      <anchor>a39547363e58cecc107fb994f3d6aa019</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>a00485.html</anchorfile>
      <anchor>afd88ea711f6be2b780afce1182e15cf8</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>a00485.html</anchorfile>
      <anchor>af79a1f1637e80a729043600a7656054d</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>a00485.html</anchorfile>
      <anchor>a4fad6e178271bda6f6e70a5965041472</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00485.html</anchorfile>
      <anchor>aeba37f5a7f9e1c209be41e1f8c2d316d</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>registerData</name>
      <anchorfile>a00485.html</anchorfile>
      <anchor>ada6f71ad7c3dfb18242a584bc0f6b097</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>updateBuffer</name>
      <anchorfile>a00485.html</anchorfile>
      <anchor>a33c66d92749fe535e186f14fd11f062f</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf, bool fromscratch=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00485.html</anchorfile>
      <anchor>a873b86d22a6078397525e16eae04ed7c</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>a00485.html</anchorfile>
      <anchor>ae0ef965b132bce529ffa7f6b6829ebaf</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>OrbitalBase *</type>
      <name>makeClone</name>
      <anchorfile>a00485.html</anchorfile>
      <anchor>a294cae6c74a660d1fed7fbcb4382dd94</anchor>
      <arglist>(ParticleSet &amp;tqp) const </arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; OrbitalBase * &gt;</type>
      <name>Psi</name>
      <anchorfile>a00485.html</anchorfile>
      <anchor>aaa2eadc827fe26697c6368eb82467efe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OrbitalConstraintsBase *</type>
      <name>Constraints</name>
      <anchorfile>a00485.html</anchorfile>
      <anchor>ad878a91cb07ad62a2f142db147bf3b84</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::SparseLocalizedBasisSet</name>
    <filename>a00573.html</filename>
    <templarg>COT</templarg>
    <base>BasisSetBase&lt; COT::value_type &gt;</base>
    <class kind="struct">qmcplusplus::SparseLocalizedBasisSet::LOForCenter</class>
    <member kind="typedef">
      <type>BasisSetBase&lt; typename COT::value_type &gt;</type>
      <name>BasisSetType</name>
      <anchorfile>a00573.html</anchorfile>
      <anchor>aa30d050c441dc706b9ee875ef64f3a7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BasisSetType::RealType</type>
      <name>RealType</name>
      <anchorfile>a00573.html</anchorfile>
      <anchor>aae1e8eef3cb64c2a346b0a57829ff89a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BasisSetType::ValueType</type>
      <name>ValueType</name>
      <anchorfile>a00573.html</anchorfile>
      <anchor>a7d48227488df6ea490f2dc97d553c641</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BasisSetType::IndexType</type>
      <name>IndexType</name>
      <anchorfile>a00573.html</anchorfile>
      <anchor>af93ffd07c296b4df7ac79f4392be9bed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BasisSetType::IndexVector_t</type>
      <name>IndexVector_t</name>
      <anchorfile>a00573.html</anchorfile>
      <anchor>afb1c7f4a00d511cd08ec81ff5ce81fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BasisSetType::ValueVector_t</type>
      <name>ValueVector_t</name>
      <anchorfile>a00573.html</anchorfile>
      <anchor>aebd0db5ba03258273fced1e7a2c3a572</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BasisSetType::ValueMatrix_t</type>
      <name>ValueMatrix_t</name>
      <anchorfile>a00573.html</anchorfile>
      <anchor>a149c1e7db4c5ac1b2782ba3d007e6253</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BasisSetType::GradVector_t</type>
      <name>GradVector_t</name>
      <anchorfile>a00573.html</anchorfile>
      <anchor>a9ebb2430871d18bf107dfb19127ea23f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BasisSetType::GradMatrix_t</type>
      <name>GradMatrix_t</name>
      <anchorfile>a00573.html</anchorfile>
      <anchor>a69ff489ce4bc441443e358e4e35aac97</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>vector&lt; LOForCenter * &gt;</type>
      <name>ContainerType</name>
      <anchorfile>a00573.html</anchorfile>
      <anchor>a4050040d0cc20da7a330631aa80b5ffd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseLocalizedBasisSet</name>
      <anchorfile>a00573.html</anchorfile>
      <anchor>ab983dc708ffad5f4f7087e65862ee7b9</anchor>
      <arglist>(const ParticleSet &amp;ions, ParticleSet &amp;els)</arglist>
    </member>
    <member kind="function">
      <type>BasisSetBase&lt; typename COT::value_type &gt; *</type>
      <name>makeClone</name>
      <anchorfile>a00573.html</anchorfile>
      <anchor>af9d904788b447e4a33dcf65cbc76c29d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00573.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00573.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00573.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBasisSetSize</name>
      <anchorfile>a00573.html</anchorfile>
      <anchor>ad72930196e0b83bb67f1f954799b5edf</anchor>
      <arglist>(int nbs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00573.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateWithHessian</name>
      <anchorfile>a00573.html</anchorfile>
      <anchor>aa465275b00d2378301efcf1cb3450aab</anchor>
      <arglist>(const ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateWithThirdDeriv</name>
      <anchorfile>a00573.html</anchorfile>
      <anchor>afd33a6fc3cf9483b4a149f9dfc1576e0</anchor>
      <arglist>(const ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateThirdDerivOnly</name>
      <anchorfile>a00573.html</anchorfile>
      <anchor>ae5ec5d73995dbfe1430bfb665a9c6904</anchor>
      <arglist>(const ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateForWalkerMove</name>
      <anchorfile>a00573.html</anchorfile>
      <anchor>a293c140ece4859a971141eae5ddad2a6</anchor>
      <arglist>(const ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateForWalkerMove</name>
      <anchorfile>a00573.html</anchorfile>
      <anchor>a74350ed2c0fa924cc0b001b3a59ab000</anchor>
      <arglist>(const ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateForPtclMove</name>
      <anchorfile>a00573.html</anchorfile>
      <anchor>ac8389bd55ef2af388a7986b247910f9c</anchor>
      <arglist>(const ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateAllForPtclMove</name>
      <anchorfile>a00573.html</anchorfile>
      <anchor>a35a228e785ab4e4ba8bf19f25d385ef5</anchor>
      <arglist>(const ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateForPtclMoveWithHessian</name>
      <anchorfile>a00573.html</anchorfile>
      <anchor>a17ab143d63d269cb90db997c4803f87b</anchor>
      <arglist>(const ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00573.html</anchorfile>
      <anchor>aee77a8de1d71511dd0cbca6e50b3a797</anchor>
      <arglist>(int icenter, COT *aos)</arglist>
    </member>
    <member kind="variable">
      <type>const ParticleSet &amp;</type>
      <name>CenterRef</name>
      <anchorfile>a00573.html</anchorfile>
      <anchor>ab2185ecb80d978d74b01ab1450e115fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumCenters</name>
      <anchorfile>a00573.html</anchorfile>
      <anchor>a660b39b9516b5c23ab7bb18a6be11e3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumTargets</name>
      <anchorfile>a00573.html</anchorfile>
      <anchor>af9a4edd257b214e4a031b7752090a301</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumGroups</name>
      <anchorfile>a00573.html</anchorfile>
      <anchor>abe48fe1d890e3822a6889caa9b3f99b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>BasisOffset</name>
      <anchorfile>a00573.html</anchorfile>
      <anchor>a3a2e42e48c1ef5f3bd9dc35b2f36da60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ContainerType</type>
      <name>LOBasisSet</name>
      <anchorfile>a00573.html</anchorfile>
      <anchor>a54fdb07ec56f4572570ef82a4ae07e89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DistanceTableData *</type>
      <name>myTable</name>
      <anchorfile>a00573.html</anchorfile>
      <anchor>a9f702016cb92cfe679a693f13489ae57</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::SparseLocalizedBasisSet::LOForCenter</name>
    <filename>a00355.html</filename>
    <member kind="function">
      <type></type>
      <name>LOForCenter</name>
      <anchorfile>a00355.html</anchorfile>
      <anchor>ad7410df6a7e00d331d861a5413aa2d12</anchor>
      <arglist>(COT *o=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LOForCenter</name>
      <anchorfile>a00355.html</anchorfile>
      <anchor>ad490c87fb1f5f5379112b55aada33600</anchor>
      <arglist>(const LOForCenter &amp;old)</arglist>
    </member>
    <member kind="variable">
      <type>COT *</type>
      <name>myO</name>
      <anchorfile>a00355.html</anchorfile>
      <anchor>a14acbff3dd2db585f8353a6c5aa6bb04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>myP</name>
      <anchorfile>a00355.html</anchorfile>
      <anchor>a6c198d3ad5ae4289e88a84a69d16131f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::SphericalBasisSet</name>
    <filename>a00576.html</filename>
    <templarg>ROT</templarg>
    <templarg>GT</templarg>
    <member kind="typedef">
      <type>ROT</type>
      <name>RadialOrbital_t</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>a5efc8c90cb2a111ff19a5af4d2293956</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GT</type>
      <name>GridType_t</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>a67b1df616c00905218b32c834d3db6d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ROT::value_type</type>
      <name>value_type</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>ae8740e35acb5e275420d48813958eb3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; value_type &gt;::RealType</type>
      <name>RealType</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>a2b2d357f3d10b4f8456054031fde1dcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; value_type &gt;::ValueType</type>
      <name>ValueType</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>a27e406f2e582629b04c2e9126186acbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; value_type &gt;::IndexType</type>
      <name>IndexType</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>a47ddc9a4564b354890c5540aa7dece37</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; value_type &gt;::PosType</type>
      <name>PosType</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>ab1e87b06ccce6b4cb0c66202c5feb22d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; value_type &gt;::GradType</type>
      <name>GradType</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>af42258180abc8348fbb9b41c2a0de065</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; value_type &gt;::HessType</type>
      <name>HessType</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>aa9291f16700940975939251267fa2fda</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; value_type &gt;::ValueVector_t</type>
      <name>ValueVector_t</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>a0a87f6acb64f091fe21ded3c2f98a100</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; value_type &gt;::ValueMatrix_t</type>
      <name>ValueMatrix_t</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>a04d1e4055db23cbab1528f95972ac359</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; value_type &gt;::GradVector_t</type>
      <name>GradVector_t</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>a0340fa8199ee80a84d1bef4804a5cf7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; value_type &gt;::GradMatrix_t</type>
      <name>GradMatrix_t</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>a40d58c3ab61103b13027181f40ff3e03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; value_type &gt;::HessVector_t</type>
      <name>HessVector_t</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>a09fb768bad4035ba580c4837766e5d98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; value_type &gt;::HessMatrix_t</type>
      <name>HessMatrix_t</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>a7a72cbdde344d5341e4e153da83b2fac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TinyVector&lt; HessType, 3 &gt;</type>
      <name>GGGType</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>aa061426acbed47472a40837e91ff0ea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; GGGType &gt;</type>
      <name>GGGVector_t</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>a8fbe45949eb3665c4e9ce7562900ff13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; GGGType &gt;</type>
      <name>GGGMatrix_t</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>ad9d64609176495b009d086094279f5a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CartesianTensor&lt; RealType, PosType &gt;</type>
      <name>CartesianHarmonics_t</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>a6f078ae01321dc2294d520eeb2fc49f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphericalTensor&lt; RealType, PosType &gt;</type>
      <name>SphericalHarmonics_t</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>a029f9048f6d6db566dafb1b1894b87cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SphericalBasisSet</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>a4722af5e9abd045fdc9fbec1516fba67</anchor>
      <arglist>(int lmax, bool addsignforM=false, bool useXYZ=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SphericalBasisSet</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>ac18d9027d13da2a4a457bc2e3c26d110</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SphericalBasisSet&lt; ROT, GT &gt; *</type>
      <name>makeClone</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>a2297fb6df1424c7903494d3a82e17157</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInVariables</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>a17d0382e9625c5a190ed91e62e9eca89</anchor>
      <arglist>(opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkOutVariables</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>a5a674a6ae36fd455f3c4b3b683fca0fa</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>a23b6348ddbec3391aac3c14e116c88a0</anchor>
      <arglist>(const opt_variables_type &amp;active)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBasisSetSize</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>a8c9f5712bbf29d7d8632144cfb9908eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBasisSetSize</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>a7a53ddde5bf6310546fe9f931bc000d5</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTable</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>a29fe750d81a38987ea90623ca089af94</anchor>
      <arglist>(const DistanceTableData *atable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCenter</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>a3a73190f2a622c558ce749e8f19babd5</anchor>
      <arglist>(int c, int offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateForWalkerMove</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>a0536bde43cce8ddec0934b0de140d1e4</anchor>
      <arglist>(int c, int iat, int offset, ValueVector_t &amp;psi, GradVector_t &amp;dpsi, ValueVector_t &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateForWalkerMove</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>a7d332225ea0b1087a667c285fff661b6</anchor>
      <arglist>(int c, int iat, int offset, ValueVector_t &amp;psi, GradVector_t &amp;dpsi, HessVector_t &amp;grad_grad_Phi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateForWalkerMove</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>a84e1e3a613cae328bed33a42f488b16e</anchor>
      <arglist>(int c, int iat, int offset, ValueVector_t &amp;psi, GradVector_t &amp;dpsi, HessVector_t &amp;grad_grad_Phi, GGGVector_t &amp;grad_grad_grad_Phi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateThirdDerivOnly</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>aaa8fc345f7bd6364069502ddd83db364</anchor>
      <arglist>(int c, int iat, int offset, GGGVector_t &amp;grad_grad_grad_Phi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dummyEval</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>a1f1cdbc50267275d49f9c7e304ded9f7</anchor>
      <arglist>(RealType r, PosType dr, ValueVector_t &amp;psi, GradVector_t &amp;dpsi, HessVector_t &amp;grad_grad_Phi, GGGVector_t &amp;grad_grad_grad_Phi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateForWalkerMove</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>a828b57c1f68761fe479dc5381f8f3d9a</anchor>
      <arglist>(int source, int first, int nptcl, int offset, ValueMatrix_t &amp;y, GradMatrix_t &amp;dy, ValueMatrix_t &amp;d2y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateForWalkerMove</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>ae575f176e849917df366e3f8bae697c0</anchor>
      <arglist>(int c, int iat, int offset, Matrix&lt; ValueType &gt; &amp;temp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateForPtclMove</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>a3158193a34cc9d1d88d44f9d2b14c255</anchor>
      <arglist>(int source, int iat, int offset, ValueVector_t &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateAllForPtclMove</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>afcee9004aae846727a6c2d4380155528</anchor>
      <arglist>(int source, int iat, int offset, ValueVector_t &amp;y, GradVector_t &amp;dy, ValueVector_t &amp;d2y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>abc2bb83283bcd7f4bd1ece2a786a3c4b</anchor>
      <arglist>(RealType r, RealType rinv, const PosType &amp;dr, int offset, ValueVector_t &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>a55f692ad6e9867522229d42795648826</anchor>
      <arglist>(RealType r, RealType rinv, const PosType &amp;dr, int offset, ValueVector_t &amp;y, GradVector_t &amp;dy, ValueVector_t &amp;d2y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateAllForPtclMove</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>ae7ad8850bc8871a91927b900656b658c</anchor>
      <arglist>(int source, int iat, int offset, ValueVector_t &amp;psi, GradVector_t &amp;dpsi, HessVector_t &amp;grad_grad_Phi)</arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>BasisSetSize</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>acadf2ecf82f07d9d752878fe2db483c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>CurrentCenter</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>adbaa248c3e1ca0960f0ef316175966ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>CurrentOffset</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>a71cbec1839fed9daa47c18e5e3df0ae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DistanceTableData *</type>
      <name>myTable</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>a9f702016cb92cfe679a693f13489ae57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SphericalHarmonics_t</type>
      <name>Ylm</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>ac2613e548ce8a3c3a737dda8a1f4b646</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>useCartesian</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>ad1b8b3e02159fb1e5c39a44637fd14fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CartesianHarmonics_t</type>
      <name>XYZ</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>a8b4a53c6e760cff118bdd2e6f3ffcd01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>LM</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>aa6727cae5645522239c4a704f86e3678</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>NL</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>a0a7425061ade821a96ee7dc66d916ff2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; GT * &gt;</type>
      <name>Grids</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>af8d9b0b88c02bbb3e42aff817138f3ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; ROT * &gt;</type>
      <name>Rnl</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>a19dd2043bd07148c0565a84839f34a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; QuantumNumberType &gt;</type>
      <name>RnlID</name>
      <anchorfile>a00576.html</anchorfile>
      <anchor>a4ed0a97958132484399b4145232f7136</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::SphericalOrbitalSet</name>
    <filename>a00577.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ROT</type>
      <name>RadialOrbital_t</name>
      <anchorfile>a00577.html</anchorfile>
      <anchor>a5efc8c90cb2a111ff19a5af4d2293956</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ROT::value_type</type>
      <name>value_type</name>
      <anchorfile>a00577.html</anchorfile>
      <anchor>ae8740e35acb5e275420d48813958eb3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; value_type &gt;::RealType</type>
      <name>RealType</name>
      <anchorfile>a00577.html</anchorfile>
      <anchor>a2b2d357f3d10b4f8456054031fde1dcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; value_type &gt;::ValueType</type>
      <name>ValueType</name>
      <anchorfile>a00577.html</anchorfile>
      <anchor>a27e406f2e582629b04c2e9126186acbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; value_type &gt;::IndexType</type>
      <name>IndexType</name>
      <anchorfile>a00577.html</anchorfile>
      <anchor>a47ddc9a4564b354890c5540aa7dece37</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; value_type &gt;::PosType</type>
      <name>PosType</name>
      <anchorfile>a00577.html</anchorfile>
      <anchor>ab1e87b06ccce6b4cb0c66202c5feb22d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; value_type &gt;::GradType</type>
      <name>GradType</name>
      <anchorfile>a00577.html</anchorfile>
      <anchor>af42258180abc8348fbb9b41c2a0de065</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; value_type &gt;::ValueVector_t</type>
      <name>ValueVector_t</name>
      <anchorfile>a00577.html</anchorfile>
      <anchor>a0a87f6acb64f091fe21ded3c2f98a100</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; value_type &gt;::ValueMatrix_t</type>
      <name>ValueMatrix_t</name>
      <anchorfile>a00577.html</anchorfile>
      <anchor>a04d1e4055db23cbab1528f95972ac359</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; value_type &gt;::GradVector_t</type>
      <name>GradVector_t</name>
      <anchorfile>a00577.html</anchorfile>
      <anchor>a0340fa8199ee80a84d1bef4804a5cf7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalSetTraits&lt; value_type &gt;::GradMatrix_t</type>
      <name>GradMatrix_t</name>
      <anchorfile>a00577.html</anchorfile>
      <anchor>a40d58c3ab61103b13027181f40ff3e03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphericalTensor&lt; RealType, PosType &gt;</type>
      <name>SphericalHarmonics_t</name>
      <anchorfile>a00577.html</anchorfile>
      <anchor>a029f9048f6d6db566dafb1b1894b87cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VarRegistry&lt; RealType &gt;</type>
      <name>OptimizableSetType</name>
      <anchorfile>a00577.html</anchorfile>
      <anchor>a73bc7bf1cf3c5ce5a74923f13f23998b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SphericalOrbitalSet</name>
      <anchorfile>a00577.html</anchorfile>
      <anchor>a688795b2f8ca2c9c3d248fc5a7fd744e</anchor>
      <arglist>(int lmax, bool addsignforM=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SphericalOrbitalSet</name>
      <anchorfile>a00577.html</anchorfile>
      <anchor>ab3d567b6445fbd37802dbbfd29b3b21e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00577.html</anchorfile>
      <anchor>a549838bc3e720cc4736317d64fdab0c8</anchor>
      <arglist>(OptimizableSetType &amp;optVariables)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBasisSetSize</name>
      <anchorfile>a00577.html</anchorfile>
      <anchor>a8c9f5712bbf29d7d8632144cfb9908eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBasisSetSize</name>
      <anchorfile>a00577.html</anchorfile>
      <anchor>a7a53ddde5bf6310546fe9f931bc000d5</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00577.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTable</name>
      <anchorfile>a00577.html</anchorfile>
      <anchor>ac4e749e95d84c607f4531255cb79c1fd</anchor>
      <arglist>(DistanceTableData *atable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCenter</name>
      <anchorfile>a00577.html</anchorfile>
      <anchor>a3a73190f2a622c558ce749e8f19babd5</anchor>
      <arglist>(int c, int offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateBasis</name>
      <anchorfile>a00577.html</anchorfile>
      <anchor>a9aabc57b66dfb224a7f3c07df6068f17</anchor>
      <arglist>(int c, int iat, int offset, VV &amp;psi, GV &amp;dpsi, VV &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00577.html</anchorfile>
      <anchor>abd83238369aba0baa8f120d67f17f161</anchor>
      <arglist>(int source, int iat, int offset, VM &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00577.html</anchorfile>
      <anchor>a97ba968a2727cd6e0cb21b0514ec7ba0</anchor>
      <arglist>(int source, int iat, int offset, VM &amp;y, GM &amp;dy, VM &amp;d2y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00577.html</anchorfile>
      <anchor>a4843b97c8a07d93a6c97a219af6a440e</anchor>
      <arglist>(int source, int first, int nptcl, int offset, VM &amp;y, GM &amp;dy, VM &amp;d2y)</arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>BasisSetSize</name>
      <anchorfile>a00577.html</anchorfile>
      <anchor>acadf2ecf82f07d9d752878fe2db483c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>CurrentCenter</name>
      <anchorfile>a00577.html</anchorfile>
      <anchor>adbaa248c3e1ca0960f0ef316175966ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>CurrentOffset</name>
      <anchorfile>a00577.html</anchorfile>
      <anchor>a71cbec1839fed9daa47c18e5e3df0ae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DistanceTableData *</type>
      <name>myTable</name>
      <anchorfile>a00577.html</anchorfile>
      <anchor>a9f702016cb92cfe679a693f13489ae57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SphericalHarmonics_t</type>
      <name>Ylm</name>
      <anchorfile>a00577.html</anchorfile>
      <anchor>ac2613e548ce8a3c3a737dda8a1f4b646</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>LM</name>
      <anchorfile>a00577.html</anchorfile>
      <anchor>aa6727cae5645522239c4a704f86e3678</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>NL</name>
      <anchorfile>a00577.html</anchorfile>
      <anchor>a0a7425061ade821a96ee7dc66d916ff2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; GT * &gt;</type>
      <name>Grids</name>
      <anchorfile>a00577.html</anchorfile>
      <anchor>af8d9b0b88c02bbb3e42aff817138f3ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; ROT * &gt;</type>
      <name>Rnl</name>
      <anchorfile>a00577.html</anchorfile>
      <anchor>a19dd2043bd07148c0565a84839f34a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; QuantumNumberType &gt;</type>
      <name>RnlID</name>
      <anchorfile>a00577.html</anchorfile>
      <anchor>a4ed0a97958132484399b4145232f7136</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::BsplineReaderBase</name>
    <filename>a00054.html</filename>
    <member kind="function">
      <type></type>
      <name>BsplineReaderBase</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a2b6e6d597ba82ff22360c13c67d91022</anchor>
      <arglist>(EinsplineSetBuilder *e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a2071f5604bb11e04b3119452ded1c8bc</anchor>
      <arglist>(EinsplineSet *in, SPE *out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_grid</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>afd37b557300ca0f4ac80485e90f4bcde</anchor>
      <arglist>(const TinyVector&lt; int, 3 &gt; &amp;halfg, GT *xyz_grid, BCT *xyz_bc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>check_twists</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>aa91abef4cc7213f155af8fa2816e6220</anchor>
      <arglist>(EinsplineSet *orbitalSet, SPE *bspline)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>psi_g_path</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>af672a06a40f12e1c364e0fc5ec1bbaa4</anchor>
      <arglist>(int ti, int spin, int ib)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>psi_r_path</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a27ddf2cfc6529e8d4f38a4dc1c1344e1</anchor>
      <arglist>(int ti, int spin, int ib)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_psi_g</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a56b4c0574cf0989df2b288a0ae35b52e</anchor>
      <arglist>(int ti, int spin, int ib, Vector&lt; complex&lt; double &gt; &gt; &amp;cG)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BsplineReaderBase</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a87f5dc15393d059a9d87ec188d246447</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SPOSetBase *</type>
      <name>create_spline_set</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a158ef16b77ac0fd51a9b540c8bc14bf5</anchor>
      <arglist>(int spin, EinsplineSet *orbitalset)=0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BsplineReaderBase</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a2b6e6d597ba82ff22360c13c67d91022</anchor>
      <arglist>(EinsplineSetBuilder *e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a2071f5604bb11e04b3119452ded1c8bc</anchor>
      <arglist>(EinsplineSet *in, SPE *out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_grid</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>afd37b557300ca0f4ac80485e90f4bcde</anchor>
      <arglist>(const TinyVector&lt; int, 3 &gt; &amp;halfg, GT *xyz_grid, BCT *xyz_bc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>check_twists</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>aa91abef4cc7213f155af8fa2816e6220</anchor>
      <arglist>(EinsplineSet *orbitalSet, SPE *bspline)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>psi_g_path</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>af672a06a40f12e1c364e0fc5ec1bbaa4</anchor>
      <arglist>(int ti, int spin, int ib)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>psi_r_path</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a27ddf2cfc6529e8d4f38a4dc1c1344e1</anchor>
      <arglist>(int ti, int spin, int ib)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_psi_g</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a56b4c0574cf0989df2b288a0ae35b52e</anchor>
      <arglist>(int ti, int spin, int ib, Vector&lt; complex&lt; double &gt; &gt; &amp;cG)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BsplineReaderBase</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a87f5dc15393d059a9d87ec188d246447</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SPOSetBase *</type>
      <name>create_spline_set</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a158ef16b77ac0fd51a9b540c8bc14bf5</anchor>
      <arglist>(int spin, EinsplineSet *orbitalset)=0</arglist>
    </member>
    <member kind="variable">
      <type>EinsplineSetBuilder *</type>
      <name>mybuilder</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a6d92d5fdf334e01cc2ff273c618df645</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Communicate *</type>
      <name>myComm</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a8d846b2c078f0ec5d6342b4c72ac9755</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::SplineAdoptorReader</name>
    <filename>a00581.html</filename>
    <templarg>SA</templarg>
    <base>qmcplusplus::BsplineReaderBase</base>
    <base>qmcplusplus::BsplineReaderBase</base>
    <member kind="typedef">
      <type>SA</type>
      <name>adoptor_type</name>
      <anchorfile>a00581.html</anchorfile>
      <anchor>aab63155f6ebc1f69e6e89e3fd6228bf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>adoptor_type::DataType</type>
      <name>DataType</name>
      <anchorfile>a00581.html</anchorfile>
      <anchor>a19d701b5c2894f4e098dbdf0f0eaf500</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>adoptor_type::SplineType</type>
      <name>SplineType</name>
      <anchorfile>a00581.html</anchorfile>
      <anchor>aa620355ce8c3f28163d6480dfafa4a1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SA</type>
      <name>adoptor_type</name>
      <anchorfile>a00581.html</anchorfile>
      <anchor>aab63155f6ebc1f69e6e89e3fd6228bf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>adoptor_type::DataType</type>
      <name>DataType</name>
      <anchorfile>a00581.html</anchorfile>
      <anchor>a19d701b5c2894f4e098dbdf0f0eaf500</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>adoptor_type::SplineType</type>
      <name>SplineType</name>
      <anchorfile>a00581.html</anchorfile>
      <anchor>aa620355ce8c3f28163d6480dfafa4a1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SplineAdoptorReader</name>
      <anchorfile>a00581.html</anchorfile>
      <anchor>a40ca9119003026993519734958f5cac7</anchor>
      <arglist>(EinsplineSetBuilder *e)</arglist>
    </member>
    <member kind="function">
      <type>SPOSetBase *</type>
      <name>create_spline_set</name>
      <anchorfile>a00581.html</anchorfile>
      <anchor>a89d9fea2714e2e2266a965a89fbf08bd</anchor>
      <arglist>(int spin, EinsplineSet *orbitalSet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SplineAdoptorReader</name>
      <anchorfile>a00581.html</anchorfile>
      <anchor>a40ca9119003026993519734958f5cac7</anchor>
      <arglist>(EinsplineSetBuilder *e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SplineAdoptorReader</name>
      <anchorfile>a00581.html</anchorfile>
      <anchor>a8a78691c22720bc9e345e1950112a966</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SPOSetBase *</type>
      <name>create_spline_set</name>
      <anchorfile>a00581.html</anchorfile>
      <anchor>a89d9fea2714e2e2266a965a89fbf08bd</anchor>
      <arglist>(int spin, EinsplineSet *orbitalSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fft_spline</name>
      <anchorfile>a00581.html</anchorfile>
      <anchor>a55c50efc1d93cb44889ac16b06d45aae</anchor>
      <arglist>(Vector&lt; complex&lt; double &gt; &gt; &amp;cG, int ti, int iorb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize_spline_slow</name>
      <anchorfile>a00581.html</anchorfile>
      <anchor>a7bd538a23edc1474d21254bfc6775311</anchor>
      <arglist>(int spin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize_spline_pio</name>
      <anchorfile>a00581.html</anchorfile>
      <anchor>abbe5ca2ceeea2fc1b854cb6710195ae8</anchor>
      <arglist>(int spin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize_spline_pio_bcast</name>
      <anchorfile>a00581.html</anchorfile>
      <anchor>a3182735b81ec02ceeb2fe6af256657c5</anchor>
      <arglist>(int spin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize_spline_psi_r</name>
      <anchorfile>a00581.html</anchorfile>
      <anchor>a7b201d4e92a70095da507f247626e33a</anchor>
      <arglist>(int spin)</arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; int, 3 &gt;</type>
      <name>MeshSize</name>
      <anchorfile>a00581.html</anchorfile>
      <anchor>af44a300200d277730d34a3faebcf573a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; complex&lt; double &gt;, 3 &gt;</type>
      <name>FFTbox</name>
      <anchorfile>a00581.html</anchorfile>
      <anchor>a31aa744808e3b0aa3b125d7915413762</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; double, 3 &gt;</type>
      <name>splineData_r</name>
      <anchorfile>a00581.html</anchorfile>
      <anchor>a4ba602d22961532c3809828717dace81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; double, 3 &gt;</type>
      <name>splineData_i</name>
      <anchorfile>a00581.html</anchorfile>
      <anchor>ad9cf18ef6ffc2144de7d3ee1c237a061</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; UBspline_3d_d * &gt;</type>
      <name>spline_r</name>
      <anchorfile>a00581.html</anchorfile>
      <anchor>a2e1822a5494f3272fceff7870d258940</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; UBspline_3d_d * &gt;</type>
      <name>spline_i</name>
      <anchorfile>a00581.html</anchorfile>
      <anchor>a3953a9d2a588236b5a1c249c8330a572</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BsplineSet&lt; adoptor_type &gt; *</type>
      <name>bspline</name>
      <anchorfile>a00581.html</anchorfile>
      <anchor>a9b1c2e7996b5904de7a1324e7cfeb2c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>OrbGroups</name>
      <anchorfile>a00581.html</anchorfile>
      <anchor>a343a04e0386eac5e1e54f1aae5c21f84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>fftw_plan</type>
      <name>FFTplan</name>
      <anchorfile>a00581.html</anchorfile>
      <anchor>a742ae19211a4e3e02d00ff788f43a3eb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::SplineC2CPackedAdoptor</name>
    <filename>a00582.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>D</templarg>
    <base>qmcplusplus::SplineAdoptorBase</base>
    <member kind="typedef">
      <type>einspline_traits&lt; ST, D &gt;::SplineType</type>
      <name>SplineType</name>
      <anchorfile>a00582.html</anchorfile>
      <anchor>a468600dd4993f6c6ed5f361ec1673dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>einspline_traits&lt; ST, D &gt;::BCType</type>
      <name>BCType</name>
      <anchorfile>a00582.html</anchorfile>
      <anchor>a9bc6f2c0d7735afb97a16e1671e7080f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SplineAdoptorBase&lt; ST, D &gt;::PointType</type>
      <name>PointType</name>
      <anchorfile>a00582.html</anchorfile>
      <anchor>aca3109e0c4c0cce20a37fa6678f3a0ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SplineAdoptorBase&lt; ST, D &gt;::SingleSplineType</type>
      <name>SingleSplineType</name>
      <anchorfile>a00582.html</anchorfile>
      <anchor>a465638d052021554b7e8a42ed2a59340</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SplineC2CPackedAdoptor</name>
      <anchorfile>a00582.html</anchorfile>
      <anchor>a6bb9cf61a6a6f6512212f66da6d0d111</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeStorage</name>
      <anchorfile>a00582.html</anchorfile>
      <anchor>aee1043cda6d474c2d4baafaff80404a2</anchor>
      <arglist>(int n, int nvals)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_spline</name>
      <anchorfile>a00582.html</anchorfile>
      <anchor>a5c2b76771deb4b2f90fcebfa8b490765</anchor>
      <arglist>(GT &amp;xyz_g, BCT &amp;xyz_bc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_spline</name>
      <anchorfile>a00582.html</anchorfile>
      <anchor>ac6346f090515a75721949a00d9843c71</anchor>
      <arglist>(ST *restrict psi_r, ST *restrict psi_i, int twist, int ispline, int level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_spline</name>
      <anchorfile>a00582.html</anchorfile>
      <anchor>a456508b8e6836b4c320ecc97c314d74e</anchor>
      <arglist>(SingleSplineType *spline_r, SingleSplineType *spline_i, int twist, int ispline, int level)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read_splines</name>
      <anchorfile>a00582.html</anchorfile>
      <anchor>ad8fc30f88c27549fd671cdbc1872c72e</anchor>
      <arglist>(hdf_archive &amp;h5f)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write_splines</name>
      <anchorfile>a00582.html</anchorfile>
      <anchor>aa0dcad554bed9e4ca578f6c3130ae12b</anchor>
      <arglist>(hdf_archive &amp;h5f)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>convertPos</name>
      <anchorfile>a00582.html</anchorfile>
      <anchor>afbe3a4032a6c7989f6a90ccc2da055ad</anchor>
      <arglist>(const PointType &amp;r, PointType &amp;ru)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_v</name>
      <anchorfile>a00582.html</anchorfile>
      <anchor>ad33681502acb7bfddbaddc558404fc3b</anchor>
      <arglist>(const PointType &amp;r, int bc_sign, VV &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_v</name>
      <anchorfile>a00582.html</anchorfile>
      <anchor>a517bf588c8a8fb0800963204c40bd718</anchor>
      <arglist>(const PointType &amp;r, VV &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_vgl</name>
      <anchorfile>a00582.html</anchorfile>
      <anchor>afb0c5997cdc2ca391f49cad3ab5bb8fc</anchor>
      <arglist>(const PointType &amp;r, int bc_sign, VV &amp;psi, GV &amp;dpsi, VV &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_vgl</name>
      <anchorfile>a00582.html</anchorfile>
      <anchor>a735c911aee55e37bf1aad5b4126f020f</anchor>
      <arglist>(const PointType &amp;r, VV &amp;psi, GV &amp;dpsi, VV &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_vgh</name>
      <anchorfile>a00582.html</anchorfile>
      <anchor>ab71e2d50ba2f2f7ad7163caea2f8ecd6</anchor>
      <arglist>(const PointType &amp;r, int bc_sign, VV &amp;psi, GV &amp;dpsi, GGV &amp;grad_grad_psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_vgh</name>
      <anchorfile>a00582.html</anchorfile>
      <anchor>a797fdf5fc0e85aa4493086b3da0cd9a4</anchor>
      <arglist>(const PointType &amp;r, VV &amp;psi, GV &amp;dpsi, GGV &amp;grad_grad_psi)</arglist>
    </member>
    <member kind="variable">
      <type>SplineType *</type>
      <name>MultiSpline</name>
      <anchorfile>a00582.html</anchorfile>
      <anchor>a1ccfd48337a42228f4dc4373820311f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>BaseN</name>
      <anchorfile>a00582.html</anchorfile>
      <anchor>a8ecbbfe68d98fe9a312f4b4276f45133</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>BaseOffset</name>
      <anchorfile>a00582.html</anchorfile>
      <anchor>ae4c79ec8320f8f18096bce086aac4f89</anchor>
      <arglist>[3]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::SplineC2RPackedAdoptor</name>
    <filename>a00583.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>D</templarg>
    <base>qmcplusplus::SplineAdoptorBase</base>
    <member kind="typedef">
      <type>einspline_traits&lt; ST, D &gt;::SplineType</type>
      <name>SplineType</name>
      <anchorfile>a00583.html</anchorfile>
      <anchor>a468600dd4993f6c6ed5f361ec1673dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>einspline_traits&lt; ST, D &gt;::BCType</type>
      <name>BCType</name>
      <anchorfile>a00583.html</anchorfile>
      <anchor>a9bc6f2c0d7735afb97a16e1671e7080f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SplineAdoptorBase&lt; ST, D &gt;::PointType</type>
      <name>PointType</name>
      <anchorfile>a00583.html</anchorfile>
      <anchor>aca3109e0c4c0cce20a37fa6678f3a0ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SplineAdoptorBase&lt; ST, D &gt;::SingleSplineType</type>
      <name>SingleSplineType</name>
      <anchorfile>a00583.html</anchorfile>
      <anchor>a465638d052021554b7e8a42ed2a59340</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SplineC2RPackedAdoptor</name>
      <anchorfile>a00583.html</anchorfile>
      <anchor>adb08ca27829664cb9b58c43d9465d8d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SplineC2RPackedAdoptor</name>
      <anchorfile>a00583.html</anchorfile>
      <anchor>a7a6544f9ce2b1157c22a1acffb371e41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeStorage</name>
      <anchorfile>a00583.html</anchorfile>
      <anchor>aee1043cda6d474c2d4baafaff80404a2</anchor>
      <arglist>(int n, int nvals)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_spline</name>
      <anchorfile>a00583.html</anchorfile>
      <anchor>a5c2b76771deb4b2f90fcebfa8b490765</anchor>
      <arglist>(GT &amp;xyz_g, BCT &amp;xyz_bc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_spline</name>
      <anchorfile>a00583.html</anchorfile>
      <anchor>ac6346f090515a75721949a00d9843c71</anchor>
      <arglist>(ST *restrict psi_r, ST *restrict psi_i, int twist, int ispline, int level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_spline</name>
      <anchorfile>a00583.html</anchorfile>
      <anchor>a456508b8e6836b4c320ecc97c314d74e</anchor>
      <arglist>(SingleSplineType *spline_r, SingleSplineType *spline_i, int twist, int ispline, int level)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read_splines</name>
      <anchorfile>a00583.html</anchorfile>
      <anchor>ad8fc30f88c27549fd671cdbc1872c72e</anchor>
      <arglist>(hdf_archive &amp;h5f)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write_splines</name>
      <anchorfile>a00583.html</anchorfile>
      <anchor>aa0dcad554bed9e4ca578f6c3130ae12b</anchor>
      <arglist>(hdf_archive &amp;h5f)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>convertPos</name>
      <anchorfile>a00583.html</anchorfile>
      <anchor>afbe3a4032a6c7989f6a90ccc2da055ad</anchor>
      <arglist>(const PointType &amp;r, PointType &amp;ru)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_v</name>
      <anchorfile>a00583.html</anchorfile>
      <anchor>ad33681502acb7bfddbaddc558404fc3b</anchor>
      <arglist>(const PointType &amp;r, int bc_sign, VV &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_v</name>
      <anchorfile>a00583.html</anchorfile>
      <anchor>a517bf588c8a8fb0800963204c40bd718</anchor>
      <arglist>(const PointType &amp;r, VV &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_vgl</name>
      <anchorfile>a00583.html</anchorfile>
      <anchor>afb0c5997cdc2ca391f49cad3ab5bb8fc</anchor>
      <arglist>(const PointType &amp;r, int bc_sign, VV &amp;psi, GV &amp;dpsi, VV &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_vgl</name>
      <anchorfile>a00583.html</anchorfile>
      <anchor>a735c911aee55e37bf1aad5b4126f020f</anchor>
      <arglist>(const PointType &amp;r, VV &amp;psi, GV &amp;dpsi, VV &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_vgh</name>
      <anchorfile>a00583.html</anchorfile>
      <anchor>ab71e2d50ba2f2f7ad7163caea2f8ecd6</anchor>
      <arglist>(const PointType &amp;r, int bc_sign, VV &amp;psi, GV &amp;dpsi, GGV &amp;grad_grad_psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_vgh</name>
      <anchorfile>a00583.html</anchorfile>
      <anchor>a797fdf5fc0e85aa4493086b3da0cd9a4</anchor>
      <arglist>(const PointType &amp;r, VV &amp;psi, GV &amp;dpsi, GGV &amp;grad_grad_psi)</arglist>
    </member>
    <member kind="variable">
      <type>SplineType *</type>
      <name>MultiSpline</name>
      <anchorfile>a00583.html</anchorfile>
      <anchor>a1ccfd48337a42228f4dc4373820311f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>BaseN</name>
      <anchorfile>a00583.html</anchorfile>
      <anchor>a8ecbbfe68d98fe9a312f4b4276f45133</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>BaseOffset</name>
      <anchorfile>a00583.html</anchorfile>
      <anchor>ae4c79ec8320f8f18096bce086aac4f89</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; ST &gt;</type>
      <name>KdotR</name>
      <anchorfile>a00583.html</anchorfile>
      <anchor>a0c629c214dd097bdc4495c92e5e5bdfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; ST &gt;</type>
      <name>CosV</name>
      <anchorfile>a00583.html</anchorfile>
      <anchor>a87c31025c716433d0b8159cc779784cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; ST &gt;</type>
      <name>SinV</name>
      <anchorfile>a00583.html</anchorfile>
      <anchor>a408290bbc0b43960e8d5da8d6674ab96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; ST &gt;</type>
      <name>mKK</name>
      <anchorfile>a00583.html</anchorfile>
      <anchor>ac1ecfd42e277d88d070aa52129e516a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; Tensor&lt; ST, D &gt; &gt;</type>
      <name>KK</name>
      <anchorfile>a00583.html</anchorfile>
      <anchor>a94c57ecfb2cf52aa0dd395c126044318</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::hdf_dual_grid</name>
    <filename>a00257.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>read</name>
      <anchorfile>a00257.html</anchorfile>
      <anchor>a55bc69fe47eb96964c5ad15b84be3f20</anchor>
      <arglist>(SMA *bspline, hdf_archive &amp;h5f)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>write</name>
      <anchorfile>a00257.html</anchorfile>
      <anchor>a28a5d1b376e06bd664d317f3ae446aa8</anchor>
      <arglist>(SMA *bspline, hdf_archive &amp;h5f)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::SplineMixedAdoptor</name>
    <filename>a00584.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>D</templarg>
    <base>qmcplusplus::SplineR2RAdoptor</base>
    <member kind="typedef">
      <type>einspline_traits&lt; ST, D &gt;::SplineType</type>
      <name>SplineType</name>
      <anchorfile>a00584.html</anchorfile>
      <anchor>a468600dd4993f6c6ed5f361ec1673dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>einspline_traits&lt; ST, D &gt;::BCType</type>
      <name>BCType</name>
      <anchorfile>a00584.html</anchorfile>
      <anchor>a9bc6f2c0d7735afb97a16e1671e7080f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>einspline_traits&lt; ST, D &gt;::DataType</type>
      <name>DataType</name>
      <anchorfile>a00584.html</anchorfile>
      <anchor>ab1601782086ffc0d605db03ecb4c10b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SplineAdoptorBase&lt; ST, D &gt;::PointType</type>
      <name>PointType</name>
      <anchorfile>a00584.html</anchorfile>
      <anchor>aca3109e0c4c0cce20a37fa6678f3a0ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SplineAdoptorBase&lt; ST, D &gt;::SingleSplineType</type>
      <name>SingleSplineType</name>
      <anchorfile>a00584.html</anchorfile>
      <anchor>a465638d052021554b7e8a42ed2a59340</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SplineMixedAdoptor&lt; ST, TT, D &gt;</type>
      <name>ThisType</name>
      <anchorfile>a00584.html</anchorfile>
      <anchor>a3a4ab2f4e0ce0e4a8e2bf526ca14e1f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>einspline_traits&lt; ST, D &gt;::SplineType</type>
      <name>SplineType</name>
      <anchorfile>a00587.html</anchorfile>
      <anchor>a468600dd4993f6c6ed5f361ec1673dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>einspline_traits&lt; ST, D &gt;::BCType</type>
      <name>BCType</name>
      <anchorfile>a00587.html</anchorfile>
      <anchor>a9bc6f2c0d7735afb97a16e1671e7080f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SplineAdoptorBase&lt; ST, D &gt;::PointType</type>
      <name>PointType</name>
      <anchorfile>a00587.html</anchorfile>
      <anchor>aca3109e0c4c0cce20a37fa6678f3a0ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SplineAdoptorBase&lt; ST, D &gt;::SingleSplineType</type>
      <name>SingleSplineType</name>
      <anchorfile>a00587.html</anchorfile>
      <anchor>a465638d052021554b7e8a42ed2a59340</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SplineMixedAdoptor</name>
      <anchorfile>a00584.html</anchorfile>
      <anchor>a2b1c5ade53e63d1dea24a4c24bf9cd93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_spline</name>
      <anchorfile>a00584.html</anchorfile>
      <anchor>aff0e86eaccad1266056729bcbfd15a20</anchor>
      <arglist>(TinyVector&lt; int, D &gt; &amp;mesh_0, TinyVector&lt; int, D &gt; &amp;mesh_1, int n, int nval)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read_splines</name>
      <anchorfile>a00584.html</anchorfile>
      <anchor>ad8fc30f88c27549fd671cdbc1872c72e</anchor>
      <arglist>(hdf_archive &amp;h5f)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write_splines</name>
      <anchorfile>a00584.html</anchorfile>
      <anchor>aa0dcad554bed9e4ca578f6c3130ae12b</anchor>
      <arglist>(hdf_archive &amp;h5f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_box</name>
      <anchorfile>a00584.html</anchorfile>
      <anchor>ac460edbdb6c6f86e9c85417c163ab357</anchor>
      <arglist>(SingleSplineType *dense, PT &amp;lower, PT &amp;upper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_spline</name>
      <anchorfile>a00584.html</anchorfile>
      <anchor>a456508b8e6836b4c320ecc97c314d74e</anchor>
      <arglist>(SingleSplineType *spline_r, SingleSplineType *spline_i, int twist, int ispline, int level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_v</name>
      <anchorfile>a00584.html</anchorfile>
      <anchor>a517bf588c8a8fb0800963204c40bd718</anchor>
      <arglist>(const PointType &amp;r, VV &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_vgl</name>
      <anchorfile>a00584.html</anchorfile>
      <anchor>a735c911aee55e37bf1aad5b4126f020f</anchor>
      <arglist>(const PointType &amp;r, VV &amp;psi, GV &amp;dpsi, VV &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_vgh</name>
      <anchorfile>a00584.html</anchorfile>
      <anchor>a797fdf5fc0e85aa4493086b3da0cd9a4</anchor>
      <arglist>(const PointType &amp;r, VV &amp;psi, GV &amp;dpsi, GGV &amp;grad_grad_psi)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SplineR2RAdoptor</name>
      <anchorfile>a00587.html</anchorfile>
      <anchor>add5dfee67a9122248b21b2bc04678eb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeStorage</name>
      <anchorfile>a00587.html</anchorfile>
      <anchor>a5f02022251ebb194a87434a4e48d5863</anchor>
      <arglist>(int n, int nv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_spline</name>
      <anchorfile>a00587.html</anchorfile>
      <anchor>a5c2b76771deb4b2f90fcebfa8b490765</anchor>
      <arglist>(GT &amp;xyz_g, BCT &amp;xyz_bc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_spline</name>
      <anchorfile>a00587.html</anchorfile>
      <anchor>a7a9fbfe3148794b4dff2da282525024a</anchor>
      <arglist>(TinyVector&lt; int, D &gt; &amp;mesh, int n)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isready</name>
      <anchorfile>a00587.html</anchorfile>
      <anchor>a796947bb72cf70be0acecbea9d92f945</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_spline</name>
      <anchorfile>a00587.html</anchorfile>
      <anchor>ac6346f090515a75721949a00d9843c71</anchor>
      <arglist>(ST *restrict psi_r, ST *restrict psi_i, int twist, int ispline, int level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_spline</name>
      <anchorfile>a00587.html</anchorfile>
      <anchor>a456508b8e6836b4c320ecc97c314d74e</anchor>
      <arglist>(SingleSplineType *spline_r, SingleSplineType *spline_i, int twist, int ispline, int level)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read_splines</name>
      <anchorfile>a00587.html</anchorfile>
      <anchor>ad8fc30f88c27549fd671cdbc1872c72e</anchor>
      <arglist>(hdf_archive &amp;h5f)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write_splines</name>
      <anchorfile>a00587.html</anchorfile>
      <anchor>aa0dcad554bed9e4ca578f6c3130ae12b</anchor>
      <arglist>(hdf_archive &amp;h5f)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>convertPos</name>
      <anchorfile>a00587.html</anchorfile>
      <anchor>afbe3a4032a6c7989f6a90ccc2da055ad</anchor>
      <arglist>(const PointType &amp;r, PointType &amp;ru)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_v</name>
      <anchorfile>a00587.html</anchorfile>
      <anchor>ad33681502acb7bfddbaddc558404fc3b</anchor>
      <arglist>(const PointType &amp;r, int bc_sign, VV &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_v</name>
      <anchorfile>a00587.html</anchorfile>
      <anchor>a517bf588c8a8fb0800963204c40bd718</anchor>
      <arglist>(const PointType &amp;r, VV &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_vgl</name>
      <anchorfile>a00587.html</anchorfile>
      <anchor>afb0c5997cdc2ca391f49cad3ab5bb8fc</anchor>
      <arglist>(const PointType &amp;r, int bc_sign, VV &amp;psi, GV &amp;dpsi, VV &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_vgl</name>
      <anchorfile>a00587.html</anchorfile>
      <anchor>a735c911aee55e37bf1aad5b4126f020f</anchor>
      <arglist>(const PointType &amp;r, VV &amp;psi, GV &amp;dpsi, VV &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_vgh</name>
      <anchorfile>a00587.html</anchorfile>
      <anchor>ab71e2d50ba2f2f7ad7163caea2f8ecd6</anchor>
      <arglist>(const PointType &amp;r, int bc_sign, VV &amp;psi, GV &amp;dpsi, GGV &amp;grad_grad_psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_vgh</name>
      <anchorfile>a00587.html</anchorfile>
      <anchor>a797fdf5fc0e85aa4493086b3da0cd9a4</anchor>
      <arglist>(const PointType &amp;r, VV &amp;psi, GV &amp;dpsi, GGV &amp;grad_grad_psi)</arglist>
    </member>
    <member kind="variable">
      <type>SplineType *</type>
      <name>MultiSpline</name>
      <anchorfile>a00584.html</anchorfile>
      <anchor>a1ccfd48337a42228f4dc4373820311f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SplineType *</type>
      <name>smallBox</name>
      <anchorfile>a00584.html</anchorfile>
      <anchor>ad20dc85aa4cc9225353ddc2ddc218777</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; ST, D &gt;</type>
      <name>Lower</name>
      <anchorfile>a00584.html</anchorfile>
      <anchor>a94bbc71c1e3fe26ada79cb9b5f8ccb3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; ST, D &gt;</type>
      <name>Upper</name>
      <anchorfile>a00584.html</anchorfile>
      <anchor>a1c994212282fb9ef4eb7c53b601428b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GridConvert&lt; ST &gt;</type>
      <name>gTransform</name>
      <anchorfile>a00584.html</anchorfile>
      <anchor>a305b2902fadebe10343952ecc9f8b56b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>UseFullGrid</name>
      <anchorfile>a00584.html</anchorfile>
      <anchor>aa474e9be9f144e5d1c6018f4cacae35b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SplineType *</type>
      <name>MultiSpline</name>
      <anchorfile>a00587.html</anchorfile>
      <anchor>a1ccfd48337a42228f4dc4373820311f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>BaseN</name>
      <anchorfile>a00587.html</anchorfile>
      <anchor>a8ecbbfe68d98fe9a312f4b4276f45133</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>BaseOffset</name>
      <anchorfile>a00587.html</anchorfile>
      <anchor>ae4c79ec8320f8f18096bce086aac4f89</anchor>
      <arglist>[3]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::SplineOpenAdoptor</name>
    <filename>a00586.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>D</templarg>
    <base>qmcplusplus::SplineAdoptorBase</base>
    <member kind="typedef">
      <type>einspline_traits&lt; ST, D &gt;::SplineType</type>
      <name>SplineType</name>
      <anchorfile>a00586.html</anchorfile>
      <anchor>a468600dd4993f6c6ed5f361ec1673dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>einspline_traits&lt; ST, D &gt;::BCType</type>
      <name>BCType</name>
      <anchorfile>a00586.html</anchorfile>
      <anchor>a9bc6f2c0d7735afb97a16e1671e7080f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>einspline_traits&lt; ST, D &gt;::DataType</type>
      <name>DataType</name>
      <anchorfile>a00586.html</anchorfile>
      <anchor>ab1601782086ffc0d605db03ecb4c10b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SplineAdoptorBase&lt; ST, D &gt;::PointType</type>
      <name>PointType</name>
      <anchorfile>a00586.html</anchorfile>
      <anchor>aca3109e0c4c0cce20a37fa6678f3a0ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SplineAdoptorBase&lt; ST, D &gt;::SingleSplineType</type>
      <name>SingleSplineType</name>
      <anchorfile>a00586.html</anchorfile>
      <anchor>a465638d052021554b7e8a42ed2a59340</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SplineOpenAdoptor&lt; ST, TT, D &gt;</type>
      <name>ThisType</name>
      <anchorfile>a00586.html</anchorfile>
      <anchor>a759469595a332d57f6debf8d48c201a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SplineOpenAdoptor</name>
      <anchorfile>a00586.html</anchorfile>
      <anchor>afc22ce27e99b6a504b4a679463bf82dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeStorage</name>
      <anchorfile>a00586.html</anchorfile>
      <anchor>a5f02022251ebb194a87434a4e48d5863</anchor>
      <arglist>(int n, int nv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_spline</name>
      <anchorfile>a00586.html</anchorfile>
      <anchor>aff0e86eaccad1266056729bcbfd15a20</anchor>
      <arglist>(TinyVector&lt; int, D &gt; &amp;mesh_0, TinyVector&lt; int, D &gt; &amp;mesh_1, int n, int nval)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_box</name>
      <anchorfile>a00586.html</anchorfile>
      <anchor>ac460edbdb6c6f86e9c85417c163ab357</anchor>
      <arglist>(SingleSplineType *dense, PT &amp;lower, PT &amp;upper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_spline</name>
      <anchorfile>a00586.html</anchorfile>
      <anchor>a456508b8e6836b4c320ecc97c314d74e</anchor>
      <arglist>(SingleSplineType *spline_r, SingleSplineType *spline_i, int twist, int ispline, int level)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read_splines</name>
      <anchorfile>a00586.html</anchorfile>
      <anchor>ad8fc30f88c27549fd671cdbc1872c72e</anchor>
      <arglist>(hdf_archive &amp;h5f)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write_splines</name>
      <anchorfile>a00586.html</anchorfile>
      <anchor>aa0dcad554bed9e4ca578f6c3130ae12b</anchor>
      <arglist>(hdf_archive &amp;h5f)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isready</name>
      <anchorfile>a00586.html</anchorfile>
      <anchor>a796947bb72cf70be0acecbea9d92f945</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertPos</name>
      <anchorfile>a00586.html</anchorfile>
      <anchor>af9adaa3c5baef2b0b0c83a1c1deb15fb</anchor>
      <arglist>(const PointType &amp;r, PointType &amp;ru)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_v</name>
      <anchorfile>a00586.html</anchorfile>
      <anchor>a517bf588c8a8fb0800963204c40bd718</anchor>
      <arglist>(const PointType &amp;r, VV &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_vgl</name>
      <anchorfile>a00586.html</anchorfile>
      <anchor>a735c911aee55e37bf1aad5b4126f020f</anchor>
      <arglist>(const PointType &amp;r, VV &amp;psi, GV &amp;dpsi, VV &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate_vgh</name>
      <anchorfile>a00586.html</anchorfile>
      <anchor>a797fdf5fc0e85aa4493086b3da0cd9a4</anchor>
      <arglist>(const PointType &amp;r, VV &amp;psi, GV &amp;dpsi, GGV &amp;grad_grad_psi)</arglist>
    </member>
    <member kind="variable">
      <type>SplineType *</type>
      <name>MultiSpline</name>
      <anchorfile>a00586.html</anchorfile>
      <anchor>a1ccfd48337a42228f4dc4373820311f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SplineType *</type>
      <name>smallBox</name>
      <anchorfile>a00586.html</anchorfile>
      <anchor>ad20dc85aa4cc9225353ddc2ddc218777</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; ST, D &gt;</type>
      <name>Lower</name>
      <anchorfile>a00586.html</anchorfile>
      <anchor>a94bbc71c1e3fe26ada79cb9b5f8ccb3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; ST, D &gt;</type>
      <name>Upper</name>
      <anchorfile>a00586.html</anchorfile>
      <anchor>a1c994212282fb9ef4eb7c53b601428b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; ST, D &gt;</type>
      <name>L</name>
      <anchorfile>a00586.html</anchorfile>
      <anchor>aceb66f7b143db4d09d06b3ba94164b08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; ST, D &gt;</type>
      <name>InvL</name>
      <anchorfile>a00586.html</anchorfile>
      <anchor>a5ba056b25872b17199662139f8cd56f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>UseFullGrid</name>
      <anchorfile>a00586.html</anchorfile>
      <anchor>aa474e9be9f144e5d1c6018f4cacae35b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GridConvert&lt; ST &gt;</type>
      <name>gTransform</name>
      <anchorfile>a00586.html</anchorfile>
      <anchor>a305b2902fadebe10343952ecc9f8b56b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::SplineMixedAdoptorReader</name>
    <filename>a00585.html</filename>
    <templarg>SA</templarg>
    <base>qmcplusplus::BsplineReaderBase</base>
    <base>qmcplusplus::BsplineReaderBase</base>
    <member kind="typedef">
      <type>SA</type>
      <name>adoptor_type</name>
      <anchorfile>a00585.html</anchorfile>
      <anchor>aab63155f6ebc1f69e6e89e3fd6228bf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>adoptor_type::SplineType</type>
      <name>SplineType</name>
      <anchorfile>a00585.html</anchorfile>
      <anchor>aa620355ce8c3f28163d6480dfafa4a1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SA</type>
      <name>adoptor_type</name>
      <anchorfile>a00585.html</anchorfile>
      <anchor>aab63155f6ebc1f69e6e89e3fd6228bf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>adoptor_type::SplineType</type>
      <name>SplineType</name>
      <anchorfile>a00585.html</anchorfile>
      <anchor>aa620355ce8c3f28163d6480dfafa4a1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SplineMixedAdoptorReader</name>
      <anchorfile>a00585.html</anchorfile>
      <anchor>a85c4a46464a54827f0a6204adf1c8f93</anchor>
      <arglist>(EinsplineSetBuilder *e)</arglist>
    </member>
    <member kind="function">
      <type>SPOSetBase *</type>
      <name>create_spline_set</name>
      <anchorfile>a00585.html</anchorfile>
      <anchor>a89d9fea2714e2e2266a965a89fbf08bd</anchor>
      <arglist>(int spin, EinsplineSet *orbitalSet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SplineMixedAdoptorReader</name>
      <anchorfile>a00585.html</anchorfile>
      <anchor>a85c4a46464a54827f0a6204adf1c8f93</anchor>
      <arglist>(EinsplineSetBuilder *e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SplineMixedAdoptorReader</name>
      <anchorfile>a00585.html</anchorfile>
      <anchor>ac35734f2d99c98b64cd6268abfb99dea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fft_spline</name>
      <anchorfile>a00585.html</anchorfile>
      <anchor>a55c50efc1d93cb44889ac16b06d45aae</anchor>
      <arglist>(Vector&lt; complex&lt; double &gt; &gt; &amp;cG, int ti, int iorb)</arglist>
    </member>
    <member kind="function">
      <type>SPOSetBase *</type>
      <name>create_spline_set</name>
      <anchorfile>a00585.html</anchorfile>
      <anchor>a89d9fea2714e2e2266a965a89fbf08bd</anchor>
      <arglist>(int spin, EinsplineSet *orbitalSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize_spline_slow</name>
      <anchorfile>a00585.html</anchorfile>
      <anchor>a7bd538a23edc1474d21254bfc6775311</anchor>
      <arglist>(int spin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize_spline_pio</name>
      <anchorfile>a00585.html</anchorfile>
      <anchor>abbe5ca2ceeea2fc1b854cb6710195ae8</anchor>
      <arglist>(int spin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize_spline_pio_bcast</name>
      <anchorfile>a00585.html</anchorfile>
      <anchor>a3182735b81ec02ceeb2fe6af256657c5</anchor>
      <arglist>(int spin)</arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; int, 3 &gt;</type>
      <name>MeshSize</name>
      <anchorfile>a00585.html</anchorfile>
      <anchor>af44a300200d277730d34a3faebcf573a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; int, 3 &gt;</type>
      <name>coarse_mesh</name>
      <anchorfile>a00585.html</anchorfile>
      <anchor>a4b8d8e36c6a32232890b1bcd299ebc15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; int, 3 &gt;</type>
      <name>coarse_stride</name>
      <anchorfile>a00585.html</anchorfile>
      <anchor>ab83d21e2f47b4c0fc86efcda84109ddc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; complex&lt; double &gt;, 3 &gt;</type>
      <name>FFTbox</name>
      <anchorfile>a00585.html</anchorfile>
      <anchor>a31aa744808e3b0aa3b125d7915413762</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; double, 3 &gt;</type>
      <name>bigD_r</name>
      <anchorfile>a00585.html</anchorfile>
      <anchor>a8acb402b1d8203adc600be707faff8c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; double, 3 &gt;</type>
      <name>bigD_i</name>
      <anchorfile>a00585.html</anchorfile>
      <anchor>abf2f3814e856b7ceafbebb7fc1aa2aa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; double, 3 &gt;</type>
      <name>smallD_r</name>
      <anchorfile>a00585.html</anchorfile>
      <anchor>a9301f00608cf86a6d068849d168b5dca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; double, 3 &gt;</type>
      <name>smallD_i</name>
      <anchorfile>a00585.html</anchorfile>
      <anchor>ac8f515f2ca0d46791b8bae2650d1c698</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; UBspline_3d_d * &gt;</type>
      <name>spline_r</name>
      <anchorfile>a00585.html</anchorfile>
      <anchor>a2e1822a5494f3272fceff7870d258940</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; UBspline_3d_d * &gt;</type>
      <name>spline_i</name>
      <anchorfile>a00585.html</anchorfile>
      <anchor>a3953a9d2a588236b5a1c249c8330a572</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BsplineSet&lt; adoptor_type &gt; *</type>
      <name>bspline</name>
      <anchorfile>a00585.html</anchorfile>
      <anchor>a9b1c2e7996b5904de7a1324e7cfeb2c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>OrbGroups</name>
      <anchorfile>a00585.html</anchorfile>
      <anchor>a343a04e0386eac5e1e54f1aae5c21f84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>fftw_plan</type>
      <name>FFTplan</name>
      <anchorfile>a00585.html</anchorfile>
      <anchor>a742ae19211a4e3e02d00ff788f43a3eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>use_imaginary</name>
      <anchorfile>a00585.html</anchorfile>
      <anchor>a33b3c590e861f3bc0a0a8b3d4a192fe2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::SplineR2RAdoptor</name>
    <filename>a00587.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>D</templarg>
    <base>qmcplusplus::SplineAdoptorBase</base>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::SPOSetBase</name>
    <filename>a00588.html</filename>
    <base>qmcplusplus::QMCTraits</base>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::CoefficientHolder</name>
    <filename>a00076.html</filename>
    <member kind="typedef">
      <type>OrbitalBase::RealType</type>
      <name>RealType</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a6a83deb90d5857d4890b2890646db240</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addParams</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>ada57580f1141753a2160cdd5fda36c03</anchor>
      <arglist>(opt_variables_type &amp;var, RealType e, RealType v)</arglist>
    </member>
    <member kind="function">
      <type>opt_variables_type</type>
      <name>getBestCoefficients</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>afb3c9b7cf555354909862c03da071a66</anchor>
      <arglist>(RealType we, RealType wv, bool print=0)</arglist>
    </member>
    <member kind="function">
      <type>opt_variables_type</type>
      <name>getAvgCoefficients</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>aad01b2d370368d9dcb05daa0cac4bc1f</anchor>
      <arglist>(int lastN)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; opt_variables_type &gt;</type>
      <name>oldVars</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a37e0c73925449d6e999513fadad2d5b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; RealType &gt;</type>
      <name>energies</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a5ead92053bec7f68d731d8702059e505</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; RealType &gt;</type>
      <name>variances</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a588c325fcea804df96cf23675c4c5262</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::WaveFunctionFactory</name>
    <filename>a00635.html</filename>
    <base>qmcplusplus::MPIObjectBase</base>
    <member kind="typedef">
      <type>map&lt; string, ParticleSet * &gt;</type>
      <name>PtclPoolType</name>
      <anchorfile>a00635.html</anchorfile>
      <anchor>a0878154607cbe00d8a425a977401e290</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WaveFunctionFactory</name>
      <anchorfile>a00635.html</anchorfile>
      <anchor>a275045a80cf1a28d25c220ac682e9649</anchor>
      <arglist>(ParticleSet *qp, PtclPoolType &amp;pset, Communicate *c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~WaveFunctionFactory</name>
      <anchorfile>a00635.html</anchorfile>
      <anchor>adf46ca099ea954b361aac60826f6bf22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPsi</name>
      <anchorfile>a00635.html</anchorfile>
      <anchor>a80d335fc89b5c6e27e0dec3a73df6f94</anchor>
      <arglist>(TrialWaveFunction *psi)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00635.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00635.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>build</name>
      <anchorfile>a00635.html</anchorfile>
      <anchor>a0dca718376f0fb5abae74125c66f790b</anchor>
      <arglist>(xmlNodePtr cur, bool buildtree=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addFermionTerm</name>
      <anchorfile>a00635.html</anchorfile>
      <anchor>a89e2d7a818c6efb6cccdf35155f5e76c</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addNode</name>
      <anchorfile>a00635.html</anchorfile>
      <anchor>a249506b66d340e094a92e3f88e3ddd9c</anchor>
      <arglist>(OrbitalBuilderBase *b, xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCloneSize</name>
      <anchorfile>a00635.html</anchorfile>
      <anchor>a7ceb4318591046e7323c1488edafb1c3</anchor>
      <arglist>(int np)</arglist>
    </member>
    <member kind="function">
      <type>WaveFunctionFactory *</type>
      <name>clone</name>
      <anchorfile>a00635.html</anchorfile>
      <anchor>adbcf0fc150007f461f75c9c20ae778ba</anchor>
      <arglist>(ParticleSet *qp, int ip, const string &amp;aname)</arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet *</type>
      <name>targetPtcl</name>
      <anchorfile>a00635.html</anchorfile>
      <anchor>a38de935921735223bc6966d5b2d06efa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TrialWaveFunction *</type>
      <name>targetPsi</name>
      <anchorfile>a00635.html</anchorfile>
      <anchor>aa988d4e3f7d97b58c7839a80cf0fdca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PtclPoolType &amp;</type>
      <name>ptclPool</name>
      <anchorfile>a00635.html</anchorfile>
      <anchor>a4fc7c3d5848a9235a0cf8803ff1f9fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>xmlNodePtr</type>
      <name>myNode</name>
      <anchorfile>a00635.html</anchorfile>
      <anchor>ade03b7f5a1fd4d07359c6e19af6db843</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; OrbitalBuilderBase * &gt;</type>
      <name>psiBuilder</name>
      <anchorfile>a00635.html</anchorfile>
      <anchor>a5b6f87bc25d3f32fc3ac363ef78fa379</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; WaveFunctionFactory * &gt;</type>
      <name>myClones</name>
      <anchorfile>a00635.html</anchorfile>
      <anchor>a00f6ec58dc61e9680f6fa51ca4cc875d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::ChiesaCorrection</name>
    <filename>a00068.html</filename>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>ChiesaCorrection</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>ac1bafef9e12d0ff6fe969ac3e972c691</anchor>
      <arglist>(ParticleSet &amp;ptcl, const TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a7edc93ce2c228e6ce7bcbfce117ff230</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a5df09e537c6e0e8ecb15a64f5d244510</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const TrialWaveFunction &amp;</type>
      <name>psi_ref</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a3daad6936f0d838040396c1391c77e7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet &amp;</type>
      <name>ptcl_ref</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a224d88362d2568fe970d6fa76d5a9e43</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ConservedEnergy</name>
    <filename>a00088.html</filename>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>ConservedEnergy</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a6df218252726bd6dd21ab3692fdb3434</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConservedEnergy</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a78b338c870a75bc28b4e63f3533a6970</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a5c48281949f42f6b68e628f33c3ee980</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a8c7995fca4e1c327502fe29d4633430e</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::CoulombAA_CUDA</name>
    <filename>a00097.html</filename>
    <member kind="function">
      <type></type>
      <name>CoulombAA_CUDA</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>ab801bbd1504b36758593febf78ebd7d4</anchor>
      <arglist>(ParticleSet &amp;ref)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEnergy</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a36afe89654ad73e3491c42e7d54b9940</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, vector&lt; RealType &gt; &amp;LocalEnergy)</arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a8c7995fca4e1c327502fe29d4633430e</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet &amp;</type>
      <name>PtclRef</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a3f9ab4fbbe16e5484231525f5409f69c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gpu::device_vector&lt; CUDA_PRECISION &gt;</type>
      <name>SumGPU</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>ad7cfbabda34d0140fb47c42a1dafbdd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gpu::host_vector&lt; CUDA_PRECISION &gt;</type>
      <name>SumHost</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>ad4af71554b2bbe28f072d83ca33e9087</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::CoulombAB_CUDA</name>
    <filename>a00098.html</filename>
    <member kind="function">
      <type></type>
      <name>CoulombAB_CUDA</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a78d4539ac92b6ae585f9c17b203778a4</anchor>
      <arglist>(ParticleSet &amp;ref, ParticleSet &amp;ions)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEnergy</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a36afe89654ad73e3491c42e7d54b9940</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, vector&lt; RealType &gt; &amp;LocalEnergy)</arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a8c7995fca4e1c327502fe29d4633430e</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet &amp;</type>
      <name>PtclRef</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a3f9ab4fbbe16e5484231525f5409f69c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gpu::device_vector&lt; CUDA_PRECISION &gt;</type>
      <name>SumGPU</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>ad7cfbabda34d0140fb47c42a1dafbdd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gpu::host_vector&lt; CUDA_PRECISION &gt;</type>
      <name>SumHost</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>ad4af71554b2bbe28f072d83ca33e9087</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gpu::device_vector&lt; CUDA_PRECISION &gt;</type>
      <name>ZionGPU</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>ac486d6551e127d6b08fad3e8f7958ddc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::CoulombPBCAA_CUDA</name>
    <filename>a00099.html</filename>
    <member kind="function">
      <type></type>
      <name>CoulombPBCAA_CUDA</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a3fc6f4a41db8dfeee186ce30d04bad17</anchor>
      <arglist>(ParticleSet &amp;ref, bool active, bool cloning=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupLongRangeGPU</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>af6835e5a7dfbcff5a8de4079cba886f5</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEnergy</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a36afe89654ad73e3491c42e7d54b9940</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, vector&lt; RealType &gt; &amp;LocalEnergy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initBreakup</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a9314127343d14eba1b2fbec40122d205</anchor>
      <arglist>(ParticleSet &amp;P, bool cloning)</arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a5df09e537c6e0e8ecb15a64f5d244510</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet &amp;</type>
      <name>PtclRef</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a3f9ab4fbbe16e5484231525f5409f69c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TextureSpline *</type>
      <name>SRSpline</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a91b74fa717ba4e263e4b6a0e0052c01f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gpu::device_vector&lt; CUDA_PRECISION &gt;</type>
      <name>SumGPU</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>ad7cfbabda34d0140fb47c42a1dafbdd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gpu::host_vector&lt; CUDA_PRECISION &gt;</type>
      <name>SumHost</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>ad4af71554b2bbe28f072d83ca33e9087</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gpu::device_vector&lt; CUDA_PRECISION &gt;</type>
      <name>L</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a0d4129884368fc0002a1a3010d51aa94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gpu::device_vector&lt; CUDA_PRECISION &gt;</type>
      <name>Linv</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>aa64bb39cee89c4f9d5fe4343793dbf99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Numk</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a4acb214d1a77184f61a0434a42825478</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gpu::device_vector&lt; CUDA_PRECISION &gt;</type>
      <name>kpointsGPU</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>af4f0a74b50f707f67fabb7db433f2fb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gpu::device_vector&lt; int &gt;</type>
      <name>kshellGPU</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>ae2e02a2cfd78e47a1370f849434e9d90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gpu::device_vector&lt; CUDA_PRECISION &gt;</type>
      <name>FkGPU</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a80483f4dcd49d2eb6b8b0c88e5d64160</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; gpu::device_vector&lt; CUDA_PRECISION * &gt; &gt;</type>
      <name>RhoklistsGPU</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a29f61cf6b7951ebc189ad75d693020e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; gpu::host_vector&lt; CUDA_PRECISION * &gt; &gt;</type>
      <name>RhoklistsHost</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>ae9fc38b5aab4262c76bab789eb2a7390</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gpu::device_vector&lt; CUDA_PRECISION &gt;</type>
      <name>RhokGPU</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a05426c966e347be1dd7b41b26501de1f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::CoulombPBCAB_CUDA</name>
    <filename>a00100.html</filename>
    <member kind="function">
      <type>void</type>
      <name>setupLongRangeGPU</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a3a70532707759d8cae61828c315a213a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a63e64ef7d869b88ab26fe3e3f78707b6</anchor>
      <arglist>(int groupID, RadFunctorType *ppot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initBreakup</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a3830d6c9cec4b51ecb47cf561606901e</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEnergy</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a36afe89654ad73e3491c42e7d54b9940</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, vector&lt; RealType &gt; &amp;LocalEnergy)</arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a5df09e537c6e0e8ecb15a64f5d244510</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CoulombPBCAB_CUDA</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a30b82e048e4ee4dd312305106370f859</anchor>
      <arglist>(ParticleSet &amp;ions, ParticleSet &amp;elns, bool cloning=false)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumIons</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>aeb5b7c1abcc170df95212c6521e6139b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumElecs</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>aa723c38d1be1cb6fbdcb3e07e8725b07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumElecGroups</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a8809610ef96eda8904086a38e26cf57d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumIonSpecies</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a32046cc266fef1cd4b8e66d2d9b0ad12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet &amp;</type>
      <name>ElecRef</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a1db223c2351115e0ab325945c5c91700</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet &amp;</type>
      <name>IonRef</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>ae8a9a703e1807dc2cbec11d1622267ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>IonFirst</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a4e793fd9bb9ba35f2efaa8120921ac54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>IonLast</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a73d6616a4243a191ad1222190a08d9d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; TextureSpline * &gt;</type>
      <name>SRSplines</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>acc2da092f7d188698fa45cb50d5a9e91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TextureSpline *</type>
      <name>V0Spline</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a569c2838ddd70ad26aed82d548a280d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gpu::device_vector&lt; CUDA_PRECISION &gt;</type>
      <name>SumGPU</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>ad7cfbabda34d0140fb47c42a1dafbdd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gpu::host_vector&lt; CUDA_PRECISION &gt;</type>
      <name>SumHost</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>ad4af71554b2bbe28f072d83ca33e9087</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gpu::device_vector&lt; CUDA_PRECISION &gt;</type>
      <name>IGPU</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a9c58925f9d9aa4dcd5b0a8f0792071da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gpu::device_vector&lt; CUDA_PRECISION &gt;</type>
      <name>L</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a0d4129884368fc0002a1a3010d51aa94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gpu::device_vector&lt; CUDA_PRECISION &gt;</type>
      <name>Linv</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>aa64bb39cee89c4f9d5fe4343793dbf99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Numk</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a4acb214d1a77184f61a0434a42825478</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gpu::device_vector&lt; CUDA_PRECISION &gt;</type>
      <name>kpointsGPU</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>af4f0a74b50f707f67fabb7db433f2fb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gpu::device_vector&lt; int &gt;</type>
      <name>kshellGPU</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>ae2e02a2cfd78e47a1370f849434e9d90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gpu::device_vector&lt; CUDA_PRECISION &gt;</type>
      <name>FkGPU</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a80483f4dcd49d2eb6b8b0c88e5d64160</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gpu::device_vector&lt; CUDA_PRECISION * &gt;</type>
      <name>RhoklistGPU</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a41d24dcf447363b55d17503dfa946796</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gpu::host_vector&lt; CUDA_PRECISION * &gt;</type>
      <name>RhoklistHost</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a8bf6ad6f6216f2f0c1241efeafd716ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gpu::device_vector&lt; CUDA_PRECISION &gt;</type>
      <name>RhokElecGPU</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a142726cbfebe70941f3de2cd049dce04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; PosType &gt;</type>
      <name>SortedIons</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a85683cd6bfcf701941287e831ee25079</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; gpu::device_vector&lt; CUDA_PRECISION &gt; &gt;</type>
      <name>RhokIonsGPU</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>ace144fa8968afd79ea096dae278bb57d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::CoulombPotential</name>
    <filename>a00101.html</filename>
    <templarg>T</templarg>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>CoulombPotential</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a77e645643b2c43c6c5f18f85aa5e070e</anchor>
      <arglist>(ParticleSet *s, ParticleSet *t, bool quantum)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluateAA</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a820b3247ce5ee5a14ec6209f6262d6a2</anchor>
      <arglist>(const DistanceTableData *d, const T *restrict Z)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluateAB</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a65fe8216ce16547ab31081bb747c92b7</anchor>
      <arglist>(const DistanceTableData *d, const T *restrict Za, const T *restrict Zb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CoulombPotential</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a8f395746700b226262000537c2f14d03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a5c48281949f42f6b68e628f33c3ee980</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a8c7995fca4e1c327502fe29d4633430e</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>is_active</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a407c3efba665d276a38229f905bef352</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>myTableIndex</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>aa0e1a164ff81fc42ab4f688c6aeca19e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nCenters</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>ace24f184d258e150be4c88c4e34678f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet *</type>
      <name>PtclA</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>ad0157eeb84a92c2683571fb52acc55a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::CoulombPotentialAA_CUDA</name>
    <filename>a00102.html</filename>
    <base>CoulombPotential&lt; OHMMS_PRECISION &gt;</base>
    <member kind="function">
      <type></type>
      <name>CoulombPotentialAA_CUDA</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>abaf6f1a8cf8e1c023417ff77c101eae1</anchor>
      <arglist>(ParticleSet *s, bool quantum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEnergy</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a36afe89654ad73e3491c42e7d54b9940</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, vector&lt; RealType &gt; &amp;LocalEnergy)</arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a5df09e537c6e0e8ecb15a64f5d244510</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CoulombPotential</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a77e645643b2c43c6c5f18f85aa5e070e</anchor>
      <arglist>(ParticleSet *s, ParticleSet *t, bool quantum)</arglist>
    </member>
    <member kind="function">
      <type>OHMMS_PRECISION</type>
      <name>evaluateAA</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a820b3247ce5ee5a14ec6209f6262d6a2</anchor>
      <arglist>(const DistanceTableData *d, const OHMMS_PRECISION *restrict Z)</arglist>
    </member>
    <member kind="function">
      <type>OHMMS_PRECISION</type>
      <name>evaluateAB</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a65fe8216ce16547ab31081bb747c92b7</anchor>
      <arglist>(const DistanceTableData *d, const OHMMS_PRECISION *restrict Za, const OHMMS_PRECISION *restrict Zb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CoulombPotential</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a8f395746700b226262000537c2f14d03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a5c48281949f42f6b68e628f33c3ee980</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a8c7995fca4e1c327502fe29d4633430e</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumElecs</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>aa723c38d1be1cb6fbdcb3e07e8725b07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gpu::device_vector&lt; CUDA_PRECISION &gt;</type>
      <name>SumGPU</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>ad7cfbabda34d0140fb47c42a1dafbdd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gpu::host_vector&lt; CUDA_PRECISION &gt;</type>
      <name>SumHost</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>ad4af71554b2bbe28f072d83ca33e9087</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>is_active</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a407c3efba665d276a38229f905bef352</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>myTableIndex</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>aa0e1a164ff81fc42ab4f688c6aeca19e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nCenters</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>ace24f184d258e150be4c88c4e34678f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet *</type>
      <name>PtclA</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>ad0157eeb84a92c2683571fb52acc55a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::CoulombPotentialAB_CUDA</name>
    <filename>a00103.html</filename>
    <base>CoulombPotential&lt; OHMMS_PRECISION &gt;</base>
    <member kind="function">
      <type></type>
      <name>CoulombPotentialAB_CUDA</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>aadefecfae14b8f69b2613e03e5348a36</anchor>
      <arglist>(ParticleSet *s, ParticleSet *t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEnergy</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a36afe89654ad73e3491c42e7d54b9940</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, vector&lt; RealType &gt; &amp;LocalEnergy)</arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a5df09e537c6e0e8ecb15a64f5d244510</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumElecs</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>aa723c38d1be1cb6fbdcb3e07e8725b07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumIons</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>aeb5b7c1abcc170df95212c6521e6139b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumIonSpecies</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a32046cc266fef1cd4b8e66d2d9b0ad12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>IonFirst</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a4e793fd9bb9ba35f2efaa8120921ac54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>IonLast</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a73d6616a4243a191ad1222190a08d9d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; PosType &gt;</type>
      <name>SortedIons</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a85683cd6bfcf701941287e831ee25079</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gpu::host_vector&lt; CUDA_PRECISION &gt;</type>
      <name>SumHost</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ad4af71554b2bbe28f072d83ca33e9087</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gpu::device_vector&lt; CUDA_PRECISION &gt;</type>
      <name>SumGPU</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ad7cfbabda34d0140fb47c42a1dafbdd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gpu::device_vector&lt; CUDA_PRECISION &gt;</type>
      <name>ZionGPU</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ac486d6551e127d6b08fad3e8f7958ddc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gpu::device_vector&lt; CUDA_PRECISION &gt;</type>
      <name>IGPU</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a9c58925f9d9aa4dcd5b0a8f0792071da</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::DensityEstimator</name>
    <filename>a00138.html</filename>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>DensityEstimator</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a5c3936dc449df6c2bdda64f5d516fb3d</anchor>
      <arglist>(ParticleSet &amp;elns)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evalSR</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a656b51e70fdc24fd9370556f6c2d32df</anchor>
      <arglist>(ParticleSet &amp;P, int ipart)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evalLR</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a483ecb64bff0c964f0f57f5a5e6926b3</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPotential</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>af23ad6a93eae2fde0a7c092962c0861c</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a26cd4dcd896a13481f76a815f238af02</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEnergy</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a36afe89654ad73e3491c42e7d54b9940</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, vector&lt; RealType &gt; &amp;LocalEnergy)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObservables</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a8abdf7e1d1af61133e6ebb7b46c53aa1</anchor>
      <arglist>(PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObservables</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a966cdd429f1249e9b6cfab1982800e46</anchor>
      <arglist>(PropertySetType &amp;plist, BufferType &amp;olist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerCollectables</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a6f794b20e33524c704dcc03d66ad66ed</anchor>
      <arglist>(vector&lt; observable_helper * &gt; &amp;h5desc, hid_t gid) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObservables</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>ae4b206ae54a98a3af6952165d2b61fc6</anchor>
      <arglist>(PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticlePropertyList</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a7a51ebc855f558bb099e23fc3386fd0d</anchor>
      <arglist>(PropertySetType &amp;plist, int offset)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a5df09e537c6e0e8ecb15a64f5d244510</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGridIndex</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>ae1cb2c82689a126474c17753550992b4</anchor>
      <arglist>(int i, int j, int k) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGridIndexPotential</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a02a389d2149a956b2b6a95cf0be8a9b0</anchor>
      <arglist>(int i, int j, int k) const </arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>potentialIndex</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>ac24a4bf30bb00e4f8c4c3424e7793574</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Zat</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>af7762484a9d91810382fd165c26cfaeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Zspec</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a983570ddbde484313fb74a37cb04169b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RadFunctorType *</type>
      <name>rVs</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a5c10c66c150708fc461cdd9c6809e5f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumSpecies</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a44c62eda869b510a5d0b3fc8949a5265</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumCenters</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a660b39b9516b5c23ab7bb18a6be11e3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LRHandlerType *</type>
      <name>AA</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a082cceeff8b5748d2796f7042d57f860</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a0fc3d585aa53859602ac79c9c421f2a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>Periodic</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>aebdb003fba67937049b59b527119091c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>Norm</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>af21409085d600476b1b593ae0e870641</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TinyVector&lt; int, OHMMS_DIM+1 &gt;</type>
      <name>NumGrids</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>accb98a290de82e28c22ad3970052b6d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TinyVector&lt; RealType, OHMMS_DIM &gt;</type>
      <name>Delta</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a4b84d0d120ee43aced694b96f8667d79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TinyVector&lt; RealType, OHMMS_DIM &gt;</type>
      <name>DeltaInv</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a2f68d884784f7f33060a2784720cab15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TinyVector&lt; RealType, OHMMS_DIM &gt;</type>
      <name>ScaleFactor</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a3b054c9bc64aa14d3229bc0a3c408874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TinyVector&lt; RealType, OHMMS_DIM &gt;</type>
      <name>density_min</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>ab7d1702ea2225dbd0cda67fe62b53fbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TinyVector&lt; RealType, OHMMS_DIM &gt;</type>
      <name>density_max</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a6cb8566543080ce0232c6cd1998eab2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>prefix</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>ab7b6fb49a3a178b1628690ad0f00927d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ECPComponentBuilder</name>
    <filename>a00191.html</filename>
    <base>qmcplusplus::MPIObjectBase</base>
    <base>qmcplusplus::QMCTraits</base>
    <member kind="typedef">
      <type>LocalECPotential::GridType</type>
      <name>GridType</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a96743df50bc8422a009f210387763005</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LocalECPotential::RadialPotentialType</type>
      <name>RadialPotentialType</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a260aabba2805a61352d1a23a90476555</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ECPComponentBuilder</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a9e17fc76c6eb051e756c5742c8db4a49</anchor>
      <arglist>(const string &amp;aname, Communicate *c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parse</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a54d47a1c14dfbace96018e7cdd8a5f59</anchor>
      <arglist>(const string &amp;fname, xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSemiLocal</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a8ad11b1f9af03cab17a02241a4dfacfb</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildLocal</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a67bcf517561cdb413b6ce651ffb8d427</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildSemiLocalAndLocal</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a5973b007bc2cc7593da65d7ebbfcf1d4</anchor>
      <arglist>(vector&lt; xmlNodePtr &gt; &amp;semiPtr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parseCasino</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a33e5ef967cc92eb1c30f940cf29df7f7</anchor>
      <arglist>(const string &amp;fname, xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetQuadratureRule</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a36ce0641b1c2559fa0f65c1b1d484d82</anchor>
      <arglist>(int rule)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CheckQuadratureRule</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>adb8b51e314d98e7805dea57f7d2dcbe3</anchor>
      <arglist>(int lexact)</arglist>
    </member>
    <member kind="function">
      <type>GridType *</type>
      <name>createGrid</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a448b0c529c380245efd19fbb9defe9fc</anchor>
      <arglist>(xmlNodePtr cur, bool useLinear=false)</arglist>
    </member>
    <member kind="function">
      <type>RadialPotentialType *</type>
      <name>createVrWithBasisGroup</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>aa4b7821837b28cc3f9f6cb152382c99a</anchor>
      <arglist>(xmlNodePtr cur, GridType *agrid)</arglist>
    </member>
    <member kind="function">
      <type>RadialPotentialType *</type>
      <name>createVrWithData</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a0e5076c9129ea67fa80493e4de492ea4</anchor>
      <arglist>(xmlNodePtr cur, GridType *agrid, int rCorrection=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doBreakUp</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>abf69a9658dfa552e3b3a10e2c322f5d3</anchor>
      <arglist>(const vector&lt; int &gt; &amp;angList, const Matrix&lt; RealType &gt; &amp;vnn, RealType rmax, RealType Vprefactor=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printECPTable</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>ac92702d6bacb0de91fcf6339320a5e05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumNonLocal</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>af3722674bae06a968bf82d6be470fd7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Lmax</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a66220f2712ab879767e2b0b1f3e79c1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Llocal</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a94127fc1da17299b9cf7bf63e2e2f915</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Nrule</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>aefadefe2930433d53b02e1d26f55d4e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Zeff</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a3470aa9e44c5c7c4e1105fe3506880bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>RcutMax</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a71b15a523235b66e235b8df34be05a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>Species</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a846a8cf98fcf9d78e78ee91842875b1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GridType *</type>
      <name>grid_global</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a33f258b1b885a0461ed53d87926389a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>map&lt; string, GridType * &gt;</type>
      <name>grid_inp</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>abda56b892bb7f5c61a514b5a654c157f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RadialPotentialType *</type>
      <name>pp_loc</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>ad9476b86bcc7df1ad22506e2d5a581d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonLocalECPComponent *</type>
      <name>pp_nonloc</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a7323ba42f2c40d79b9a15431643e41c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>map&lt; string, int &gt;</type>
      <name>angMon</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a08e575f86889ebeda7308a85b809430d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ECPotentialBuilder</name>
    <filename>a00192.html</filename>
    <base>qmcplusplus::MPIObjectBase</base>
    <base>qmcplusplus::QMCTraits</base>
    <member kind="typedef">
      <type>LocalECPotential::RadialPotentialType</type>
      <name>RadialPotentialType</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a260aabba2805a61352d1a23a90476555</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LocalECPotential::GridType</type>
      <name>GridType</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a96743df50bc8422a009f210387763005</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ECPotentialBuilder</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>aac020f83b18fb83f2063fd79ad063073</anchor>
      <arglist>(QMCHamiltonian &amp;h, ParticleSet &amp;ions, ParticleSet &amp;els, TrialWaveFunction &amp;psi, Communicate *c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useSimpleTableFormat</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>aeda102b287535ea421f20d67fd96f183</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useXmlFormat</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>aedc70c7b9f4ce92575166e22cfe1f4ba</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasLocalPot</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>ad2f68265bf24383c23dc7810f47a325d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasNonLocalPot</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a9d75cc101487bb63575fe730d71998aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>QMCHamiltonian &amp;</type>
      <name>targetH</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>ad3951b3e617ea6f4c4655fd480d97566</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet &amp;</type>
      <name>IonConfig</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>ab51ad40a8b273686e431512ed4e127eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet &amp;</type>
      <name>targetPtcl</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a1a952580e121ccf8f929cadf8d1e0a5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TrialWaveFunction &amp;</type>
      <name>targetPsi</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a768b9b0b02d5a2b249b281fe0c8cd0a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>localZeff</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a1bea0fe53b61e552773e6399ee74982c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RadialPotentialType * &gt;</type>
      <name>localPot</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a38cfc3470eba76493c32942da033bea4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; NonLocalECPComponent * &gt;</type>
      <name>nonLocalPot</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a62468b505cc59f5130e8f0eb41457ee4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::EffMKineticEnergy</name>
    <filename>a00195.html</filename>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>EffMKineticEnergy</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>aae7ddf6e8c89bcbdf8b500192e7cb163</anchor>
      <arglist>(const Grid1D &amp;aGrid1D, const std::vector&lt; int &gt; &amp;intvals, const std::vector&lt; int &gt; &amp;priority, const std::vector&lt; double &gt; &amp;inveffm, RealType m=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EffMKineticEnergy</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>afa77b1031ca79af35d0fdd1d9be91dcc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>a5c48281949f42f6b68e628f33c3ee980</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>M</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>a6479df36d7df0bc808a71236dd64469c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MatGrid1D *</type>
      <name>inveffm_grid</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>a1d6e38c456133f60a1d3b109ea4a1604</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ForceBase</name>
    <filename>a00227.html</filename>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::BareForce</name>
    <filename>a00031.html</filename>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <base>qmcplusplus::ForceBase</base>
    <member kind="function">
      <type></type>
      <name>BareForce</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>ae2422226948d1af5fb384c9bee6570a2</anchor>
      <arglist>(ParticleSet &amp;ions, ParticleSet &amp;elns)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a60a50b1582231e56985e7330e2ad40ea</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerObservables</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a2a9137abf45ebb2c9a31255f063723f9</anchor>
      <arglist>(vector&lt; observable_helper * &gt; &amp;h5list, hid_t gid) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObservables</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a2a1ba7447d76a7353df776e71e48ed0b</anchor>
      <arglist>(PropertySetType &amp;plist, BufferType &amp;collectables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObservables</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>ae4b206ae54a98a3af6952165d2b61fc6</anchor>
      <arglist>(PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticlePropertyList</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a7a51ebc855f558bb099e23fc3386fd0d</anchor>
      <arglist>(PropertySetType &amp;plist, int offset)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a5df09e537c6e0e8ecb15a64f5d244510</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ForceCeperley</name>
    <filename>a00228.html</filename>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <base>qmcplusplus::ForceBase</base>
    <member kind="function">
      <type></type>
      <name>ForceCeperley</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a7e0fe1a0b0728b7c83815fd1b1abe978</anchor>
      <arglist>(ParticleSet &amp;ions, ParticleSet &amp;elns)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a11da98cee46d18c08360868493247eae</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitMatrix</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>ace54b07037a107d3f774281d4c55a9c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerObservables</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a2a9137abf45ebb2c9a31255f063723f9</anchor>
      <arglist>(vector&lt; observable_helper * &gt; &amp;h5list, hid_t gid) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObservables</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a2a1ba7447d76a7353df776e71e48ed0b</anchor>
      <arglist>(PropertySetType &amp;plist, BufferType &amp;collectables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObservables</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>ae4b206ae54a98a3af6952165d2b61fc6</anchor>
      <arglist>(PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticlePropertyList</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a7a51ebc855f558bb099e23fc3386fd0d</anchor>
      <arglist>(PropertySetType &amp;plist, int offset)</arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a5df09e537c6e0e8ecb15a64f5d244510</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>Rcut</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>abdc527aabcc3b20d2c4d81572e696e6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_exp</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>aa1530ab09f76a7dc9fd63ea1e2f00d56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>N_basis</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>ae757c787cb395f94f00e6de6a0a7eabc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; RealType &gt;</type>
      <name>Sinv</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>adf845cdce102d8274d74365b19b941ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; double &gt;</type>
      <name>h</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>ae1f1ace1bc9195474f42889521adf413</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; double &gt;</type>
      <name>c</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>ab38699e13ecc50ddceff6982e05aeec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticlePos_t</type>
      <name>forces_ShortRange</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a4c7bee38d03d3e68106eebd25b870348</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ForwardWalking</name>
    <filename>a00229.html</filename>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>ForwardWalking</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a96d907abfcbd2b7b0f933e92bae35180</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ForwardWalking</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a08e04700c8bc001e2fca152543c21e83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>rejectedMove</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a884ded3e94a3a9c8faa0a899e3266ad2</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>calculate</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>aa285f994d49e1cb52a50b9625c0fa9de</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a5c48281949f42f6b68e628f33c3ee980</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putSpecial</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a7fb4a3c519aa835918e770361af3ac76</anchor>
      <arglist>(xmlNodePtr cur, QMCHamiltonian &amp;h, ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a5df09e537c6e0e8ecb15a64f5d244510</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObservables</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a8abdf7e1d1af61133e6ebb7b46c53aa1</anchor>
      <arglist>(PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObservables</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a2a1ba7447d76a7353df776e71e48ed0b</anchor>
      <arglist>(PropertySetType &amp;plist, BufferType &amp;collectables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObservables</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>ae4b206ae54a98a3af6952165d2b61fc6</anchor>
      <arglist>(PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticlePropertyList</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a7a51ebc855f558bb099e23fc3386fd0d</anchor>
      <arglist>(PropertySetType &amp;plist, int offset)</arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>Hindices</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a8a49bf317c3c193a149752a5aa664a8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>Pindices</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a7cea6bdd015bd1f3186087e97720208f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; vector&lt; int &gt; &gt;</type>
      <name>walkerLengths</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>aa27c442a23853ece04a78406699550a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; double &gt;</type>
      <name>Values</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a8a2a973863f3a4b2cc4bee1769fb5112</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; string &gt;</type>
      <name>Names</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>adebf6003c2146230d41b96a4e5e7f390</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>blockT</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a016cca6390756c117ededa760c54fbe0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nObservables</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a417acd8d48092a88dbbddee33b04d784</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nValues</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a4dcb3af6a638c576619fee769b146981</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>FirstHamiltonian</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>ab59846bf744a0676cca9334bbe96cee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>count</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a47e90a7a9e14361ffb6033cfa1e18393</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::FSAtomPseudoPot</name>
    <filename>a00231.html</filename>
    <base>qmcplusplus::QMCTraits</base>
    <member kind="typedef">
      <type>OneDimLinearSpline&lt; RealType &gt;</type>
      <name>return_type</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a9417615f079e3f6402c63c3f28873015</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimLinearSpline&lt; RealType &gt;::grid_type</type>
      <name>grid_type</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a82b5504dc23512d1946d0a96f8af0a6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FSAtomPseudoPot</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a82d94f34e93c2e568be73ac6d3b779b7</anchor>
      <arglist>(int l, RealType rc, grid_type *agrid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FSAtomPseudoPot</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>abcdaca9d0c08c01e34564e8786182d60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert2RV</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>aa4057b8459b9062e034d5fef37647aeb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert2HartreeBohr</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a298c193c519b3620de62e4070d38b99c</anchor>
      <arglist>(RealType sc, bool is_r_times_v)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getCutOff</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a03ccf7397b67a1217cdeb3e2c8db7dea</anchor>
      <arglist>(RealType v0)</arglist>
    </member>
    <member kind="function">
      <type>return_type *</type>
      <name>getLocalPot</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a2805b826f578c0b3be246c1e04a42b36</anchor>
      <arglist>(RealType zeff)</arglist>
    </member>
    <member kind="function">
      <type>return_type *</type>
      <name>getNonLocalPot</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>ad760c9f7d7c41cbe4a3af0ec378c4057</anchor>
      <arglist>(FSAtomPseudoPot &amp;vloc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>return_type</type>
      <name>myFunc</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a93c2b856a7c6c8562007f3a89abe46a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>AngL</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a7ebef642000e4779429ba79386481a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Rcut</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a8120399ca4124221ed49dfa2f439359b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HamiltonianFactory</name>
    <filename>a00254.html</filename>
    <base>qmcplusplus::MPIObjectBase</base>
    <member kind="typedef">
      <type>map&lt; string, ParticleSet * &gt;</type>
      <name>PtclPoolType</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a0878154607cbe00d8a425a977401e290</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>map&lt; string, WaveFunctionFactory * &gt;</type>
      <name>OrbitalPoolType</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a30cda231f467aa94020cbf8b20d2c93e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HamiltonianFactory</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a692d937680d207ab889de26828b6c041</anchor>
      <arglist>(ParticleSet *qp, PtclPoolType &amp;pset, OrbitalPoolType &amp;oset, Communicate *c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HamiltonianFactory</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>af421170be37d2a16fdcd8991b1697835</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>build</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a0dca718376f0fb5abae74125c66f790b</anchor>
      <arglist>(xmlNodePtr cur, bool buildtree=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCoulombPotential</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a0225165c4329537ce3d5536b5540399d</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addForceHam</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a2f7c040f827e535105eaadfc20a7bef2</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPseudoPotential</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>ab33e57c6322a997c00ad14b1f4df9d54</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCorePolPotential</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>ac3c2e3d4b1b4d2da9c8b2ba524af54d3</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addModInsKE</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>ac7c0fdedfd3b9d4ae39faf68918b0310</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMPCPotential</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a64b51765ede60d26d795026bb2cb2f33</anchor>
      <arglist>(xmlNodePtr cur, bool physical=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVHXCPotential</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a7fc9613c966b985dcefae793316755f9</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>renameProperty</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>ae1f0d28149aa8465da45c877a0d098b4</anchor>
      <arglist>(const string &amp;a, const string &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>renameProperty</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a7748e3f3df94d136d76f0d98125e2c38</anchor>
      <arglist>(string &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCloneSize</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a7ceb4318591046e7323c1488edafb1c3</anchor>
      <arglist>(int np)</arglist>
    </member>
    <member kind="function">
      <type>HamiltonianFactory *</type>
      <name>clone</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>adc1f57b12cd6f0a0e05659c26013e78c</anchor>
      <arglist>(ParticleSet *qp, TrialWaveFunction *psi, int ip, const string &amp;aname)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>PBCType</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a77de83ad920e87349715fbba389af816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet *</type>
      <name>targetPtcl</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a38de935921735223bc6966d5b2d06efa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>QMCHamiltonian *</type>
      <name>targetH</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a0d854b0f5a536420906c0788c331be80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PtclPoolType &amp;</type>
      <name>ptclPool</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a4fc7c3d5848a9235a0cf8803ff1f9fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OrbitalPoolType &amp;</type>
      <name>psiPool</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a69c668aa782d187f8afa18e671296b05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>xmlNodePtr</type>
      <name>myNode</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>ade03b7f5a1fd4d07359c6e19af6db843</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>psiName</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a40340833355ddd966d0a4db39a0293fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>map&lt; string, string &gt;</type>
      <name>RenamedProperty</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a45754ff1bf31961c38ed79ff406171bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; HamiltonianFactory * &gt;</type>
      <name>myClones</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>ac04659cbcbc05ca24557c367098ac1d4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HarmonicPotential</name>
    <filename>a00256.html</filename>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>HarmonicPotential</name>
      <anchorfile>a00256.html</anchorfile>
      <anchor>a3aba7f2340b2201e491add2aacacf048</anchor>
      <arglist>(ParticleSet &amp;center, ParticleSet &amp;visitor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HarmonicPotential</name>
      <anchorfile>a00256.html</anchorfile>
      <anchor>adff8bfc88d825773ba166b68ae7939d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00256.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00256.html</anchorfile>
      <anchor>a5c48281949f42f6b68e628f33c3ee980</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00256.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00256.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00256.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00256.html</anchorfile>
      <anchor>a8c7995fca4e1c327502fe29d4633430e</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Centers</name>
      <anchorfile>a00256.html</anchorfile>
      <anchor>a3143780108649c426c1eceba038963b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Omega</name>
      <anchorfile>a00256.html</anchorfile>
      <anchor>a43b49ad33fa9fc94e24a132e2a4431b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>a00256.html</anchorfile>
      <anchor>a859bc2c01e2beb7537cd83f0b9e88921</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet &amp;</type>
      <name>sourcePtcl</name>
      <anchorfile>a00256.html</anchorfile>
      <anchor>a521b26e24d441b710c7b5668002ed60f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HFDHE2_Moroni1995_aux</name>
    <filename>a00306.html</filename>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>HFDHE2_Moroni1995_aux</name>
      <anchorfile>a00306.html</anchorfile>
      <anchor>a24f53e5787c44899baa739e8ab6acd9b</anchor>
      <arglist>(const HFDHE2_Moroni1995_phy *orig)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HFDHE2_Moroni1995_aux</name>
      <anchorfile>a00306.html</anchorfile>
      <anchor>a6dbb305b90353dc03a850c93408b351e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00306.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00306.html</anchorfile>
      <anchor>a5c48281949f42f6b68e628f33c3ee980</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00306.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00306.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00306.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00306.html</anchorfile>
      <anchor>a8c7995fca4e1c327502fe29d4633430e</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="variable">
      <type>const HFDHE2_Moroni1995_phy *</type>
      <name>phyH</name>
      <anchorfile>a00306.html</anchorfile>
      <anchor>a0589758fd9ea9349dc3cbe0e1353e4b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Return_t</type>
      <name>tailcorr</name>
      <anchorfile>a00306.html</anchorfile>
      <anchor>a3f201591bcd57b8015c636eaef3f90ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::LocalCorePolPotential::CPP_Param</name>
    <filename>a00104.html</filename>
    <member kind="function">
      <type></type>
      <name>CPP_Param</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a887ce49fc93f463a466791a35536bb1b</anchor>
      <arglist>(RealType a=1.0, RealType r=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a77a18e00f835c715ff8988fd7f1fcc5e</anchor>
      <arglist>(RealType a, RealType r)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>operator()</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>ad2efa69f4242a141daf5a6955a506765</anchor>
      <arglist>(RealType r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>alpha</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>ad34301655a69cd22df0ca6f98660c80a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>C</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>aced919beea31c6c167b5ab8db2d1d935</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>r_b</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>aff65f2c6d69777d9c6a817bf1b40f117</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>one_over_rr</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a82c70a5b3b1b40fb0307fd9d40a1e364</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::LocalECPotential_CUDA</name>
    <filename>a00349.html</filename>
    <base>qmcplusplus::LocalECPotential</base>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00349.html</anchorfile>
      <anchor>afdb328ea0e3da4ac927522da5be12b26</anchor>
      <arglist>(int groupID, RadialPotentialType *ppot, RealType zion)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEnergy</name>
      <anchorfile>a00349.html</anchorfile>
      <anchor>a36afe89654ad73e3491c42e7d54b9940</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, vector&lt; RealType &gt; &amp;LocalEnergy)</arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00349.html</anchorfile>
      <anchor>a5df09e537c6e0e8ecb15a64f5d244510</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalECPotential_CUDA</name>
      <anchorfile>a00349.html</anchorfile>
      <anchor>a7eed9dbe303f7d571080875a35dd8166</anchor>
      <arglist>(ParticleSet &amp;ions, ParticleSet &amp;elns)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumIons</name>
      <anchorfile>a00349.html</anchorfile>
      <anchor>aeb5b7c1abcc170df95212c6521e6139b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumElecs</name>
      <anchorfile>a00349.html</anchorfile>
      <anchor>aa723c38d1be1cb6fbdcb3e07e8725b07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumElecGroups</name>
      <anchorfile>a00349.html</anchorfile>
      <anchor>a8809610ef96eda8904086a38e26cf57d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumIonSpecies</name>
      <anchorfile>a00349.html</anchorfile>
      <anchor>a32046cc266fef1cd4b8e66d2d9b0ad12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet &amp;</type>
      <name>ElecRef</name>
      <anchorfile>a00349.html</anchorfile>
      <anchor>a1db223c2351115e0ab325945c5c91700</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet &amp;</type>
      <name>IonRef</name>
      <anchorfile>a00349.html</anchorfile>
      <anchor>ae8a9a703e1807dc2cbec11d1622267ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>IonFirst</name>
      <anchorfile>a00349.html</anchorfile>
      <anchor>a4e793fd9bb9ba35f2efaa8120921ac54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>IonLast</name>
      <anchorfile>a00349.html</anchorfile>
      <anchor>a73d6616a4243a191ad1222190a08d9d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; TextureSpline * &gt;</type>
      <name>SRSplines</name>
      <anchorfile>a00349.html</anchorfile>
      <anchor>acc2da092f7d188698fa45cb50d5a9e91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TextureSpline *</type>
      <name>V0Spline</name>
      <anchorfile>a00349.html</anchorfile>
      <anchor>a569c2838ddd70ad26aed82d548a280d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gpu::device_vector&lt; CUDA_PRECISION &gt;</type>
      <name>SumGPU</name>
      <anchorfile>a00349.html</anchorfile>
      <anchor>ad7cfbabda34d0140fb47c42a1dafbdd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gpu::host_vector&lt; CUDA_PRECISION &gt;</type>
      <name>SumHost</name>
      <anchorfile>a00349.html</anchorfile>
      <anchor>ad4af71554b2bbe28f072d83ca33e9087</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gpu::device_vector&lt; CUDA_PRECISION &gt;</type>
      <name>IGPU</name>
      <anchorfile>a00349.html</anchorfile>
      <anchor>a9c58925f9d9aa4dcd5b0a8f0792071da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gpu::device_vector&lt; CUDA_PRECISION &gt;</type>
      <name>ZionGPU</name>
      <anchorfile>a00349.html</anchorfile>
      <anchor>ac486d6551e127d6b08fad3e8f7958ddc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; PosType &gt;</type>
      <name>SortedIons</name>
      <anchorfile>a00349.html</anchorfile>
      <anchor>a85683cd6bfcf701941287e831ee25079</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::LocalMomentEstimator</name>
    <filename>a00354.html</filename>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>LocalMomentEstimator</name>
      <anchorfile>a00354.html</anchorfile>
      <anchor>a6708c2cb1027561a912bccd7cbfcd350</anchor>
      <arglist>(ParticleSet &amp;elns, ParticleSet &amp;srcs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00354.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00354.html</anchorfile>
      <anchor>a125ac43f2b28135aaa94119144a592cc</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00354.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObservables</name>
      <anchorfile>a00354.html</anchorfile>
      <anchor>a8abdf7e1d1af61133e6ebb7b46c53aa1</anchor>
      <arglist>(PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObservables</name>
      <anchorfile>a00354.html</anchorfile>
      <anchor>a2a1ba7447d76a7353df776e71e48ed0b</anchor>
      <arglist>(PropertySetType &amp;plist, BufferType &amp;collectables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerCollectables</name>
      <anchorfile>a00354.html</anchorfile>
      <anchor>a1a0a4f2b6ce54a56c8b43121e518a0fc</anchor>
      <arglist>(vector&lt; observable_helper * &gt; &amp;h5list, hid_t gid) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObservables</name>
      <anchorfile>a00354.html</anchorfile>
      <anchor>ae4b206ae54a98a3af6952165d2b61fc6</anchor>
      <arglist>(PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticlePropertyList</name>
      <anchorfile>a00354.html</anchorfile>
      <anchor>a7a51ebc855f558bb099e23fc3386fd0d</anchor>
      <arglist>(PropertySetType &amp;plist, int offset)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00354.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00354.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00354.html</anchorfile>
      <anchor>a5df09e537c6e0e8ecb15a64f5d244510</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>Dmax</name>
      <anchorfile>a00354.html</anchorfile>
      <anchor>a51192cded06bc7ae46e4a8f8a3a4d8e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; RealType &gt;</type>
      <name>lm</name>
      <anchorfile>a00354.html</anchorfile>
      <anchor>a80f24d2640f08aebcfe773c43e669a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; int &gt;</type>
      <name>ion_id</name>
      <anchorfile>a00354.html</anchorfile>
      <anchor>a8743fa9856f0090ebdcf8ec06c97e0f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; int &gt;</type>
      <name>el_id</name>
      <anchorfile>a00354.html</anchorfile>
      <anchor>a5203097e942621ed98371c985ea4acfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>el_nrm</name>
      <anchorfile>a00354.html</anchorfile>
      <anchor>a2facf8c8e95a4f45c4588c7a3d0a01f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nag</name>
      <anchorfile>a00354.html</anchorfile>
      <anchor>adb2516a55aa56b1c46141f4a6d552245</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>a00354.html</anchorfile>
      <anchor>a859bc2c01e2beb7537cd83f0b9e88921</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; string &gt;</type>
      <name>names</name>
      <anchorfile>a00354.html</anchorfile>
      <anchor>a101ef7ab66e8cda97cf4eeae60a44cc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet &amp;</type>
      <name>ions</name>
      <anchorfile>a00354.html</anchorfile>
      <anchor>aa1bc7581a68b4551cc7cbaecf6ee7126</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::LocalPPotential::RadialPotentialSet</name>
    <filename>a00504.html</filename>
    <member kind="function">
      <type></type>
      <name>~RadialPotentialSet</name>
      <anchorfile>a00504.html</anchorfile>
      <anchor>ae7f9bd870869daf1b576b1d7cc18adf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00504.html</anchorfile>
      <anchor>a72fc2073d2ed3d3662426f8d97ca7e5a</anchor>
      <arglist>(GridType *agrid, LocalPotentialType *pp)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>a00504.html</anchorfile>
      <anchor>a6591228f5751038b49ad0b9732a07c39</anchor>
      <arglist>(DistanceTableData *d_table, int iat)</arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; LocalPotentialType * &gt;</type>
      <name>lpp_m</name>
      <anchorfile>a00504.html</anchorfile>
      <anchor>a81465497a221987e760bde30311c1bd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; GridType * &gt;</type>
      <name>grid_m</name>
      <anchorfile>a00504.html</anchorfile>
      <anchor>a3593d98aeb3d23c11e850a94d606235e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::ModInsKineticEnergy</name>
    <filename>a00381.html</filename>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>ModInsKineticEnergy</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a42bd420cd34adcb9416ea489b01c2091</anchor>
      <arglist>(TrialWaveFunction &amp;psi, const Vector&lt; RealType &gt; &amp;DispersRelat, const MomDistBase *MomPtr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ModInsKineticEnergy</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a480519a8715e443fdac8ccc9161cc918</anchor>
      <arglist>(const ModInsKineticEnergy &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ModInsKineticEnergy</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a54958286632e037fe55a2c59936d9b02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAccumulate</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>ad86eeaf71c09dae482a79c5499c2b6aa</anchor>
      <arglist>(bool newValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a5c48281949f42f6b68e628f33c3ee980</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>getEnsembleAverage</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a73fadb5b49938c7a0c4effd49fab6977</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>clone</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a3ac6574e75399d4e56ee6522a7888c90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>Accumulate</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a1db524329a5505ca852f2af85aa9bf74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>NumSamples</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a3df9bc527969e01c4554fd3a5ccec0fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>NumCycles</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>af18443092e86bb3f0348a5d3f25a6c31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>OneOverM</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>afd0a94b34434e3605965f09aff878d92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; RealType &gt;</type>
      <name>DispRel</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>aab52565363c0212775a0581934aacb12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MomDistBase *</type>
      <name>MomDistP</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a0c7a1adb140d596268d91bc644acd806</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TrialWaveFunction &amp;</type>
      <name>WaveFcn</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a9c865ba089f03e22a3327adb8fc661de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::PtclChoiceBase</name>
    <filename>a00488.html</filename>
    <base>qmcplusplus::QMCTraits</base>
    <member kind="function">
      <type></type>
      <name>PtclChoiceBase</name>
      <anchorfile>a00488.html</anchorfile>
      <anchor>a12211245cc068c86a13c4c5a6101a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PtclChoiceBase</name>
      <anchorfile>a00488.html</anchorfile>
      <anchor>a87c0095f4040fa121e5d42b86e761a1d</anchor>
      <arglist>(const PtclChoiceBase &amp;arg)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>NewWalker</name>
      <anchorfile>a00488.html</anchorfile>
      <anchor>a8695d49cc6dd7577f1b1c0a1d3639145</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IndexType</type>
      <name>operator()</name>
      <anchorfile>a00488.html</anchorfile>
      <anchor>a309b847933f1a5f5fb0a01297d21ef37</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PtclChoiceBase *</type>
      <name>clone</name>
      <anchorfile>a00488.html</anchorfile>
      <anchor>af95bb5f9d3dd6676a63eb37c03481a42</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PtclChoiceBase</name>
      <anchorfile>a00488.html</anchorfile>
      <anchor>aada57d773801714d0164a4d863b715d0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::RandomChoice</name>
    <filename>a00506.html</filename>
    <base>qmcplusplus::PtclChoiceBase</base>
    <member kind="function">
      <type></type>
      <name>RandomChoice</name>
      <anchorfile>a00506.html</anchorfile>
      <anchor>ad7744c9809594998d00ed8869a0df295</anchor>
      <arglist>(ParticleSet &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandomChoice</name>
      <anchorfile>a00506.html</anchorfile>
      <anchor>a9188130ead738b9fa328ea30d9df197a</anchor>
      <arglist>(const RandomChoice &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RandomChoice</name>
      <anchorfile>a00506.html</anchorfile>
      <anchor>a7cc1a7e06cdb25d788656aea9e4496c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NewWalker</name>
      <anchorfile>a00506.html</anchorfile>
      <anchor>a38f3f4b61004427a2169bfdf7ec8303a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>operator()</name>
      <anchorfile>a00506.html</anchorfile>
      <anchor>ab2b6aaf634ca7dc021688d45f411c67e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RandomChoice *</type>
      <name>clone</name>
      <anchorfile>a00506.html</anchorfile>
      <anchor>aaf2ff5fc8a41622dafc2ff35e07b52fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const IndexType</type>
      <name>NumParticles</name>
      <anchorfile>a00506.html</anchorfile>
      <anchor>a709ae707338d9830dd6874a67893486f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::RandomChoicePerWalker</name>
    <filename>a00507.html</filename>
    <base>qmcplusplus::PtclChoiceBase</base>
    <member kind="function">
      <type></type>
      <name>RandomChoicePerWalker</name>
      <anchorfile>a00507.html</anchorfile>
      <anchor>af40194770cff6ba3067ece12171911bf</anchor>
      <arglist>(ParticleSet &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandomChoicePerWalker</name>
      <anchorfile>a00507.html</anchorfile>
      <anchor>a658199e683c09d10611487efd1da8640</anchor>
      <arglist>(const RandomChoicePerWalker &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RandomChoicePerWalker</name>
      <anchorfile>a00507.html</anchorfile>
      <anchor>a24b08987978e2c5f505912b04c378afc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NewWalker</name>
      <anchorfile>a00507.html</anchorfile>
      <anchor>a38f3f4b61004427a2169bfdf7ec8303a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>operator()</name>
      <anchorfile>a00507.html</anchorfile>
      <anchor>ab2b6aaf634ca7dc021688d45f411c67e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RandomChoicePerWalker *</type>
      <name>clone</name>
      <anchorfile>a00507.html</anchorfile>
      <anchor>a9e4fe49febd65d184e5b953556f0b73f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>CurrentChoice</name>
      <anchorfile>a00507.html</anchorfile>
      <anchor>a006af555d2e7e9e955a0fc0d3061e30a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const IndexType</type>
      <name>NumParticles</name>
      <anchorfile>a00507.html</anchorfile>
      <anchor>a709ae707338d9830dd6874a67893486f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::StaticChoice</name>
    <filename>a00592.html</filename>
    <base>qmcplusplus::PtclChoiceBase</base>
    <member kind="function">
      <type></type>
      <name>StaticChoice</name>
      <anchorfile>a00592.html</anchorfile>
      <anchor>a23d0881dd29d84fdb5027f3fc9951611</anchor>
      <arglist>(ParticleSet &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StaticChoice</name>
      <anchorfile>a00592.html</anchorfile>
      <anchor>aada25825cd8b5ab68bf72d85a6923066</anchor>
      <arglist>(const StaticChoice &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StaticChoice</name>
      <anchorfile>a00592.html</anchorfile>
      <anchor>a51120058e8c6fe746e3c29806f3688f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NewWalker</name>
      <anchorfile>a00592.html</anchorfile>
      <anchor>a38f3f4b61004427a2169bfdf7ec8303a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>operator()</name>
      <anchorfile>a00592.html</anchorfile>
      <anchor>ab2b6aaf634ca7dc021688d45f411c67e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StaticChoice *</type>
      <name>clone</name>
      <anchorfile>a00592.html</anchorfile>
      <anchor>a575d82d3b4ac917bca28bab0af268b10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>CurrentChoice</name>
      <anchorfile>a00592.html</anchorfile>
      <anchor>a006af555d2e7e9e955a0fc0d3061e30a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::MomDistBase</name>
    <filename>a00386.html</filename>
    <base>qmcplusplus::QMCTraits</base>
    <member kind="function">
      <type></type>
      <name>MomDistBase</name>
      <anchorfile>a00386.html</anchorfile>
      <anchor>af58fd3ffd6d912e994f0840dbf2a4220</anchor>
      <arglist>(PtclChoiceBase *pcb, IndexType NumPart)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MomDistBase</name>
      <anchorfile>a00386.html</anchorfile>
      <anchor>a40222e347a590606401eeb292f392689</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MomDistBase</name>
      <anchorfile>a00386.html</anchorfile>
      <anchor>a6434b62f9d12d238f0d3c9dc488a5d36</anchor>
      <arglist>(const MomDistBase &amp;arg)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual MomDistBase *</type>
      <name>clone</name>
      <anchorfile>a00386.html</anchorfile>
      <anchor>aa365b161cd8422cc54357c85bb3f77fc</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetDistribution</name>
      <anchorfile>a00386.html</anchorfile>
      <anchor>a4fa3227ee12f26f9f34d1296729238fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>updateDistribution</name>
      <anchorfile>a00386.html</anchorfile>
      <anchor>ae9c4766ea44d429c51e2d3a98981bcc2</anchor>
      <arglist>(ParticleSet &amp;PtclSet, TrialWaveFunction &amp;Psi, IndexType NumCycles)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector&lt; RealType &gt; &amp;</type>
      <name>getNofK</name>
      <anchorfile>a00386.html</anchorfile>
      <anchor>a35406b4a1f16525d42552013855df869</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexType</type>
      <name>NumParticles</name>
      <anchorfile>a00386.html</anchorfile>
      <anchor>a9fca0c7e3fca12d4219f6e43c59eb45b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexType</type>
      <name>totalNumSamples</name>
      <anchorfile>a00386.html</anchorfile>
      <anchor>a22a86548dd909a90e8ceb81d6c7c173a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector&lt; RealType &gt;</type>
      <name>MomDist</name>
      <anchorfile>a00386.html</anchorfile>
      <anchor>a5551716165f00f907c5849f5b1109561</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PtclChoiceBase *</type>
      <name>pcp</name>
      <anchorfile>a00386.html</anchorfile>
      <anchor>ad0f8302ba37d0cb936cb7d65f6672851</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::FFTMomentumDist</name>
    <filename>a00222.html</filename>
    <templarg>dims</templarg>
    <base>qmcplusplus::MomDistBase</base>
    <member kind="function">
      <type></type>
      <name>~FFTMomentumDist</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>ade29e4354b40e7a243131736a1a357f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FFTMomentumDist</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>ae6241f92c2ad8e44dad595bb166ec0dd</anchor>
      <arglist>(const FFTMomentumDist &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetDistribution</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>ab61191b18855a98e6dd368937992d8f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; RealType &gt; &amp;</type>
      <name>getNofK</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a8ef861db27d34858890119ced702811f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IndexType</type>
      <name>getIndex</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a7e8f5946ef99417c2b1b64f334751d74</anchor>
      <arglist>(const TinyVector&lt; IndexType, dims &gt; &amp;LocInDistribution)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PlaceCloudInBin</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a0c35671e20f3df0ccc813cf23f3c3b4f</anchor>
      <arglist>(const TinyVector&lt; RealType, dims &gt; &amp;FracDisp, ValueType RatioOfWvFcn)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>placeIntsInBin</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>ad52ccedf49206e754d9bfd2c4009e428</anchor>
      <arglist>(const TinyVector&lt; IndexType, dims &gt; &amp;Indexes, ValueType RatioOfWvFcn)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>placeInBin</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>ad41ed6796c40233ff9f3a372e58356e3</anchor>
      <arglist>(const TinyVector&lt; RealType, dims &gt; &amp;FracDisp, ValueType RatioOfWvFcn)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a8b2f29372647d39663b4c1d9f9bac3f2</anchor>
      <arglist>(const TinyVector&lt; IndexType, dims &gt; &amp;inDimSizes, const TinyVector&lt; RealType, dims &gt; &amp;inInvRsLatSize)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FFTMomentumDist</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>adc4928610e166d1fdcb3dfd261871c51</anchor>
      <arglist>(PtclChoiceBase *pcb, IndexType NumPart)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IndexType</type>
      <name>getIndex</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>ac8f8baf162899ed34ca8d5feb634a205</anchor>
      <arglist>(const TinyVector&lt; IndexType, 1 &gt; &amp;LocInDist)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IndexType</type>
      <name>getIndex</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>af0d1de18cfc8854e2389d126d0a35889</anchor>
      <arglist>(const TinyVector&lt; IndexType, 2 &gt; &amp;LocInDist)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IndexType</type>
      <name>getIndex</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a3183403e3db575dc37d6fdc040c89450</anchor>
      <arglist>(const TinyVector&lt; IndexType, 3 &gt; &amp;LocInDist)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PlaceCloudInBin</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a4a89067214c68da8ef23515a443e32af</anchor>
      <arglist>(const TinyVector&lt; RealType, 1 &gt; &amp;FracDisp, ValueType RatioOfWvFcn)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PlaceCloudInBin</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a4bccfb55d703a654ee4a3e3424f6bd91</anchor>
      <arglist>(const TinyVector&lt; RealType, 2 &gt; &amp;FracDisp, ValueType RatioOfWvFcn)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PlaceCloudInBin</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a12961e5ac4ddebfa58299e9cf7461775</anchor>
      <arglist>(const TinyVector&lt; RealType, 3 &gt; &amp;FracDisp, ValueType RatioOfWvFcn)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TinyVector&lt; IndexType, dims &gt;</type>
      <name>NumPts</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a9e2da2ba27c1ab5be4897689928098dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FFTAbleVectorBase&lt; ComplexType &gt; *</type>
      <name>NofK</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>aa9e83dae2864086eca9d9b5909b69947</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TinyVector&lt; RealType, dims &gt;</type>
      <name>InvRsLatSize</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a08100430bd758ebf2fb86b77844cb676</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TinyVector&lt; RealType, dims &gt;</type>
      <name>Spacing</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>aff3dcf1458a6117730fdd9dfd2da463f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::ThreeDimMomDist</name>
    <filename>a00605.html</filename>
    <base>FFTMomentumDist&lt; 3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>ThreeDimMomDist</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a62c0838e3b5112b10072d455f5efa7a5</anchor>
      <arglist>(ParticleSet &amp;PtclSet, const Vector&lt; IndexType &gt; &amp;DimSizes, PtclChoiceBase *pcb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ThreeDimMomDist</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>aeac4540d5cfcfcb0034961dcefebf4fa</anchor>
      <arglist>(const ThreeDimMomDist &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ThreeDimMomDist</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a8e0add2ebf07e1f9f57948d4b163cc99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateDistribution</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a6640f7b0fbbb4336cc67c4ff34b181ca</anchor>
      <arglist>(ParticleSet &amp;PtclSet, TrialWaveFunction &amp;Psi, IndexType NumCycles)</arglist>
    </member>
    <member kind="function">
      <type>ThreeDimMomDist *</type>
      <name>clone</name>
      <anchorfile>a00605.html</anchorfile>
      <anchor>a52d2bed384481e81ee47a3c7cf33896d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FFTMomentumDist</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>ae6241f92c2ad8e44dad595bb166ec0dd</anchor>
      <arglist>(const FFTMomentumDist &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FFTMomentumDist</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>ade29e4354b40e7a243131736a1a357f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetDistribution</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>ab61191b18855a98e6dd368937992d8f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; RealType &gt; &amp;</type>
      <name>getNofK</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a8ef861db27d34858890119ced702811f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IndexType</type>
      <name>getIndex</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a7e8f5946ef99417c2b1b64f334751d74</anchor>
      <arglist>(const TinyVector&lt; IndexType, dims &gt; &amp;LocInDistribution)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PlaceCloudInBin</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a0c35671e20f3df0ccc813cf23f3c3b4f</anchor>
      <arglist>(const TinyVector&lt; RealType, dims &gt; &amp;FracDisp, ValueType RatioOfWvFcn)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>placeIntsInBin</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>ad52ccedf49206e754d9bfd2c4009e428</anchor>
      <arglist>(const TinyVector&lt; IndexType, dims &gt; &amp;Indexes, ValueType RatioOfWvFcn)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>placeInBin</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>ad41ed6796c40233ff9f3a372e58356e3</anchor>
      <arglist>(const TinyVector&lt; RealType, dims &gt; &amp;FracDisp, ValueType RatioOfWvFcn)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a8b2f29372647d39663b4c1d9f9bac3f2</anchor>
      <arglist>(const TinyVector&lt; IndexType, dims &gt; &amp;inDimSizes, const TinyVector&lt; RealType, dims &gt; &amp;inInvRsLatSize)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FFTMomentumDist</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>adc4928610e166d1fdcb3dfd261871c51</anchor>
      <arglist>(PtclChoiceBase *pcb, IndexType NumPart)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TinyVector&lt; IndexType, dims &gt;</type>
      <name>NumPts</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a9e2da2ba27c1ab5be4897689928098dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FFTAbleVectorBase&lt; ComplexType &gt; *</type>
      <name>NofK</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>aa9e83dae2864086eca9d9b5909b69947</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TinyVector&lt; RealType, dims &gt;</type>
      <name>InvRsLatSize</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a08100430bd758ebf2fb86b77844cb676</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TinyVector&lt; RealType, dims &gt;</type>
      <name>Spacing</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>aff3dcf1458a6117730fdd9dfd2da463f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::OneDimMomDist</name>
    <filename>a00442.html</filename>
    <base>FFTMomentumDist&lt; 1 &gt;</base>
    <member kind="function">
      <type></type>
      <name>OneDimMomDist</name>
      <anchorfile>a00442.html</anchorfile>
      <anchor>a56d0fe112299ea01a3ee6c30553887ad</anchor>
      <arglist>(ParticleSet &amp;PtclSet, const Vector&lt; IndexType &gt; &amp;DimSizes, PtclChoiceBase *pcb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDimMomDist</name>
      <anchorfile>a00442.html</anchorfile>
      <anchor>a4d99320cb47706e1abe773ac2e5d724f</anchor>
      <arglist>(const OneDimMomDist &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OneDimMomDist</name>
      <anchorfile>a00442.html</anchorfile>
      <anchor>a31dc3617b9b58605c26014bbfe416896</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateDistribution</name>
      <anchorfile>a00442.html</anchorfile>
      <anchor>a6640f7b0fbbb4336cc67c4ff34b181ca</anchor>
      <arglist>(ParticleSet &amp;PtclSet, TrialWaveFunction &amp;Psi, IndexType NumCycles)</arglist>
    </member>
    <member kind="function">
      <type>OneDimMomDist *</type>
      <name>clone</name>
      <anchorfile>a00442.html</anchorfile>
      <anchor>ae15e89458ebd3f0d4b9d7cacfae78b69</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FFTMomentumDist</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>ae6241f92c2ad8e44dad595bb166ec0dd</anchor>
      <arglist>(const FFTMomentumDist &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FFTMomentumDist</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>ade29e4354b40e7a243131736a1a357f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetDistribution</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>ab61191b18855a98e6dd368937992d8f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; RealType &gt; &amp;</type>
      <name>getNofK</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a8ef861db27d34858890119ced702811f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IndexType</type>
      <name>getIndex</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a7e8f5946ef99417c2b1b64f334751d74</anchor>
      <arglist>(const TinyVector&lt; IndexType, dims &gt; &amp;LocInDistribution)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PlaceCloudInBin</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a0c35671e20f3df0ccc813cf23f3c3b4f</anchor>
      <arglist>(const TinyVector&lt; RealType, dims &gt; &amp;FracDisp, ValueType RatioOfWvFcn)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>placeIntsInBin</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>ad52ccedf49206e754d9bfd2c4009e428</anchor>
      <arglist>(const TinyVector&lt; IndexType, dims &gt; &amp;Indexes, ValueType RatioOfWvFcn)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>placeInBin</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>ad41ed6796c40233ff9f3a372e58356e3</anchor>
      <arglist>(const TinyVector&lt; RealType, dims &gt; &amp;FracDisp, ValueType RatioOfWvFcn)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a8b2f29372647d39663b4c1d9f9bac3f2</anchor>
      <arglist>(const TinyVector&lt; IndexType, dims &gt; &amp;inDimSizes, const TinyVector&lt; RealType, dims &gt; &amp;inInvRsLatSize)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FFTMomentumDist</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>adc4928610e166d1fdcb3dfd261871c51</anchor>
      <arglist>(PtclChoiceBase *pcb, IndexType NumPart)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TinyVector&lt; IndexType, dims &gt;</type>
      <name>NumPts</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a9e2da2ba27c1ab5be4897689928098dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FFTAbleVectorBase&lt; ComplexType &gt; *</type>
      <name>NofK</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>aa9e83dae2864086eca9d9b5909b69947</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TinyVector&lt; RealType, dims &gt;</type>
      <name>InvRsLatSize</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a08100430bd758ebf2fb86b77844cb676</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TinyVector&lt; RealType, dims &gt;</type>
      <name>Spacing</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>aff3dcf1458a6117730fdd9dfd2da463f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::AveragedOneDimMomDist</name>
    <filename>a00022.html</filename>
    <base>FFTMomentumDist&lt; 1 &gt;</base>
    <member kind="function">
      <type></type>
      <name>AveragedOneDimMomDist</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>acac191ec3f6c99cf74c66c4aa108bd5e</anchor>
      <arglist>(ParticleSet &amp;PtclSet, const Vector&lt; IndexType &gt; &amp;DimSizes, PtclChoiceBase *pcb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AveragedOneDimMomDist</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a10f465882708a82b589aad749cf01405</anchor>
      <arglist>(const AveragedOneDimMomDist &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AveragedOneDimMomDist</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a69a17b0fbb4f269fb184c43d083bd055</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateDistribution</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a8c86f995035a038b1d4a0fafcbcd15d4</anchor>
      <arglist>(ParticleSet &amp;PtclSet, TrialWaveFunction &amp;Psi, IndexType NumSamples)</arglist>
    </member>
    <member kind="function">
      <type>AveragedOneDimMomDist *</type>
      <name>clone</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>abce42d3f43f7cfa5cebcd34a68075b42</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::DirectMomDist</name>
    <filename>a00152.html</filename>
    <base>qmcplusplus::MomDistBase</base>
    <member kind="function">
      <type></type>
      <name>DirectMomDist</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>a10c64f9eb483941a0c9582aa8efd2372</anchor>
      <arglist>(const DirectMomDist &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DirectMomDist</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>a3e252838d07d3bb6ad8e23ff43d48cc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetDistribution</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>ab61191b18855a98e6dd368937992d8f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; RealType &gt; &amp;</type>
      <name>getNofK</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>a906eec00d68b955edfee8b79df501162</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DirectMomDist</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>a7c8658eb493ee343d45c7eb9156d21ff</anchor>
      <arglist>(PtclChoiceBase *pcb, IndexType NumPart)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector&lt; PosType &gt;</type>
      <name>GVectors</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>a1913ae5fee956d217abbf95bd144163b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector&lt; ComplexType &gt;</type>
      <name>NofK</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>a777bc6d85a2bc1bb8cd2236c1580f2fa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::RandomMomDist</name>
    <filename>a00508.html</filename>
    <base>qmcplusplus::DirectMomDist</base>
    <member kind="function">
      <type></type>
      <name>RandomMomDist</name>
      <anchorfile>a00508.html</anchorfile>
      <anchor>a18ce49cf5facbfd2bdaf3cdec26de6d1</anchor>
      <arglist>(ParticleSet &amp;PtclSet, const Vector&lt; PosType &gt; &amp;GVectors, PtclChoiceBase *pcb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandomMomDist</name>
      <anchorfile>a00508.html</anchorfile>
      <anchor>ab82bd2c8c76173b7f3fd212d15a33c04</anchor>
      <arglist>(const RandomMomDist &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RandomMomDist</name>
      <anchorfile>a00508.html</anchorfile>
      <anchor>a461185d07df73fddea380a916c956479</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateDistribution</name>
      <anchorfile>a00508.html</anchorfile>
      <anchor>a8c86f995035a038b1d4a0fafcbcd15d4</anchor>
      <arglist>(ParticleSet &amp;PtclSet, TrialWaveFunction &amp;Psi, IndexType NumSamples)</arglist>
    </member>
    <member kind="function">
      <type>RandomMomDist *</type>
      <name>clone</name>
      <anchorfile>a00508.html</anchorfile>
      <anchor>a8adc659cc92753b510f244f704c4cff5</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::MomentumEstimator</name>
    <filename>a00387.html</filename>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>MomentumEstimator</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>a5aba4874a9f2c3ccabab9894b586bac4</anchor>
      <arglist>(ParticleSet &amp;elns, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>add8563f859003ef45e65b3e96df2c6c4</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObservables</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>a8abdf7e1d1af61133e6ebb7b46c53aa1</anchor>
      <arglist>(PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObservables</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>a966cdd429f1249e9b6cfab1982800e46</anchor>
      <arglist>(PropertySetType &amp;plist, BufferType &amp;olist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerCollectables</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>a6f794b20e33524c704dcc03d66ad66ed</anchor>
      <arglist>(vector&lt; observable_helper * &gt; &amp;h5desc, hid_t gid) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObservables</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>ae4b206ae54a98a3af6952165d2b61fc6</anchor>
      <arglist>(PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticlePropertyList</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>a7a51ebc855f558bb099e23fc3386fd0d</anchor>
      <arglist>(PropertySetType &amp;plist, int offset)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putSpecial</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>a76a155f2c97b5387f685017a44ba27bc</anchor>
      <arglist>(xmlNodePtr cur, ParticleSet &amp;elns, bool rootNode)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>a5df09e537c6e0e8ecb15a64f5d244510</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomGenerator</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>a85d63360998b0f9233e8ee0d68bb94da</anchor>
      <arglist>(RandomGenerator_t *rng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>a2f813057094257cf925ba9539602712c</anchor>
      <arglist>(const vector&lt; PosType &gt; &amp;kin, const vector&lt; RealType &gt; &amp;qin)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>M</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>a5e78dbd5fd0fc01ba7b98dd15e27221e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>norm_nofK</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>a3106b96f14874ef7a877b6d88f82685b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>norm_compQ</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>a15b05dc4d5a9bb1fecbf1aea8d61b152</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TrialWaveFunction &amp;</type>
      <name>refPsi</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>ab41270eb778c18cb0dd2d3764009b314</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleLayout_t</type>
      <name>Lattice</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>aa7d8b303748b088920a85c16cd4b7a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RandomGenerator_t</type>
      <name>myRNG</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>accaf2a41f14ef582d0412cf745ea0d80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; ValueType &gt;</type>
      <name>psi_ratios</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>ad06dfc3102d25527764a522bba4aa8a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; RealType &gt;</type>
      <name>kdotp</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>a20f647f11378371e648fc2bf32dc61b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; ComplexType &gt;</type>
      <name>phases</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>a0ecc830adaa3b89faa4d1618f1d4bb1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; PosType &gt;</type>
      <name>kPoints</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>a3044fe38a0aedcdbfb9b5046e47bd734</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>kWeights</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>afb212d9e59baf51fbe29c90a0b995a63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>kgrid</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>a1b091bc60d5add0b458abcb5bec6ddbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; RealType &gt;</type>
      <name>nofK</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>a6fa9903257ac2cf91196e9c49cff0a4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Q</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>a7fb80192a590b61cf094767fedf5a359</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; RealType &gt;</type>
      <name>compQ</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>a474c02680fbe4b46cb4ce79005271e35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hdf5_out</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>a5b661c28c5213fa381f778751f982b2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; vector&lt; int &gt; &gt;</type>
      <name>mappedQtonofK</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>aa9ea78d09756dc02caa9288bda7c5fb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>mappedQnorms</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>ad8d4c2c8a58dd2a747fe5f2c54c18d1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>mappedKnorms</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>add61c9b14dee626ca5d0e51a8fae7481</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PosType</type>
      <name>twist</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>a414ecc74c7a20671d6775af617695cb7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::MPC_CUDA</name>
    <filename>a00388.html</filename>
    <base>qmcplusplus::MPC</base>
    <member kind="function">
      <type></type>
      <name>MPC_CUDA</name>
      <anchorfile>a00388.html</anchorfile>
      <anchor>a62396c1b2e181e852d0afa9211de6e63</anchor>
      <arglist>(ParticleSet &amp;ref, double cutoff)</arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00388.html</anchorfile>
      <anchor>a5df09e537c6e0e8ecb15a64f5d244510</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEnergy</name>
      <anchorfile>a00388.html</anchorfile>
      <anchor>a36afe89654ad73e3491c42e7d54b9940</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, vector&lt; RealType &gt; &amp;LocalEnergy)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initBreakup</name>
      <anchorfile>a00388.html</anchorfile>
      <anchor>ae8ad6c45b7a6df8339bd2760d0622ab6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UBspline_3d_s_cuda *</type>
      <name>CudaSpline</name>
      <anchorfile>a00388.html</anchorfile>
      <anchor>a18d3b51cec79a965ec37a85d43ae954f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; int &gt;</type>
      <name>IonFirst</name>
      <anchorfile>a00388.html</anchorfile>
      <anchor>a4e793fd9bb9ba35f2efaa8120921ac54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; int &gt;</type>
      <name>IonLast</name>
      <anchorfile>a00388.html</anchorfile>
      <anchor>a73d6616a4243a191ad1222190a08d9d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::device_vector&lt; CUDA_PRECISION &gt;</type>
      <name>SumGPU</name>
      <anchorfile>a00388.html</anchorfile>
      <anchor>ad7cfbabda34d0140fb47c42a1dafbdd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::host_vector&lt; CUDA_PRECISION &gt;</type>
      <name>SumHost</name>
      <anchorfile>a00388.html</anchorfile>
      <anchor>ad4af71554b2bbe28f072d83ca33e9087</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::device_vector&lt; CUDA_PRECISION &gt;</type>
      <name>L</name>
      <anchorfile>a00388.html</anchorfile>
      <anchor>a0d4129884368fc0002a1a3010d51aa94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::device_vector&lt; CUDA_PRECISION &gt;</type>
      <name>Linv</name>
      <anchorfile>a00388.html</anchorfile>
      <anchor>aa64bb39cee89c4f9d5fe4343793dbf99</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::NonLocalECPComponent</name>
    <filename>a00410.html</filename>
    <base>qmcplusplus::QMCTraits</base>
    <member kind="typedef">
      <type>vector&lt; PosType &gt;</type>
      <name>SpherGridType</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a618ab11a916fb31cc224b705e7f1e107</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimGridBase&lt; RealType &gt;</type>
      <name>GridType</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a745182251a5921e2f8f532450e336c81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimCubicSpline&lt; RealType &gt;</type>
      <name>RadialPotentialType</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a9568909f21bd7d7c0012dad6f467f0b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>WarpFunction</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>ae347d3ccbd2b7200a2e2f2307ce9863c</anchor>
      <arglist>(RealType r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonLocalECPComponent</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>aa4f10b60bc69d67c9e8f8c9953dc0d93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NonLocalECPComponent</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>adae59d613e0a7a3e11e8597ce56fcb6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NonLocalECPComponent *</type>
      <name>makeClone</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a7760e4eb9196f95372c5e0124d31955b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a1bd492efacf88b4d9fa7d251a404df8b</anchor>
      <arglist>(int l, RadialPotentialType *pp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addknot</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>acffe993d33680a9d816d4a49cfa95cd2</anchor>
      <arglist>(const PosType &amp;xyz, RealType weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize_warrays</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a0f57500e62793ccfa016b8dec2bfa941</anchor>
      <arglist>(int n, int m, int l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>randomize_grid</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a5d17f25a88ef211ee8521a9e92ab6ee5</anchor>
      <arglist>(ParticleSet::ParticlePos_t &amp;sphere, bool randomize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>randomize_grid</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>acc1475fbac2ffaef562884bf4d5b6670</anchor>
      <arglist>(vector&lt; T &gt; &amp;sphere)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluate</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>ab4e596297f02a678fffe3293192dd1f6</anchor>
      <arglist>(ParticleSet &amp;W, int iat, TrialWaveFunction &amp;Psi)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluate</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a150fb6f407f962c364d1c0e16eee13f3</anchor>
      <arglist>(ParticleSet &amp;W, int iat, TrialWaveFunction &amp;Psi, PosType &amp;force_iat)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluate</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>ab4319b196d2640e7c9ef89912dda8598</anchor>
      <arglist>(ParticleSet &amp;W, ParticleSet &amp;ions, int iat, TrialWaveFunction &amp;Psi, PosType &amp;force_iat, PosType &amp;pulay_iat)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluate</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>aa4cf34729e84e818317269ac13f8e379</anchor>
      <arglist>(ParticleSet &amp;W, TrialWaveFunction &amp;Psi, int iat, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluate</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>abf170256b596fd19641f79d6eaed9fab</anchor>
      <arglist>(ParticleSet &amp;W, TrialWaveFunction &amp;Psi, int iat, vector&lt; NonLocalData &gt; &amp;Txy, PosType &amp;force_iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>aa0c53387f47a46bf4c549b8f3bc6a941</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomGenerator</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a85d63360998b0f9233e8ee0d68bb94da</anchor>
      <arglist>(RandomGenerator_t *rng)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>lmax</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a880eb260d9da52a83b315907eef5a40f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nchannel</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a7841f48cdde0b95378ef5b40943ba5b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nknot</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>ae943068bea4df1820af23b0bdd7d879d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Rmax</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a91859a72756d1dbcb45279cef85f5929</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RandomGenerator_t *</type>
      <name>myRNG</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a0532b6747ebcd5ba3ebf409cc9e91f6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>angpp_m</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a1f3144a14d8bbb8256280efac3a96bb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>wgt_angpp_m</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>ad969cfbed1d777894a1fefefd712cd52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Lfactor1</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>abd5a81066e2c946345b03133d0d84ef1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Lfactor2</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>aaa593580118c17e379d2329a81fccf0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RadialPotentialType * &gt;</type>
      <name>nlpp_m</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a0396f565c021a9095baaf91ded500856</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SpherGridType</type>
      <name>sgridxyz_m</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a4a8851d4a4a428a5adb87b0d92a5f12b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SpherGridType</type>
      <name>rrotsgrid_m</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a97bae03e8abbdffa017bd89210bc68f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>sgridweight_m</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a7f233141ef2eb274788e4a01082d1c34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>psiratio</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a07ab5073bc4f855ad3f8abf27cdfa384</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>vrad</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a0559f6ef4f82758b056e33696a512dd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>dvrad</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a1d36d60bc44bf0b6e85f7c79ea4741cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>wvec</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>aa57a1e2b476609889a15244394cb5f3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Amat</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a761f1b836c26def4e3fec234012a17f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>dAmat</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>abb47df556290dadf08ac283feaad825a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; PosType &gt;</type>
      <name>psigrad</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a9c49db5f7e2f756bb021717fe79cc766</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; PosType &gt;</type>
      <name>psigrad_source</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a5087d37dc18be11bb631c8f717757800</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>lpol</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a868d6eacc80e594861c16fb4646322c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>dlpol</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a3175f5a554548ee959b907396a29af2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>WarpNorm</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a57b3a919026dfff70e9de18ae671ba6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>dG</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a1ac3bc9c38dee3a46f134d94f653fef4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleLaplacian_t</type>
      <name>dL</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>ad515bddd0bd26565398ff83fd432e766</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; PosType &gt;</type>
      <name>Gnew</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a654f61527f86e09f98a494ab8b882066</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>Gion</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a426002981ab7309c49b581c1fa18a126</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>myTable</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a047d15b8b83895f2d7e6cf4bb1554d43</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::NonLocalECPotential_CUDA</name>
    <filename>a00411.html</filename>
    <base>qmcplusplus::NonLocalECPotential</base>
    <member kind="function">
      <type></type>
      <name>NonLocalECPotential_CUDA</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>a6c43f62da24feec870d00131d6e9149e</anchor>
      <arglist>(ParticleSet &amp;ions, ParticleSet &amp;els, TrialWaveFunction &amp;psi, bool usePBC, bool doForces=false)</arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>a5df09e537c6e0e8ecb15a64f5d244510</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEnergy</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>a36afe89654ad73e3491c42e7d54b9940</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, vector&lt; RealType &gt; &amp;LocalEnergy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEnergy</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ae0db337d850812cd7eec1fc1ab2d79fd</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, vector&lt; RealType &gt; &amp;LocalEnergy, vector&lt; vector&lt; NonLocalData &gt; &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupCUDA</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>a255324416c572d35e7a61d971504fd4c</anchor>
      <arglist>(ParticleSet &amp;elecs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resizeCUDA</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>a4291c2154d7c1741b43eb1d0ef36626b</anchor>
      <arglist>(int nw)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>UsePBC</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>a0509dd75e675cea3e1152928198029d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumIonGroups</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>a7a90a9d4dface835e95d801d45bf18c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; int &gt;</type>
      <name>IonFirst</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>a4e793fd9bb9ba35f2efaa8120921ac54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; int &gt;</type>
      <name>IonLast</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>a73d6616a4243a191ad1222190a08d9d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::device_vector&lt; CUDA_PRECISION &gt;</type>
      <name>Ions_GPU</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ab2e81362296203f6132eabcc02af1d30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::device_vector&lt; CUDA_PRECISION &gt;</type>
      <name>L</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>a0d4129884368fc0002a1a3010d51aa94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::device_vector&lt; CUDA_PRECISION &gt;</type>
      <name>Linv</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>aa64bb39cee89c4f9d5fe4343793dbf99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::device_vector&lt; int &gt;</type>
      <name>Elecs_GPU</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>a54a28a4f81aedaaa50cea8421d53035d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::host_vector&lt; int &gt;</type>
      <name>Elecs_host</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ad8ecb22d8176fcf6886a871ef28fe286</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::device_vector&lt; CUDA_PRECISION &gt;</type>
      <name>Dist_GPU</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>a7e8602fbde7c71cb3fdf3fbcfae45725</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::host_vector&lt; CUDA_PRECISION &gt;</type>
      <name>Dist_host</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>afc0aea05b272e51e8d0cc6fcfcd95370</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::device_vector&lt; int * &gt;</type>
      <name>Eleclist_GPU</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>aa885c82870d3ddf10f2fc2caa64a67a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::device_vector&lt; CUDA_PRECISION * &gt;</type>
      <name>Distlist_GPU</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>af9df766302e23d1d5ca8743bc44067a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::device_vector&lt; int &gt;</type>
      <name>NumPairs_GPU</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>a983f008cfc724c5ba45eb7348ae871b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::host_vector&lt; int &gt;</type>
      <name>NumPairs_host</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ab31ad090a2e5c7279a45d6268398706d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::host_vector&lt; int * &gt;</type>
      <name>Eleclist_host</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ae7629d8bce459b768b5bd8dd12d4ba16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::host_vector&lt; CUDA_PRECISION * &gt;</type>
      <name>Distlist_host</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>a82b622df3fb8f8e87627db232dc95180</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::host_vector&lt; CUDA_PRECISION * &gt;</type>
      <name>RatioPoslist_host</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>acdb3f937b52b7b4ba8ecf048179a05ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::host_vector&lt; CUDA_PRECISION * &gt;</type>
      <name>Ratiolist_host</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ace84aa5f6e5ede18e1193971cbe0ff38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::host_vector&lt; CUDA_PRECISION * &gt;</type>
      <name>CosThetalist_host</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>a3643378aee9cf6cbd241383dc45a3173</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumElecs</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>aa723c38d1be1cb6fbdcb3e07e8725b07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>MaxKnots</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>a8fc05776fc658d2aab3bda3e8cb65b3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>MaxPairs</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ae8bfcb609fb0141b560073a04f397e1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>RatiosPerWalker</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ae5c38f646c091f5e032c6cc440010e60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::device_vector&lt; CUDA_PRECISION &gt;</type>
      <name>RatioPos_GPU</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>a1479e909517c0403eb46cfaa9c8856f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::device_vector&lt; CUDA_PRECISION &gt;</type>
      <name>CosTheta_GPU</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>a51d9bf45b50037fd892b9bfa850c8719</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::host_vector&lt; CUDA_PRECISION &gt;</type>
      <name>RatioPos_host</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>a8cc7886cf04a7cfa1713831ba8b2abaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::host_vector&lt; CUDA_PRECISION &gt;</type>
      <name>CosTheta_host</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>a6613ee4677bb9e579c9219c8b3de58bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::device_vector&lt; CUDA_PRECISION * &gt;</type>
      <name>RatioPoslist_GPU</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>a09a1426d54ad3e5ce5a4c36edbe430df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gpu::device_vector&lt; CUDA_PRECISION * &gt;</type>
      <name>CosThetalist_GPU</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>acaec8752b2e477d74f9fc0c1cc8c8631</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; gpu::device_vector&lt; CUDA_PRECISION &gt; &gt;</type>
      <name>QuadPoints_GPU</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>a92416bdbeaf1d9fddde91c199ce0f565</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; std::vector&lt; CUDA_PRECISION &gt; &gt;</type>
      <name>QuadPoints_host</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>a08b6a7715dbd9fc52e869861de846e7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>CurrentNumWalkers</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>a0ec7106513adbbafa271307bbc5e6682</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; NLjob &gt;</type>
      <name>JobList</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>a7de425343cdd099a9c3bb1cd8a9b24a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; PosType &gt;</type>
      <name>QuadPosList</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>a7f90e0b271bcedeb8b8911d4dc0ad4ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; ValueType &gt;</type>
      <name>RatioList</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>a06f5ecdd7ce344d5a3a2ed77987915e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; PosType &gt;</type>
      <name>SortedIons</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>a85683cd6bfcf701941287e831ee25079</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::NonLocalTOperator</name>
    <filename>a00412.html</filename>
    <member kind="typedef">
      <type>NonLocalData::RealType</type>
      <name>RealType</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>a5f2d39f84f4ca82b199322c7e7c055d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NonLocalData::PosType</type>
      <name>PosType</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>a5293e43908b77f683ea7f65d7805047b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonLocalTOperator</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>ab60ac19bd6c3c9b55d09f47fbb9ba24c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>ab8e4e3e2a7bf18888b71bdf9dda0770b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>a3b1cfa87ab1d46d5e1dfcf66aa67b761</anchor>
      <arglist>(int ibar) const </arglist>
    </member>
    <member kind="function">
      <type>PosType</type>
      <name>delta</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>a75f2e04202ef0f7596c18035e65bb7b4</anchor>
      <arglist>(int ibar) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>a8677106199bf27f67e89c1a8a1a5c3ce</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>selectMove</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>a7333443b76c7cbbb8f139040bb4e19b2</anchor>
      <arglist>(RealType prob)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>selectMove</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>a3300db195deef3ee367a53ad3f6b3624</anchor>
      <arglist>(RealType prob, vector&lt; NonLocalData &gt; &amp;txy)</arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Tau</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>a66fea1c65ee2dcf846ac7ec81f6b255c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Alpha</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>a3282590908192c019aea7826dee0b780</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Gamma</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>a3f312884a7a33052149c44421be8c753</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>plusFactor</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>a48b483bc5c02044c099e81ac097f32fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>minusFactor</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>a0a02e430ffed9af31f1584b708802cbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; NonLocalData &gt;</type>
      <name>Txy</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>af918c05a484a7f77afab6087f3b91dbd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::NumberFluctuations</name>
    <filename>a00416.html</filename>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>NumberFluctuations</name>
      <anchorfile>a00416.html</anchorfile>
      <anchor>ae9764dccf4886830fd423312abea6855</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NumberFluctuations</name>
      <anchorfile>a00416.html</anchorfile>
      <anchor>a54e171f6e4ed5b9dd1241ab103f834be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00416.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluateSphere</name>
      <anchorfile>a00416.html</anchorfile>
      <anchor>a89a480d6a3ac2808d453fd1466749bd3</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluateBox</name>
      <anchorfile>a00416.html</anchorfile>
      <anchor>a7dfe06256d9340ae8ff7f8f9d106f64a</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluateHalfSpace</name>
      <anchorfile>a00416.html</anchorfile>
      <anchor>a86b4aa9b81c73aa1916deb98d93402e3</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObservables</name>
      <anchorfile>a00416.html</anchorfile>
      <anchor>a2a1ba7447d76a7353df776e71e48ed0b</anchor>
      <arglist>(PropertySetType &amp;plist, BufferType &amp;collectables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObservables</name>
      <anchorfile>a00416.html</anchorfile>
      <anchor>ae4b206ae54a98a3af6952165d2b61fc6</anchor>
      <arglist>(PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticlePropertyList</name>
      <anchorfile>a00416.html</anchorfile>
      <anchor>a7a51ebc855f558bb099e23fc3386fd0d</anchor>
      <arglist>(PropertySetType &amp;plist, int offset)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00416.html</anchorfile>
      <anchor>a5c48281949f42f6b68e628f33c3ee980</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00416.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>registerData</name>
      <anchorfile>a00416.html</anchorfile>
      <anchor>a9d615d237ace0de1eea40231a399d578</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>updateBuffer</name>
      <anchorfile>a00416.html</anchorfile>
      <anchor>a7d2310b390776c60d0d41d60e7820cdb</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00416.html</anchorfile>
      <anchor>ac2b64ad7f8a9e83ed74f5ed98efae78c</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyToBuffer</name>
      <anchorfile>a00416.html</anchorfile>
      <anchor>ad8f6db641b2101970e7c9272f71bfba6</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluatePbyP</name>
      <anchorfile>a00416.html</anchorfile>
      <anchor>a9959fcb21fe743cd247d88b427df98d1</anchor>
      <arglist>(ParticleSet &amp;P, int active)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00416.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00416.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00416.html</anchorfile>
      <anchor>a8c7995fca4e1c327502fe29d4633430e</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; Return_t &gt;</type>
      <name>regions</name>
      <anchorfile>a00416.html</anchorfile>
      <anchor>a52d9dd8a22761c9d11d695207e6fea2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>shape</name>
      <anchorfile>a00416.html</anchorfile>
      <anchor>aa9a72123b70337342bc4c4f2aa5e9142</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticlePos_t *</type>
      <name>L</name>
      <anchorfile>a00416.html</anchorfile>
      <anchor>a05c722959abd994fd555b07013dc30a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticlePos_t *</type>
      <name>C</name>
      <anchorfile>a00416.html</anchorfile>
      <anchor>ab0cd250f1740e29791726bce688f5ba7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>PBCType</name>
      <anchorfile>a00416.html</anchorfile>
      <anchor>a3209e67502d80c637b80c38989e8e405</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nreg</name>
      <anchorfile>a00416.html</anchorfile>
      <anchor>ae872ccba15fd5888f34ba40d4c0f4117</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>grps</name>
      <anchorfile>a00416.html</anchorfile>
      <anchor>aacb2ce5c3dea05b712e7765b698ac0fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>pwrs</name>
      <anchorfile>a00416.html</anchorfile>
      <anchor>a2789054f7e5e8c478dec8b1b96f4b0e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ngrid</name>
      <anchorfile>a00416.html</anchorfile>
      <anchor>a716be4474f3ab8f774a021964966a5cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>grp_v</name>
      <anchorfile>a00416.html</anchorfile>
      <anchor>a67dfb79e05892b876850199640e4d078</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; Return_t &gt;</type>
      <name>Values</name>
      <anchorfile>a00416.html</anchorfile>
      <anchor>ac95f1a7126d5a4368a6b4187876c756b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; Return_t &gt;</type>
      <name>voffsets</name>
      <anchorfile>a00416.html</anchorfile>
      <anchor>a674ad6e750c72a048c6812725ca0f684</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>a00416.html</anchorfile>
      <anchor>a859bc2c01e2beb7537cd83f0b9e88921</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::NumericalRadialPotential</name>
    <filename>a00419.html</filename>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="typedef">
      <type>OneDimGridBase&lt; RealType &gt;</type>
      <name>GridType</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>a745182251a5921e2f8f532450e336c81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimLinearSpline&lt; RealType &gt;</type>
      <name>RadialPotentialType</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>a2a719aead0b91556463de61ce22ec447</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NumericalRadialPotential</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>a7b3c112f4a2b81f2da0ce0567ed20680</anchor>
      <arglist>(ParticleSet &amp;center)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NumericalRadialPotential</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>a169509c20f0f94e04cff9c6c81e8a96a</anchor>
      <arglist>(ParticleSet &amp;center, ParticleSet &amp;visitor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NumericalRadialPotential</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ad72db1945d96c8cff27de2cd990f142b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>aa505db626b0ad49d0b9e3a5189bb5d07</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>a5df09e537c6e0e8ecb15a64f5d244510</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>IsPairPotential</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>a0b9c5ae3d8b7b4d284d6f20f009ba5fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Centers</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>a3143780108649c426c1eceba038963b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>a859bc2c01e2beb7537cd83f0b9e88921</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet &amp;</type>
      <name>sourcePtcl</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>a521b26e24d441b710c7b5668002ed60f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RadialPotentialType *</type>
      <name>VofR</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>af28d892aece2639ddca3569f9b11c853</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::observable_helper</name>
    <filename>a00420.html</filename>
    <member kind="typedef">
      <type>OHMMS_PRECISION</type>
      <name>value_type</name>
      <anchorfile>a00420.html</anchorfile>
      <anchor>ab2decad2e9b0f41949dab4dcc20b599e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>observable_helper</name>
      <anchorfile>a00420.html</anchorfile>
      <anchor>a5c3587f0c214ca5da72fc7f04f9b6a80</anchor>
      <arglist>(const std::string &amp;title=&quot;dummy&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~observable_helper</name>
      <anchorfile>a00420.html</anchorfile>
      <anchor>a19440d2ed42885c529589e447f468116</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_dimensions</name>
      <anchorfile>a00420.html</anchorfile>
      <anchor>aea3e9123098044ba59f53adb94d77d16</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;dims, int first)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>open</name>
      <anchorfile>a00420.html</anchorfile>
      <anchor>a962b8a735519a46a9be344d515e88235</anchor>
      <arglist>(hid_t grp_id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addProperty</name>
      <anchorfile>a00420.html</anchorfile>
      <anchor>af74d7d17508fd18d19d4db02d33d7e90</anchor>
      <arglist>(T &amp;p, const std::string &amp;pname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a00420.html</anchorfile>
      <anchor>a93b6c29744a5ec2587dd2e19cc5e365c</anchor>
      <arglist>(const value_type *first_v, const value_type *first_vv)</arglist>
    </member>
    <member kind="variable">
      <type>hsize_t</type>
      <name>lower_bound</name>
      <anchorfile>a00420.html</anchorfile>
      <anchor>a1f95855a10bb8670e4e552170ef7a086</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hid_t</type>
      <name>data_id</name>
      <anchorfile>a00420.html</anchorfile>
      <anchor>add370e9c35448e3a5384677348f51174</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hid_t</type>
      <name>space1_id</name>
      <anchorfile>a00420.html</anchorfile>
      <anchor>a146c0811e092dd408fa02185457da68e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hid_t</type>
      <name>value1_id</name>
      <anchorfile>a00420.html</anchorfile>
      <anchor>a05bf311fadd77f989513b1237a85a206</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hid_t</type>
      <name>space2_id</name>
      <anchorfile>a00420.html</anchorfile>
      <anchor>af2f579b5f9c34e78044022b4a1e328e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hid_t</type>
      <name>value2_id</name>
      <anchorfile>a00420.html</anchorfile>
      <anchor>a57513e84d1540d316d4624af003bd440</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; hsize_t &gt;</type>
      <name>mydims</name>
      <anchorfile>a00420.html</anchorfile>
      <anchor>af5c7351ed1993d74d78202ba2ef5132f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; hsize_t &gt;</type>
      <name>maxdims</name>
      <anchorfile>a00420.html</anchorfile>
      <anchor>a252fbf386eff167d59a1dffef4eada81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; hsize_t &gt;</type>
      <name>curdims</name>
      <anchorfile>a00420.html</anchorfile>
      <anchor>a8a754b7e201b0d92faf41c686fbf4966</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; hsize_t &gt;</type>
      <name>offsets</name>
      <anchorfile>a00420.html</anchorfile>
      <anchor>adeaa9b38988f989bf2a3841cef3a85cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>group_name</name>
      <anchorfile>a00420.html</anchorfile>
      <anchor>a71ab2bbca5b93038f8ddbc950605b096</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::OneBodyDensityMatrix</name>
    <filename>a00432.html</filename>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>OneBodyDensityMatrix</name>
      <anchorfile>a00432.html</anchorfile>
      <anchor>a7e99e4a93067e5e8041ae04768213035</anchor>
      <arglist>(ParticleSet &amp;ions, ParticleSet &amp;elns)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneBodyDensityMatrix</name>
      <anchorfile>a00432.html</anchorfile>
      <anchor>aafb3a50d580955fd301b71910b6d7fda</anchor>
      <arglist>(ParticleSet &amp;elns)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00432.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00432.html</anchorfile>
      <anchor>a334757c562b753eb196eb03b19dd7f72</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00432.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObservables</name>
      <anchorfile>a00432.html</anchorfile>
      <anchor>a8abdf7e1d1af61133e6ebb7b46c53aa1</anchor>
      <arglist>(PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObservables</name>
      <anchorfile>a00432.html</anchorfile>
      <anchor>ae4b206ae54a98a3af6952165d2b61fc6</anchor>
      <arglist>(PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticlePropertyList</name>
      <anchorfile>a00432.html</anchorfile>
      <anchor>a7a51ebc855f558bb099e23fc3386fd0d</anchor>
      <arglist>(PropertySetType &amp;plist, int offset)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00432.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00432.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00432.html</anchorfile>
      <anchor>a5df09e537c6e0e8ecb15a64f5d244510</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00432.html</anchorfile>
      <anchor>a0fc3d585aa53859602ac79c9c421f2a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>Dmax</name>
      <anchorfile>a00432.html</anchorfile>
      <anchor>a51192cded06bc7ae46e4a8f8a3a4d8e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>Delta</name>
      <anchorfile>a00432.html</anchorfile>
      <anchor>a9a7e9b0880a466010fb59f432deca68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>DeltaInv</name>
      <anchorfile>a00432.html</anchorfile>
      <anchor>a29e2d62585317e76e00213e429499e05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TrialWaveFunction &amp;</type>
      <name>Psi</name>
      <anchorfile>a00432.html</anchorfile>
      <anchor>ad34f7fe2e50d37f4e8459655408d2ab5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; RealType &gt;</type>
      <name>gofr</name>
      <anchorfile>a00432.html</anchorfile>
      <anchor>a79c264651a22bdce4a4036d848856c8c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::PairCorrEstimator</name>
    <filename>a00456.html</filename>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>PairCorrEstimator</name>
      <anchorfile>a00456.html</anchorfile>
      <anchor>a39d3d70a0d1d82d29ba4f2101cc24771</anchor>
      <arglist>(ParticleSet &amp;elns, string &amp;sources)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00456.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00456.html</anchorfile>
      <anchor>ac676d5d233946ac112365757b85ed09c</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00456.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObservables</name>
      <anchorfile>a00456.html</anchorfile>
      <anchor>a8abdf7e1d1af61133e6ebb7b46c53aa1</anchor>
      <arglist>(PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObservables</name>
      <anchorfile>a00456.html</anchorfile>
      <anchor>a2a1ba7447d76a7353df776e71e48ed0b</anchor>
      <arglist>(PropertySetType &amp;plist, BufferType &amp;collectables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerCollectables</name>
      <anchorfile>a00456.html</anchorfile>
      <anchor>a1a0a4f2b6ce54a56c8b43121e518a0fc</anchor>
      <arglist>(vector&lt; observable_helper * &gt; &amp;h5list, hid_t gid) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObservables</name>
      <anchorfile>a00456.html</anchorfile>
      <anchor>ae4b206ae54a98a3af6952165d2b61fc6</anchor>
      <arglist>(PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticlePropertyList</name>
      <anchorfile>a00456.html</anchorfile>
      <anchor>a7a51ebc855f558bb099e23fc3386fd0d</anchor>
      <arglist>(PropertySetType &amp;plist, int offset)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00456.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00456.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00456.html</anchorfile>
      <anchor>a5df09e537c6e0e8ecb15a64f5d244510</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00456.html</anchorfile>
      <anchor>a21dafd39061249525705e95e247a670f</anchor>
      <arglist>(int nbins)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumBins</name>
      <anchorfile>a00456.html</anchorfile>
      <anchor>a3e1861efa4769a0c900c8b5f4b728151</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>Dmax</name>
      <anchorfile>a00456.html</anchorfile>
      <anchor>a51192cded06bc7ae46e4a8f8a3a4d8e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>Delta</name>
      <anchorfile>a00456.html</anchorfile>
      <anchor>a9a7e9b0880a466010fb59f432deca68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>DeltaInv</name>
      <anchorfile>a00456.html</anchorfile>
      <anchor>a29e2d62585317e76e00213e429499e05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>Volume</name>
      <anchorfile>a00456.html</anchorfile>
      <anchor>a865451075752decd91a479056adabbc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; int &gt;</type>
      <name>pair_ids</name>
      <anchorfile>a00456.html</anchorfile>
      <anchor>abe097c10ecd9b8397eb19c96e58c6135</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; int &gt;</type>
      <name>other_ids</name>
      <anchorfile>a00456.html</anchorfile>
      <anchor>a88f8752a3a8e12a2d7f610455af0c361</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; int &gt;</type>
      <name>other_offsets</name>
      <anchorfile>a00456.html</anchorfile>
      <anchor>ac15dfe4fe4ae39723454e6d7e84017cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; RealType &gt;</type>
      <name>norm_factor</name>
      <anchorfile>a00456.html</anchorfile>
      <anchor>af46bc96728315911f444b2043ca2f45d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>num_species</name>
      <anchorfile>a00456.html</anchorfile>
      <anchor>af26dfc059a67efeb0ddb390e2c8a3d27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>N_e</name>
      <anchorfile>a00456.html</anchorfile>
      <anchor>a43ac5e4805e5c95ca7ab3453031d7f48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; RealType &gt;</type>
      <name>n_vec</name>
      <anchorfile>a00456.html</anchorfile>
      <anchor>a1a81d3fdd2d25327fb5f5c5191af7f58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; string &gt;</type>
      <name>gof_r_prefix</name>
      <anchorfile>a00456.html</anchorfile>
      <anchor>ace37b77ef27249b74c0829d77a3247cb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::PolarizationPotential</name>
    <filename>a00468.html</filename>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>PolarizationPotential</name>
      <anchorfile>a00468.html</anchorfile>
      <anchor>ac1b3c68036718f244e7f4f41a2ac4057</anchor>
      <arglist>(double field)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PolarizationPotential</name>
      <anchorfile>a00468.html</anchorfile>
      <anchor>abab00b83ac3c7fe8aae88bc21a17786a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00468.html</anchorfile>
      <anchor>a5c48281949f42f6b68e628f33c3ee980</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00468.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00468.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Efield</name>
      <anchorfile>a00468.html</anchorfile>
      <anchor>ae13fb7392cf68887659fedea149849e0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::PulayForce</name>
    <filename>a00490.html</filename>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <base>qmcplusplus::ForceBase</base>
    <member kind="function">
      <type></type>
      <name>PulayForce</name>
      <anchorfile>a00490.html</anchorfile>
      <anchor>af3d38cf04404dea686a4df296a1fa288</anchor>
      <arglist>(ParticleSet &amp;ions, ParticleSet &amp;elns, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00490.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00490.html</anchorfile>
      <anchor>a35d93e92198757e4e70dd2eb3dcca534</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00490.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00490.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00490.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00490.html</anchorfile>
      <anchor>a8c7995fca4e1c327502fe29d4633430e</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>WarpFunction</name>
      <anchorfile>a00490.html</anchorfile>
      <anchor>ae347d3ccbd2b7200a2e2f2307ce9863c</anchor>
      <arglist>(RealType r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObservables</name>
      <anchorfile>a00490.html</anchorfile>
      <anchor>a2a1ba7447d76a7353df776e71e48ed0b</anchor>
      <arglist>(PropertySetType &amp;plist, BufferType &amp;collectables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObservables</name>
      <anchorfile>a00490.html</anchorfile>
      <anchor>ae4b206ae54a98a3af6952165d2b61fc6</anchor>
      <arglist>(PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticlePropertyList</name>
      <anchorfile>a00490.html</anchorfile>
      <anchor>a7a51ebc855f558bb099e23fc3386fd0d</anchor>
      <arglist>(PropertySetType &amp;plist, int offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerObservables</name>
      <anchorfile>a00490.html</anchorfile>
      <anchor>a2a9137abf45ebb2c9a31255f063723f9</anchor>
      <arglist>(vector&lt; observable_helper * &gt; &amp;h5list, hid_t gid) const </arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet &amp;</type>
      <name>Ions</name>
      <anchorfile>a00490.html</anchorfile>
      <anchor>a95121fc6648a0bf2e00f464dd40f5ddd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet &amp;</type>
      <name>Electrons</name>
      <anchorfile>a00490.html</anchorfile>
      <anchor>a9ece7c8cad3ba8ab9305a60c695130bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TrialWaveFunction &amp;</type>
      <name>Psi</name>
      <anchorfile>a00490.html</anchorfile>
      <anchor>ad34f7fe2e50d37f4e8459655408d2ab5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>WarpNorm</name>
      <anchorfile>a00490.html</anchorfile>
      <anchor>a57b3a919026dfff70e9de18ae671ba6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticlePos_t</type>
      <name>GradLogPsi</name>
      <anchorfile>a00490.html</anchorfile>
      <anchor>a635b9e850ccde722ee13c1a78c3a26ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticlePos_t</type>
      <name>EGradLogPsi</name>
      <anchorfile>a00490.html</anchorfile>
      <anchor>ad7307514b5eefeb41560f5b96289e327</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::QMCHamiltonian</name>
    <filename>a00498.html</filename>
    <member kind="typedef">
      <type>QMCHamiltonianBase::RealType</type>
      <name>RealType</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>ab44bbf642dc0845b96d8a2d464290c08</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>QMCHamiltonianBase::ValueType</type>
      <name>ValueType</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>a1d71d219cb6dccc1074833970550726f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>QMCHamiltonianBase::Return_t</type>
      <name>Return_t</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>a46d3d998e3071a3cc9e4372499046382</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>QMCHamiltonianBase::PropertySetType</type>
      <name>PropertySetType</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>a74ac7a858611c3daf3309dd0d69384a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>QMCHamiltonianBase::BufferType</type>
      <name>BufferType</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>a86b4d4548a87bf033708a3dbe499bc85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>QMCHamiltonianBase::Walker_t</type>
      <name>Walker_t</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>a67b7accab9c0db409fc6542cadd0bec8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QMCHamiltonian</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>ace29f22d783ab1e4ce77bf43ef1284a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~QMCHamiltonian</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>a09514bfd526f1de0dd08184c264dc3c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOperator</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>ac9fb579315ef025030602e25a8ffc6ae</anchor>
      <arglist>(QMCHamiltonianBase *h, const string &amp;aname, bool physical=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>ab8e4e3e2a7bf18888b71bdf9dda0770b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>getHamiltonian</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>adfe7404f20ae7951fb17c227ac70bd71</anchor>
      <arglist>(const string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>getHamiltonian</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>ab7940e77bfc9a52d2d8af39aaeb0a8c0</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProperty</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>a12e82ee6b00d8fde2daf21549e283065</anchor>
      <arglist>(IT first)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>getLocalEnergy</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>a2e1a52c626c1e54b609a59dce8d266aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>getLocalPotential</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>a5ea32f4a271aeadebe16a9546abbcade</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>auxHevaluate</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>a64617e3c9a47833a131e8ed0aff88730</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>auxHevaluate</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>a616c8077320df876439f1caf819a0b7d</anchor>
      <arglist>(ParticleSet &amp;P, Walker_t &amp;ThisWalker)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rejectedMove</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>abeab08c18d0679eaa46f4d70b2afbd0e</anchor>
      <arglist>(ParticleSet &amp;P, Walker_t &amp;ThisWalker)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPrimary</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>a7684c4226f1a2e7ebd096b480bfd0828</anchor>
      <arglist>(bool primary)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>a7645ca67ae72dcf974e282b496c23045</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>a61a0912327da87b5a485c4de0c4fe8f7</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>getEnsembleAverage</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>acff8e136f591f0a3a19a95c9900d0dd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>a3c875ff3a81d76a3837ed87f3eab327a</anchor>
      <arglist>(const string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>getName</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>a5e164ba33b1dfc211559756aa5d486c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomGenerator</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>a85d63360998b0f9233e8ee0d68bb94da</anchor>
      <arglist>(RandomGenerator_t *rng)</arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonian *</type>
      <name>makeClone</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>a596df2dcf38eab81fc0c1489aa1604ef</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>registerData</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>a53b1cd86466df3efb55c93bf5d7db8cc</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>updateBuffer</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>afd7fd3fdd8d5e8fdfd3e7af0264229ad</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>a873b86d22a6078397525e16eae04ed7c</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>af0e41b0c5a399f57fc72048ccaf12dbb</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluatePbyP</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>aaab052b9d13b111bd6254c54898df7df</anchor>
      <arglist>(ParticleSet &amp;P, int active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>ad126d019258b626d7b16bc630d125a47</anchor>
      <arglist>(int active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rejectMove</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>a641397864943834f98d5b4996ce8bf6a</anchor>
      <arglist>(int active)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>resetObservables</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>acbbfec2a934068113e92c2e8d39f3dd1</anchor>
      <arglist>(int start, int ncollects)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>myIndex</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>a144cfe5f3188584af7abb73a8689d92c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numCollectables</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>a46b48a39f68ca6a823fb5c194c8d8bd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Return_t</type>
      <name>LocalEnergy</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>a01e17605d68f91a1e1b307bf489e47dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Return_t</type>
      <name>KineticEnergy</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>aa1d3112088daae24e0c937fa5368da48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Return_t</type>
      <name>NewLocalEnergy</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>ac7a1ae46377e8bc91e5f08be3e2c14cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>myName</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>a026e4fb2d632d768135cab0a3fb48cc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; QMCHamiltonianBase * &gt;</type>
      <name>H</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>ab8f56a07f9648a664fe384355379ea1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; QMCHamiltonianBase * &gt;</type>
      <name>auxH</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>a22380f56874b6cfcf118837c4d8771a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; NewTimer * &gt;</type>
      <name>myTimers</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>a62c93733d80698861c127e1b2a8e5ff8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PropertySetType</type>
      <name>Observables</name>
      <anchorfile>a00498.html</anchorfile>
      <anchor>a24dc181c7c898cd59efe03bf47ad3ea6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::NonLocalData</name>
    <filename>a00409.html</filename>
    <base>qmcplusplus::QMCTraits</base>
    <member kind="function">
      <type></type>
      <name>NonLocalData</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>a43acd18c6946e15954b07fbcf62c42d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonLocalData</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>a0a27667f6b4f052e882c65afa50f7938</anchor>
      <arglist>(IndexType id, RealType w, const PosType &amp;d)</arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>PID</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>a5fd0667195b7960435af91686c6eed7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Weight</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ae5f9e9592b18b89f25ce9c178bc903f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PosType</type>
      <name>Delta</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>a6e6b296c0fe6ff25f2b757957236763f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::SkEstimator</name>
    <filename>a00560.html</filename>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>SkEstimator</name>
      <anchorfile>a00560.html</anchorfile>
      <anchor>a32f2bb79acf34b653445abbe477c85e4</anchor>
      <arglist>(ParticleSet &amp;elns)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00560.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00560.html</anchorfile>
      <anchor>ab4fd9bd8fe0940bc16060e15b2ed93d7</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00560.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObservables</name>
      <anchorfile>a00560.html</anchorfile>
      <anchor>a8abdf7e1d1af61133e6ebb7b46c53aa1</anchor>
      <arglist>(PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObservables</name>
      <anchorfile>a00560.html</anchorfile>
      <anchor>a2a1ba7447d76a7353df776e71e48ed0b</anchor>
      <arglist>(PropertySetType &amp;plist, BufferType &amp;collectables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerCollectables</name>
      <anchorfile>a00560.html</anchorfile>
      <anchor>a6f794b20e33524c704dcc03d66ad66ed</anchor>
      <arglist>(vector&lt; observable_helper * &gt; &amp;h5desc, hid_t gid) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObservables</name>
      <anchorfile>a00560.html</anchorfile>
      <anchor>ae4b206ae54a98a3af6952165d2b61fc6</anchor>
      <arglist>(PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticlePropertyList</name>
      <anchorfile>a00560.html</anchorfile>
      <anchor>a7a51ebc855f558bb099e23fc3386fd0d</anchor>
      <arglist>(PropertySetType &amp;plist, int offset)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00560.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00560.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00560.html</anchorfile>
      <anchor>a5df09e537c6e0e8ecb15a64f5d244510</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00560.html</anchorfile>
      <anchor>a0fc3d585aa53859602ac79c9c421f2a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleSet *</type>
      <name>sourcePtcl</name>
      <anchorfile>a00560.html</anchorfile>
      <anchor>ab08c7c37a309154c823dcce3178ee902</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumSpecies</name>
      <anchorfile>a00560.html</anchorfile>
      <anchor>a44c62eda869b510a5d0b3fc8949a5265</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumK</name>
      <anchorfile>a00560.html</anchorfile>
      <anchor>a0172f92a4431c6964bc949b16c8a0546</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>MaxKshell</name>
      <anchorfile>a00560.html</anchorfile>
      <anchor>a3199d07e05daa8d502fcf8dc86542f0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>OneOverN</name>
      <anchorfile>a00560.html</anchorfile>
      <anchor>a621c7dc7a0e5304c59227f31eb08156f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; int &gt;</type>
      <name>Kshell</name>
      <anchorfile>a00560.html</anchorfile>
      <anchor>afcc48749d0b0db93f75f8dc29ce06bf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; RealType &gt;</type>
      <name>Kmag</name>
      <anchorfile>a00560.html</anchorfile>
      <anchor>a380f27a9d590c33347707c6d14dd7a5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; RealType &gt;</type>
      <name>OneOverDnk</name>
      <anchorfile>a00560.html</anchorfile>
      <anchor>a064186f951e31d0b31b2ea9b9bf52571</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector&lt; ComplexType &gt;</type>
      <name>RhokTot</name>
      <anchorfile>a00560.html</anchorfile>
      <anchor>aa97c01b0dcf763a3c5050f00bcc85ffa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector&lt; RealType &gt;</type>
      <name>values</name>
      <anchorfile>a00560.html</anchorfile>
      <anchor>a125642f878d690ff87aa0e4176ee7ddf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>hdf5_out</name>
      <anchorfile>a00560.html</anchorfile>
      <anchor>a5b661c28c5213fa381f778751f982b2d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::SkEstimator_CUDA</name>
    <filename>a00561.html</filename>
    <base>qmcplusplus::SkEstimator</base>
    <member kind="function">
      <type></type>
      <name>SkEstimator_CUDA</name>
      <anchorfile>a00561.html</anchorfile>
      <anchor>a702ae60b16c03d33bfeb7e0c9d1ac1a2</anchor>
      <arglist>(ParticleSet &amp;elns)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEnergy</name>
      <anchorfile>a00561.html</anchorfile>
      <anchor>a36afe89654ad73e3491c42e7d54b9940</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, vector&lt; RealType &gt; &amp;LocalEnergy)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::SkPot</name>
    <filename>a00562.html</filename>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>SkPot</name>
      <anchorfile>a00562.html</anchorfile>
      <anchor>a09a662b81e6e86dce537710f9e0e9ef8</anchor>
      <arglist>(ParticleSet &amp;elns)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00562.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00562.html</anchorfile>
      <anchor>aa3c8a36212712685b893fdee12c12e1f</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00562.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00562.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00562.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00562.html</anchorfile>
      <anchor>a5df09e537c6e0e8ecb15a64f5d244510</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FillFk</name>
      <anchorfile>a00562.html</anchorfile>
      <anchor>a3d6813b857279ed87ced2cca9aac03b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00562.html</anchorfile>
      <anchor>a0fc3d585aa53859602ac79c9c421f2a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleSet *</type>
      <name>sourcePtcl</name>
      <anchorfile>a00562.html</anchorfile>
      <anchor>ab08c7c37a309154c823dcce3178ee902</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumSpecies</name>
      <anchorfile>a00562.html</anchorfile>
      <anchor>a44c62eda869b510a5d0b3fc8949a5265</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumK</name>
      <anchorfile>a00562.html</anchorfile>
      <anchor>a0172f92a4431c6964bc949b16c8a0546</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>MaxKshell</name>
      <anchorfile>a00562.html</anchorfile>
      <anchor>a3199d07e05daa8d502fcf8dc86542f0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>OneOverN</name>
      <anchorfile>a00562.html</anchorfile>
      <anchor>a621c7dc7a0e5304c59227f31eb08156f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; int &gt;</type>
      <name>Kshell</name>
      <anchorfile>a00562.html</anchorfile>
      <anchor>afcc48749d0b0db93f75f8dc29ce06bf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; RealType &gt;</type>
      <name>Kmag</name>
      <anchorfile>a00562.html</anchorfile>
      <anchor>a380f27a9d590c33347707c6d14dd7a5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; RealType &gt;</type>
      <name>OneOverDnk</name>
      <anchorfile>a00562.html</anchorfile>
      <anchor>a064186f951e31d0b31b2ea9b9bf52571</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector&lt; ComplexType &gt;</type>
      <name>RhokTot</name>
      <anchorfile>a00562.html</anchorfile>
      <anchor>aa97c01b0dcf763a3c5050f00bcc85ffa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector&lt; RealType &gt;</type>
      <name>Fk</name>
      <anchorfile>a00562.html</anchorfile>
      <anchor>a480ffe46ff1e3cbdcf05746b71d62410</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>V_0</name>
      <anchorfile>a00562.html</anchorfile>
      <anchor>a2f333d70de9810a58f6f97ace6a9e4fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>K_0</name>
      <anchorfile>a00562.html</anchorfile>
      <anchor>a4526ce28ca131225b492a02329ad9319</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>hdf5_out</name>
      <anchorfile>a00562.html</anchorfile>
      <anchor>a5b661c28c5213fa381f778751f982b2d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::Spline3DPotential</name>
    <filename>a00579.html</filename>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>Spline3DPotential</name>
      <anchorfile>a00579.html</anchorfile>
      <anchor>a80f260fa061b2120f223a63c81239a0b</anchor>
      <arglist>(Grid3D *agrid, const string &amp;fname)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Spline3DPotential</name>
      <anchorfile>a00579.html</anchorfile>
      <anchor>a8ff51f62a252a2007715c3accc5918b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00579.html</anchorfile>
      <anchor>a5c48281949f42f6b68e628f33c3ee980</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00579.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00579.html</anchorfile>
      <anchor>aaed350a92941957d4b4627317f0df67c</anchor>
      <arglist>(ParticleSet &amp;P, RealType &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00579.html</anchorfile>
      <anchor>a3e756c9d1de24a773535a06f951e9ddd</anchor>
      <arglist>(WalkerSetRef &amp;P, ValueVectorType &amp;LE)</arglist>
    </member>
    <member kind="variable">
      <type>Grid3D *</type>
      <name>full_Grid</name>
      <anchorfile>a00579.html</anchorfile>
      <anchor>a094bddbddb87edbb065e056432e1f135</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Spline3D *</type>
      <name>pot_m</name>
      <anchorfile>a00579.html</anchorfile>
      <anchor>a8fd215c7d65b6cab42af6731f193d569</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::TriCubicSplinePotential</name>
    <filename>a00610.html</filename>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>TriCubicSplinePotential</name>
      <anchorfile>a00610.html</anchorfile>
      <anchor>a427f965132e60b514a26ef64e14bb21e</anchor>
      <arglist>(double mbyepsq, Grid3D *agrid, const string &amp;fname)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TriCubicSplinePotential</name>
      <anchorfile>a00610.html</anchorfile>
      <anchor>aacff8aa5be703e0f2517de4b861f06da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>a00610.html</anchorfile>
      <anchor>a5ad53f8311b257146124199cb0a9fdc1</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00610.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>a00610.html</anchorfile>
      <anchor>ad3d81639f72d0b488ac816b0f96be0f0</anchor>
      <arglist>(ParticleSet &amp;P, RealType &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00610.html</anchorfile>
      <anchor>a3e756c9d1de24a773535a06f951e9ddd</anchor>
      <arglist>(WalkerSetRef &amp;P, ValueVectorType &amp;LE)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>Efac</name>
      <anchorfile>a00610.html</anchorfile>
      <anchor>ae462d36a8927ba0d68c1dc9d8faa7aa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Grid3D *</type>
      <name>DeviceGrid</name>
      <anchorfile>a00610.html</anchorfile>
      <anchor>aa9d3a8dcc6445148537398bd32266848</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TriCubicSpline *</type>
      <name>pot_m</name>
      <anchorfile>a00610.html</anchorfile>
      <anchor>a53344abfba3402bbcb3306e92addf2ef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ZeroVarianceForce</name>
    <filename>a00645.html</filename>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <base>qmcplusplus::ForceBase</base>
    <member kind="function">
      <type></type>
      <name>ZeroVarianceForce</name>
      <anchorfile>a00645.html</anchorfile>
      <anchor>aeb576fe79db0fa3832a0cc507a596fcd</anchor>
      <arglist>(ParticleSet &amp;ions, ParticleSet &amp;elns, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00645.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00645.html</anchorfile>
      <anchor>ae5ce50b4bd0e15537431e1202bc199f0</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>a00645.html</anchorfile>
      <anchor>affdbeead850ae7301c23c4dc54226960</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00645.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00645.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>makeClone</name>
      <anchorfile>a00645.html</anchorfile>
      <anchor>a8c7995fca4e1c327502fe29d4633430e</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObservables</name>
      <anchorfile>a00645.html</anchorfile>
      <anchor>a2a1ba7447d76a7353df776e71e48ed0b</anchor>
      <arglist>(PropertySetType &amp;plist, BufferType &amp;collectables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObservables</name>
      <anchorfile>a00645.html</anchorfile>
      <anchor>ae4b206ae54a98a3af6952165d2b61fc6</anchor>
      <arglist>(PropertySetType &amp;plist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticlePropertyList</name>
      <anchorfile>a00645.html</anchorfile>
      <anchor>a7a51ebc855f558bb099e23fc3386fd0d</anchor>
      <arglist>(PropertySetType &amp;plist, int offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerObservables</name>
      <anchorfile>a00645.html</anchorfile>
      <anchor>a2a9137abf45ebb2c9a31255f063723f9</anchor>
      <arglist>(vector&lt; observable_helper * &gt; &amp;h5list, hid_t gid) const </arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet &amp;</type>
      <name>Ions</name>
      <anchorfile>a00645.html</anchorfile>
      <anchor>a95121fc6648a0bf2e00f464dd40f5ddd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet &amp;</type>
      <name>Electrons</name>
      <anchorfile>a00645.html</anchorfile>
      <anchor>a9ece7c8cad3ba8ab9305a60c695130bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TrialWaveFunction &amp;</type>
      <name>Psi</name>
      <anchorfile>a00645.html</anchorfile>
      <anchor>ad34f7fe2e50d37f4e8459655408d2ab5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticlePos_t</type>
      <name>F_ZV1</name>
      <anchorfile>a00645.html</anchorfile>
      <anchor>add85f3dade9e1ba51646925451953404</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticlePos_t</type>
      <name>F_ZV2</name>
      <anchorfile>a00645.html</anchorfile>
      <anchor>a5190ac2b83898ecd7b28d24a6a8c8c24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; ParticleSet::ParticleGradient_t, OHMMS_DIM &gt;</type>
      <name>grad_grad_psi</name>
      <anchorfile>a00645.html</anchorfile>
      <anchor>a4f0b279d27d021152b193815f1b2bf1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; ParticleSet::ParticleLaplacian_t, OHMMS_DIM &gt;</type>
      <name>lapl_grad_psi</name>
      <anchorfile>a00645.html</anchorfile>
      <anchor>a0cec399da6235be2dc524006708f1ca9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::GTO2GridBuilder</name>
    <filename>a00249.html</filename>
    <base>qmcplusplus::RGFBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>GTO2GridBuilder</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a13af43c68c88a04b82171a6471a931f5</anchor>
      <arglist>(bool normalized=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addRadialOrbital</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a19315bb0c0b191bbd2f73ad5ae126be9</anchor>
      <arglist>(xmlNodePtr cur, const QuantumNumberType &amp;nlms)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putCommon</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a06c38569428abd7d32c82f3763e8cf7a</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addGrid</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a86d93b269a8b7026dd82eb38178e4955</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RGFBuilderBase</name>
      <anchorfile>a00532.html</anchorfile>
      <anchor>a46361fb7ea5e50e3831d9c60489c0e99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RGFBuilderBase</name>
      <anchorfile>a00532.html</anchorfile>
      <anchor>aff1a4d87ad732fee60657d931b52acbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrbitalSet</name>
      <anchorfile>a00532.html</anchorfile>
      <anchor>a342aca906041233d6b8e006d46907edf</anchor>
      <arglist>(CenteredOrbitalType *oset, const std::string &amp;acenter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00532.html</anchorfile>
      <anchor>a18e957a31fca47b7f4b3df422bf7d40e</anchor>
      <arglist>(const std::string &amp;aroot, int omode)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Normalized</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>aacbcd3c308ce1771fb38f921fb87a5d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_species</name>
      <anchorfile>a00532.html</anchorfile>
      <anchor>a399e17fdbfe93ba51fc15d8930c68980</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CenteredOrbitalType *</type>
      <name>m_orbitals</name>
      <anchorfile>a00532.html</anchorfile>
      <anchor>a07ee3f19031609d943db8bf4d358cece</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Counter</name>
      <anchorfile>a00532.html</anchorfile>
      <anchor>a8da6d6b33b7597f02434fedca1781cbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hid_t</type>
      <name>m_file_id</name>
      <anchorfile>a00532.html</anchorfile>
      <anchor>a8570077a09c02a6b7cb6347d9441f888</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hid_t</type>
      <name>m_group_id</name>
      <anchorfile>a00532.html</anchorfile>
      <anchor>a90df4c30e40a9223c1c8a2390ab4ff66</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimGridBase&lt; RealType &gt;</type>
      <name>GridType</name>
      <anchorfile>a00532.html</anchorfile>
      <anchor>a745182251a5921e2f8f532450e336c81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimGridFunctor&lt; RealType &gt;</type>
      <name>RadialOrbitalType</name>
      <anchorfile>a00532.html</anchorfile>
      <anchor>ac551cd5345db5d14ae7911ffc83088f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphericalOrbitalSet&lt; RadialOrbitalType, GridType &gt;</type>
      <name>CenteredOrbitalType</name>
      <anchorfile>a00532.html</anchorfile>
      <anchor>ad67fbd5d981a8f52ed637ae71a76dd4d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::HDFWalkerMerger</name>
    <filename>a00298.html</filename>
    <member kind="function">
      <type></type>
      <name>HDFWalkerMerger</name>
      <anchorfile>a00298.html</anchorfile>
      <anchor>acfed5368b8e96d573ca5d5dd1098644a</anchor>
      <arglist>(const std::string &amp;froot, int ncopy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HDFWalkerMerger</name>
      <anchorfile>a00298.html</anchorfile>
      <anchor>a419d2c0cf275a15550ed0be534f50d63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCommunicator</name>
      <anchorfile>a00298.html</anchorfile>
      <anchor>a633f341af95ca58fda893c606d5e94d4</anchor>
      <arglist>(Communicate *c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge</name>
      <anchorfile>a00298.html</anchorfile>
      <anchor>ae13116c6c78334934770f87196fbce81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>writeHeader</name>
      <anchorfile>a00298.html</anchorfile>
      <anchor>a5ff2e410296669ca6f0e49e27253598a</anchor>
      <arglist>(hid_t git)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00298.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>Dimension</name>
      <anchorfile>a00298.html</anchorfile>
      <anchor>a9fa96587382d530a02e7e15b047e82ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumCopy</name>
      <anchorfile>a00298.html</anchorfile>
      <anchor>ac2b0d1edcfadb20d5e6de423dbf9bfb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumConfig</name>
      <anchorfile>a00298.html</anchorfile>
      <anchor>ae9fddc013d6309526da684c0ffb5ecd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumPtcl</name>
      <anchorfile>a00298.html</anchorfile>
      <anchor>a56643185988350523dbe00aab6eeaaa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Communicate *</type>
      <name>myComm</name>
      <anchorfile>a00298.html</anchorfile>
      <anchor>a6e290154265339db27f9a9bef2bd3aab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>hsize_t</type>
      <name>MaxNumWalkers</name>
      <anchorfile>a00298.html</anchorfile>
      <anchor>a91564fe53c98fb6dc3afd32555d6ad0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>FileRoot</name>
      <anchorfile>a00298.html</anchorfile>
      <anchor>a9b63e029d6511549cf221e9d9744eddf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::vector&lt; hsize_t &gt; * &gt;</type>
      <name>numWalkersIn</name>
      <anchorfile>a00298.html</anchorfile>
      <anchor>afb4db50b9bc06eee329b598fe53a7811</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; hsize_t &gt;</type>
      <name>OffSet</name>
      <anchorfile>a00298.html</anchorfile>
      <anchor>aac4c4f93aba5411d6fa7de77ef2de1f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>Summary</name>
      <anchorfile>a00298.html</anchorfile>
      <anchor>a38f7285fc16546daa50f8cb6d6524216</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::MolecularOrbitalBasis</name>
    <filename>a00385.html</filename>
    <templarg></templarg>
    <base>qmcplusplus::QMCTraits</base>
    <member kind="function">
      <type></type>
      <name>MolecularOrbitalBasis</name>
      <anchorfile>a00385.html</anchorfile>
      <anchor>a9676afaa7f5ba07047527eb20424fed6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MolecularOrbitalBasis</name>
      <anchorfile>a00385.html</anchorfile>
      <anchor>ae52c15f5f5d677e2f7921f22e962eb56</anchor>
      <arglist>(int ncenters)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTable</name>
      <anchorfile>a00385.html</anchorfile>
      <anchor>ac4e749e95d84c607f4531255cb79c1fd</anchor>
      <arglist>(DistanceTableData *atable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00385.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>a00385.html</anchorfile>
      <anchor>aa1c4194bf6e8a65be215bffd2a89801b</anchor>
      <arglist>(VarRegistry&lt; RealType &gt; &amp;optVariables)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a00385.html</anchorfile>
      <anchor>ab8e4e3e2a7bf18888b71bdf9dda0770b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00385.html</anchorfile>
      <anchor>acf50548167230f1d517f5645ce835884</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00385.html</anchorfile>
      <anchor>ae830acd8d266340870f8c39671dc4cb4</anchor>
      <arglist>(int nptcl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00385.html</anchorfile>
      <anchor>a0bb2ffda8422273ba3ef55b25eb07fe1</anchor>
      <arglist>(const ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00385.html</anchorfile>
      <anchor>a956517f4949318f1f99b03415524c67d</anchor>
      <arglist>(const ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateAll</name>
      <anchorfile>a00385.html</anchorfile>
      <anchor>a324cd5800e4695b037f46b459e72a173</anchor>
      <arglist>(const ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00385.html</anchorfile>
      <anchor>a86d6225cfddc5fcb7b1323c6931bfbd9</anchor>
      <arglist>(COT *aos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00385.html</anchorfile>
      <anchor>a097e78eb4948414484976de35e939781</anchor>
      <arglist>(COT *aos, int icenter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00385.html</anchorfile>
      <anchor>aa0c53387f47a46bf4c549b8f3bc6a941</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>const ValueType *restrict</type>
      <name>y</name>
      <anchorfile>a00385.html</anchorfile>
      <anchor>a17041467f68c1c2255930058a0a5379e</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const GradType *restrict</type>
      <name>dy</name>
      <anchorfile>a00385.html</anchorfile>
      <anchor>a664426b2bfc8a8d9f2bf6333c26c225b</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const ValueType *restrict</type>
      <name>d2y</name>
      <anchorfile>a00385.html</anchorfile>
      <anchor>a0c48fbdc0879dbe7c5ea9403ed8a2ec8</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const ValueType *restrict</type>
      <name>y</name>
      <anchorfile>a00385.html</anchorfile>
      <anchor>abb591c573f3331899cb767cf1ef02875</anchor>
      <arglist>(int iw, int ia)</arglist>
    </member>
    <member kind="function">
      <type>const GradType *restrict</type>
      <name>dy</name>
      <anchorfile>a00385.html</anchorfile>
      <anchor>a2c8de8aeafe55f0869350dd4b6a6b3e7</anchor>
      <arglist>(int iw, int ia)</arglist>
    </member>
    <member kind="function">
      <type>const ValueType *restrict</type>
      <name>d2y</name>
      <anchorfile>a00385.html</anchorfile>
      <anchor>a0d2c34e8533b554ad5c0e0afbafa4d7d</anchor>
      <arglist>(int iw, int ia)</arglist>
    </member>
    <member kind="variable">
      <type>const ParticleSet *</type>
      <name>IonConfig</name>
      <anchorfile>a00385.html</anchorfile>
      <anchor>a6e1d6a7f9c2aaf68567a4fed82c8bea9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumPtcls</name>
      <anchorfile>a00385.html</anchorfile>
      <anchor>ac696dd2e9e407dabdbda0ce636a569e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumWalkers</name>
      <anchorfile>a00385.html</anchorfile>
      <anchor>ad7dd761920842f8b573ceb555902a329</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>TotalBasis</name>
      <anchorfile>a00385.html</anchorfile>
      <anchor>a313e8d8cee5d90eed9783b1e5ee981c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>I</name>
      <anchorfile>a00385.html</anchorfile>
      <anchor>a9197ff2a701b46e7f2368375290a0697</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>Basis</name>
      <anchorfile>a00385.html</anchorfile>
      <anchor>a1ab7c7c4124e4f965de82d3b45a7440d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; COT * &gt;</type>
      <name>AOs</name>
      <anchorfile>a00385.html</anchorfile>
      <anchor>acda48ff25b3684e49580aa70b1f0da94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; ValueType &gt;</type>
      <name>Y</name>
      <anchorfile>a00385.html</anchorfile>
      <anchor>ae8467be07b25df0955a94a3fd6d40075</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; GradType &gt;</type>
      <name>dY</name>
      <anchorfile>a00385.html</anchorfile>
      <anchor>a6c7af33ef3a4655305f8930f09ebd676</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; ValueType &gt;</type>
      <name>d2Y</name>
      <anchorfile>a00385.html</anchorfile>
      <anchor>a2578d07ffd19ab1402b6c59be584ec8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>myTable</name>
      <anchorfile>a00385.html</anchorfile>
      <anchor>a047d15b8b83895f2d7e6cf4bb1554d43</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::RGFBuilderBase</name>
    <filename>a00532.html</filename>
    <base>qmcplusplus::QMCTraits</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addGrid</name>
      <anchorfile>a00532.html</anchorfile>
      <anchor>a86d93b269a8b7026dd82eb38178e4955</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>addRadialOrbital</name>
      <anchorfile>a00532.html</anchorfile>
      <anchor>ab0f4def052924f26d84ec40c7124a645</anchor>
      <arglist>(xmlNodePtr cur, const QuantumNumberType &amp;nlms)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>putCommon</name>
      <anchorfile>a00532.html</anchorfile>
      <anchor>a82088daac253bf4ee71a067958a6cd4a</anchor>
      <arglist>(xmlNodePtr cur)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::STO2GridBuilder</name>
    <filename>a00593.html</filename>
    <base>qmcplusplus::RGFBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>STO2GridBuilder</name>
      <anchorfile>a00593.html</anchorfile>
      <anchor>a17f1b9ef641c122724a9f9dc862d5ecd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addRadialOrbital</name>
      <anchorfile>a00593.html</anchorfile>
      <anchor>a19315bb0c0b191bbd2f73ad5ae126be9</anchor>
      <arglist>(xmlNodePtr cur, const QuantumNumberType &amp;nlms)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putCommon</name>
      <anchorfile>a00593.html</anchorfile>
      <anchor>a06c38569428abd7d32c82f3763e8cf7a</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::AlternateReleasedNodeEnergyEstimator</name>
    <filename>a00007.html</filename>
    <base>qmcplusplus::ScalarEstimatorBase</base>
    <member kind="function">
      <type></type>
      <name>AlternateReleasedNodeEnergyEstimator</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a4781aacef3a763a6d7bcca4659b817d4</anchor>
      <arglist>(QMCHamiltonian &amp;h, int Sm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>aff6ffa2df09b0b8eedda63913c358d1c</anchor>
      <arglist>(const Walker_t &amp;awalker, RealType wgt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>ab48e0e301d7d62b927172bcb69bf760d</anchor>
      <arglist>(const MCWalkerConfiguration &amp;W, WalkerIterator first, WalkerIterator last, RealType wgt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add2Record</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a8b8411fe44760ea665b56fb817b5ec96</anchor>
      <arglist>(RecordListType &amp;record)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerObservables</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a8c77d1771426e5414fce5acee917b93d</anchor>
      <arglist>(vector&lt; observable_helper * &gt; &amp;h5dec, hid_t gid)</arglist>
    </member>
    <member kind="function">
      <type>ScalarEstimatorBase *</type>
      <name>clone</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a3c43ec6f01d195368aa35f229155e0c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarEstimatorBase</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>aa8286ff3ec0fa3cc3ed526ecd1690ea5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ScalarEstimatorBase</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a7506a032662d2449f0968a3ff233b87a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>average</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>acb5dbe1f89d34ce85161148eea025597</anchor>
      <arglist>(int i=0) const </arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>variance</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a47ebf71b455d9f43fb30e51795c4670d</anchor>
      <arglist>(int i=0) const </arglist>
    </member>
    <member kind="function">
      <type>pair&lt; RealType, RealType &gt;</type>
      <name>operator[]</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a1ce3ba7c84ef6914b789ece44f847f74</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>ab8e4e3e2a7bf18888b71bdf9dda0770b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>takeBlockAverage</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>ac0b3f6dd0f173f4d85caeef5f08faa2e</anchor>
      <arglist>(IT first)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>takeBlockAverage</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a23604a7aa362975cbe03b689790c3e67</anchor>
      <arglist>(IT first, IT first_sq)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add2Record</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a1a0c7e30a235555d0158cd2c27b40044</anchor>
      <arglist>(RecordNamedProperty&lt; RealType &gt; &amp;record)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfBlocks</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a6ceee9270d5cbdf2a8c67fa0476ff6e6</anchor>
      <arglist>(int nsamples)</arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <type>@</type>
      <name>ENERGY_INDEX</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>af715e26dfffd1f8de1c18449e2770cffaa7e5ee239c160055cec6a20e82d69307</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <type>@</type>
      <name>ENERGY2_INDEX</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>af715e26dfffd1f8de1c18449e2770cffab52c54071ca284defb38e2420f71481f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <type>@</type>
      <name>POTENTIAL_INDEX</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>af715e26dfffd1f8de1c18449e2770cffa18199c5b4124b7cb2787495c97ce9459</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <type>@</type>
      <name>FE_NOW</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>af715e26dfffd1f8de1c18449e2770cffaa42c71798ffe068808847500014c02af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <type>@</type>
      <name>LE_MAX</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>af715e26dfffd1f8de1c18449e2770cffaf43175eded1e795149e932f82bff58db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>FirstHamiltonian</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>ab59846bf744a0676cca9334bbe96cee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>SizeOfHamiltonians</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>ab9b61be4bacb6ccae95c88a8a129efbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const QMCHamiltonian &amp;</type>
      <name>refH</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a86172325241001097c97c66ce76df626</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>N_rn</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a78646b21d7a0eef666a6b92a0c5307aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>Smax</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a90da0a9e2c69f7245852cfc87b302c38</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>accumulator_set&lt; RealType &gt;</type>
      <name>accumulator_type</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a547dbf97fd59fd2564cb5e2bbf623476</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MCWalkerConfiguration::Walker_t</type>
      <name>Walker_t</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>ac075f56c393d5ec9a998ec36c58ad7d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MCWalkerConfiguration::const_iterator</type>
      <name>WalkerIterator</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a7d83e2e9c811d5f4d009d357f11a178b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RecordNamedProperty&lt; RealType &gt;</type>
      <name>RecordListType</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>ade1d66f280e6b2cbbd501c41a123556e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>FirstIndex</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>ae4f84e7f9eab061d98f9c4d1422b0ab4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>LastIndex</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a9da0233db61be933269e71059da27b34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; accumulator_type &gt;</type>
      <name>scalars</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a4e13085331b4819bfaedb28720979479</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; accumulator_type &gt;</type>
      <name>scalars_saved</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a477d2379163bee37adae28ea853f0fe4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::CollectablesEstimator</name>
    <filename>a00077.html</filename>
    <base>qmcplusplus::ScalarEstimatorBase</base>
    <member kind="function">
      <type></type>
      <name>CollectablesEstimator</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a067a1149551a4e807a4480685e4b9fac</anchor>
      <arglist>(QMCHamiltonian &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>CollectablesEstimator *</type>
      <name>clone</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a9ae21969448b921f00d87bc904cd5e10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerObservables</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a8c77d1771426e5414fce5acee917b93d</anchor>
      <arglist>(vector&lt; observable_helper * &gt; &amp;h5dec, hid_t gid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add2Record</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a8b8411fe44760ea665b56fb817b5ec96</anchor>
      <arglist>(RecordListType &amp;record)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>ab48e0e301d7d62b927172bcb69bf760d</anchor>
      <arglist>(const MCWalkerConfiguration &amp;W, WalkerIterator first, WalkerIterator last, RealType wgt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate_all</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a5209cc9af609b9548f8c2b2ad42f3644</anchor>
      <arglist>(const MCWalkerConfiguration::Buffer_t &amp;data, RealType wgt)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const QMCHamiltonian &amp;</type>
      <name>refH</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a86172325241001097c97c66ce76df626</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ComboPolymerEstimator</name>
    <filename>a00080.html</filename>
    <base>qmcplusplus::PolymerEstimator</base>
    <member kind="function">
      <type></type>
      <name>ComboPolymerEstimator</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a8e21056b055d8ba05fe4269dd0544793</anchor>
      <arglist>(QMCHamiltonian &amp;h, int hcopy=1, MultiChain *polymer=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComboPolymerEstimator</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a2c80cac8cecb7ac387b4c8a07042fd56</anchor>
      <arglist>(const ComboPolymerEstimator &amp;mest)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a924ee9897a93b39e728221fb6ac1ef38</anchor>
      <arglist>(xmlNodePtr cur, MCWalkerConfiguration &amp;refWalker, int Rlength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateDiff</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>ab6f7b0a00d68a89f76fde6d64758245f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>ab48e0e301d7d62b927172bcb69bf760d</anchor>
      <arglist>(const MCWalkerConfiguration &amp;W, WalkerIterator first, WalkerIterator last, RealType wgt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add2Record</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a512e832f7c9c13c510a9315410a90a3c</anchor>
      <arglist>(RecordNamedProperty&lt; RealType &gt; &amp;record)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerObservables</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a8c77d1771426e5414fce5acee917b93d</anchor>
      <arglist>(vector&lt; observable_helper * &gt; &amp;h5dec, hid_t gid)</arglist>
    </member>
    <member kind="function">
      <type>ScalarEstimatorBase *</type>
      <name>clone</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a3c43ec6f01d195368aa35f229155e0c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolymerEstimator</name>
      <anchorfile>a00472.html</anchorfile>
      <anchor>adf91b40314327a6a0a441f634639198e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolymerEstimator</name>
      <anchorfile>a00472.html</anchorfile>
      <anchor>ae0874b6a6b09a9550ca7c03b703d56b3</anchor>
      <arglist>(QMCHamiltonian &amp;h, int hcopy=1, MultiChain *polymer=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolymerEstimator</name>
      <anchorfile>a00472.html</anchorfile>
      <anchor>afd90bc479bdd8f01d5bff13b9e8d49b6</anchor>
      <arglist>(const PolymerEstimator &amp;mest)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getUmbrellaWeight</name>
      <anchorfile>a00472.html</anchorfile>
      <anchor>ad5caf80d2d92db9c3f2c1b724bf3ebcf</anchor>
      <arglist>(int ipsi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTau</name>
      <anchorfile>a00472.html</anchorfile>
      <anchor>a2d878e1cc075e8ba384a8e2cc92b1aa2</anchor>
      <arglist>(RealType dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPolymer</name>
      <anchorfile>a00472.html</anchorfile>
      <anchor>adb2dabf04f6525c10ee779c96e17753d</anchor>
      <arglist>(MultiChain *polymer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateDiff</name>
      <anchorfile>a00472.html</anchorfile>
      <anchor>ab6f7b0a00d68a89f76fde6d64758245f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConstants</name>
      <anchorfile>a00472.html</anchorfile>
      <anchor>af1df93f665a7a136dcb48c451678f6f5</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; string &gt;</type>
      <name>scalars_name</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a68da2b47a0f01c5f0fd08f0ad97c2c4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>scalars_index</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a5fcf54ccf42ef102e155f660d7100128</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; ReptileEstimator * &gt;</type>
      <name>RepEstimators</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a82e04fcbec39f31fdbb2a29021222fac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>FirstHamiltonian</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>ab59846bf744a0676cca9334bbe96cee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>SizeOfHamiltonians</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>ab9b61be4bacb6ccae95c88a8a129efbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ENERGY_INDEX</name>
      <anchorfile>a00472.html</anchorfile>
      <anchor>afa9be5679ab03d785820f2474c5ccc6eaa7e5ee239c160055cec6a20e82d69307</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ENERGY_SQ_INDEX</name>
      <anchorfile>a00472.html</anchorfile>
      <anchor>afa9be5679ab03d785820f2474c5ccc6ea862d78eaa58d359488e4e7c14fb4a8b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WEIGHT_INDEX</name>
      <anchorfile>a00472.html</anchorfile>
      <anchor>afa9be5679ab03d785820f2474c5ccc6eafad548571bfb8e5ca727ffbb5832b98b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LE_INDEX</name>
      <anchorfile>a00472.html</anchorfile>
      <anchor>afa9be5679ab03d785820f2474c5ccc6eaf55b81adda93a65fd434f2eac2f0bbce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MultiChain *</type>
      <name>Reptile</name>
      <anchorfile>a00472.html</anchorfile>
      <anchor>ab4898a483ea1b5d235d4a0b1f8cb5cd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumCopies</name>
      <anchorfile>a00472.html</anchorfile>
      <anchor>a9ee881e0d92ca4c9250efa9784935eaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumObservables</name>
      <anchorfile>a00472.html</anchorfile>
      <anchor>a5c784ea22c878cf62b3daf373cef09c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Tau</name>
      <anchorfile>a00472.html</anchorfile>
      <anchor>a66fea1c65ee2dcf846ac7ec81f6b255c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>OneOverTau</name>
      <anchorfile>a00472.html</anchorfile>
      <anchor>abe261b34ac8950f7d285521ec17362cc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::CompositeEstimatorBase</name>
    <filename>a00086.html</filename>
    <base>qmcplusplus::QMCTraits</base>
    <member kind="typedef">
      <type>VectorEstimatorImpl&lt; RealType &gt;</type>
      <name>VectorEstimatorType</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a97185de8e811d5dd00cfecb58f9e4901</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompositeEstimatorBase</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a8ccb23d4ea6b533ac491b55f242f8a35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CompositeEstimatorBase</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a783541c50cb530b47ed4c4c6d5455b5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CompositeEstimatorBase *</type>
      <name>clone</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a7def3ef14edc786aaae8311392b537ab</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>aebd920df05fc2b329b02ff0c27d66d8a</anchor>
      <arglist>(ParticleSet &amp;p)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>startAccumulate</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>ad2ece145171c716a543c96848a41b5d6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>accumulate</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>aacdd3d77c35eea48e2189a30783141eb</anchor>
      <arglist>(ParticleSet &amp;p)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>stopAccumulate</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a6df9db3003a3dafb91a702539d0f698c</anchor>
      <arglist>(RealType wgtnorm)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual hid_t</type>
      <name>createGroup</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a49183914ea511a1d85fc82b51034084d</anchor>
      <arglist>(hid_t gid)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>open</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a3257361dc1c7a80a6cad79a78978a7f3</anchor>
      <arglist>(hid_t hroot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a5ae591df94fc66ccb85cbb6565368bca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startBlock</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a1f4809822b1e48094faa72ace7ce60dc</anchor>
      <arglist>(int steps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopBlock</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a3dc3b9af98bf8d2f16ef7c2e1cb45cb4</anchor>
      <arglist>(RealType wgtnorm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recordBlock</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a62a4b52b2c509e26c1d00272dbee33df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collectBlock</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>aa02bbc10dee202f0a0723abcc0ccaa3a</anchor>
      <arglist>(CompositeEstimatorBase *eth)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>ab8e4e3e2a7bf18888b71bdf9dda0770b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ForwardIterator</type>
      <name>putMessage</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>ad47b7364b81345d6ab01423b9b5f38ec</anchor>
      <arglist>(ForwardIterator cur) const </arglist>
    </member>
    <member kind="function">
      <type>ForwardIterator</type>
      <name>getMessage</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>ab8d9da5852579a0ff6bc21a523c345ab</anchor>
      <arglist>(ForwardIterator cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a571580ea7471b01a50ca810c0cb59ebc</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="variable">
      <type>hid_t</type>
      <name>GroupID</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a7530db2991be0d81f3d712b9fcc8370a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>Title</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>aa7b633091e7820b835d04d0d5fc197c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; string &gt;</type>
      <name>nList</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>afdba8ecb5812d543e48bf31cfd658da6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; VectorEstimatorType * &gt;</type>
      <name>dList</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a2ab121e98a93cbfb499bc5e68c32f7a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; HDFAttribIO&lt; VectorEstimatorType &gt; * &gt;</type>
      <name>oList</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a3c01b590b760d2762d7ec6bf2923dbf7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::CompositeEstimatorSet</name>
    <filename>a00087.html</filename>
    <base>qmcplusplus::QMCTraits</base>
    <member kind="typedef">
      <type>CompositeEstimatorBase</type>
      <name>EstimatorType</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a6c0fb436f8b8c2637c2fb0f2eae811ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompositeEstimatorSet</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>ada0721532db98e4841af8c818852e83b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompositeEstimatorSet</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>aad46a982a13407f1aa3bf92af1d08e2b</anchor>
      <arglist>(const CompositeEstimatorSet &amp;ce)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CompositeEstimatorSet</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>abedc24c6e4da29d480db053318d85571</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>missing</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a6ca3cc96aa9a30ef9e637287d3c87ff1</anchor>
      <arglist>(const string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a1b9da57419371421ab942e8458d538c9</anchor>
      <arglist>(EstimatorType *est, const string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a32dfadd06736ad4a3fa44d2a20cf4015</anchor>
      <arglist>(ParticleSet &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>open</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a3257361dc1c7a80a6cad79a78978a7f3</anchor>
      <arglist>(hid_t hroot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a5ae591df94fc66ccb85cbb6565368bca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startBlock</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a1f4809822b1e48094faa72ace7ce60dc</anchor>
      <arglist>(int steps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>ab8e4e3e2a7bf18888b71bdf9dda0770b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a4367871bc73a1e151064afa51abd37c8</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, RealType wgtnorm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a05dae7d282d65c5594d26d960f44cec1</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, MCWalkerConfiguration::iterator it, MCWalkerConfiguration::iterator it_end, RealType wgtnorm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopBlock</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>aeb02f889f9d3543f0386edd8c795b55f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collectBlock</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a94a6b272b643f646a0b458328ab5a237</anchor>
      <arglist>(CompositeEstimatorSet *eth)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recordBlock</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a62a4b52b2c509e26c1d00272dbee33df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ForwardIterator</type>
      <name>putMessage</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>ad47b7364b81345d6ab01423b9b5f38ec</anchor>
      <arglist>(ForwardIterator cur) const </arglist>
    </member>
    <member kind="function">
      <type>ForwardIterator</type>
      <name>getMessage</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>ab8d9da5852579a0ff6bc21a523c345ab</anchor>
      <arglist>(ForwardIterator cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a571580ea7471b01a50ca810c0cb59ebc</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumSteps</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a982e645dec2bb09f78b6860806a514cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>OneOverNumSteps</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>ad2ed768c996662f6813d41d37db2adde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hid_t</type>
      <name>GroupID</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a7530db2991be0d81f3d712b9fcc8370a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>Title</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>aa7b633091e7820b835d04d0d5fc197c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; EstimatorType * &gt;</type>
      <name>Estimators</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a476fcf0001e55b86538a2985ed5b6d7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>map&lt; string, int &gt;</type>
      <name>EstimatorMap</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a80bf6f4b0fc4f6dc7d889feedf22bcd2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::CSEnergyEstimator</name>
    <filename>a00109.html</filename>
    <base>qmcplusplus::ScalarEstimatorBase</base>
    <member kind="enumvalue">
      <type>@</type>
      <name>ENERGY_INDEX</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>afb730582952b7ceec73d7dc9bf7bef39aa7e5ee239c160055cec6a20e82d69307</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ENERGY_SQ_INDEX</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>afb730582952b7ceec73d7dc9bf7bef39a862d78eaa58d359488e4e7c14fb4a8b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WEIGHT_INDEX</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>afb730582952b7ceec73d7dc9bf7bef39afad548571bfb8e5ca727ffbb5832b98b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LE_INDEX</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>afb730582952b7ceec73d7dc9bf7bef39af55b81adda93a65fd434f2eac2f0bbce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CSEnergyEstimator</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a9d8fd0c90b5fae300412abdf0d57c3b7</anchor>
      <arglist>(QMCHamiltonian &amp;h, int hcopy=1)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getUmbrellaWeight</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>ad5caf80d2d92db9c3f2c1b724bf3ebcf</anchor>
      <arglist>(int ipsi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>aff6ffa2df09b0b8eedda63913c358d1c</anchor>
      <arglist>(const Walker_t &amp;awalker, RealType wgt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>ab48e0e301d7d62b927172bcb69bf760d</anchor>
      <arglist>(const MCWalkerConfiguration &amp;W, WalkerIterator first, WalkerIterator last, RealType wgt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add2Record</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a512e832f7c9c13c510a9315410a90a3c</anchor>
      <arglist>(RecordNamedProperty&lt; RealType &gt; &amp;record)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerObservables</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a8c77d1771426e5414fce5acee917b93d</anchor>
      <arglist>(vector&lt; observable_helper * &gt; &amp;h5dec, hid_t gid)</arglist>
    </member>
    <member kind="function">
      <type>ScalarEstimatorBase *</type>
      <name>clone</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>abf039754f95b07e4b3ad4964513a6a38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateDiff</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>ab6f7b0a00d68a89f76fde6d64758245f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumCopies</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a9ee881e0d92ca4c9250efa9784935eaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>FirstHamiltonian</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>ab59846bf744a0676cca9334bbe96cee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>LastHamiltonian</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a25aa07de3106fd7d181e5a8c190895d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>uweights</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a50227464aac151d9c5ed4e076d94b046</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; RealType &gt;</type>
      <name>tmp_data</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a87625a6f37d08a066b4ad0ebde44a8b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; string &gt;</type>
      <name>h_components</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>ae279b3629a8f242cd11112c6381cf933</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::CSPolymerEstimator</name>
    <filename>a00110.html</filename>
    <base>qmcplusplus::PolymerEstimator</base>
    <member kind="function">
      <type></type>
      <name>CSPolymerEstimator</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>ac2ca524711a233cf0062403d4ed56f9c</anchor>
      <arglist>(QMCHamiltonian &amp;h, int hcopy=1, MultiChain *polymer=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CSPolymerEstimator</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a439c2ef88dfa31677bbcd546207a6716</anchor>
      <arglist>(const CSPolymerEstimator &amp;mest)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>ab48e0e301d7d62b927172bcb69bf760d</anchor>
      <arglist>(const MCWalkerConfiguration &amp;W, WalkerIterator first, WalkerIterator last, RealType wgt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add2Record</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a512e832f7c9c13c510a9315410a90a3c</anchor>
      <arglist>(RecordNamedProperty&lt; RealType &gt; &amp;record)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerObservables</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a8c77d1771426e5414fce5acee917b93d</anchor>
      <arglist>(vector&lt; observable_helper * &gt; &amp;h5dec, hid_t gid)</arglist>
    </member>
    <member kind="function">
      <type>ScalarEstimatorBase *</type>
      <name>clone</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a3c43ec6f01d195368aa35f229155e0c0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::DMCEnergyEstimator</name>
    <filename>a00156.html</filename>
    <base>qmcplusplus::ScalarEstimatorBase</base>
    <member kind="enumvalue">
      <type>@</type>
      <name>ENERGY_INDEX</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>afccd240f973cf154952fb917c9209719aa7e5ee239c160055cec6a20e82d69307</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ENERGY_SQ_INDEX</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>afccd240f973cf154952fb917c9209719a862d78eaa58d359488e4e7c14fb4a8b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WALKERSIZE_INDEX</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>afccd240f973cf154952fb917c9209719a38ea2d2bb6646b6d2ef3f566088fd759</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WEIGHT_INDEX</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>afccd240f973cf154952fb917c9209719afad548571bfb8e5ca727ffbb5832b98b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EREF_INDEX</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>afccd240f973cf154952fb917c9209719ae5e1774009469e466754a737cee5cfa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LE_MAX</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>afccd240f973cf154952fb917c9209719af43175eded1e795149e932f82bff58db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DMCEnergyEstimator</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>a8b71aee9f29861c99510e89ae9c1f268</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ScalarEstimatorBase *</type>
      <name>clone</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>a3c43ec6f01d195368aa35f229155e0c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWalkerControl</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>a54a2e262671d04cce75fecfe7f1a23fe</anchor>
      <arglist>(WalkerControlBase *wc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add2Record</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>a002a01366ce3571f06f16d86f5f8f5f0</anchor>
      <arglist>(RecordListType &amp;record, BufferType &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>aff6ffa2df09b0b8eedda63913c358d1c</anchor>
      <arglist>(const Walker_t &amp;awalker, RealType wgt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>a6621de065c77f40db33fb79953bbee4c</anchor>
      <arglist>(ParticleSet &amp;P, MCWalkerConfiguration::Walker_t &amp;awalker)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>af1e267dbef0a90e7fd122c43d52ea58e</anchor>
      <arglist>(WalkerIterator first, WalkerIterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>report</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>abfa2ea2ae077dfde849a7bac9a3917a1</anchor>
      <arglist>(RecordListType &amp;record, RealType wgtinv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>report</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>ac73db75c642aa4e0a5aa237330fb6af6</anchor>
      <arglist>(RecordListType &amp;record, RealType wgtinv, BufferType &amp;msg)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>accumulate</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a9dc2ae423e150d8ee62a850dc8514931</anchor>
      <arglist>(const MCWalkerConfiguration &amp;W, WalkerIterator first, WalkerIterator last, RealType wgt)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>registerObservables</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a2d65dcd1c20590a15c9779f6c625fc49</anchor>
      <arglist>(vector&lt; observable_helper * &gt; &amp;h5dec, hid_t gid)=0</arglist>
    </member>
    <member kind="variable">
      <type>WalkerControlBase *</type>
      <name>walkerControl</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>abcc9a5c86f39fe4bbdfdd57c919d7970</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::EstimatorManager</name>
    <filename>a00211.html</filename>
    <base>qmcplusplus::QMCTraits</base>
    <member kind="typedef">
      <type>ScalarEstimatorBase</type>
      <name>EstimatorType</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a4f1dd0afd1219e0c4b1ed9afd418f29d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>vector&lt; RealType &gt;</type>
      <name>BufferType</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a209490b8f45480e1e3a8be53bd55e836</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EstimatorManager</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a03b486e813768883abc56ef37c607774</anchor>
      <arglist>(Communicate *c=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EstimatorManager</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a29ddaa1819367bf4a0ff190bb5e3ea8f</anchor>
      <arglist>(EstimatorManager &amp;em)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EstimatorManager</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a92746bdf80eecd202a1e0ee127146c82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCommunicator</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a633f341af95ca58fda893c606d5e94d4</anchor>
      <arglist>(Communicate *c)</arglist>
    </member>
    <member kind="function">
      <type>Communicate *</type>
      <name>getCommunicator</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>adaa1901259ce880ca2ee37664ed496f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_manager</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a7c911a20aeef19fe3d245ca9b1884c92</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>ab8e4e3e2a7bf18888b71bdf9dda0770b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addProperty</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a98e95da74e0ab3e25bde6b8bcb36c8a0</anchor>
      <arglist>(const char *aname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProperty</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a0971ef954319c26b5c1c0cfb2df67a55</anchor>
      <arglist>(int i, RealType v)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getProperty</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a9f41044ba7e93c0f4347f79b09e48cc3</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addObservable</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a6e9a21e2ccfc508a985e5ec94b557236</anchor>
      <arglist>(const char *aname)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getObservable</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a0215d75dc2340a009cd1f25478a94c93</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getData</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>adf90c1464ca70f342f78674716ec75e7</anchor>
      <arglist>(int i, vector&lt; RealType &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>add</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a82181296d8d4271889f95b042a120263</anchor>
      <arglist>(EstimatorType *newestimator, const string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>add</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a4ba4be400a22c3a8a378a57dc3dd2b96</anchor>
      <arglist>(EstimatorType *newestimator)</arglist>
    </member>
    <member kind="function">
      <type>EstimatorType *</type>
      <name>getEstimator</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a1799a38f18249689dcf4e7017b437f36</anchor>
      <arglist>(const string &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>EstimatorType *</type>
      <name>getMainEstimator</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>ab2388f0fc5b1d618acbf301a95a47abb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>average</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a8d06cc511f5e8dbf97d4db15e5201468</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>variance</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>ac97115fadbc474f51065466cc77c3535</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCollectionMode</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a3e456c08e20996afb40551a76e5e3ecf</anchor>
      <arglist>(bool collect)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>ad35b0f243ab7443d01946056f37e872a</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, QMCHamiltonian &amp;H, xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a32dfadd06736ad4a3fa44d2a20cf4015</anchor>
      <arglist>(ParticleSet &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>abe1d95820cdf72e939bcba4bbb03ef63</anchor>
      <arglist>(int blocks, bool record=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a8c528baf37154d347366083f0f816846</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>ae49bd83dd02df49cbe93adb7a55ba451</anchor>
      <arglist>(const vector&lt; EstimatorManager * &gt; m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startBlock</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a1f4809822b1e48094faa72ace7ce60dc</anchor>
      <arglist>(int steps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfBlocks</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a2d3559137ef9b91efc0bdec0474f7e50</anchor>
      <arglist>(int blocks)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopBlock</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>ab4c5cc69b58865028b9b37e8976c5c93</anchor>
      <arglist>(RealType accept, bool collectall=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopBlock</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a69d21dfc1a4672b4024307aa0234819c</anchor>
      <arglist>(const vector&lt; EstimatorManager * &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a5f2e5ab9681c066ef02040ae0366645b</anchor>
      <arglist>(MCWalkerConfiguration &amp;W)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a3d81c04548b0bc8a670f6b585abda46a</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, MCWalkerConfiguration::iterator it, MCWalkerConfiguration::iterator it_end)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>MainEstimatorName</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>aa60af2129e78e4ce7ae253afa8128182</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>RootName</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a3337692d087de9102336f530906b4bbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; RealType, 4 &gt;</type>
      <name>RefEnergy</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a0fa4533840c11bb04b20dcabff4f6f74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ScalarEstimatorBase *</type>
      <name>MainEstimator</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a40ef0f8ddacd0c5dcfbf35e61d9ae52c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CollectablesEstimator *</type>
      <name>Collectables</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a86df85a7277ff51dccb5e00fcd553efe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ScalarEstimatorBase::accumulator_type</type>
      <name>energyAccumulator</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a000824408e1c2fcf0fd7d9c7f6b98c17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ScalarEstimatorBase::accumulator_type</type>
      <name>varAccumulator</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>aeac0a32e8e470aa241bcc053edebee14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; RealType &gt;</type>
      <name>AverageCache</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a157c45ea7f06746d85f1dc6bf0b87cbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; RealType &gt;</type>
      <name>SquaredAverageCache</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a31579d7155eab6adb351f4c43d721785</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; RealType &gt;</type>
      <name>PropertyCache</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>acbccca6b964f4a510e60efbc702ddcd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RecordNamedProperty&lt; RealType &gt;</type>
      <name>BlockAverages</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>af14ecd8801066794f60fbc3f13055bd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RecordNamedProperty&lt; RealType &gt;</type>
      <name>BlockProperties</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a65503219a504930a6c89bc15b3c2801c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RecordNamedProperty&lt; RealType &gt;</type>
      <name>TotalAverages</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a817314ea19d3cc4aa305f2caae7d440f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; RealType &gt;</type>
      <name>TotalAveragesData</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>ab4a49f8fef117ad06833004a1cca5615</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>Block2Total</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>aa4c284b81ce32b7f13959f6df42b3a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; string, int &gt;</type>
      <name>EstimatorMap</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a2e68d90099b960d625fcb9dca01b2ca0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; EstimatorType * &gt;</type>
      <name>Estimators</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a476fcf0001e55b86538a2985ed5b6d7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; observable_helper * &gt;</type>
      <name>h5desc</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a33d05a416f0a8207404a2642087e7ef0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Timer</type>
      <name>MyTimer</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a8bb4d09e41689cbc531ccc22b92aa8dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>collectBlockAverages</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>ae71e0537d5cb93f9844f7040695d7086</anchor>
      <arglist>(int num_threads)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>addHeader</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>ae13fb4a2bff0753221c1e8c6be94ad0f</anchor>
      <arglist>(ostream &amp;o)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>max4ascii</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>ab79b92526ec1e701cfbcfb246b0c4eec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>pendingRequests</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a004450b744a5b49e55c6a361c511dbd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; BufferType * &gt;</type>
      <name>RemoteData</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>ad7c917c1e587f3540fad97a1b7f552f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; Communicate::request &gt;</type>
      <name>myRequest</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a39c978bd68fd1e9fcefdb5fb3cb10d2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>FieldWidth</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>af13ad65ce54483759b0d1518b8db6626</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::ForwardWalkingEstimator</name>
    <filename>a00230.html</filename>
    <base>qmcplusplus::ScalarEstimatorBase</base>
    <member kind="function">
      <type></type>
      <name>ForwardWalkingEstimator</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>a63f5b1778f14c49b8acfa4a6875195a9</anchor>
      <arglist>(QMCHamiltonian &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>aff6ffa2df09b0b8eedda63913c358d1c</anchor>
      <arglist>(const Walker_t &amp;awalker, RealType wgt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate_fw</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>a6017f6a2c904375eb03aaf6882083899</anchor>
      <arglist>(HDF5_FW_observables &amp;OBS, HDF5_FW_weights &amp;WGTS, vector&lt; int &gt; &amp;Dims)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>ab48e0e301d7d62b927172bcb69bf760d</anchor>
      <arglist>(const MCWalkerConfiguration &amp;W, WalkerIterator first, WalkerIterator last, RealType wgt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add2Record</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>a8b8411fe44760ea665b56fb817b5ec96</anchor>
      <arglist>(RecordListType &amp;record)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerObservables</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>a8c77d1771426e5414fce5acee917b93d</anchor>
      <arglist>(vector&lt; observable_helper * &gt; &amp;h5dec, hid_t gid)</arglist>
    </member>
    <member kind="function">
      <type>ScalarEstimatorBase *</type>
      <name>clone</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>a3c43ec6f01d195368aa35f229155e0c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <type>@</type>
      <name>ENERGY_INDEX</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>aedcf2109f459315e1a7f2af73ec9b603aa7e5ee239c160055cec6a20e82d69307</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <type>@</type>
      <name>POTENTIAL_INDEX</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>aedcf2109f459315e1a7f2af73ec9b603a18199c5b4124b7cb2787495c97ce9459</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <type>@</type>
      <name>LE_MAX</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>aedcf2109f459315e1a7f2af73ec9b603af43175eded1e795149e932f82bff58db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>FirstHamiltonian</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>ab59846bf744a0676cca9334bbe96cee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>SizeOfHamiltonians</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>ab9b61be4bacb6ccae95c88a8a129efbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const QMCHamiltonian &amp;</type>
      <name>refH</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>a86172325241001097c97c66ce76df626</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HFDHE2PolymerEstimator</name>
    <filename>a00307.html</filename>
    <base>qmcplusplus::PolymerEstimator</base>
    <member kind="function">
      <type></type>
      <name>HFDHE2PolymerEstimator</name>
      <anchorfile>a00307.html</anchorfile>
      <anchor>af61489c003431eae2b763fba9b103ee9</anchor>
      <arglist>(QMCHamiltonian &amp;h, int hcopy=1, MultiChain *polymer=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HFDHE2PolymerEstimator</name>
      <anchorfile>a00307.html</anchorfile>
      <anchor>aa169a0cfa4f2b7835ce6dae7706fbf13</anchor>
      <arglist>(const HFDHE2PolymerEstimator &amp;mest)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setpNorm</name>
      <anchorfile>a00307.html</anchorfile>
      <anchor>a84eff9c82164386174ebc4fbf5352e83</anchor>
      <arglist>(RealType pn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>settruncLength</name>
      <anchorfile>a00307.html</anchorfile>
      <anchor>a7dd936a7751fbf8193c6624796e12093</anchor>
      <arglist>(int pn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setrLen</name>
      <anchorfile>a00307.html</anchorfile>
      <anchor>acd3a2b6cf274dfadc1486ee321f60ae7</anchor>
      <arglist>(int pn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>a00307.html</anchorfile>
      <anchor>ab48e0e301d7d62b927172bcb69bf760d</anchor>
      <arglist>(const MCWalkerConfiguration &amp;W, WalkerIterator first, WalkerIterator last, RealType wgt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add2Record</name>
      <anchorfile>a00307.html</anchorfile>
      <anchor>a512e832f7c9c13c510a9315410a90a3c</anchor>
      <arglist>(RecordNamedProperty&lt; RealType &gt; &amp;record)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerObservables</name>
      <anchorfile>a00307.html</anchorfile>
      <anchor>a8c77d1771426e5414fce5acee917b93d</anchor>
      <arglist>(vector&lt; observable_helper * &gt; &amp;h5dec, hid_t gid)</arglist>
    </member>
    <member kind="function">
      <type>ScalarEstimatorBase *</type>
      <name>clone</name>
      <anchorfile>a00307.html</anchorfile>
      <anchor>a3c43ec6f01d195368aa35f229155e0c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; string &gt;</type>
      <name>elocal_name</name>
      <anchorfile>a00307.html</anchorfile>
      <anchor>a010a903abef2dd4b07e8551763060399</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; RealType &gt;</type>
      <name>ObsCont</name>
      <anchorfile>a00307.html</anchorfile>
      <anchor>ab41818e1fd95c29334c0c914653daa9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; RealType &gt;</type>
      <name>ObsContAvg</name>
      <anchorfile>a00307.html</anchorfile>
      <anchor>ada62a3cc1433c29b84d485f279c198a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; RealType &gt;</type>
      <name>ObsCont2</name>
      <anchorfile>a00307.html</anchorfile>
      <anchor>a4b8bb62e3deacc56f8cae70f8c209238</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; RealType &gt;</type>
      <name>ObsContAvg2</name>
      <anchorfile>a00307.html</anchorfile>
      <anchor>a11ca38b7ffeefd6130ecffe88766d255</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>FirstHamiltonian</name>
      <anchorfile>a00307.html</anchorfile>
      <anchor>ab59846bf744a0676cca9334bbe96cee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>SizeOfHamiltonians</name>
      <anchorfile>a00307.html</anchorfile>
      <anchor>ab9b61be4bacb6ccae95c88a8a129efbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>KEconst</name>
      <anchorfile>a00307.html</anchorfile>
      <anchor>a95d276bbbe83d4af6c26dd744d0ec568</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>pNorm</name>
      <anchorfile>a00307.html</anchorfile>
      <anchor>ac73c27d8d82e8c45546ecf222dc870af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>ObsEvals</name>
      <anchorfile>a00307.html</anchorfile>
      <anchor>a004b6cfcb266b66342870d36d1fa0c50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>HDFHE2index</name>
      <anchorfile>a00307.html</anchorfile>
      <anchor>a86d059a19d3f600f270d6bca31e4e3a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>Pindex</name>
      <anchorfile>a00307.html</anchorfile>
      <anchor>abc81a4f546e2d508059db21d83ef6c49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>truncLength</name>
      <anchorfile>a00307.html</anchorfile>
      <anchor>a1c413a39c6d44ba754dfec08fe598834</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HFPolymerEstimator</name>
    <filename>a00308.html</filename>
    <base>qmcplusplus::PolymerEstimator</base>
    <member kind="function">
      <type></type>
      <name>HFPolymerEstimator</name>
      <anchorfile>a00308.html</anchorfile>
      <anchor>a2a2f579689a7a1b9b7532f73a03e7557</anchor>
      <arglist>(QMCHamiltonian &amp;h, int hcopy=1, MultiChain *polymer=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HFPolymerEstimator</name>
      <anchorfile>a00308.html</anchorfile>
      <anchor>a5b4f63a777f47422f0966bdc75b34a57</anchor>
      <arglist>(const HFPolymerEstimator &amp;mest)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setpNorm</name>
      <anchorfile>a00308.html</anchorfile>
      <anchor>a84eff9c82164386174ebc4fbf5352e83</anchor>
      <arglist>(RealType pn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize_HF</name>
      <anchorfile>a00308.html</anchorfile>
      <anchor>a43d14bea7b5689c064bef7e1e53084b1</anchor>
      <arglist>(int pn, int nH)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_HF_Observables</name>
      <anchorfile>a00308.html</anchorfile>
      <anchor>a033395dd16ccc178a6d4004b39d24146</anchor>
      <arglist>(int nchains, int strd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateDiff</name>
      <anchorfile>a00308.html</anchorfile>
      <anchor>ab6f7b0a00d68a89f76fde6d64758245f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>a00308.html</anchorfile>
      <anchor>ab48e0e301d7d62b927172bcb69bf760d</anchor>
      <arglist>(const MCWalkerConfiguration &amp;W, WalkerIterator first, WalkerIterator last, RealType wgt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add2Record</name>
      <anchorfile>a00308.html</anchorfile>
      <anchor>a512e832f7c9c13c510a9315410a90a3c</anchor>
      <arglist>(RecordNamedProperty&lt; RealType &gt; &amp;record)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerObservables</name>
      <anchorfile>a00308.html</anchorfile>
      <anchor>a8c77d1771426e5414fce5acee917b93d</anchor>
      <arglist>(vector&lt; observable_helper * &gt; &amp;h5dec, hid_t gid)</arglist>
    </member>
    <member kind="function">
      <type>ScalarEstimatorBase *</type>
      <name>clone</name>
      <anchorfile>a00308.html</anchorfile>
      <anchor>a3c43ec6f01d195368aa35f229155e0c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; string &gt;</type>
      <name>elocal_name</name>
      <anchorfile>a00308.html</anchorfile>
      <anchor>a010a903abef2dd4b07e8551763060399</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>FirstHamiltonian</name>
      <anchorfile>a00308.html</anchorfile>
      <anchor>ab59846bf744a0676cca9334bbe96cee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>SizeOfHamiltonians</name>
      <anchorfile>a00308.html</anchorfile>
      <anchor>ab9b61be4bacb6ccae95c88a8a129efbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>stride</name>
      <anchorfile>a00308.html</anchorfile>
      <anchor>a08f66a6870d87afcd5dc1b60d1019692</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nobs</name>
      <anchorfile>a00308.html</anchorfile>
      <anchor>a10fef236583b541ee44c30dbf1be1d64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nbds</name>
      <anchorfile>a00308.html</anchorfile>
      <anchor>ab1d1854801d8aae888a691319b08474e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>KEconst</name>
      <anchorfile>a00308.html</anchorfile>
      <anchor>a95d276bbbe83d4af6c26dd744d0ec568</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>pNorm</name>
      <anchorfile>a00308.html</anchorfile>
      <anchor>ac73c27d8d82e8c45546ecf222dc870af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; RealType &gt;</type>
      <name>ObsSumL</name>
      <anchorfile>a00308.html</anchorfile>
      <anchor>a8293238645c95f8b939f1349139762e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; RealType &gt;</type>
      <name>ObsSumR</name>
      <anchorfile>a00308.html</anchorfile>
      <anchor>aa18163791523dee8b148aa3116140eb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>QMCHamiltonian &amp;</type>
      <name>H</name>
      <anchorfile>a00308.html</anchorfile>
      <anchor>a20f9366b9f2826911ca89ebaa012c0d4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::LocalEnergyEstimator</name>
    <filename>a00350.html</filename>
    <base>qmcplusplus::ScalarEstimatorBase</base>
    <member kind="function">
      <type></type>
      <name>LocalEnergyEstimator</name>
      <anchorfile>a00350.html</anchorfile>
      <anchor>ad88705731ed2bc81d1154c054f7061fc</anchor>
      <arglist>(QMCHamiltonian &amp;h, bool use_hdf5)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>a00350.html</anchorfile>
      <anchor>aff6ffa2df09b0b8eedda63913c358d1c</anchor>
      <arglist>(const Walker_t &amp;awalker, RealType wgt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>a00350.html</anchorfile>
      <anchor>ab48e0e301d7d62b927172bcb69bf760d</anchor>
      <arglist>(const MCWalkerConfiguration &amp;W, WalkerIterator first, WalkerIterator last, RealType wgt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add2Record</name>
      <anchorfile>a00350.html</anchorfile>
      <anchor>a8b8411fe44760ea665b56fb817b5ec96</anchor>
      <arglist>(RecordListType &amp;record)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerObservables</name>
      <anchorfile>a00350.html</anchorfile>
      <anchor>ac29686816f38cbcf3400aeb60dc4fbaf</anchor>
      <arglist>(vector&lt; observable_helper * &gt; &amp;h5desc, hid_t gid)</arglist>
    </member>
    <member kind="function">
      <type>ScalarEstimatorBase *</type>
      <name>clone</name>
      <anchorfile>a00350.html</anchorfile>
      <anchor>abf039754f95b07e4b3ad4964513a6a38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <type>@</type>
      <name>ENERGY_INDEX</name>
      <anchorfile>a00350.html</anchorfile>
      <anchor>a900dca9b26de42491763226e12dcd47baa7e5ee239c160055cec6a20e82d69307</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <type>@</type>
      <name>ENERGY2_INDEX</name>
      <anchorfile>a00350.html</anchorfile>
      <anchor>a900dca9b26de42491763226e12dcd47bab52c54071ca284defb38e2420f71481f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <type>@</type>
      <name>POTENTIAL_INDEX</name>
      <anchorfile>a00350.html</anchorfile>
      <anchor>a900dca9b26de42491763226e12dcd47ba18199c5b4124b7cb2787495c97ce9459</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <type>@</type>
      <name>LE_MAX</name>
      <anchorfile>a00350.html</anchorfile>
      <anchor>a900dca9b26de42491763226e12dcd47baf43175eded1e795149e932f82bff58db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>FirstHamiltonian</name>
      <anchorfile>a00350.html</anchorfile>
      <anchor>ab59846bf744a0676cca9334bbe96cee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>SizeOfHamiltonians</name>
      <anchorfile>a00350.html</anchorfile>
      <anchor>ab9b61be4bacb6ccae95c88a8a129efbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>UseHDF5</name>
      <anchorfile>a00350.html</anchorfile>
      <anchor>a6320b626d25b28b804535a5576f1f5ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const QMCHamiltonian &amp;</type>
      <name>refH</name>
      <anchorfile>a00350.html</anchorfile>
      <anchor>a86172325241001097c97c66ce76df626</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::LocalEnergyEstimatorHDF</name>
    <filename>a00351.html</filename>
    <base>qmcplusplus::ScalarEstimatorBase</base>
    <member kind="function">
      <type></type>
      <name>LocalEnergyEstimatorHDF</name>
      <anchorfile>a00351.html</anchorfile>
      <anchor>a805e53b8fdd31c81e92060e378cfa85f</anchor>
      <arglist>(QMCHamiltonian &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>a00351.html</anchorfile>
      <anchor>aff6ffa2df09b0b8eedda63913c358d1c</anchor>
      <arglist>(const Walker_t &amp;awalker, RealType wgt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>a00351.html</anchorfile>
      <anchor>ab48e0e301d7d62b927172bcb69bf760d</anchor>
      <arglist>(const MCWalkerConfiguration &amp;W, WalkerIterator first, WalkerIterator last, RealType wgt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add2Record</name>
      <anchorfile>a00351.html</anchorfile>
      <anchor>a8b8411fe44760ea665b56fb817b5ec96</anchor>
      <arglist>(RecordListType &amp;record)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerObservables</name>
      <anchorfile>a00351.html</anchorfile>
      <anchor>a8c77d1771426e5414fce5acee917b93d</anchor>
      <arglist>(vector&lt; observable_helper * &gt; &amp;h5dec, hid_t gid)</arglist>
    </member>
    <member kind="function">
      <type>ScalarEstimatorBase *</type>
      <name>clone</name>
      <anchorfile>a00351.html</anchorfile>
      <anchor>abf039754f95b07e4b3ad4964513a6a38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <type>@</type>
      <name>ENERGY_INDEX</name>
      <anchorfile>a00351.html</anchorfile>
      <anchor>a1be3860693af99a6c1da72580097294caa7e5ee239c160055cec6a20e82d69307</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <type>@</type>
      <name>POTENTIAL_INDEX</name>
      <anchorfile>a00351.html</anchorfile>
      <anchor>a1be3860693af99a6c1da72580097294ca18199c5b4124b7cb2787495c97ce9459</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <type>@</type>
      <name>LE_MAX</name>
      <anchorfile>a00351.html</anchorfile>
      <anchor>a1be3860693af99a6c1da72580097294caf43175eded1e795149e932f82bff58db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>FirstHamiltonian</name>
      <anchorfile>a00351.html</anchorfile>
      <anchor>ab59846bf744a0676cca9334bbe96cee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>SizeOfHamiltonians</name>
      <anchorfile>a00351.html</anchorfile>
      <anchor>ab9b61be4bacb6ccae95c88a8a129efbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const QMCHamiltonian &amp;</type>
      <name>refH</name>
      <anchorfile>a00351.html</anchorfile>
      <anchor>a86172325241001097c97c66ce76df626</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::LocalEnergyOnlyEstimator</name>
    <filename>a00352.html</filename>
    <base>qmcplusplus::ScalarEstimatorBase</base>
    <member kind="function">
      <type></type>
      <name>LocalEnergyOnlyEstimator</name>
      <anchorfile>a00352.html</anchorfile>
      <anchor>ae0f87a7ddcb13f7c88014557f64231b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>a00352.html</anchorfile>
      <anchor>ab48e0e301d7d62b927172bcb69bf760d</anchor>
      <arglist>(const MCWalkerConfiguration &amp;W, WalkerIterator first, WalkerIterator last, RealType wgt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerObservables</name>
      <anchorfile>a00352.html</anchorfile>
      <anchor>a8c77d1771426e5414fce5acee917b93d</anchor>
      <arglist>(vector&lt; observable_helper * &gt; &amp;h5dec, hid_t gid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add2Record</name>
      <anchorfile>a00352.html</anchorfile>
      <anchor>a8b8411fe44760ea665b56fb817b5ec96</anchor>
      <arglist>(RecordListType &amp;record)</arglist>
    </member>
    <member kind="function">
      <type>ScalarEstimatorBase *</type>
      <name>clone</name>
      <anchorfile>a00352.html</anchorfile>
      <anchor>a3c43ec6f01d195368aa35f229155e0c0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::MJPolymerEstimator</name>
    <filename>a00379.html</filename>
    <base>qmcplusplus::PolymerEstimator</base>
    <member kind="function">
      <type></type>
      <name>MJPolymerEstimator</name>
      <anchorfile>a00379.html</anchorfile>
      <anchor>a42c14b92777aac46c6b74393e6ab80b1</anchor>
      <arglist>(QMCHamiltonian &amp;h, int hcopy=1, MultiChain *polymer=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MJPolymerEstimator</name>
      <anchorfile>a00379.html</anchorfile>
      <anchor>a2bd5d069a954050ab4df1c001466a953</anchor>
      <arglist>(const MJPolymerEstimator &amp;mest)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setpNorm</name>
      <anchorfile>a00379.html</anchorfile>
      <anchor>a84eff9c82164386174ebc4fbf5352e83</anchor>
      <arglist>(RealType pn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setrLen</name>
      <anchorfile>a00379.html</anchorfile>
      <anchor>acd3a2b6cf274dfadc1486ee321f60ae7</anchor>
      <arglist>(int pn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateDiff</name>
      <anchorfile>a00379.html</anchorfile>
      <anchor>ab6f7b0a00d68a89f76fde6d64758245f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>a00379.html</anchorfile>
      <anchor>ab48e0e301d7d62b927172bcb69bf760d</anchor>
      <arglist>(const MCWalkerConfiguration &amp;W, WalkerIterator first, WalkerIterator last, RealType wgt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add2Record</name>
      <anchorfile>a00379.html</anchorfile>
      <anchor>a512e832f7c9c13c510a9315410a90a3c</anchor>
      <arglist>(RecordNamedProperty&lt; RealType &gt; &amp;record)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerObservables</name>
      <anchorfile>a00379.html</anchorfile>
      <anchor>a8c77d1771426e5414fce5acee917b93d</anchor>
      <arglist>(vector&lt; observable_helper * &gt; &amp;h5dec, hid_t gid)</arglist>
    </member>
    <member kind="function">
      <type>ScalarEstimatorBase *</type>
      <name>clone</name>
      <anchorfile>a00379.html</anchorfile>
      <anchor>a3c43ec6f01d195368aa35f229155e0c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; string &gt;</type>
      <name>elocal_name</name>
      <anchorfile>a00379.html</anchorfile>
      <anchor>a010a903abef2dd4b07e8551763060399</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>FirstHamiltonian</name>
      <anchorfile>a00379.html</anchorfile>
      <anchor>ab59846bf744a0676cca9334bbe96cee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>SizeOfHamiltonians</name>
      <anchorfile>a00379.html</anchorfile>
      <anchor>ab9b61be4bacb6ccae95c88a8a129efbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; int &gt;</type>
      <name>truncLength</name>
      <anchorfile>a00379.html</anchorfile>
      <anchor>ae3cbde2e7474cb225ccb9df6f73e668c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>Findex</name>
      <anchorfile>a00379.html</anchorfile>
      <anchor>a9e1aa7ff48e852bc72552b9336554a1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>KEconst</name>
      <anchorfile>a00379.html</anchorfile>
      <anchor>a95d276bbbe83d4af6c26dd744d0ec568</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>pNorm</name>
      <anchorfile>a00379.html</anchorfile>
      <anchor>ac73c27d8d82e8c45546ecf222dc870af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>ObsEvals</name>
      <anchorfile>a00379.html</anchorfile>
      <anchor>a004b6cfcb266b66342870d36d1fa0c50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; RealType &gt;</type>
      <name>ObsCont</name>
      <anchorfile>a00379.html</anchorfile>
      <anchor>ab41818e1fd95c29334c0c914653daa9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; RealType &gt;</type>
      <name>ObsContAvg</name>
      <anchorfile>a00379.html</anchorfile>
      <anchor>ada62a3cc1433c29b84d485f279c198a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; RealType &gt;</type>
      <name>ObsCont2</name>
      <anchorfile>a00379.html</anchorfile>
      <anchor>a4b8bb62e3deacc56f8cae70f8c209238</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; RealType &gt;</type>
      <name>ObsContAvg2</name>
      <anchorfile>a00379.html</anchorfile>
      <anchor>a11ca38b7ffeefd6130ecffe88766d255</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::MultipleEnergyEstimator</name>
    <filename>a00403.html</filename>
    <base>qmcplusplus::ScalarEstimatorBase</base>
    <member kind="enumvalue">
      <type>@</type>
      <name>ENERGY_INDEX</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>ac9420823bfeba78fce625fc105e3b01daa7e5ee239c160055cec6a20e82d69307</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ENERGY_SQ_INDEX</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>ac9420823bfeba78fce625fc105e3b01da862d78eaa58d359488e4e7c14fb4a8b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WEIGHT_INDEX</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>ac9420823bfeba78fce625fc105e3b01dafad548571bfb8e5ca727ffbb5832b98b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PE_INDEX</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>ac9420823bfeba78fce625fc105e3b01da41b60484d4bcaccdc9444330d7a80bad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KE_INDEX</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>ac9420823bfeba78fce625fc105e3b01da8c6f424506fb606abebf288215fe9b83</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LE_INDEX</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>ac9420823bfeba78fce625fc105e3b01daf55b81adda93a65fd434f2eac2f0bbce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultipleEnergyEstimator</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>a662463034ef7299c9a6d51a76749234a</anchor>
      <arglist>(QMCHamiltonian &amp;h, int hcopy=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultipleEnergyEstimator</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>aa5b177668b6480b59d7bd4dc708f389c</anchor>
      <arglist>(const MultipleEnergyEstimator &amp;mest)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getUmbrellaWeight</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>ad5caf80d2d92db9c3f2c1b724bf3ebcf</anchor>
      <arglist>(int ipsi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>aff6ffa2df09b0b8eedda63913c358d1c</anchor>
      <arglist>(const Walker_t &amp;awalker, RealType wgt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>ab48e0e301d7d62b927172bcb69bf760d</anchor>
      <arglist>(const MCWalkerConfiguration &amp;W, WalkerIterator first, WalkerIterator last, RealType wgt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add2Record</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>a512e832f7c9c13c510a9315410a90a3c</anchor>
      <arglist>(RecordNamedProperty&lt; RealType &gt; &amp;record)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerObservables</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>a8c77d1771426e5414fce5acee917b93d</anchor>
      <arglist>(vector&lt; observable_helper * &gt; &amp;h5dec, hid_t gid)</arglist>
    </member>
    <member kind="function">
      <type>ScalarEstimatorBase *</type>
      <name>clone</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>abf039754f95b07e4b3ad4964513a6a38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>a2e2703d7263dfdc51504de446825fffb</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, vector&lt; QMCHamiltonian * &gt; &amp;h, vector&lt; TrialWaveFunction * &gt; &amp;psi, RealType tau, vector&lt; RealType &gt; &amp;Norm, bool require_register=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>a0c58b99104de05f5f04d66a5df773b21</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, vector&lt; ParticleSet * &gt; &amp;WW, SpaceWarp &amp;Warp, vector&lt; QMCHamiltonian * &gt; &amp;h, vector&lt; TrialWaveFunction * &gt; &amp;psi, RealType tau, vector&lt; RealType &gt; &amp;Norm, bool require_register=false)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>CurrentWalker</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>aea58c7a791549e179f0b7b529db2557d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumWalkers</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>ad7dd761920842f8b573ceb555902a329</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>FirstColumnIndex</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>aefbfacce8dc81581a911b8f37c267bce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>FirstHamiltonian</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>ab59846bf744a0676cca9334bbe96cee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumCopies</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>a9ee881e0d92ca4c9250efa9784935eaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumOperators</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>a8ed7ccca5b185a09c71d10d65ec4e579</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; RealType &gt;</type>
      <name>RatioIJ</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>a15d274e54185d17e12ba5f2555e50f65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; RealType &gt;</type>
      <name>esum</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>a9af6ebde64f5962c8fe1acca6343560e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; RealType &gt;</type>
      <name>elocal</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>ad9767669cd501411e5135a43ee6edc33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; string &gt;</type>
      <name>esum_name</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>af4ae6956c96a9a07118af10db9f8e382</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; string &gt;</type>
      <name>elocal_name</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>aa713e6c74dfa903df292f4592f19993d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; string &gt;</type>
      <name>ediff_name</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>acf0b361a40797a49631e62440b30f4f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::PolarizationEstimator</name>
    <filename>a00467.html</filename>
    <templarg></templarg>
    <base>ScalarEstimatorBase&lt; T &gt;</base>
    <member kind="typedef">
      <type>ScalarEstimatorBase&lt; T &gt;::Walker_t</type>
      <name>Walker_t</name>
      <anchorfile>a00467.html</anchorfile>
      <anchor>a3523ff21e5ea2a7cb45c00a6ea129f9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarEstimatorBase&lt; T &gt;::WalkerIterator</type>
      <name>WalkerIterator</name>
      <anchorfile>a00467.html</anchorfile>
      <anchor>a7e312fd9f453944a9fe43ebab26e0758</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>accumulator_set&lt; RealType &gt;</type>
      <name>accumulator_type</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a547dbf97fd59fd2564cb5e2bbf623476</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MCWalkerConfiguration::Walker_t</type>
      <name>Walker_t</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>ac075f56c393d5ec9a998ec36c58ad7d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MCWalkerConfiguration::const_iterator</type>
      <name>WalkerIterator</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a7d83e2e9c811d5f4d009d357f11a178b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RecordNamedProperty&lt; RealType &gt;</type>
      <name>RecordListType</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>ade1d66f280e6b2cbbd501c41a123556e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolarizationEstimator</name>
      <anchorfile>a00467.html</anchorfile>
      <anchor>ab443b6579c4495ff08ca88de2b544ece</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add2Record</name>
      <anchorfile>a00467.html</anchorfile>
      <anchor>a046a15bd63d690da411356d2716b5e12</anchor>
      <arglist>(RecordNamedProperty&lt; T &gt; &amp;record, BufferType &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>a00467.html</anchorfile>
      <anchor>abbe700528cf82fd15a4445cf1f7dab18</anchor>
      <arglist>(const Walker_t &amp;awalker, T wgt, BufferType &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>a00467.html</anchorfile>
      <anchor>ab03f8790008db8d2b667b52282e207e9</anchor>
      <arglist>(const MCWalkerConfiguration &amp;W, WalkerIterator first, WalkerIterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00467.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>report</name>
      <anchorfile>a00467.html</anchorfile>
      <anchor>a6dc4f8074f51886ff82835ef8c00de8e</anchor>
      <arglist>(RecordNamedProperty&lt; T &gt; &amp;record, T wgtinv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarEstimatorBase</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>aa8286ff3ec0fa3cc3ed526ecd1690ea5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ScalarEstimatorBase</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a7506a032662d2449f0968a3ff233b87a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>average</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>acb5dbe1f89d34ce85161148eea025597</anchor>
      <arglist>(int i=0) const </arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>variance</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a47ebf71b455d9f43fb30e51795c4670d</anchor>
      <arglist>(int i=0) const </arglist>
    </member>
    <member kind="function">
      <type>pair&lt; RealType, RealType &gt;</type>
      <name>operator[]</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a1ce3ba7c84ef6914b789ece44f847f74</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>ab8e4e3e2a7bf18888b71bdf9dda0770b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>takeBlockAverage</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>ac0b3f6dd0f173f4d85caeef5f08faa2e</anchor>
      <arglist>(IT first)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>takeBlockAverage</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a23604a7aa362975cbe03b689790c3e67</anchor>
      <arglist>(IT first, IT first_sq)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>accumulate</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a9dc2ae423e150d8ee62a850dc8514931</anchor>
      <arglist>(const MCWalkerConfiguration &amp;W, WalkerIterator first, WalkerIterator last, RealType wgt)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add2Record</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a1a0c7e30a235555d0158cd2c27b40044</anchor>
      <arglist>(RecordNamedProperty&lt; RealType &gt; &amp;record)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>registerObservables</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a2d65dcd1c20590a15c9779f6c625fc49</anchor>
      <arglist>(vector&lt; observable_helper * &gt; &amp;h5dec, hid_t gid)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ScalarEstimatorBase *</type>
      <name>clone</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a49aeaf5d91b9f91bcc3e8f0cd99f4261</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfBlocks</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a6ceee9270d5cbdf2a8c67fa0476ff6e6</anchor>
      <arglist>(int nsamples)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; T &gt;</type>
      <name>z_sum</name>
      <anchorfile>a00467.html</anchorfile>
      <anchor>a86e1ad4a798e0f9c9894bc33c994887b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>pindex_0</name>
      <anchorfile>a00467.html</anchorfile>
      <anchor>a3c08d4171233e8b9482d1af6a5f78304</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>pindex_1</name>
      <anchorfile>a00467.html</anchorfile>
      <anchor>a9086bcd5d1ccb34533028c51d8243854</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>FirstIndex</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>ae4f84e7f9eab061d98f9c4d1422b0ab4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>LastIndex</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a9da0233db61be933269e71059da27b34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; accumulator_type &gt;</type>
      <name>scalars</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a4e13085331b4819bfaedb28720979479</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; accumulator_type &gt;</type>
      <name>scalars_saved</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a477d2379163bee37adae28ea853f0fe4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::PolymerEstimator</name>
    <filename>a00472.html</filename>
    <base>qmcplusplus::ScalarEstimatorBase</base>
    <member kind="function" virtualness="pure">
      <type>virtual ScalarEstimatorBase *</type>
      <name>clone</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>a49aeaf5d91b9f91bcc3e8f0cd99f4261</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::ReleasedNodeEnergyEstimator</name>
    <filename>a00526.html</filename>
    <base>qmcplusplus::ScalarEstimatorBase</base>
    <member kind="function">
      <type></type>
      <name>ReleasedNodeEnergyEstimator</name>
      <anchorfile>a00526.html</anchorfile>
      <anchor>a95b8a6701d738f85dff8ae2f93963e32</anchor>
      <arglist>(QMCHamiltonian &amp;h, int Sm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>a00526.html</anchorfile>
      <anchor>aff6ffa2df09b0b8eedda63913c358d1c</anchor>
      <arglist>(const Walker_t &amp;awalker, RealType wgt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>a00526.html</anchorfile>
      <anchor>ab48e0e301d7d62b927172bcb69bf760d</anchor>
      <arglist>(const MCWalkerConfiguration &amp;W, WalkerIterator first, WalkerIterator last, RealType wgt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add2Record</name>
      <anchorfile>a00526.html</anchorfile>
      <anchor>a8b8411fe44760ea665b56fb817b5ec96</anchor>
      <arglist>(RecordListType &amp;record)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerObservables</name>
      <anchorfile>a00526.html</anchorfile>
      <anchor>a8c77d1771426e5414fce5acee917b93d</anchor>
      <arglist>(vector&lt; observable_helper * &gt; &amp;h5dec, hid_t gid)</arglist>
    </member>
    <member kind="function">
      <type>ScalarEstimatorBase *</type>
      <name>clone</name>
      <anchorfile>a00526.html</anchorfile>
      <anchor>abf039754f95b07e4b3ad4964513a6a38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <type>@</type>
      <name>ENERGY_INDEX</name>
      <anchorfile>a00526.html</anchorfile>
      <anchor>ae6dceca96ec2c7a1b4aa211264a87ef6aa7e5ee239c160055cec6a20e82d69307</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <type>@</type>
      <name>ENERGY2_INDEX</name>
      <anchorfile>a00526.html</anchorfile>
      <anchor>ae6dceca96ec2c7a1b4aa211264a87ef6ab52c54071ca284defb38e2420f71481f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <type>@</type>
      <name>POTENTIAL_INDEX</name>
      <anchorfile>a00526.html</anchorfile>
      <anchor>ae6dceca96ec2c7a1b4aa211264a87ef6a18199c5b4124b7cb2787495c97ce9459</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <type>@</type>
      <name>FE_NOW</name>
      <anchorfile>a00526.html</anchorfile>
      <anchor>ae6dceca96ec2c7a1b4aa211264a87ef6aa42c71798ffe068808847500014c02af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <type>@</type>
      <name>LE_MAX</name>
      <anchorfile>a00526.html</anchorfile>
      <anchor>ae6dceca96ec2c7a1b4aa211264a87ef6af43175eded1e795149e932f82bff58db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>FirstHamiltonian</name>
      <anchorfile>a00526.html</anchorfile>
      <anchor>ab59846bf744a0676cca9334bbe96cee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>SizeOfHamiltonians</name>
      <anchorfile>a00526.html</anchorfile>
      <anchor>ab9b61be4bacb6ccae95c88a8a129efbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const QMCHamiltonian &amp;</type>
      <name>refH</name>
      <anchorfile>a00526.html</anchorfile>
      <anchor>a86172325241001097c97c66ce76df626</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>N_rn</name>
      <anchorfile>a00526.html</anchorfile>
      <anchor>a78646b21d7a0eef666a6b92a0c5307aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>Smax</name>
      <anchorfile>a00526.html</anchorfile>
      <anchor>a90da0a9e2c69f7245852cfc87b302c38</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ReptileCorrelationEstimator</name>
    <filename>a00529.html</filename>
    <base>qmcplusplus::ReptileEstimator</base>
    <member kind="function">
      <type></type>
      <name>ReptileCorrelationEstimator</name>
      <anchorfile>a00529.html</anchorfile>
      <anchor>a64691a0f9bfa1d050706424f5efaf3f6</anchor>
      <arglist>(MultiChain *polymer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ReptileCorrelationEstimator</name>
      <anchorfile>a00529.html</anchorfile>
      <anchor>ab0ff51ddad21411e777bba7c731b5976</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>a00529.html</anchorfile>
      <anchor>af406450d9bac919f658d6ff6b8262d74</anchor>
      <arglist>(xmlNodePtr cur, int Rlength, int SFH)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addNames</name>
      <anchorfile>a00529.html</anchorfile>
      <anchor>a23d7ad731de3becfdeeed7a5bfc37535</anchor>
      <arglist>(vector&lt; string &gt; &amp;names)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00529.html</anchorfile>
      <anchor>ae118008a7200c3a51efe1ed876dfe6cc</anchor>
      <arglist>(MultiChain::iterator first, MultiChain::iterator last, int ipsi)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReptileEstimator</name>
      <anchorfile>a00530.html</anchorfile>
      <anchor>aefbe41dbdc470f57ea28b00dd02b9adc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReptileEstimator</name>
      <anchorfile>a00530.html</anchorfile>
      <anchor>a6e28686fc26b6eca182c4e35a434753f</anchor>
      <arglist>(MultiChain *polymer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ReptileEstimator</name>
      <anchorfile>a00530.html</anchorfile>
      <anchor>a4572f5e5d5576e8202901a4ba4dadfc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValues</name>
      <anchorfile>a00530.html</anchorfile>
      <anchor>a6ba8ccb2396a42796e3f749051669f67</anchor>
      <arglist>(vector&lt; accumulator_type &gt; &amp;data, RealType weight)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>headObservable</name>
      <anchorfile>a00529.html</anchorfile>
      <anchor>a696ac1884e6a70d2e9f77e64a31e76fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>bodyObservable</name>
      <anchorfile>a00529.html</anchorfile>
      <anchor>ac00f106b367dc0a1760b2dbb2eb01116</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>sumObservable</name>
      <anchorfile>a00529.html</anchorfile>
      <anchor>aede31b64a6eab0ee5b9344e455d00aca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>headO</name>
      <anchorfile>a00529.html</anchorfile>
      <anchor>a40086a4ef84f0e87d457152e1b2f9197</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>bodyO</name>
      <anchorfile>a00529.html</anchorfile>
      <anchor>a7427af658fbc1f2220b52a12ea5cacb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>sumO</name>
      <anchorfile>a00529.html</anchorfile>
      <anchor>a2a5373613ed7f8474b16a0878d55a7b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>Npoints</name>
      <anchorfile>a00529.html</anchorfile>
      <anchor>a0e5a14ea9beb346b604aa1ae934d410e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>Rsize</name>
      <anchorfile>a00529.html</anchorfile>
      <anchor>ad94944bcbec8a1667da5f457871f1617</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>FirstHamiltonian</name>
      <anchorfile>a00529.html</anchorfile>
      <anchor>ab59846bf744a0676cca9334bbe96cee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; int &gt;</type>
      <name>outputPoints</name>
      <anchorfile>a00529.html</anchorfile>
      <anchor>ad537b6c8d7ada9b31b46201062c17a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; int &gt;</type>
      <name>outputStride</name>
      <anchorfile>a00529.html</anchorfile>
      <anchor>aeabccf7324e9d946a9484d395565d4fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>accumulator_set&lt; RealType &gt;</type>
      <name>accumulator_type</name>
      <anchorfile>a00530.html</anchorfile>
      <anchor>a547dbf97fd59fd2564cb5e2bbf623476</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>myIndex</name>
      <anchorfile>a00530.html</anchorfile>
      <anchor>a144cfe5f3188584af7abb73a8689d92c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Values</name>
      <anchorfile>a00530.html</anchorfile>
      <anchor>a4e365b09d5582a7dec1c636635aebf91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MultiChain *</type>
      <name>Reptile</name>
      <anchorfile>a00530.html</anchorfile>
      <anchor>ab4898a483ea1b5d235d4a0b1f8cb5cd1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ReptileEstimator</name>
    <filename>a00530.html</filename>
    <base>qmcplusplus::QMCTraits</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluate</name>
      <anchorfile>a00530.html</anchorfile>
      <anchor>a9d3574ae9dc4922213d55c7fa06337a5</anchor>
      <arglist>(MultiChain::iterator first, MultiChain::iterator last, int ipsi)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addNames</name>
      <anchorfile>a00530.html</anchorfile>
      <anchor>a545a173c9dc986b8624a43f0706d7958</anchor>
      <arglist>(vector&lt; string &gt; &amp;names)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ReptileStatistics</name>
    <filename>a00531.html</filename>
    <base>qmcplusplus::ReptileEstimator</base>
    <member kind="function">
      <type></type>
      <name>ReptileStatistics</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>ad530a8533a96b7836a74d58179d66d93</anchor>
      <arglist>(MultiChain *polymer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ReptileStatistics</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>a6532bfb182d3168db6e5445eadc7ca1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>ad3a7a4bbdc4392ba870adc82a2764ef1</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>a548bb4ad5896a9cd551e66649dbd9f12</anchor>
      <arglist>(xmlNodePtr cur, MCWalkerConfiguration &amp;refWalker)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>ae118008a7200c3a51efe1ed876dfe6cc</anchor>
      <arglist>(MultiChain::iterator first, MultiChain::iterator last, int ipsi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addNames</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>a23d7ad731de3becfdeeed7a5bfc37535</anchor>
      <arglist>(vector&lt; string &gt; &amp;names)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValues</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>a226883da48506282fddb85ec5e2b7c01</anchor>
      <arglist>(vector&lt; accumulator_type &gt; &amp;data, RealType weight)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nvals</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>a89f0181266d4eb9875ae2748102899d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::RMCLocalEnergyEstimator</name>
    <filename>a00534.html</filename>
    <base>qmcplusplus::ScalarEstimatorBase</base>
    <member kind="function">
      <type></type>
      <name>RMCLocalEnergyEstimator</name>
      <anchorfile>a00534.html</anchorfile>
      <anchor>a9eea03f7341787bf03b8236146508aef</anchor>
      <arglist>(QMCHamiltonian &amp;h, int nobs=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>a00534.html</anchorfile>
      <anchor>aff6ffa2df09b0b8eedda63913c358d1c</anchor>
      <arglist>(const Walker_t &amp;awalker, RealType wgt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>a00534.html</anchorfile>
      <anchor>ab48e0e301d7d62b927172bcb69bf760d</anchor>
      <arglist>(const MCWalkerConfiguration &amp;W, WalkerIterator first, WalkerIterator last, RealType wgt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add2Record</name>
      <anchorfile>a00534.html</anchorfile>
      <anchor>a8b8411fe44760ea665b56fb817b5ec96</anchor>
      <arglist>(RecordListType &amp;record)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerObservables</name>
      <anchorfile>a00534.html</anchorfile>
      <anchor>a8c77d1771426e5414fce5acee917b93d</anchor>
      <arglist>(vector&lt; observable_helper * &gt; &amp;h5dec, hid_t gid)</arglist>
    </member>
    <member kind="function">
      <type>ScalarEstimatorBase *</type>
      <name>clone</name>
      <anchorfile>a00534.html</anchorfile>
      <anchor>abf039754f95b07e4b3ad4964513a6a38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>FirstHamiltonian</name>
      <anchorfile>a00534.html</anchorfile>
      <anchor>ab59846bf744a0676cca9334bbe96cee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>SizeOfHamiltonians</name>
      <anchorfile>a00534.html</anchorfile>
      <anchor>ab9b61be4bacb6ccae95c88a8a129efbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NObs</name>
      <anchorfile>a00534.html</anchorfile>
      <anchor>a83a5e00637e10ca20c326d13c25cdf30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const QMCHamiltonian &amp;</type>
      <name>refH</name>
      <anchorfile>a00534.html</anchorfile>
      <anchor>a86172325241001097c97c66ce76df626</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::RQMCEstimator</name>
    <filename>a00544.html</filename>
    <base>qmcplusplus::ScalarEstimatorBase</base>
    <member kind="enumvalue">
      <type>@</type>
      <name>ENERGY_INDEX</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>a56a0f36da7f9eaaf54bd05cc2bf49173aa7e5ee239c160055cec6a20e82d69307</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ENERGY_SQ_INDEX</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>a56a0f36da7f9eaaf54bd05cc2bf49173a862d78eaa58d359488e4e7c14fb4a8b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WEIGHT_INDEX</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>a56a0f36da7f9eaaf54bd05cc2bf49173afad548571bfb8e5ca727ffbb5832b98b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LE_INDEX</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>a56a0f36da7f9eaaf54bd05cc2bf49173af55b81adda93a65fd434f2eac2f0bbce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RQMCEstimator</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>a6b3d16aab417a21d28a8ac48ab422df2</anchor>
      <arglist>(QMCHamiltonian &amp;h, int hcopy=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RQMCEstimator</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>abfb5e40d48673cf75603137f530371ac</anchor>
      <arglist>(const RQMCEstimator &amp;rest)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>aff6ffa2df09b0b8eedda63913c358d1c</anchor>
      <arglist>(const Walker_t &amp;awalker, RealType wgt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>abc2a6f53f1bc8cccd38cb017a4c2ad45</anchor>
      <arglist>(MultiChain *reptileRef, int setDirect, double setTau, int setSteps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>ab48e0e301d7d62b927172bcb69bf760d</anchor>
      <arglist>(const MCWalkerConfiguration &amp;W, WalkerIterator first, WalkerIterator last, RealType wgt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add2Record</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>a512e832f7c9c13c510a9315410a90a3c</anchor>
      <arglist>(RecordNamedProperty&lt; RealType &gt; &amp;record)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerObservables</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>a8c77d1771426e5414fce5acee917b93d</anchor>
      <arglist>(vector&lt; observable_helper * &gt; &amp;h5dec, hid_t gid)</arglist>
    </member>
    <member kind="function">
      <type>ScalarEstimatorBase *</type>
      <name>clone</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>abf039754f95b07e4b3ad4964513a6a38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>CurrentWalker</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>aea58c7a791549e179f0b7b529db2557d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumWalkers</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>ad7dd761920842f8b573ceb555902a329</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>FirstColumnIndex</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>aefbfacce8dc81581a911b8f37c267bce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>FirstHamiltonian</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>ab59846bf744a0676cca9334bbe96cee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumCopies</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>a9ee881e0d92ca4c9250efa9784935eaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumOperators</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>a8ed7ccca5b185a09c71d10d65ec4e579</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>AveEloc</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>ad84e2f37b9e26e236076f8e828d2c5fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>AveWeight</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>a9e94ce1179b15001751d9f4f9bb84eb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MultiChain *</type>
      <name>Reptile</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>ab4898a483ea1b5d235d4a0b1f8cb5cd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Directionless</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>ad7de98bd773dbc867d81d9a866c14f8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nSteps</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>a072a44f960a574424f48f1cc49558125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>Tau</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>a2342d700bace4bb0a829f731e7b17adb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; RealType &gt;</type>
      <name>RatioIJ</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>a15d274e54185d17e12ba5f2555e50f65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; RealType &gt;</type>
      <name>esum</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>a9af6ebde64f5962c8fe1acca6343560e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; RealType &gt;</type>
      <name>elocal</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>ad9767669cd501411e5135a43ee6edc33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; string &gt;</type>
      <name>esum_name</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>af4ae6956c96a9a07118af10db9f8e382</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; string &gt;</type>
      <name>elocal_name</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>aa713e6c74dfa903df292f4592f19993d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; string &gt;</type>
      <name>ediff_name</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>acf0b361a40797a49631e62440b30f4f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ScalarEstimatorBase</name>
    <filename>a00545.html</filename>
    <base>qmcplusplus::QMCTraits</base>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::VectorEstimatorImpl</name>
    <filename>a00625.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>VectorEstimatorImpl</name>
      <anchorfile>a00625.html</anchorfile>
      <anchor>a0439ff52cc2a555ce3e8c8c3d02ce136</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorEstimatorImpl</name>
      <anchorfile>a00625.html</anchorfile>
      <anchor>a6c989e600288ea2690adcb65826a772e</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorEstimatorImpl</name>
      <anchorfile>a00625.html</anchorfile>
      <anchor>a2e5960b058ce0dea6754d7d51b9bc26e</anchor>
      <arglist>(const string &amp;a, int n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorEstimatorImpl</name>
      <anchorfile>a00625.html</anchorfile>
      <anchor>ac3a564b991821a81118b5e119b642640</anchor>
      <arglist>(const VectorEstimatorImpl &amp;est)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VectorEstimatorImpl</name>
      <anchorfile>a00625.html</anchorfile>
      <anchor>a7683edc2e4867077aa0625c5a13b2025</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00625.html</anchorfile>
      <anchor>a578be9c59132b8633a67a98c39318777</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a00625.html</anchorfile>
      <anchor>aac782da1f912bceb5d8ad00c8dc892ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00625.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00625.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>a00625.html</anchorfile>
      <anchor>adb3969769d696c423e7227a6c5ab4636</anchor>
      <arglist>(InputIterator first, InputIterator last, WeightIterator wit, T norm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>a00625.html</anchorfile>
      <anchor>ac341691b498398940c06131092f01a86</anchor>
      <arglist>(InputIterator first, InputIterator last, T1 wm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>a00625.html</anchorfile>
      <anchor>aecded6cbe782cd8c67504952f3ea3c7e</anchor>
      <arglist>(InputIterator first, T1 wgt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>a00625.html</anchorfile>
      <anchor>acd4c8f297c5eecdb79362922861c1164</anchor>
      <arglist>(InputIterator first)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>takeBlockAverage</name>
      <anchorfile>a00625.html</anchorfile>
      <anchor>a4a263901e7a4b7f7cb3ad41f78ce28e1</anchor>
      <arglist>(T1 wgtnorm)</arglist>
    </member>
    <member kind="function">
      <type>ForwardIterator</type>
      <name>putMessage</name>
      <anchorfile>a00625.html</anchorfile>
      <anchor>ad47b7364b81345d6ab01423b9b5f38ec</anchor>
      <arglist>(ForwardIterator cur) const </arglist>
    </member>
    <member kind="function">
      <type>ForwardIterator</type>
      <name>getMessage</name>
      <anchorfile>a00625.html</anchorfile>
      <anchor>ab8d9da5852579a0ff6bc21a523c345ab</anchor>
      <arglist>(ForwardIterator cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00625.html</anchorfile>
      <anchor>a571580ea7471b01a50ca810c0cb59ebc</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>Name</name>
      <anchorfile>a00625.html</anchorfile>
      <anchor>adc852f586959ce13117d737cf3f14899</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; T &gt;</type>
      <name>d_data</name>
      <anchorfile>a00625.html</anchorfile>
      <anchor>a4327af4f74384ce94e92ebb8c99f7632</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; T &gt;</type>
      <name>d_sum</name>
      <anchorfile>a00625.html</anchorfile>
      <anchor>a366acbb2b166e3dc6b0bfabff88c16d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; VectorEstimatorImpl&lt; double &gt; &gt;</name>
    <filename>a00288.html</filename>
    <member kind="typedef">
      <type>VectorEstimatorImpl&lt; double &gt;</type>
      <name>DataType_t</name>
      <anchorfile>a00288.html</anchorfile>
      <anchor>a9055991aa531cfe3cb9d27ab7e4a6e1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>a00288.html</anchorfile>
      <anchor>a9eb569ab3d219e8b1eb06d5b816b9868</anchor>
      <arglist>(DataType_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HDFAttribIO</name>
      <anchorfile>a00288.html</anchorfile>
      <anchor>a0a555159ada77340dd27f88ed031e4fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a00288.html</anchorfile>
      <anchor>a35862fda4ac0f918d263e3c976d856ee</anchor>
      <arglist>(hid_t grp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a00288.html</anchorfile>
      <anchor>a9cb9a11595717b99c90268f87ffb530b</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a00288.html</anchorfile>
      <anchor>a2378d66f31e2d3c28eed6a1863e5c5dc</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>hid_t</type>
      <name>groupID</name>
      <anchorfile>a00288.html</anchorfile>
      <anchor>ad4c5f0491435d0025122189bf034a3ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hid_t</type>
      <name>vsetID</name>
      <anchorfile>a00288.html</anchorfile>
      <anchor>ac974c126dac11131be48b95ece52b2e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hid_t</type>
      <name>vspaceID</name>
      <anchorfile>a00288.html</anchorfile>
      <anchor>ab7ccce49525bb37cfc86cfd38c3e3a83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hsize_t</type>
      <name>maxdims</name>
      <anchorfile>a00288.html</anchorfile>
      <anchor>aca84f0df8fa83b815fad847a6b4dbd2b</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>hsize_t</type>
      <name>curdims</name>
      <anchorfile>a00288.html</anchorfile>
      <anchor>a04d9e84ee3b94ef859f631ac0fbe8675</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>hsize_t</type>
      <name>dims</name>
      <anchorfile>a00288.html</anchorfile>
      <anchor>a103cfe213707eece01e624b2c3e7711f</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>hsize_t</type>
      <name>offset</name>
      <anchorfile>a00288.html</anchorfile>
      <anchor>afafbea863e6839a8276fac721cd46ab9</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>DataType_t &amp;</type>
      <name>ref</name>
      <anchorfile>a00288.html</anchorfile>
      <anchor>a811086fa51896b7a40cd83799e9b9888</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::WFMCOnlyEstimator</name>
    <filename>a00637.html</filename>
    <base>qmcplusplus::ScalarEstimatorBase</base>
    <member kind="function">
      <type></type>
      <name>WFMCOnlyEstimator</name>
      <anchorfile>a00637.html</anchorfile>
      <anchor>a417595a0f294589f61d65cabb5b2f597</anchor>
      <arglist>(QMCHamiltonian &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>a00637.html</anchorfile>
      <anchor>aff6ffa2df09b0b8eedda63913c358d1c</anchor>
      <arglist>(const Walker_t &amp;awalker, RealType wgt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>a00637.html</anchorfile>
      <anchor>ab48e0e301d7d62b927172bcb69bf760d</anchor>
      <arglist>(const MCWalkerConfiguration &amp;W, WalkerIterator first, WalkerIterator last, RealType wgt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add2Record</name>
      <anchorfile>a00637.html</anchorfile>
      <anchor>a8b8411fe44760ea665b56fb817b5ec96</anchor>
      <arglist>(RecordListType &amp;record)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerObservables</name>
      <anchorfile>a00637.html</anchorfile>
      <anchor>a8c77d1771426e5414fce5acee917b93d</anchor>
      <arglist>(vector&lt; observable_helper * &gt; &amp;h5dec, hid_t gid)</arglist>
    </member>
    <member kind="function">
      <type>ScalarEstimatorBase *</type>
      <name>clone</name>
      <anchorfile>a00637.html</anchorfile>
      <anchor>abf039754f95b07e4b3ad4964513a6a38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <type>@</type>
      <name>ENERGY_INDEX</name>
      <anchorfile>a00637.html</anchorfile>
      <anchor>aa156d1cebb38c8a65846c4d9c006012aaa7e5ee239c160055cec6a20e82d69307</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <type>@</type>
      <name>POTENTIAL_INDEX</name>
      <anchorfile>a00637.html</anchorfile>
      <anchor>aa156d1cebb38c8a65846c4d9c006012aa18199c5b4124b7cb2787495c97ce9459</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <type>@</type>
      <name>LE_MAX</name>
      <anchorfile>a00637.html</anchorfile>
      <anchor>aa156d1cebb38c8a65846c4d9c006012aaf43175eded1e795149e932f82bff58db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>FirstHamiltonian</name>
      <anchorfile>a00637.html</anchorfile>
      <anchor>ab59846bf744a0676cca9334bbe96cee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>SizeOfHamiltonians</name>
      <anchorfile>a00637.html</anchorfile>
      <anchor>ab9b61be4bacb6ccae95c88a8a129efbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>PsiIndex</name>
      <anchorfile>a00637.html</anchorfile>
      <anchor>abef144f8033555e7965576b3b8ff9f2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; string &gt;</type>
      <name>elocal_name</name>
      <anchorfile>a00637.html</anchorfile>
      <anchor>a010a903abef2dd4b07e8551763060399</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::h5data_proxy&lt; accumulator_set&lt; T &gt; &gt;</name>
    <filename>a00252.html</filename>
    <templarg></templarg>
    <member kind="enumvalue">
      <type>@</type>
      <name>CAPACITY</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>af8654c714018c6241d9ebd01f3fb5a26ab7dda006facfb86f75aa6e0210a77448</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>accumulator_set&lt; T &gt;</type>
      <name>data_type</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a2d6ee6a633f9bd3e6b768d837c65fe40</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>h5data_proxy</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>af1dc712e0ed6b4512825bff0c97adaa8</anchor>
      <arglist>(data_type &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>aaaa059aeba16d42711c75156abcb0529</anchor>
      <arglist>(hid_t grp, const std::string &amp;aname, hid_t xfer_plist=H5P_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a24fa876ea9163808f09deae9e78bf122</anchor>
      <arglist>(hid_t grp, const std::string &amp;aname, hid_t xfer_plist=H5P_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>begin</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a23e2fdb99370f37cb764cac10378c721</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>end</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a5994ad65dce0457b21adb6a10c8642dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>data_type &amp;</type>
      <name>ref_</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a96fd43f1596db44f30aa1fde0d66d964</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::BranchIO</name>
    <filename>a00048.html</filename>
    <member kind="typedef">
      <type>SimpleFixedNodeBranch::RealType</type>
      <name>RealType</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a560ab9cb23506dbe3b180f6ff754d6fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SimpleFixedNodeBranch::BranchModeType</type>
      <name>BranchModeType</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a61116b5170197b4acdc69a35e7f92012</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SimpleFixedNodeBranch::IParamType</type>
      <name>IParamType</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>ad47a33671440995d926f0989481db30b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SimpleFixedNodeBranch::VParamType</type>
      <name>VParamType</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>ad219f838bdc8c5bc80361ebcb06db367</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BranchIO</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>aab038cfde92b15d09cdae134595c8c7f</anchor>
      <arglist>(SimpleFixedNodeBranch &amp;source, Communicate *c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a24c84b6bdaf748f22d63a7a6ba253ce9</anchor>
      <arglist>(const string &amp;fname)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>afaf364738c197f9adf775ae8440646ad</anchor>
      <arglist>(const string &amp;fname)</arglist>
    </member>
    <member kind="variable">
      <type>SimpleFixedNodeBranch &amp;</type>
      <name>ref</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>ad9d6ff56d546d2cabc5a4846526d4f25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Communicate *</type>
      <name>myComm</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a6e290154265339db27f9a9bef2bd3aab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::CloneManager</name>
    <filename>a00074.html</filename>
    <base>qmcplusplus::QMCTraits</base>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::CSUpdateBase</name>
    <filename>a00111.html</filename>
    <base>qmcplusplus::QMCUpdateBase</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>advanceWalkers</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>a58bcaacee6c374ec7b550633a1a83b56</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end, bool measure)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::DMCFactory</name>
    <filename>a00157.html</filename>
    <member kind="function">
      <type></type>
      <name>DMCFactory</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>a89c59f04e4f19ae60601ce7489bbb165</anchor>
      <arglist>(bool pbyp, bool gpu, xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>QMCDriver *</type>
      <name>create</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>aee5e877b3c6ef394d8551066cb7c37f7</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, HamiltonianPool &amp;hpool, WaveFunctionPool &amp;ppool)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>PbyPUpdate</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>a8853633cacd396745713731123ce7114</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>GPU</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>ac31efaf56c255d7a6cf81072d5a10d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>xmlNodePtr</type>
      <name>myNode</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>ade03b7f5a1fd4d07359c6e19af6db843</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::DMCNonLocalUpdate</name>
    <filename>a00158.html</filename>
    <base>qmcplusplus::QMCUpdateBase</base>
    <member kind="function">
      <type></type>
      <name>DMCNonLocalUpdate</name>
      <anchorfile>a00158.html</anchorfile>
      <anchor>a97fe6ec00815cd2f77947d6cef2bd73e</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, RandomGenerator_t &amp;rg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DMCNonLocalUpdate</name>
      <anchorfile>a00158.html</anchorfile>
      <anchor>af375d3817cfdd4e7c8f060ad1656b479</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceWalkers</name>
      <anchorfile>a00158.html</anchorfile>
      <anchor>a4919bb20b7460bf920e666565262855b</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end, bool measure)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DMCNonLocalUpdate</name>
      <anchorfile>a00158.html</anchorfile>
      <anchor>a0c5bd345f5af15cc82a0e383707b53c9</anchor>
      <arglist>(const DMCNonLocalUpdate &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>DMCNonLocalUpdate &amp;</type>
      <name>operator=</name>
      <anchorfile>a00158.html</anchorfile>
      <anchor>a59edf7322860cef5d47e63dcde4f4559</anchor>
      <arglist>(const DMCNonLocalUpdate &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::DMCNonLocalUpdatePbyP</name>
    <filename>a00159.html</filename>
    <base>qmcplusplus::QMCUpdateBase</base>
    <member kind="function">
      <type></type>
      <name>DMCNonLocalUpdatePbyP</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aa78426bebe0c18d48e5f8bbe2c2a71c8</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, RandomGenerator_t &amp;rg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DMCNonLocalUpdatePbyP</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a7ce52a6f9cf3922691b82a59cadcf69e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceWalkers</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a4919bb20b7460bf920e666565262855b</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end, bool measure)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DMCNonLocalUpdatePbyP</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ab4d2f7d8d01fef76466c05cb571cbfb7</anchor>
      <arglist>(const DMCNonLocalUpdatePbyP &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>DMCNonLocalUpdatePbyP &amp;</type>
      <name>operator=</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>afd304ca8b98307f84995f375338086f8</anchor>
      <arglist>(const DMCNonLocalUpdatePbyP &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; NewTimer * &gt;</type>
      <name>myTimers</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a7f1b158b9dd94f7e78276fafc68f365a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::DMCNonLocalUpdatePbyPFast</name>
    <filename>a00160.html</filename>
    <base>qmcplusplus::QMCUpdateBase</base>
    <member kind="function">
      <type></type>
      <name>DMCNonLocalUpdatePbyPFast</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>aad0b8f2cfa293debb2f4cc846d14ab0e</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, RandomGenerator_t &amp;rg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DMCNonLocalUpdatePbyPFast</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>adbaaf23d31e8d434b041fd5bf953140e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceWalkers</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>a4919bb20b7460bf920e666565262855b</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end, bool measure)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DMCNonLocalUpdatePbyPFast</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>a1020731e4184427205337055d6ca8658</anchor>
      <arglist>(const DMCNonLocalUpdatePbyP &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>DMCNonLocalUpdatePbyPFast &amp;</type>
      <name>operator=</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>ac50f2eec48734e12e1007caf81a13582</anchor>
      <arglist>(const DMCNonLocalUpdatePbyP &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; NewTimer * &gt;</type>
      <name>myTimers</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>a7f1b158b9dd94f7e78276fafc68f365a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::DMCUpdateAllWithRejection</name>
    <filename>a00162.html</filename>
    <base>qmcplusplus::QMCUpdateBase</base>
    <member kind="function">
      <type></type>
      <name>DMCUpdateAllWithRejection</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a6845ff60c4208480c9e76cf0ff6a8e43</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, RandomGenerator_t &amp;rg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DMCUpdateAllWithRejection</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a5b2e380c76fd2421864fe2a5d804dcea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceWalkers</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a4919bb20b7460bf920e666565262855b</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end, bool measure)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DMCUpdateAllWithRejection</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a3230f5d091eef632c7aeca51cacd08af</anchor>
      <arglist>(const DMCUpdateAllWithRejection &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>DMCUpdateAllWithRejection &amp;</type>
      <name>operator=</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>adfc62eaa3d7d45869697a76900404b85</anchor>
      <arglist>(const DMCUpdateAllWithRejection &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::DMCUpdateAllWithKill</name>
    <filename>a00161.html</filename>
    <base>qmcplusplus::QMCUpdateBase</base>
    <member kind="function">
      <type></type>
      <name>DMCUpdateAllWithKill</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>a0167db539b57e9c9ad05e7b0fb8e9cb0</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, RandomGenerator_t &amp;rg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DMCUpdateAllWithKill</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>a6a8f88b41223946e0222884107a8c7a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceWalkers</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>a4919bb20b7460bf920e666565262855b</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end, bool measure)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DMCUpdateAllWithKill</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>a97429b8664303404eeb36550eab427cf</anchor>
      <arglist>(const DMCUpdateAllWithKill &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>DMCUpdateAllWithKill &amp;</type>
      <name>operator=</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>a3410b9bf17124ce981e39ede905625e3</anchor>
      <arglist>(const DMCUpdateAllWithKill &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::DMCUpdatePbyPWithRejection</name>
    <filename>a00164.html</filename>
    <base>qmcplusplus::QMCUpdateBase</base>
    <member kind="function">
      <type></type>
      <name>DMCUpdatePbyPWithRejection</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a5e8cbc1c7e29e8558f5bc5c0ec432ed9</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, RandomGenerator_t &amp;rg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DMCUpdatePbyPWithRejection</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a4afa44b15a65e2ceb59c97abb9717810</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceWalkers</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a4919bb20b7460bf920e666565262855b</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end, bool measure)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; NewTimer * &gt;</type>
      <name>myTimers</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a7f1b158b9dd94f7e78276fafc68f365a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::DMCUpdatePbyPWithRejectionFast</name>
    <filename>a00165.html</filename>
    <base>qmcplusplus::QMCUpdateBase</base>
    <member kind="function">
      <type></type>
      <name>DMCUpdatePbyPWithRejectionFast</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>ac64af006321be3ecb0ea4d2682ddfd78</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, RandomGenerator_t &amp;rg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DMCUpdatePbyPWithRejectionFast</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a057d6ed450d1aabf73ac0c3b97cd38a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceWalkers</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a4919bb20b7460bf920e666565262855b</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end, bool measure)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; NewTimer * &gt;</type>
      <name>myTimers</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a7f1b158b9dd94f7e78276fafc68f365a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::DMCUpdatePbyPWithKill</name>
    <filename>a00163.html</filename>
    <base>qmcplusplus::QMCUpdateBase</base>
    <member kind="function">
      <type></type>
      <name>DMCUpdatePbyPWithKill</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>a16fa5ef97f16f5feead2cca7fb33aacb</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, RandomGenerator_t &amp;rg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DMCUpdatePbyPWithKill</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>a1429726b80b03adfd18209799e0dd462</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceWalkers</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>a4919bb20b7460bf920e666565262855b</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end, bool measure)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DMCUpdatePbyPWithKill</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>a203a45aec76d6fc0a866e2c68933de88</anchor>
      <arglist>(const DMCUpdatePbyPWithKill &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>DMCUpdatePbyPWithKill &amp;</type>
      <name>operator=</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>abe77074c07570a61d29946171301361b</anchor>
      <arglist>(const DMCUpdatePbyPWithKill &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; NewTimer * &gt;</type>
      <name>myTimers</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>a7f1b158b9dd94f7e78276fafc68f365a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::RNDMCUpdatePbyPFast</name>
    <filename>a00538.html</filename>
    <base>qmcplusplus::QMCUpdateBase</base>
    <member kind="function">
      <type></type>
      <name>RNDMCUpdatePbyPFast</name>
      <anchorfile>a00538.html</anchorfile>
      <anchor>af5434837ef76f8cb4aabe713b577a37d</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, MCWalkerConfiguration &amp;wg, TrialWaveFunction &amp;psi, TrialWaveFunction &amp;guide, QMCHamiltonian &amp;h, RandomGenerator_t &amp;rg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RNDMCUpdatePbyPFast</name>
      <anchorfile>a00538.html</anchorfile>
      <anchor>afcafde55608828225b3db18b57e301fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceWalkers</name>
      <anchorfile>a00538.html</anchorfile>
      <anchor>a4919bb20b7460bf920e666565262855b</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end, bool measure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initWalkersForPbyP</name>
      <anchorfile>a00538.html</anchorfile>
      <anchor>acba2ad4bbd4a6fec7b8e8b8c4d64a6e5</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MCWalkerConfiguration</type>
      <name>W_G</name>
      <anchorfile>a00538.html</anchorfile>
      <anchor>a4edfdc31236c0a5c6c5bf6fd756af394</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; NewTimer * &gt;</type>
      <name>myTimers</name>
      <anchorfile>a00538.html</anchorfile>
      <anchor>a7f1b158b9dd94f7e78276fafc68f365a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>maxS</name>
      <anchorfile>a00538.html</anchorfile>
      <anchor>a74a216a1b054d862319e4096411dbc66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>efn</name>
      <anchorfile>a00538.html</anchorfile>
      <anchor>af6f3efedbc4ce119849b8ea2dc20a1c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>estimateCrossings</name>
      <anchorfile>a00538.html</anchorfile>
      <anchor>a820a25803fd93dfbb895166ed6dc7035</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>maxcopy</name>
      <anchorfile>a00538.html</anchorfile>
      <anchor>a3ea6b7e742703061d93ed31c1bc127f8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::RNDMCUpdatePbyPCeperley</name>
    <filename>a00537.html</filename>
    <base>qmcplusplus::QMCUpdateBase</base>
    <member kind="function">
      <type></type>
      <name>RNDMCUpdatePbyPCeperley</name>
      <anchorfile>a00537.html</anchorfile>
      <anchor>a83bfffc5caf55a3b396d5b3f308fb029</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, RandomGenerator_t &amp;rg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RNDMCUpdatePbyPCeperley</name>
      <anchorfile>a00537.html</anchorfile>
      <anchor>ab8dbbab3a11240c3bfd745f82bb015c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceWalkers</name>
      <anchorfile>a00537.html</anchorfile>
      <anchor>a4919bb20b7460bf920e666565262855b</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end, bool measure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initWalkersForPbyP</name>
      <anchorfile>a00537.html</anchorfile>
      <anchor>acba2ad4bbd4a6fec7b8e8b8c4d64a6e5</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; NewTimer * &gt;</type>
      <name>myTimers</name>
      <anchorfile>a00537.html</anchorfile>
      <anchor>a7f1b158b9dd94f7e78276fafc68f365a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>maxS</name>
      <anchorfile>a00537.html</anchorfile>
      <anchor>a74a216a1b054d862319e4096411dbc66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>efn</name>
      <anchorfile>a00537.html</anchorfile>
      <anchor>af6f3efedbc4ce119849b8ea2dc20a1c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>estimateCrossings</name>
      <anchorfile>a00537.html</anchorfile>
      <anchor>a820a25803fd93dfbb895166ed6dc7035</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::DMCWOS</name>
    <filename>a00166.html</filename>
    <base>qmcplusplus::QMCDriver</base>
    <member kind="function">
      <type></type>
      <name>DMCWOS</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a894b4f151a48f794b774c64258c64622</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceWalkerByWalker</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>aa334c40c0f29daf0dd05148b186a4b41</anchor>
      <arglist>(BRANCHER &amp;Branch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceAllWalkers</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ad6fb59ed89b6b5850732be67c2f159de</anchor>
      <arglist>(BRANCHER &amp;Branch)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a53d41041cb4702a9ff3b5b112260fd25</anchor>
      <arglist>(xmlNodePtr q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBranchInfo</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a763a714800758ec978b70d30571f1efa</anchor>
      <arglist>(const string &amp;fname)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DMCWOS</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a471a7de6ad66dcd8138534944fc79936</anchor>
      <arglist>(const DMCWOS &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>DMCWOS &amp;</type>
      <name>operator=</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a2fb8253489fdb144c32720c84a1fadd0</anchor>
      <arglist>(const DMCWOS &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>Tau_var</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ac9fe7387e69d558e5a6c86248239b94e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>WOSPotential *</type>
      <name>wos_ref</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ae5e36b3df8e2fb497f9ed4e727cb6bae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>BranchInfo</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a1468aee06b2e96b880d17d4d3dc1b1eb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::WalkerControlMPI</name>
    <filename>a00631.html</filename>
    <base>qmcplusplus::WalkerControlBase</base>
    <member kind="function">
      <type></type>
      <name>WalkerControlMPI</name>
      <anchorfile>a00631.html</anchorfile>
      <anchor>a6404bb15207c24c7ec5c7d2f26d7457d</anchor>
      <arglist>(Communicate *c=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>branch</name>
      <anchorfile>a00631.html</anchorfile>
      <anchor>acc1df91a7d28e7e531dcb8ce7bae9f76</anchor>
      <arglist>(int iter, MCWalkerConfiguration &amp;W, RealType trigger)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWalkersSimple</name>
      <anchorfile>a00631.html</anchorfile>
      <anchor>aafb87b26c29dd85e174d4d9f2d3be55a</anchor>
      <arglist>(MCWalkerConfiguration &amp;W)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWalkersAsync</name>
      <anchorfile>a00631.html</anchorfile>
      <anchor>a65ad6f7cef6620411afc056b101d38d2</anchor>
      <arglist>(MCWalkerConfiguration &amp;W)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWalkersBlocked</name>
      <anchorfile>a00631.html</anchorfile>
      <anchor>ae62bf38253d1a361c4cd1c6f768bcd8c</anchor>
      <arglist>(MCWalkerConfiguration &amp;W)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWalkersMap</name>
      <anchorfile>a00631.html</anchorfile>
      <anchor>a16098037fae3a20c4a047e66462f254b</anchor>
      <arglist>(MCWalkerConfiguration &amp;W)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WalkerControlBase</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>a24cf5b6fdf68cef7024dc97a8a2419b4</anchor>
      <arglist>(Communicate *c, bool rn=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WalkerControlBase</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>aaee3ff37cc7e57ac8b496d4e6e30fbe5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWalkerID</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>af1f3e6ccd5211a7d1e0f3dec2334c18c</anchor>
      <arglist>(MCWalkerConfiguration &amp;walkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>measureProperties</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>a90bdc69b066d36f9452a7c0560512176</anchor>
      <arglist>(int iter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrialEnergy</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>aded5ded62c4dc557bf8c49551b9ad837</anchor>
      <arglist>(RealType et)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getValue</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>aa8635055acde2d4b1b26597f0c50b6f1</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getCurrentValue</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>a48c4ed5d41553a5c4939ea06e479414b</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnergyAndVariance</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>ae32f0322a2b2b939e45aee99626956fe</anchor>
      <arglist>(RealType e, RealType v)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>doNotBranch</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>ac367d28aa43956692ecb2676e404fb96</anchor>
      <arglist>(int iter, MCWalkerConfiguration &amp;W)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sortWalkers</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>a5fb75b6b289b463dde30c76f6b8eb1cd</anchor>
      <arglist>(MCWalkerConfiguration &amp;W)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>copyWalkers</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>a800b60d5b25c6ee509806cbf4f332c63</anchor>
      <arglist>(MCWalkerConfiguration &amp;W)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealType</type>
      <name>getFeedBackParameter</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>a1e0f70ab22e76a01fd90b428b69563af</anchor>
      <arglist>(int ngen, RealType tau)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Cur_pop</name>
      <anchorfile>a00631.html</anchorfile>
      <anchor>ae915d7309b87bd1c96cc831f6b867ade</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Cur_max</name>
      <anchorfile>a00631.html</anchorfile>
      <anchor>ada0e523a4d661dc2b9992f4ac9c57f91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Cur_min</name>
      <anchorfile>a00631.html</anchorfile>
      <anchor>ac2fbeaa5e3dfd83793e9fdacf6d6840d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; NewTimer * &gt;</type>
      <name>myTimers</name>
      <anchorfile>a00631.html</anchorfile>
      <anchor>a7f1b158b9dd94f7e78276fafc68f365a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>MyContext</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>a0e0e1b2c575259a95aba3a571496d160</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>NumContexts</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>a09a35ac4394b81ea46634458b7961a3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>SwapMode</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>a5bd2b6ff0337454cdbcba352341e46f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>Nmin</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>aa15a26509653377f4489e043e5ed750a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>Nmax</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>aba20a61a6110f519047a30800846c087</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>MaxCopy</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>ad7622c75a44fe59718a6af65e8facaa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>NumWalkers</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>a52dcbd8936a424b79eccde7d1a1f4802</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>DummyIndex</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>a0c79303e56e0eb667261221f82a6cd8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>NumWalkersCreated</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>a066fa6bd2fe73ca9c30c850ddf2ccd54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>NumWalkersSent</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>a1a44473eea5c91717feab9ad86ff336b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>trialEnergy</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>a7c7198016b81b551816bdbdfd9d5b1c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>targetAvg</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>adbc3bfba60758ed92e8d6383193c1ded</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>targetVar</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>a5edd66c71bb2c0f0af552bd9054c0bbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>targetSigma</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>a53fe44680312c0a6527eac4d6ca4d221</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>targetEnergyBound</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>a0d0845c26a1624575d5123d70c99c8f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>curVar</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>a323e55b8708efa844997ed97b066f979</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>NumPerNode</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>a8774f8e876ce69bdedc2eef1fa0ba7f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>OffSet</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>afc222f737d6b8b90616dbbac405e3cfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>FairOffSet</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>a37aa1986fd6ecf15de879e331abfc427</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MCDataType&lt; RealType &gt;</type>
      <name>EnsembleProperty</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>aed4e42393d716eb5c03b2255f0b1f5b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>dmcFname</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>ad7aedbd8939225f0d1d31413ecb8f8ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ofstream *</type>
      <name>dmcStream</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>af88b19231663710932e368a1973a837a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>accumData</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>ae4ccd8ed1e0bb57f12a855f9af4adb79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>curData</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>afd75eea45b68c603974aa8c2c399672f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; Walker_t * &gt;</type>
      <name>good_w</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>ad8a6aff954bb9dfcb87bc56b58d710a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>ncopy_w</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>aab2a6163c908843a9d8ca37ff25d95a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>WriteRN</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>a7e97c094e2fd6d4a72e1c3a8776c687a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ENERGY_INDEX</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>a109bfaad92bd6d348dab484aec11edbbaa7e5ee239c160055cec6a20e82d69307</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ENERGY_SQ_INDEX</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>a109bfaad92bd6d348dab484aec11edbba862d78eaa58d359488e4e7c14fb4a8b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WALKERSIZE_INDEX</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>a109bfaad92bd6d348dab484aec11edbba38ea2d2bb6646b6d2ef3f566088fd759</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WEIGHT_INDEX</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>a109bfaad92bd6d348dab484aec11edbbafad548571bfb8e5ca727ffbb5832b98b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EREF_INDEX</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>a109bfaad92bd6d348dab484aec11edbbae5e1774009469e466754a737cee5cfa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>R2ACCEPTED_INDEX</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>a109bfaad92bd6d348dab484aec11edbbae7b44288b4ab83baf71edb767ed66e34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>R2PROPOSED_INDEX</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>a109bfaad92bd6d348dab484aec11edbba117498bd5b5252f7e3bb2065eb49ab33</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FNSIZE_INDEX</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>a109bfaad92bd6d348dab484aec11edbba4ebd9681b2aade719ddef73802cc3d35</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RNONESIZE_INDEX</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>a109bfaad92bd6d348dab484aec11edbbae655dde99e5658ce1325077d858ddf27</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RNSIZE_INDEX</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>a109bfaad92bd6d348dab484aec11edbba7939f5dc542ff1452f9fba1316d7c772</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>B_ENERGY_INDEX</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>a109bfaad92bd6d348dab484aec11edbbaa494acd28623ad3412391496e01337b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>B_WGT_INDEX</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>a109bfaad92bd6d348dab484aec11edbba54c0c0e543a52bc8599219259270de59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SENTWALKERS_INDEX</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>a109bfaad92bd6d348dab484aec11edbbae02f89d33c3556a12768f19392fffe04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LE_MAX</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>a109bfaad92bd6d348dab484aec11edbbaf43175eded1e795149e932f82bff58db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MCWalkerConfiguration::Walker_t</type>
      <name>Walker_t</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>ac075f56c393d5ec9a998ec36c58ad7d6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::WalkerPureDMC</name>
    <filename>a00632.html</filename>
    <base>qmcplusplus::WalkerControlBase</base>
    <member kind="function">
      <type></type>
      <name>WalkerPureDMC</name>
      <anchorfile>a00632.html</anchorfile>
      <anchor>a0ed4d6d8133dc60ada98a76cff56c2f6</anchor>
      <arglist>(Communicate *c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>branch</name>
      <anchorfile>a00632.html</anchorfile>
      <anchor>acc1df91a7d28e7e531dcb8ce7bae9f76</anchor>
      <arglist>(int iter, MCWalkerConfiguration &amp;W, RealType trigger)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getFeedBackParameter</name>
      <anchorfile>a00632.html</anchorfile>
      <anchor>ad2a3d40595e06a150a12c36fbc6d146a</anchor>
      <arglist>(int ngen, RealType tau)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::WalkerReconfiguration</name>
    <filename>a00633.html</filename>
    <base>qmcplusplus::WalkerControlBase</base>
    <member kind="function">
      <type></type>
      <name>WalkerReconfiguration</name>
      <anchorfile>a00633.html</anchorfile>
      <anchor>ae8c4412771318f27277db159a438db69</anchor>
      <arglist>(Communicate *c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>branch</name>
      <anchorfile>a00633.html</anchorfile>
      <anchor>acc1df91a7d28e7e531dcb8ce7bae9f76</anchor>
      <arglist>(int iter, MCWalkerConfiguration &amp;W, RealType trigger)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getFeedBackParameter</name>
      <anchorfile>a00633.html</anchorfile>
      <anchor>ad2a3d40595e06a150a12c36fbc6d146a</anchor>
      <arglist>(int ngen, RealType tau)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndexPermutation</name>
      <anchorfile>a00633.html</anchorfile>
      <anchor>a72ff4437567af6e8180d8734454743e7</anchor>
      <arglist>(MCWalkerConfiguration &amp;W)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>shuffleIndex</name>
      <anchorfile>a00633.html</anchorfile>
      <anchor>a364996713eae4c777517b60dddab48b6</anchor>
      <arglist>(int nw)</arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>UnitZeta</name>
      <anchorfile>a00633.html</anchorfile>
      <anchor>acef32a0e673fbe20c2307be51e81f4d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>IndexCopy</name>
      <anchorfile>a00633.html</anchorfile>
      <anchor>a83fcb381cdd3b2c8998e534595897da9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>wConf</name>
      <anchorfile>a00633.html</anchorfile>
      <anchor>af03a09683fe1c18e1ad717bf7c2714d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Zeta</name>
      <anchorfile>a00633.html</anchorfile>
      <anchor>ac6a0e674c14a468ad04ba79606a12edb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::WalkerReconfigurationMPI</name>
    <filename>a00634.html</filename>
    <base>qmcplusplus::WalkerControlBase</base>
    <member kind="function">
      <type></type>
      <name>WalkerReconfigurationMPI</name>
      <anchorfile>a00634.html</anchorfile>
      <anchor>a869823bb6bab6c4633aac0a5ed307411</anchor>
      <arglist>(Communicate *c=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>branch</name>
      <anchorfile>a00634.html</anchorfile>
      <anchor>acc1df91a7d28e7e531dcb8ce7bae9f76</anchor>
      <arglist>(int iter, MCWalkerConfiguration &amp;W, RealType trigger)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>swapWalkers</name>
      <anchorfile>a00634.html</anchorfile>
      <anchor>ab0ed6c51af170dd26a570978e0dc9bd1</anchor>
      <arglist>(MCWalkerConfiguration &amp;W)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendWalkers</name>
      <anchorfile>a00634.html</anchorfile>
      <anchor>a7f7a17ffb6762e730d449c8bce4e0802</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, const vector&lt; IndexType &gt; &amp;plus)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recvWalkers</name>
      <anchorfile>a00634.html</anchorfile>
      <anchor>a94432cbc3070ba0fc6917ecf5e4191a0</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, const vector&lt; IndexType &gt; &amp;minus)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>TotalWalkers</name>
      <anchorfile>a00634.html</anchorfile>
      <anchor>a506f34b5386fb56c5be667ccb1099faf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>FirstWalker</name>
      <anchorfile>a00634.html</anchorfile>
      <anchor>ab5293ded54d8cb57d3a7dc9fc92e9166</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>LastWalker</name>
      <anchorfile>a00634.html</anchorfile>
      <anchor>aa2f0d511b89ded7ae3f96f60415f1069</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>UnitZeta</name>
      <anchorfile>a00634.html</anchorfile>
      <anchor>acef32a0e673fbe20c2307be51e81f4d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>DeltaStep</name>
      <anchorfile>a00634.html</anchorfile>
      <anchor>a11a6013f474e8c8535ea3b9de738d5d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>nwInv</name>
      <anchorfile>a00634.html</anchorfile>
      <anchor>a060d30759412d99cc562fdf07e09a3ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; IndexType &gt;</type>
      <name>dN</name>
      <anchorfile>a00634.html</anchorfile>
      <anchor>a56c0bd7c90121e187293b4128c6bfdbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>wConf</name>
      <anchorfile>a00634.html</anchorfile>
      <anchor>af03a09683fe1c18e1ad717bf7c2714d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>wOffset</name>
      <anchorfile>a00634.html</anchorfile>
      <anchor>a741a94c105e739a468f6395535201f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>wSum</name>
      <anchorfile>a00634.html</anchorfile>
      <anchor>af756dea7f6a362b8c207bb93be1a9df1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::QMCUpdateBase</name>
    <filename>a00500.html</filename>
    <base>qmcplusplus::QMCTraits</base>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setDefaults</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>a8a64466bfb43094b3aec845670b959b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>QMCUpdateBase &amp;</type>
      <name>operator=</name>
      <anchorfile>a00500.html</anchorfile>
      <anchor>aaaad192dfe1305f27377869f7d8f2228</anchor>
      <arglist>(const QMCUpdateBase &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::RMCFactory</name>
    <filename>a00533.html</filename>
    <member kind="function">
      <type></type>
      <name>RMCFactory</name>
      <anchorfile>a00533.html</anchorfile>
      <anchor>a60c13a7d7528ca823c40a913b9bfab5d</anchor>
      <arglist>(int vmode, xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>QMCDriver *</type>
      <name>create</name>
      <anchorfile>a00533.html</anchorfile>
      <anchor>a70e12c883c07b0b2ad93bdb71a4dc0e3</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, ParticleSetPool &amp;ptclpool, HamiltonianPool &amp;hpool, WaveFunctionPool &amp;ppool)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>RMCMode</name>
      <anchorfile>a00533.html</anchorfile>
      <anchor>a69d175d53f7b95e98251fdd13afa25ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>xmlNodePtr</type>
      <name>myNode</name>
      <anchorfile>a00533.html</anchorfile>
      <anchor>ade03b7f5a1fd4d07359c6e19af6db843</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::SimpleFixedNodeBranch</name>
    <filename>a00552.html</filename>
    <base>qmcplusplus::QMCTraits</base>
    <member kind="enumvalue">
      <type>@</type>
      <name>B_DMC</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>ade9ca5088d171ad20b4c237f1c2d6260a1b70f7f8244da5ba1b9bdd4c334f9f8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>B_DMCSTAGE</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>ade9ca5088d171ad20b4c237f1c2d6260a940e752960387d9d4ff46479da05bd7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>B_POPCONTROL</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>ade9ca5088d171ad20b4c237f1c2d6260a8c902bb4d76aae4d33678be6bac0ac91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>B_USETAUEFF</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>ade9ca5088d171ad20b4c237f1c2d6260acc3e8425f6d9a715866b31ddbdba3530</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>B_CLEARHISTORY</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>ade9ca5088d171ad20b4c237f1c2d6260a28a9bb7fd15e998329d723ebbfe5b3b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>B_KILLNODES</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>ade9ca5088d171ad20b4c237f1c2d6260a043b7d6dad4acca133c769a07fcb3fe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>B_RESTART</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>ade9ca5088d171ad20b4c237f1c2d6260a8df2401dc7732826d988f69856fe8429</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>B_MODE_MAX</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>ade9ca5088d171ad20b4c237f1c2d6260aa52f4f0b819b2a84c4a1e2664f91c3cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>B_WARMUPSTEPS</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a9e93d8eae633734dfeb29e24a1f3a7c0ab5f035e28038f0136625d2591e743483</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>B_ENERGYUPDATEINTERVAL</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a9e93d8eae633734dfeb29e24a1f3a7c0ad4eef212e280cd26a1fcdf6e102df30d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>B_COUNTER</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a9e93d8eae633734dfeb29e24a1f3a7c0adf4a6ff89634535a6f6ea1156cd6cb46</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>B_TARGETWALKERS</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a9e93d8eae633734dfeb29e24a1f3a7c0a242c97f71955923940ef40f9446cd6ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>B_MAXWALKERS</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a9e93d8eae633734dfeb29e24a1f3a7c0adceca4c741a3cf1a04bdaa6c4b5cc969</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>B_MINWALKERS</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a9e93d8eae633734dfeb29e24a1f3a7c0af26e39467ff654bcfe1e2ab94d41c730</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>B_BRANCHINTERVAL</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a9e93d8eae633734dfeb29e24a1f3a7c0ad56f497164aa9be9cd7823da77c71596</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>B_IPARAM_MAX</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a9e93d8eae633734dfeb29e24a1f3a7c0aa4fa72a4325f7af9746d1cdaacb4eb80</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>B_TAU</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>aeb8e1c282570d629a6b603a94a4650d6a4cedb169690a9cc8df5fa01754e338c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>B_TAUEFF</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>aeb8e1c282570d629a6b603a94a4650d6aa319f721df3acf49e78e6974dbe5132b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>B_ETRIAL</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>aeb8e1c282570d629a6b603a94a4650d6a92f0b11e3f827ab99f7cf094d1d888d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>B_EREF</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>aeb8e1c282570d629a6b603a94a4650d6aa0dbf1c2f2237efcdb001eecd80a223c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>B_ENOW</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>aeb8e1c282570d629a6b603a94a4650d6a6c7bd72a6555fc3ac98a01a176c86d76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>B_BRANCHMAX</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>aeb8e1c282570d629a6b603a94a4650d6a7a9618396ceba592fe93c890383ee3fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>B_BRANCHCUTOFF</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>aeb8e1c282570d629a6b603a94a4650d6ad406ea8bb4a58a71dd3e197c6b1773a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>B_BRANCHFILTER</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>aeb8e1c282570d629a6b603a94a4650d6ad34ea6de2e23c4070bc2c2f6937ec336</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>B_SIGMA</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>aeb8e1c282570d629a6b603a94a4650d6a9e9d9715b31771dc170edd52d8d6aa83</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>B_ACC_ENERGY</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>aeb8e1c282570d629a6b603a94a4650d6a4c94718ef4c8ce7f7c949426ba852946</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>B_ACC_SAMPLES</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>aeb8e1c282570d629a6b603a94a4650d6ac7d9019d54a2d33e2c1de2b13978174d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>B_FEEDBACK</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>aeb8e1c282570d629a6b603a94a4650d6af19d93f3dc493c5e04795e42916475fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>B_VPARAM_MAX</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>aeb8e1c282570d629a6b603a94a4650d6a2b15da274d0aa6c5e2b36317d4133dd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SimpleFixedNodeBranch</type>
      <name>ThisType</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>aa3cb14cbf6db21072bc33e007c367653</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bitset&lt; B_MODE_MAX &gt;</type>
      <name>BranchModeType</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a45939d4512fc6e51b2814a41908d4cf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TinyVector&lt; int, B_IPARAM_MAX &gt;</type>
      <name>IParamType</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a46731d67f0e89c4e82108c4e76f19d23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TinyVector&lt; RealType, B_VPARAM_MAX &gt;</type>
      <name>VParamType</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a4174a0adeb8e618dc29d71581fb31d02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleFixedNodeBranch</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a4758a17266ada5e18a2a5c01b141b0d9</anchor>
      <arglist>(RealType tau, int nideal)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleFixedNodeBranch</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>aec5db67d476dc2b2e70185704d4a7054</anchor>
      <arglist>(const SimpleFixedNodeBranch &amp;abranch)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SimpleFixedNodeBranch</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>abb22e03eef204a72919d386182699e80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>phaseChanged</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a7305105a06ef9446ab5d3e44687f2a37</anchor>
      <arglist>(RealType psi0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceQMCCounter</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>acf47b12f0d68896be8c6df306bb5f486</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>regressQMCCounter</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a5a730823679db14e46fbf1afc3f3bd8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EstimatorManager *</type>
      <name>getEstimatorManager</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a35b7b3ad3ce5d139227e256798d0afd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEstimatorManager</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a95c7303d1bc490c50aa4bed87024d337</anchor>
      <arglist>(EstimatorManager *est)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initWalkerController</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a22bf5475732ad7dff63c6b6053548916</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, bool fixW, bool killwalker)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkParameters</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>ae06b078269d441f814fb5c923c9cdbcf</anchor>
      <arglist>(MCWalkerConfiguration &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>branchWeightBare</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a91cb8a5e1a7a481cd6276a84246f1645</anchor>
      <arglist>(RealType enew, RealType eold) const </arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>branchWeightReleasedNode</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a0518e5681cbcd7eb6135fa5c78345853</anchor>
      <arglist>(RealType enew, RealType eold, RealType eref) const </arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>branchWeight</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a8ad6a060fba2700eebd77b7f9ede687d</anchor>
      <arglist>(RealType enew, RealType eold) const </arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>branchWeight</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a1b174420ef2cd7976828c1e798d23d22</anchor>
      <arglist>(RealType enew, RealType eold, RealType scnew, RealType scold) const </arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>branchWeight</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a32d36a56c9e6a710f7be5b3a19e4cd1d</anchor>
      <arglist>(RealType enew, RealType eold, RealType scnew, RealType scold, RealType p) const </arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>branchWeightTau</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>af60ab081c1ea8940cad3dc637c5f7bba</anchor>
      <arglist>(RealType enew, RealType eold, RealType scnew, RealType scold, RealType taueff)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getEref</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a7670c716e842762bb38a42abae46c267</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getEtrial</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>ad6a9d304da171d4b46370aa570cee06f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getTau</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a5b5224e1298ce435483cf2acd6b7217d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getTauEff</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a008e4e49854b1dc7c2d1ad0cc71d0260</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrialEnergy</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a366dcb7e1907c755dea5188048e92304</anchor>
      <arglist>(RealType etot, RealType wtot=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>branch</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a58753ae52d0442f366ebc8cf3e6fd1cf</anchor>
      <arglist>(int iter, MCWalkerConfiguration &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>branch</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a7fb7ae4d2466bf62558c750fc930a338</anchor>
      <arglist>(int iter, MCWalkerConfiguration &amp;w, vector&lt; ThisType * &gt; &amp;clones)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a43ea739fd65ec3c5210479b67d785f66</anchor>
      <arglist>(int counter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetRun</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a0428def559b6339b289a87b1aaf332e7</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a7471a5cd7651a9f4471f948683ebc8f3</anchor>
      <arglist>(const string &amp;fname, bool overwrite=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>adff8a6bb04659ea21b0270cd01e0a586</anchor>
      <arglist>(const string &amp;fname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerParameters</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a0dffea32f05a2c11f231bfcf6eaae1e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a7f723b32d090980d949e62971d8edb6d</anchor>
      <arglist>(const string &amp;froot, bool append=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>af663836b7dd4164f3c4236022da05707</anchor>
      <arglist>(MCWalkerConfiguration &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRN</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a230133a34fe0a35d361a5a0158c399e7</anchor>
      <arglist>(bool rn)</arglist>
    </member>
    <member kind="variable">
      <type>BranchModeType</type>
      <name>BranchMode</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a1b6b09bed4f8ad3a14bdc73b26f6daa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IParamType</type>
      <name>iParam</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a0493f495b1072067d36f3242d17b07b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VParamType</type>
      <name>vParam</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a1943fb6d07d7dd0ee0f6f7ea32cb183f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ToDoSteps</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a24fa7c1ffb0bf108ab428623b32698f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>logN</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a72885bd3fb404a15de3e1eef9b4e3994</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>xmlNodePtr</type>
      <name>myNode</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>ade03b7f5a1fd4d07359c6e19af6db843</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>WalkerControlBase *</type>
      <name>WalkerController</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a6b3db85c30d7de1d8b0f243881253659</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>WalkerControlBase *</type>
      <name>BackupWalkerController</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>ada20373bf27a23554b2e006b1fdb10ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EstimatorManager *</type>
      <name>MyEstimator</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>ae3b3c7fce2c15c725b4b81ac7fb99224</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>accumulator_set&lt; RealType &gt;</type>
      <name>EnergyHist</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>ab2bf21ed353f2b98df029a7477bdc1d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>accumulator_set&lt; RealType &gt;</type>
      <name>VarianceHist</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>ad65393b7b209e7ae1be43ef161dca495</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>accumulator_set&lt; RealType &gt;</type>
      <name>R2Accepted</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a38c5dbe1889ef1ddea34dc6b4979a4a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>accumulator_set&lt; RealType &gt;</type>
      <name>R2Proposed</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a01cf06ad11878d45aaa723a742379dac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>RootName</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a4280eb5c7f0d275dce96a4f1083c5cf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParameterSet</type>
      <name>m_param</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>ac32cb2af3a464bc66f40d4e335d87f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; string &gt;</type>
      <name>sParam</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a762524f5b593229b2952596a48e85fd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>ScaleSum</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a241f55654efc4ff2d020a3564cdd51c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>ScaleNum</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a9326791fa634233b81c05b441271f807</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>LogJacobRef</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a4785074e35b0a9e0f64ec6e9aab1a90f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>LogNorm</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a099147880ac76057831008bf506cdd76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>RN</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a1dae058becf768eb8e25fe3c24f81c01</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>SimpleFixedNodeBranch</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a530d789b534aa088b3228c7678263bc7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::SinglePtclWarp</name>
    <filename>a00555.html</filename>
    <base>qmcplusplus::QMCTraits</base>
    <member kind="function">
      <type></type>
      <name>SinglePtclWarp</name>
      <anchorfile>a00555.html</anchorfile>
      <anchor>a784b3530fbf565345fd5f21bbaa61b73</anchor>
      <arglist>(int nCenter, int nPsi)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>warpFunction</name>
      <anchorfile>a00555.html</anchorfile>
      <anchor>a624b65e6040913177bb6d2e2730949e1</anchor>
      <arglist>(RealType r, RealType rinv)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>warpLogGrad</name>
      <anchorfile>a00555.html</anchorfile>
      <anchor>a5286847d3c5099a8bdb80ec06da7d71a</anchor>
      <arglist>(RealType r, RealType rinv)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>warpLogGrad2</name>
      <anchorfile>a00555.html</anchorfile>
      <anchor>a4604bf635eea579bff696bfc55d8e30a</anchor>
      <arglist>(RealType r, RealType rinv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_warp_disp</name>
      <anchorfile>a00555.html</anchorfile>
      <anchor>a3906396a1a59c6ad9595d41f3467efc2</anchor>
      <arglist>(const vector&lt; RealType &gt; &amp;R, const vector&lt; RealType &gt; &amp;Rinv, const vector&lt; PosType &gt; &amp;dR)</arglist>
    </member>
    <member kind="function">
      <type>PosType</type>
      <name>get_displacement</name>
      <anchorfile>a00555.html</anchorfile>
      <anchor>a033dbdecaf8b3f3a1ed811433785c882</anchor>
      <arglist>(int ipsi, const vector&lt; PosType &gt; &amp;delta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_warp_jacob</name>
      <anchorfile>a00555.html</anchorfile>
      <anchor>ab1df10db108a95a7d9ac76d68f443a51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>get_Jacobian</name>
      <anchorfile>a00555.html</anchorfile>
      <anchor>ad81c65e37712c9b077bce9e32f64401c</anchor>
      <arglist>(int ipsi, const vector&lt; PosType &gt; &amp;delta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_warp_grad</name>
      <anchorfile>a00555.html</anchorfile>
      <anchor>a112d382720cc4cf8f8bcc35e0c9eba22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PosType</type>
      <name>get_grad_ln_Jacob</name>
      <anchorfile>a00555.html</anchorfile>
      <anchor>a65f80ead3df3a20288c5dbb491bcacaf</anchor>
      <arglist>(int ipsi, const vector&lt; PosType &gt; &amp;delta)</arglist>
    </member>
    <member kind="function">
      <type>TensorType</type>
      <name>getCof</name>
      <anchorfile>a00555.html</anchorfile>
      <anchor>ab24ca0d123b4ab7f0ad448dc41f24e20</anchor>
      <arglist>(TensorType a)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ncenter</name>
      <anchorfile>a00555.html</anchorfile>
      <anchor>abab103f59d6570f94946bc71eafe609b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PosType</type>
      <name>nusum</name>
      <anchorfile>a00555.html</anchorfile>
      <anchor>a1039bf82268ca46880a5622799192406</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>r</name>
      <anchorfile>a00555.html</anchorfile>
      <anchor>a2668b80bdaa9971c1fcc15d3fe1ba4c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>rinv</name>
      <anchorfile>a00555.html</anchorfile>
      <anchor>abd430678b2ed568b4a65de07c39af5dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>omega</name>
      <anchorfile>a00555.html</anchorfile>
      <anchor>ae624d84f5bd916d74a98ac6363026dac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>g</name>
      <anchorfile>a00555.html</anchorfile>
      <anchor>a63cc5d39475fb1f498c7f6460a4967e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; PosType &gt;</type>
      <name>dr</name>
      <anchorfile>a00555.html</anchorfile>
      <anchor>aa67dcfe1eac41006cd0f90c235b69511</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; PosType &gt;</type>
      <name>d_omega</name>
      <anchorfile>a00555.html</anchorfile>
      <anchor>a7cb4a23791fdd0444ef4ed8047fa76cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; PosType &gt;</type>
      <name>nu</name>
      <anchorfile>a00555.html</anchorfile>
      <anchor>af00b71848621c6e28b4ac39063596a8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; TensorType &gt;</type>
      <name>d2omega</name>
      <anchorfile>a00555.html</anchorfile>
      <anchor>ad8d4213e5a0f06dda6ed69d1f7ba38e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Jacobian</name>
      <anchorfile>a00555.html</anchorfile>
      <anchor>a887f29ae0a4df6b08e309dd5895454ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; PosType &gt;</type>
      <name>Deltax</name>
      <anchorfile>a00555.html</anchorfile>
      <anchor>a25a3eece640fb37ddafd2f8964bfcf41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; TensorType &gt;</type>
      <name>Jacob_matrix</name>
      <anchorfile>a00555.html</anchorfile>
      <anchor>af8872775e291f1c0cf7ac3705bc15c92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; TensorType &gt;</type>
      <name>Jacob_cofactor</name>
      <anchorfile>a00555.html</anchorfile>
      <anchor>af6a5539c7dda15467056187a30bec944</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TensorType</type>
      <name>unitMatrix</name>
      <anchorfile>a00555.html</anchorfile>
      <anchor>ad8dda0e2469f4c910ac3a7b77f21d99e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::SpaceWarp</name>
    <filename>a00572.html</filename>
    <base>qmcplusplus::QMCTraits</base>
    <member kind="function">
      <type>void</type>
      <name>resize_one_ptcl_Jacob</name>
      <anchorfile>a00572.html</anchorfile>
      <anchor>ad9b9413848df91bc1adcb34d947d52c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_one_ptcl_Jacob</name>
      <anchorfile>a00572.html</anchorfile>
      <anchor>a738f0f965a2ed736e9a072fd989ada6f</anchor>
      <arglist>(int iel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a00572.html</anchorfile>
      <anchor>a26f57ad4eda2d61495756d9b1394dd6f</anchor>
      <arglist>(vector&lt; ParticleSet * &gt; &amp;IonSets, DistanceTableData *dtprime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>warp_one</name>
      <anchorfile>a00572.html</anchorfile>
      <anchor>a0a733c6dc88af9dafee77d45b77907fc</anchor>
      <arglist>(int iel, bool require_register)</arglist>
    </member>
    <member kind="function">
      <type>PosType</type>
      <name>get_displacement</name>
      <anchorfile>a00572.html</anchorfile>
      <anchor>a53a14811f6a4a42001778c3dc9f401f4</anchor>
      <arglist>(int iptcl, int ipsi)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>get_Jacobian</name>
      <anchorfile>a00572.html</anchorfile>
      <anchor>a297a9c4195914b8eb69f19e5ec3b0fa3</anchor>
      <arglist>(int iptcl, int ipsi)</arglist>
    </member>
    <member kind="function">
      <type>TensorType</type>
      <name>get_Jacob_matrix</name>
      <anchorfile>a00572.html</anchorfile>
      <anchor>a5571deafb197f4c461f2e0227aac8cb4</anchor>
      <arglist>(int iptcl, int ipsi)</arglist>
    </member>
    <member kind="function">
      <type>TensorType</type>
      <name>get_Jacob_cofactor</name>
      <anchorfile>a00572.html</anchorfile>
      <anchor>a13084baf6bdc78a7415376b96fef780a</anchor>
      <arglist>(int iptcl, int ipsi)</arglist>
    </member>
    <member kind="function">
      <type>PosType</type>
      <name>get_grad_ln_Jacob</name>
      <anchorfile>a00572.html</anchorfile>
      <anchor>a3204f2a4adb38270efe744b78b75034a</anchor>
      <arglist>(int iptcl, int ipsi)</arglist>
    </member>
    <member kind="function">
      <type>PosType</type>
      <name>get_grad_ln_Jacob_num</name>
      <anchorfile>a00572.html</anchorfile>
      <anchor>a795e6d83f5655e0b2729fcd19f8b176f</anchor>
      <arglist>(int iptcl, int ipsi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerData</name>
      <anchorfile>a00572.html</anchorfile>
      <anchor>af01b887a12bef86699cb876ce9da7236</anchor>
      <arglist>(vector&lt; ParticleSet * &gt; &amp;plist, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateBuffer</name>
      <anchorfile>a00572.html</anchorfile>
      <anchor>a94eeefe3f3d32b34694fa7b25bab6137</anchor>
      <arglist>(PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyToBuffer</name>
      <anchorfile>a00572.html</anchorfile>
      <anchor>a8297e31e3f5cd9d4a31ca0788f704785</anchor>
      <arglist>(PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>a00572.html</anchorfile>
      <anchor>a73e6a09b942a87453f53859232beb655</anchor>
      <arglist>(PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>dtPrimary</name>
      <anchorfile>a00572.html</anchorfile>
      <anchor>ac533044c38e53c01a3a3dc3b33676a3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nptcl</name>
      <anchorfile>a00572.html</anchorfile>
      <anchor>a4c2c6e7361b4c13b50abb715fbd0c71a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ncenter</name>
      <anchorfile>a00572.html</anchorfile>
      <anchor>abab103f59d6570f94946bc71eafe609b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>npsi</name>
      <anchorfile>a00572.html</anchorfile>
      <anchor>a043cf8462771708c77f4d1898b0b25f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>SizeOfR</name>
      <anchorfile>a00572.html</anchorfile>
      <anchor>a4e48acd1f932266c7c94bdc4fd273c2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>r</name>
      <anchorfile>a00572.html</anchorfile>
      <anchor>a2668b80bdaa9971c1fcc15d3fe1ba4c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>rinv</name>
      <anchorfile>a00572.html</anchorfile>
      <anchor>abd430678b2ed568b4a65de07c39af5dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; PosType &gt;</type>
      <name>dr</name>
      <anchorfile>a00572.html</anchorfile>
      <anchor>aa67dcfe1eac41006cd0f90c235b69511</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; vector&lt; PosType &gt; &gt;</type>
      <name>Delta</name>
      <anchorfile>a00572.html</anchorfile>
      <anchor>a09328a7d8e70dbfd96018e3a4a9a06f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; ParticleSet * &gt;</type>
      <name>PtclRefs</name>
      <anchorfile>a00572.html</anchorfile>
      <anchor>a52617217073e938c31e8aa93ebd4191c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; SinglePtclWarp * &gt;</type>
      <name>WarpVector</name>
      <anchorfile>a00572.html</anchorfile>
      <anchor>ae87b5370f10d7bc7e1868913f3bf7d5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; RealType &gt;</type>
      <name>one_ptcl_Jacob</name>
      <anchorfile>a00572.html</anchorfile>
      <anchor>ae023abec9958f416b46ffa05b5cc679b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::VMCFactory</name>
    <filename>a00628.html</filename>
    <member kind="function">
      <type></type>
      <name>VMCFactory</name>
      <anchorfile>a00628.html</anchorfile>
      <anchor>a4bf69989a7c53118d75eb01d5c73e593</anchor>
      <arglist>(int vmode, xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>QMCDriver *</type>
      <name>create</name>
      <anchorfile>a00628.html</anchorfile>
      <anchor>a70e12c883c07b0b2ad93bdb71a4dc0e3</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, ParticleSetPool &amp;ptclpool, HamiltonianPool &amp;hpool, WaveFunctionPool &amp;ppool)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>VMCMode</name>
      <anchorfile>a00628.html</anchorfile>
      <anchor>a239e91f0849b2bb1caa7aaf865512a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>xmlNodePtr</type>
      <name>myNode</name>
      <anchorfile>a00628.html</anchorfile>
      <anchor>ade03b7f5a1fd4d07359c6e19af6db843</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::VMCBranch</name>
    <filename>a00627.html</filename>
    <member kind="function">
      <type></type>
      <name>VMCBranch</name>
      <anchorfile>a00627.html</anchorfile>
      <anchor>aacd29f3006ee236a0733fb85c69fc565</anchor>
      <arglist>(BranchBase &amp;bb)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>phaseChanged</name>
      <anchorfile>a00627.html</anchorfile>
      <anchor>a3b9d41a7b19a655c633bf3ad79c45287</anchor>
      <arglist>(double r, double phi) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weight</name>
      <anchorfile>a00627.html</anchorfile>
      <anchor>a9d984d1e600eb41ebc51527fa16be3ef</anchor>
      <arglist>(double enew, double eold) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::FixedNodeCBranch</name>
    <filename>a00226.html</filename>
    <member kind="function">
      <type></type>
      <name>FixedNodeBranch</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a1fc0f28a533f3d033dde99010550548a</anchor>
      <arglist>(BranchBase &amp;bb)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>phaseChanged</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a3b9d41a7b19a655c633bf3ad79c45287</anchor>
      <arglist>(double r, double phi) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weight</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a9d984d1e600eb41ebc51527fa16be3ef</anchor>
      <arglist>(double enew, double eold) const </arglist>
    </member>
    <member kind="variable">
      <type>const BranchBase &amp;</type>
      <name>brancher</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>ab58b0ed83758e3ca605e792bf0ce4117</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::WalkerControlBase</name>
    <filename>a00630.html</filename>
    <base>qmcplusplus::QMCTraits</base>
    <base>qmcplusplus::MPIObjectBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>branch</name>
      <anchorfile>a00630.html</anchorfile>
      <anchor>acc1df91a7d28e7e531dcb8ce7bae9f76</anchor>
      <arglist>(int iter, MCWalkerConfiguration &amp;W, RealType trigger)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::WaveFunctionTester</name>
    <filename>a00636.html</filename>
    <base>qmcplusplus::QMCDriver</base>
    <member kind="function">
      <type></type>
      <name>WaveFunctionTester</name>
      <anchorfile>a00636.html</anchorfile>
      <anchor>ad979fa38bb53048132dc4d630430e182</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, ParticleSetPool &amp;ptclPool, WaveFunctionPool &amp;ppool)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~WaveFunctionTester</name>
      <anchorfile>a00636.html</anchorfile>
      <anchor>a9250bbf93f8c4ff5ca681b7c23748b3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a00636.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00636.html</anchorfile>
      <anchor>a53d41041cb4702a9ff3b5b112260fd25</anchor>
      <arglist>(xmlNodePtr q)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>WaveFunctionTester</name>
      <anchorfile>a00636.html</anchorfile>
      <anchor>ac79137cde695d7c0f8a1bce02a75765c</anchor>
      <arglist>(const WaveFunctionTester &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>WaveFunctionTester &amp;</type>
      <name>operator=</name>
      <anchorfile>a00636.html</anchorfile>
      <anchor>a78fc7b169e0972102d71ada4e6d08e79</anchor>
      <arglist>(const WaveFunctionTester &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>runRatioTest</name>
      <anchorfile>a00636.html</anchorfile>
      <anchor>abfeefcc01f8231e78ba1fee5ffd417e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>runRatioTest2</name>
      <anchorfile>a00636.html</anchorfile>
      <anchor>a328d959bbeb025eaa54d160430ed8dab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>runBasicTest</name>
      <anchorfile>a00636.html</anchorfile>
      <anchor>a75f32341bcbe39b885135697a97da75b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>runCloneTest</name>
      <anchorfile>a00636.html</anchorfile>
      <anchor>adf3c3cd1ee8ba9252f56cece0ff791ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>runDerivTest</name>
      <anchorfile>a00636.html</anchorfile>
      <anchor>a15d2d573af5208549af11386b58bb4e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>runDerivCloneTest</name>
      <anchorfile>a00636.html</anchorfile>
      <anchor>abfe53681f7f77d2bada00cfc00a0e9fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>runGradSourceTest</name>
      <anchorfile>a00636.html</anchorfile>
      <anchor>a240987dbb928708431fd50b0922e1757</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>runZeroVarianceTest</name>
      <anchorfile>a00636.html</anchorfile>
      <anchor>ad9401c8fde8e4864e8054e4b59654c0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>runwftricks</name>
      <anchorfile>a00636.html</anchorfile>
      <anchor>a04a31c52a41aa2a51664bb0915eb82fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>runNodePlot</name>
      <anchorfile>a00636.html</anchorfile>
      <anchor>a16c954ded855312a62c3edd05c5b5f3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>printEloc</name>
      <anchorfile>a00636.html</anchorfile>
      <anchor>ab7fbde8d8b7cbed65835e6ce12a6e34e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>Mv3</name>
      <anchorfile>a00636.html</anchorfile>
      <anchor>a8be766eae47af69a7b745eea458f17a0</anchor>
      <arglist>(vector&lt; vector&lt; RealType &gt; &gt; &amp;M, vector&lt; RealType &gt; &amp;v)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSetPool &amp;</type>
      <name>PtclPool</name>
      <anchorfile>a00636.html</anchorfile>
      <anchor>a39b16d3a235f8d1a9149373a05cddeed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>checkRatio</name>
      <anchorfile>a00636.html</anchorfile>
      <anchor>a06f9fa93142323659971cb3cf0e51ecf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>checkClone</name>
      <anchorfile>a00636.html</anchorfile>
      <anchor>a6334a3d94b620b1ccd47f8684cf0e64f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>checkHamPbyP</name>
      <anchorfile>a00636.html</anchorfile>
      <anchor>a1fe911fc1685478890b5642f988c6d2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>sourceName</name>
      <anchorfile>a00636.html</anchorfile>
      <anchor>a70e97217df148a69be817ad343d4b2de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>wftricks</name>
      <anchorfile>a00636.html</anchorfile>
      <anchor>ab2be6a0fa5b5f7e6bbbf4b7570f7db6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>checkEloc</name>
      <anchorfile>a00636.html</anchorfile>
      <anchor>aa9b8a464f968ae55f2f83b4f6d113c54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>xmlNodePtr</type>
      <name>myNode</name>
      <anchorfile>a00636.html</anchorfile>
      <anchor>ade03b7f5a1fd4d07359c6e19af6db843</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ofstream *</type>
      <name>fout</name>
      <anchorfile>a00636.html</anchorfile>
      <anchor>a2860c54fc5827ea79be66a6586df2aa8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::LoneElectron</name>
    <filename>a00358.html</filename>
    <member kind="function">
      <type></type>
      <name>LoneElectron</name>
      <anchorfile>a00358.html</anchorfile>
      <anchor>ac0d2db219a725f6e8fa4d805e89e38be</anchor>
      <arglist>(int id, double bl)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ID</name>
      <anchorfile>a00358.html</anchorfile>
      <anchor>af180e926633cde08a05ccbc3af397ee4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>BondLength</name>
      <anchorfile>a00358.html</anchorfile>
      <anchor>ac81704de29bbc559abae4cecde43d138</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::InitMolecularSystem</name>
    <filename>a00309.html</filename>
    <base>OhmmsElementBase</base>
    <member kind="function">
      <type></type>
      <name>InitMolecularSystem</name>
      <anchorfile>a00309.html</anchorfile>
      <anchor>a0c7e21f4d6c4a7d8718d9fc522f7db10</anchor>
      <arglist>(ParticleSetPool *pset, const char *aname=&quot;mosystem&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a00309.html</anchorfile>
      <anchor>aff5c5f3388cff49ff5b118366e2fe788</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00309.html</anchorfile>
      <anchor>a344f0b89ae376f79ee25adb51168d1f0</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00309.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00309.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initAtom</name>
      <anchorfile>a00309.html</anchorfile>
      <anchor>a2b0e15226d5ec3a6e0960d1406c4ab23</anchor>
      <arglist>(ParticleSet *ions, ParticleSet *els)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initMolecule</name>
      <anchorfile>a00309.html</anchorfile>
      <anchor>a6461417826ff6fdf322da8506b5010e9</anchor>
      <arglist>(ParticleSet *ions, ParticleSet *els)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initWithVolume</name>
      <anchorfile>a00309.html</anchorfile>
      <anchor>ab1446f79d620bf2bf5acb7c1508b0b76</anchor>
      <arglist>(ParticleSet *ions, ParticleSet *els)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSetPool *</type>
      <name>ptclPool</name>
      <anchorfile>a00309.html</anchorfile>
      <anchor>a7ce6a484ce14fd57c87e21944c125a84</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::BasisGroupType</name>
    <filename>a00035.html</filename>
    <member kind="function">
      <type></type>
      <name>BasisGroupType</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a5f1b6f2652a8082503a27373598a56d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasisGroupType</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a7488feb7cf2158cc8a83ddcb6c1079be</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>aec50e004c666d39bb431a86be99acc90</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Excluded</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a7b70e32f03fdfa5547757b2f828e1260</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>L</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a61b43f3326e96036caf1c76875b794cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>xmlNodePtr</type>
      <name>curPtr</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a46c0bf62a812fea7672ce18f06ef71eb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::MO2Grid3D</name>
    <filename>a00380.html</filename>
    <base>qmcplusplus::QMCAppBase</base>
    <member kind="typedef">
      <type>OrbitalBase::RealType</type>
      <name>RealType</name>
      <anchorfile>a00380.html</anchorfile>
      <anchor>a6a83deb90d5857d4890b2890646db240</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalBase::ValueType</type>
      <name>ValueType</name>
      <anchorfile>a00380.html</anchorfile>
      <anchor>a4dc2f86c444fc6ee7392138c359db75c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalBase::PosType</type>
      <name>PosType</name>
      <anchorfile>a00380.html</anchorfile>
      <anchor>accce458477f3728b007f670b79bfb705</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MO2Grid3D</name>
      <anchorfile>a00380.html</anchorfile>
      <anchor>a22b255cdfe9901e983fc7bba2a843f77</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MO2Grid3D</name>
      <anchorfile>a00380.html</anchorfile>
      <anchor>aa02f58cfb70e1bb491bb4ea45f5550e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validateXML</name>
      <anchorfile>a00380.html</anchorfile>
      <anchor>a1839eba3d93c783b2a13f69be0d9c24b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>a00380.html</anchorfile>
      <anchor>ae006844a02161d12182ab372ca5c257b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>xmlNodePtr</type>
      <name>generateNumericalOrbitals</name>
      <anchorfile>a00380.html</anchorfile>
      <anchor>a5329538e3e75183740e9fc54d96e05ab</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyOrbitalSet</name>
      <anchorfile>a00380.html</anchorfile>
      <anchor>ad50c208a1d0dc8ebc9e4800bd4c74a99</anchor>
      <arglist>(map&lt; string, TriCubicSplineT&lt; ValueType &gt; * &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>selectCore</name>
      <anchorfile>a00380.html</anchorfile>
      <anchor>a4a965a269d102be1cd69946a8c44feda</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getEigVectors</name>
      <anchorfile>a00380.html</anchorfile>
      <anchor>acab6ad8f3b9a6690a7376714538556fa</anchor>
      <arglist>(xmlNodePtr cur, const Matrix&lt; RealType &gt; &amp;A)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>xmlNodePtr</type>
      <name>copyDeterminant</name>
      <anchorfile>a00380.html</anchorfile>
      <anchor>ad9fcd27f806e9021cced1707f4c311c2</anchor>
      <arglist>(xmlNodePtr cur, bool addg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>xmlNodePtr</type>
      <name>copyDeterminantSet</name>
      <anchorfile>a00380.html</anchorfile>
      <anchor>a57f251c0e32d37e1c7770ef4e8f3ab03</anchor>
      <arglist>(xmlNodePtr cur, xmlNodePtr splinePtr)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>InFileRoot</name>
      <anchorfile>a00380.html</anchorfile>
      <anchor>a756e0da9b582233fc2bab85f81cb5ec8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSetPool *</type>
      <name>ptclPool</name>
      <anchorfile>a00380.html</anchorfile>
      <anchor>a7ce6a484ce14fd57c87e21944c125a84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MCWalkerConfiguration *</type>
      <name>Electrons</name>
      <anchorfile>a00380.html</anchorfile>
      <anchor>a079ba4a2984e432c522b2f52d335cf3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet *</type>
      <name>Ions</name>
      <anchorfile>a00380.html</anchorfile>
      <anchor>a9d3c600df48360de28de37c729e75748</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>xmlNodePtr</type>
      <name>dsetPtr</name>
      <anchorfile>a00380.html</anchorfile>
      <anchor>a5e884a404cc5a4510b07a9e7a7eae042</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>xmlNodePtr</type>
      <name>normalPtr</name>
      <anchorfile>a00380.html</anchorfile>
      <anchor>a4e9f891f6d25ef4760f3c573de706a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>xmlNodePtr</type>
      <name>corePtr</name>
      <anchorfile>a00380.html</anchorfile>
      <anchor>a25fd1a03c6fab750d097b25f8cfc0846</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, TriCubicSplineT&lt; ValueType &gt; * &gt;</type>
      <name>SPOSet</name>
      <anchorfile>a00380.html</anchorfile>
      <anchor>a5682112af0e029b7b6866f79334c16a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::QMCDriverFactory</name>
    <filename>a00496.html</filename>
    <base>qmcplusplus::MPIObjectBase</base>
  </compound>
  <compound kind="dir">
    <name>QMCWaveFunctions/AtomicOrbitals</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/AtomicOrbitals/</path>
    <filename>dir_8eb609aa1427a159b3539a3636512054.html</filename>
    <file>HeSTOClementiRottie.cpp</file>
    <file>HeSTOClementiRottie.h</file>
    <file>HFAtomicSTOSet.cpp</file>
    <file>HFAtomicSTOSet.h</file>
    <file>HFAtomicSTOSetBuilder.cpp</file>
    <file>HFAtomicSTOSetBuilder.h</file>
  </compound>
  <compound kind="dir">
    <name>QMCDrivers/CorrelatedSampling</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/CorrelatedSampling/</path>
    <filename>dir_86a62956bb20bb70a6c91d79b0b4289e.html</filename>
    <file>CSUpdateBase.cpp</file>
    <file>CSUpdateBase.h</file>
    <file>CSVMC.cpp</file>
    <file>CSVMC.h</file>
    <file>CSVMCUpdateAll.cpp</file>
    <file>CSVMCUpdateAll.h</file>
    <file>CSVMCUpdatePbyP.cpp</file>
    <file>CSVMCUpdatePbyP.h</file>
  </compound>
  <compound kind="dir">
    <name>Numerics/CUDA</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/CUDA/</path>
    <filename>dir_fae3af671ab930c1f1bcdba3a31a0ee1.html</filename>
    <file>cuda_inverse.h</file>
  </compound>
  <compound kind="dir">
    <name>QMCDrivers/DMC</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>dir_a4697ea49f307d049005488d398ce415.html</filename>
    <file>DMC.cpp</file>
    <file>DMC.h</file>
    <file>DMC_CUDA.cpp</file>
    <file>DMC_CUDA.h</file>
    <file>DMCFactory.cpp</file>
    <file>DMCFactory.h</file>
    <file>DMCNonLocalUpdate.cpp</file>
    <file>DMCNonLocalUpdate.h</file>
    <file>DMCOMP.cpp</file>
    <file>DMCOMP.h</file>
    <file>DMCOMP.master.cpp</file>
    <file>DMCOMPOPT.cpp</file>
    <file>DMCOMPOPT.h</file>
    <file>DMCPeta.cpp</file>
    <file>DMCPeta.h</file>
    <file>DMCUpdateAll.cpp</file>
    <file>DMCUpdateAll.h</file>
    <file>DMCUpdatePbyP.cpp</file>
    <file>DMCUpdatePbyP.h</file>
    <file>DMCUpdatePbyPFast.cpp</file>
    <file>DMCWOS.cpp</file>
    <file>DMCWOS.h</file>
    <file>WalkerControlFactory.cpp</file>
    <file>WalkerControlFactory.h</file>
    <file>WalkerControlMPI.cpp</file>
    <file>WalkerControlMPI.h</file>
    <file>WalkerPureDMC.cpp</file>
    <file>WalkerPureDMC.h</file>
    <file>WalkerReconfiguration.cpp</file>
    <file>WalkerReconfiguration.h</file>
    <file>WalkerReconfigurationMPI.cpp</file>
    <file>WalkerReconfigurationMPI.h</file>
  </compound>
  <compound kind="dir">
    <name>QMCWaveFunctions/ElectronGas</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/ElectronGas/</path>
    <filename>dir_0a7f20d1c4eaa4758b4a4bc2e5414850.html</filename>
    <file>ElectronGasComplexOrbitalBuilder.cpp</file>
    <file>ElectronGasComplexOrbitalBuilder.h</file>
    <file>ElectronGasOrbitalBuilder.cpp</file>
    <file>ElectronGasOrbitalBuilder.h</file>
    <file>HEGGrid.h</file>
  </compound>
  <compound kind="dir">
    <name>Estimators</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Estimators/</path>
    <filename>dir_f75a46c5c982618628beecbcb815a4c9.html</filename>
    <dir>Estimators/ReptationEstimators</dir>
    <file>accumulators.h</file>
    <file>AlternateReleasedNodeEnergyEstimator.h</file>
    <file>BlockHistogram.h</file>
    <file>CollectablesEstimator.cpp</file>
    <file>CollectablesEstimator.h</file>
    <file>ComboPolymerEstimator.h</file>
    <file>CompositeEstimators.h</file>
    <file>CSEnergyEstimator.cpp</file>
    <file>CSEnergyEstimator.h</file>
    <file>CSPolymerEstimator.h</file>
    <file>DMCEnergyEstimator.h</file>
    <file>EstimatorManager.cpp</file>
    <file>EstimatorManager.h</file>
    <file>FWEstimator.h</file>
    <file>HFDHE2PolymerEstimator.h</file>
    <file>HFPolymerEstimator.h</file>
    <file>LocalEnergyEstimator.cpp</file>
    <file>LocalEnergyEstimator.h</file>
    <file>LocalEnergyEstimatorHDF.cpp</file>
    <file>LocalEnergyEstimatorHDF.h</file>
    <file>LocalEnergyOnlyEstimator.h</file>
    <file>MJPolymerEstimator.h</file>
    <file>MultipleEnergyEstimator.cpp</file>
    <file>MultipleEnergyEstimator.h</file>
    <file>PolarizationEstimator.h</file>
    <file>PolymerEstimator.h</file>
    <file>ReleasedNodeEnergyEstimator.cpp</file>
    <file>ReleasedNodeEnergyEstimator.h</file>
    <file>RMCLocalEnergyEstimator.cpp</file>
    <file>RMCLocalEnergyEstimator.h</file>
    <file>RQMCMultipleEstimator.cpp</file>
    <file>RQMCMultipleEstimator.h</file>
    <file>ScalarEstimatorBase.h</file>
    <file>VectorEstimatorImpl.h</file>
    <file>WFMCOnlyEstimator.cpp</file>
    <file>WFMCOnlyEstimator.h</file>
  </compound>
  <compound kind="dir">
    <name>QMCWaveFunctions/Fermion</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>dir_0d19adde50f5c206443e74dba39df802.html</filename>
    <file>Backflow_ee.h</file>
    <file>Backflow_ee_kSpace.h</file>
    <file>Backflow_eI.h</file>
    <file>Backflow_eI_spin.h</file>
    <file>BackflowBuilder.cpp</file>
    <file>BackflowBuilder.h</file>
    <file>BackflowFunctionBase.h</file>
    <file>BackflowTransformation.h</file>
    <file>BFsplineFunctor.h</file>
    <file>ci_builder.h</file>
    <file>ci_configuration.h</file>
    <file>ci_configuration2.h</file>
    <file>ci_node.h</file>
    <file>determinant_update.h</file>
    <file>DiracDeterminantAFM.cpp</file>
    <file>DiracDeterminantAFM.h</file>
    <file>DiracDeterminantBase.cpp</file>
    <file>DiracDeterminantBase.h</file>
    <file>DiracDeterminantCUDA.cpp</file>
    <file>DiracDeterminantCUDA.h</file>
    <file>DiracDeterminantIterative.cpp</file>
    <file>DiracDeterminantIterative.h</file>
    <file>DiracDeterminantOpt.cpp</file>
    <file>DiracDeterminantOpt.h</file>
    <file>DiracDeterminantT.h</file>
    <file>DiracDeterminantTruncation.cpp</file>
    <file>DiracDeterminantTruncation.h</file>
    <file>DiracDeterminantWithBackflow.cpp</file>
    <file>DiracDeterminantWithBackflow.h</file>
    <file>excitation_node.h</file>
    <file>ExcitationClass.h</file>
    <file>GaussianFunctor.h</file>
    <file>ILUGMRESInterface.h</file>
    <file>MultiDiracDeterminantBase.cpp</file>
    <file>MultiDiracDeterminantBase.h</file>
    <file>MultiDiracDeterminantBase_help.cpp</file>
    <file>MultiDiracDeterminantBase_help.h</file>
    <file>MultiDiracDeterminantWithBackflow.cpp</file>
    <file>MultiDiracDeterminantWithBackflow.h</file>
    <file>MultiSlaterDeterminant.cpp</file>
    <file>MultiSlaterDeterminant.h</file>
    <file>MultiSlaterDeterminantFast.cpp</file>
    <file>MultiSlaterDeterminantFast.h</file>
    <file>MultiSlaterDeterminantWithBackflow.cpp</file>
    <file>MultiSlaterDeterminantWithBackflow.h</file>
    <file>RNDiracDeterminantBase.cpp</file>
    <file>RNDiracDeterminantBase.h</file>
    <file>RNDiracDeterminantBaseAlternate.cpp</file>
    <file>RNDiracDeterminantBaseAlternate.h</file>
    <file>SlaterDet.cpp</file>
    <file>SlaterDet.h</file>
    <file>SlaterDetBuilder.cpp</file>
    <file>SlaterDetBuilder.h</file>
    <file>SlaterDetCUDA.cpp</file>
    <file>SlaterDetWithBackflow.cpp</file>
    <file>SlaterDetWithBackflow.h</file>
    <file>SPOSetProxy.cpp</file>
    <file>SPOSetProxy.h</file>
    <file>SPOSetProxyForMSD.cpp</file>
    <file>SPOSetProxyForMSD.h</file>
  </compound>
  <compound kind="dir">
    <name>QMCWaveFunctions/Jastrow</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>dir_e9fbc176aac2ae6ab399569778e21afd.html</filename>
    <file>BesselZeroFunctor.h</file>
    <file>BsplineFunctor.cpp</file>
    <file>BsplineFunctor.h</file>
    <file>BsplineFunctor3D.h</file>
    <file>BsplineJastrowBuilder.cpp</file>
    <file>BsplineJastrowBuilder.h</file>
    <file>BsplineJastrowCuda.h</file>
    <file>BsplineJastrowCudaPBC.h</file>
    <file>CBSOBuilder.cpp</file>
    <file>CBSOBuilder.h</file>
    <file>ChebyshevFunctor.h</file>
    <file>CompositeFunctor.h</file>
    <file>CubicBsplineGroup.h</file>
    <file>CudaSpline.h</file>
    <file>DerivPadeFunctors.h</file>
    <file>DerivWMFunctor.h</file>
    <file>DiffOneBodyJastrowOrbital.h</file>
    <file>DiffOneBodySpinJastrowOrbital.h</file>
    <file>DiffTwoBodyJastrowOrbital.h</file>
    <file>eeI_JastrowBuilder.cpp</file>
    <file>eeI_JastrowBuilder.h</file>
    <file>eeI_JastrowOrbital.h</file>
    <file>GaussianFunctor.h</file>
    <file>JAABuilder.cpp</file>
    <file>JAABuilder.h</file>
    <file>JABBuilder.cpp</file>
    <file>JABBuilder.h</file>
    <file>JastrowBasisBuilder.cpp</file>
    <file>JastrowBasisBuilder.h</file>
    <file>JastrowBuilder.cpp</file>
    <file>JastrowBuilder.h</file>
    <file>kSpaceJastrow.cpp</file>
    <file>kSpaceJastrow.h</file>
    <file>kSpaceJastrowBuilder.cpp</file>
    <file>kSpaceJastrowBuilder.h</file>
    <file>LinearCombinationFunctor.h</file>
    <file>LRBreakupUtilities.h</file>
    <file>LRTwoBodyJastrow.cpp</file>
    <file>LRTwoBodyJastrow.h</file>
    <file>McMillanJ2Functor.h</file>
    <file>McMillanJ2GFunctor.h</file>
    <file>ModPadeFunctor.h</file>
    <file>NLjobGPU.h</file>
    <file>NumericalJastrowFunctor.h</file>
    <file>OneBodyJastrowOrbital.h</file>
    <file>OneBodyJastrowOrbitalBspline.cpp</file>
    <file>OneBodyJastrowOrbitalBspline.h</file>
    <file>OneBodySpinJastrowOrbital.h</file>
    <file>OpenGaussianSlaterFunctor.h</file>
    <file>PadeFunctors.h</file>
    <file>PadeJastrowBuilder.cpp</file>
    <file>PadeJastrowBuilder.h</file>
    <file>PolarizedJastrow.h</file>
    <file>PolyConstraints.cpp</file>
    <file>PolyConstraints.h</file>
    <file>PolyFunctor.h</file>
    <file>PolynomialFunctor3D.h</file>
    <file>RPAJastrow.cpp</file>
    <file>RPAJastrow.h</file>
    <file>RPAJastrowFunctor.h</file>
    <file>singleRPAJastrowBuilder.cpp</file>
    <file>singleRPAJastrowBuilder.h</file>
    <file>SplineFunctors.h</file>
    <file>ThreeBodyBlockSparse.cpp</file>
    <file>ThreeBodyBlockSparse.h</file>
    <file>ThreeBodyGeminal.cpp</file>
    <file>ThreeBodyGeminal.h</file>
    <file>ThreeBodyGeminalBuilder.cpp</file>
    <file>ThreeBodyGeminalBuilder.h</file>
    <file>ThreeBodyJastrowOrbital.h</file>
    <file>ThreeBodyPade.h</file>
    <file>ThreeBodyPadeBuilder.cpp</file>
    <file>ThreeBodyPadeBuilder.h</file>
    <file>TwoBodyJastrowFunction.h</file>
    <file>TwoBodyJastrowFunction.Shared.h</file>
    <file>TwoBodyJastrowOrbital.h</file>
    <file>TwoBodyJastrowOrbitalBspline.cpp</file>
    <file>TwoBodyJastrowOrbitalBspline.h</file>
    <file>WMFunctor.h</file>
    <file>WMJastrowBuilder.cpp</file>
    <file>WMJastrowBuilder.h</file>
  </compound>
  <compound kind="dir">
    <name>Lattice</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Lattice/</path>
    <filename>dir_2aa74d9db319af6ea27d5459a7fdc4e0.html</filename>
    <file>CrystalLattice.cpp</file>
    <file>CrystalLattice.h</file>
    <file>LatticeAnalyzer.h</file>
    <file>LatticeOperations.h</file>
    <file>MakeCrystalLattice.h</file>
    <file>MultiGridParticleLayout.h</file>
    <file>ParticleBConds.h</file>
    <file>ParticleBConds2D.h</file>
    <file>ParticleBConds3D.h</file>
    <file>Region.h</file>
    <file>RegMultiGrid.h</file>
    <file>Uniform3DGridLayout.cpp</file>
    <file>Uniform3DGridLayout.h</file>
    <file>UniformCartesianGrid.h</file>
    <file>UniformGridConnection.h</file>
    <file>UniformGridLayout.h</file>
  </compound>
  <compound kind="dir">
    <name>Message</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Message/</path>
    <filename>dir_04bb8606242e6428d10cd7ddd95e6368.html</filename>
    <file>BoostMpiAdaptor.h</file>
    <file>CommOperators.h</file>
    <file>CommOperatorsMPI.h</file>
    <file>CommOperatorsSingle.h</file>
    <file>Communicate.cpp</file>
    <file>Communicate.h</file>
    <file>CommunicateGroup.cpp</file>
    <file>CommunicateGroup.h</file>
    <file>CommUtilities.h</file>
    <file>MPIObjectBase.cpp</file>
    <file>MPIObjectBase.h</file>
    <file>OpenMP.h</file>
    <file>TagMaker.h</file>
  </compound>
  <compound kind="dir">
    <name>QMCWaveFunctions/MolecularOrbitals</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>dir_59b76e99ebc094214d6fbb87314a4203.html</filename>
    <file>AtomicBasisBuilder.h</file>
    <file>BsplineAOBuilder.cpp</file>
    <file>BsplineAOBuilder.h</file>
    <file>GTOBuilder.cpp</file>
    <file>GTOBuilder.h</file>
    <file>GTOMolecularOrbitals.cpp</file>
    <file>MolecularBasisBuilder.h</file>
    <file>NGOBuilder.cpp</file>
    <file>NGOBuilder.h</file>
    <file>STOBuilder.cpp</file>
    <file>STOBuilder.h</file>
  </compound>
  <compound kind="dir">
    <name>Numerics</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Numerics/</path>
    <filename>dir_22d954cd03c3057b6fcf702b65820bfa.html</filename>
    <dir>Numerics/CUDA</dir>
    <file>Blasf.h</file>
    <file>BlockMatrixFunctions.h</file>
    <file>BsplineOneDimSolvers.h</file>
    <file>CartesianTensor.h</file>
    <file>Clebsch_Gordan.cpp</file>
    <file>Clebsch_Gordan.h</file>
    <file>ConstScale.h</file>
    <file>CosineFunction.h</file>
    <file>CubicBspline.h</file>
    <file>CubicBsplineGrid.h</file>
    <file>CubicSpline.h</file>
    <file>CubicSplineEngine.h</file>
    <file>CubicSplineFunctions.cpp</file>
    <file>CubicSplineFunctions.h</file>
    <file>CubicSplineGrid.h</file>
    <file>determinant_operators.h</file>
    <file>DeterminantOperators.h</file>
    <file>e2iphi.h</file>
    <file>ExpFitClass.h</file>
    <file>FFTAbleVector.h</file>
    <file>FFTEngines.h</file>
    <file>GaussianBasisSet.h</file>
    <file>GaussianTimesRN.h</file>
    <file>GaussianTypeOrbital.h</file>
    <file>GridBConds.h</file>
    <file>GridTraits.h</file>
    <file>HDFNumericAttrib.h</file>
    <file>HDFSTLAttrib.h</file>
    <file>HDFTriCubicSpline.h</file>
    <file>LibxmlNumericIO.h</file>
    <file>LinearFit.h</file>
    <file>LinearSpline.h</file>
    <file>MatGrid1D.h</file>
    <file>MatrixOperators.h</file>
    <file>NRSplineFunctions.h</file>
    <file>OhmmsBlas.cpp</file>
    <file>OhmmsBlas.h</file>
    <file>OneDimCubicSpline.h</file>
    <file>OneDimGridBase.h</file>
    <file>OneDimGridFunctor.h</file>
    <file>OneDimIntegration.h</file>
    <file>OneDimLinearSpline.h</file>
    <file>OneDimNumGridFunctor.h</file>
    <file>OneDimQuinticSpline.h</file>
    <file>OptimizableFunctorBase.h</file>
    <file>RadialFunctorUtility.h</file>
    <file>RadialOrbitalBase.h</file>
    <file>SlaterBasisSet.h</file>
    <file>SlaterTypeOrbital.h</file>
    <file>SphericalTensor.h</file>
    <file>SymmetryOperations.h</file>
    <file>UOverRN.h</file>
    <file>XYZCubicGrid.h</file>
  </compound>
  <compound kind="dir">
    <name>OhmmsApp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/OhmmsApp/</path>
    <filename>dir_db0877375180b60df871aea927f37333.html</filename>
    <file>ProjectData.cpp</file>
    <file>ProjectData.h</file>
    <file>RandomNumberControl.cpp</file>
    <file>RandomNumberControl.h</file>
  </compound>
  <compound kind="dir">
    <name>OhmmsData</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/OhmmsData/</path>
    <filename>dir_fe4106afe1b6a83f4da567560454e83c.html</filename>
    <file>AttributeSet.h</file>
    <file>DataParserTemplate.h</file>
    <file>DOMProcessor.h</file>
    <file>FileUtility.h</file>
    <file>HDFAttribIO.h</file>
    <file>HDFStringAttrib.h</file>
    <file>Libxml2Doc.cpp</file>
    <file>Libxml2Doc.h</file>
    <file>libxmldefs.h</file>
    <file>OhmmsElementBase.h</file>
    <file>OhmmsIOBase.h</file>
    <file>OhmmsParameter.h</file>
    <file>ParameterSet.h</file>
    <file>RecordProperty.h</file>
  </compound>
  <compound kind="dir">
    <name>OhmmsPETE</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/OhmmsPETE/</path>
    <filename>dir_e57cd42ace61b95febd407f9770df751.html</filename>
    <file>OhmmsArray.h</file>
    <file>OhmmsMatrix.h</file>
    <file>OhmmsVector.h</file>
    <file>Tensor.h</file>
    <file>TinyVector.h</file>
  </compound>
  <compound kind="dir">
    <name>Particle</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Particle/</path>
    <filename>dir_4e1baebecbf169d84bf63cb3cdc6641f.html</filename>
    <file>accept_kernel.h</file>
    <file>AsymmetricDistanceTableData.h</file>
    <file>DistanceTable.cpp</file>
    <file>DistanceTable.h</file>
    <file>DistanceTableData.h</file>
    <file>FastParticleOperators.h</file>
    <file>HDFParticleAttrib.h</file>
    <file>HDFWalkerInput0.cpp</file>
    <file>HDFWalkerInput0.h</file>
    <file>HDFWalkerInput_0_0.cpp</file>
    <file>HDFWalkerInput_0_0.h</file>
    <file>HDFWalkerInput_0_4.cpp</file>
    <file>HDFWalkerInput_0_4.h</file>
    <file>HDFWalkerInputCollect.cpp</file>
    <file>HDFWalkerInputCollect.h</file>
    <file>HDFWalkerInputManager.cpp</file>
    <file>HDFWalkerInputManager.h</file>
    <file>HDFWalkerIO.h</file>
    <file>HDFWalkerIOEngine.cpp</file>
    <file>HDFWalkerIOEngine.h</file>
    <file>HDFWalkerOutput.cpp</file>
    <file>HDFWalkerOutput.h</file>
    <file>make_clones.cpp</file>
    <file>MCWalkerConfiguration.cpp</file>
    <file>MCWalkerConfiguration.h</file>
    <file>MixedBCDistanceTableData.h</file>
    <file>ParticleSet.BC.cpp</file>
    <file>ParticleSet.cpp</file>
    <file>ParticleSet.h</file>
    <file>ParticleSetProxy.cpp</file>
    <file>ParticleSetProxy.h</file>
    <file>PLayoutFunctions.h</file>
    <file>Reptile.h</file>
    <file>SymmetricDistanceTableData.h</file>
    <file>Walker.h</file>
  </compound>
  <compound kind="dir">
    <name>ParticleBase</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/ParticleBase/</path>
    <filename>dir_1754c5964b0f0f75c6532ee516efbcad.html</filename>
    <file>ParticleAttrib.cpp</file>
    <file>ParticleAttrib.h</file>
    <file>ParticleBase.cpp</file>
    <file>ParticleBase.h</file>
    <file>ParticleFunctions.h</file>
    <file>ParticleMessage.h</file>
    <file>ParticleUtility.h</file>
    <file>RandomSeqGenerator.h</file>
  </compound>
  <compound kind="dir">
    <name>ParticleIO</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/ParticleIO/</path>
    <filename>dir_fd82058df1c1841f58d0b7f4538079c3.html</filename>
    <file>ESHDFParticleParser.cpp</file>
    <file>ESHDFParticleParser.h</file>
    <file>GnomeParticleInputImpl.cpp</file>
    <file>HDFParticleAttrib.h</file>
    <file>HDFParticleIO.cpp</file>
    <file>HDFParticleIO.h</file>
    <file>ParticleIOUtility.cpp</file>
    <file>ParticleIOUtility.h</file>
    <file>ParticleLayoutIO.cpp</file>
    <file>ParticleLayoutIO.h</file>
    <file>XMLParticleIO.cpp</file>
    <file>XMLParticleIO.h</file>
  </compound>
  <compound kind="dir">
    <name>QMCWaveFunctions/PlaneWave</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/PlaneWave/</path>
    <filename>dir_cbd7f1724916afbbd7f3a3b0e5a600ae.html</filename>
    <file>PWBasis.cpp</file>
    <file>PWBasis.h</file>
    <file>PWOrbitalBuilder.cpp</file>
    <file>PWOrbitalBuilder.h</file>
    <file>PWOrbitalSet.cpp</file>
    <file>PWOrbitalSet.h</file>
    <file>PWParameterSet.cpp</file>
    <file>PWParameterSet.h</file>
    <file>PWRealOrbitalSet.cpp</file>
    <file>PWRealOrbitalSet.h</file>
  </compound>
  <compound kind="dir">
    <name>QMCApp</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCApp/</path>
    <filename>dir_6a16e495369554e329125978cb46116b.html</filename>
    <file>HamiltonianPool.cpp</file>
    <file>HamiltonianPool.h</file>
    <file>InitMolecularSystem.cpp</file>
    <file>InitMolecularSystem.h</file>
    <file>MO2Grid3D.cpp</file>
    <file>MO2Grid3D.h</file>
    <file>mo2grid3d_main.cpp</file>
    <file>ParticleSetPool.cpp</file>
    <file>ParticleSetPool.h</file>
    <file>qmcapp.cpp</file>
    <file>QMCAppBase.cpp</file>
    <file>QMCAppBase.h</file>
    <file>QMCDriverFactory.cpp</file>
    <file>QMCDriverFactory.h</file>
    <file>QMCInterface.cpp</file>
    <file>QMCInterface.h</file>
    <file>QMCMain.cpp</file>
    <file>QMCMain.h</file>
    <file>WaveFunctionPool.cpp</file>
    <file>WaveFunctionPool.h</file>
  </compound>
  <compound kind="dir">
    <name>QMCDrivers</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>dir_ff1c74a8ff59365bc80bc98a04d5e660.html</filename>
    <dir>QMCDrivers/CorrelatedSampling</dir>
    <dir>QMCDrivers/DMC</dir>
    <dir>QMCDrivers/RMC</dir>
    <dir>QMCDrivers/VMC</dir>
    <file>BranchIO.cpp</file>
    <file>BranchIO.h</file>
    <file>CloneManager.cpp</file>
    <file>CloneManager.h</file>
    <file>DriftOperators.h</file>
    <file>DummyQMC.cpp</file>
    <file>DummyQMC.h</file>
    <file>QMCCorrelatedSamplingLinearOptimize.cpp</file>
    <file>QMCCorrelatedSamplingLinearOptimize.h</file>
    <file>QMCCostFunctionBase.cpp</file>
    <file>QMCCostFunctionBase.h</file>
    <file>QMCCostFunctionCUDA.cpp</file>
    <file>QMCCostFunctionCUDA.h</file>
    <file>QMCCostFunctionOMP.cpp</file>
    <file>QMCCostFunctionOMP.h</file>
    <file>QMCCSLinearOptimizeWFmanagerOMP.cpp</file>
    <file>QMCCSLinearOptimizeWFmanagerOMP.h</file>
    <file>QMCDriver.cpp</file>
    <file>QMCDriver.h</file>
    <file>QMCFixedSampleLinearOptimize.cpp</file>
    <file>QMCFixedSampleLinearOptimize.h</file>
    <file>QMCLinearOptimize.cpp</file>
    <file>QMCLinearOptimize.h</file>
    <file>QMCOptimize.cpp</file>
    <file>QMCOptimize.h</file>
    <file>QMCUpdateBase.cpp</file>
    <file>QMCUpdateBase.h</file>
    <file>SimpleFixedNodeBranch.cpp</file>
    <file>SimpleFixedNodeBranch.h</file>
    <file>SinglePtclWarp.h</file>
    <file>SpaceWarp.cpp</file>
    <file>SpaceWarp.h</file>
    <file>WalkerAdvance.h</file>
    <file>WalkerControlBase.cpp</file>
    <file>WalkerControlBase.h</file>
    <file>WaveFunctionTester.cpp</file>
    <file>WaveFunctionTester.h</file>
  </compound>
  <compound kind="dir">
    <name>QMCHamiltonians</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>dir_01131e36a5f1499dcbdf69a64abea75d.html</filename>
    <file>BareKineticEnergy.h</file>
    <file>ChiesaCorrection.cpp</file>
    <file>ChiesaCorrection.h</file>
    <file>ConservedEnergy.h</file>
    <file>Coulomb_CUDA.h</file>
    <file>CoulombPBCAA.cpp</file>
    <file>CoulombPBCAA.h</file>
    <file>CoulombPBCAA_CUDA.cpp</file>
    <file>CoulombPBCAA_CUDA.h</file>
    <file>CoulombPBCAB.cpp</file>
    <file>CoulombPBCAB.h</file>
    <file>CoulombPBCAB_CUDA.cpp</file>
    <file>CoulombPBCAB_CUDA.h</file>
    <file>CoulombPotential.h</file>
    <file>CoulombPotential_CUDA.cpp</file>
    <file>CoulombPotential_CUDA.h</file>
    <file>CoulombPotentialFactory.cpp</file>
    <file>CudaCoulomb.h</file>
    <file>DensityEstimator.cpp</file>
    <file>DensityEstimator.h</file>
    <file>DispersionRelation.cpp</file>
    <file>DispersionRelation.h</file>
    <file>ECPComponentBuilder.1.cpp</file>
    <file>ECPComponentBuilder.2.cpp</file>
    <file>ECPComponentBuilder.cpp</file>
    <file>ECPComponentBuilder.h</file>
    <file>ECPotentialBuilder.cpp</file>
    <file>ECPotentialBuilder.h</file>
    <file>EffMKineticEnergy.h</file>
    <file>EwaldSum.h</file>
    <file>ForceBase.cpp</file>
    <file>ForceBase.h</file>
    <file>ForceCeperley.cpp</file>
    <file>ForceCeperley.h</file>
    <file>ForwardWalking.cpp</file>
    <file>ForwardWalking.h</file>
    <file>FSAtomPseudoPot.cpp</file>
    <file>FSAtomPseudoPot.h</file>
    <file>GaussianPot.h</file>
    <file>HamiltonianFactory.cpp</file>
    <file>HamiltonianFactory.h</file>
    <file>HardSphere.h</file>
    <file>HarmonicPotential.h</file>
    <file>HeEPotential.h</file>
    <file>HeEPotential_tail.h</file>
    <file>HePressure.h</file>
    <file>HeSAPT_smoothed.cpp</file>
    <file>HeSAPT_smoothed.h</file>
    <file>HFDBHE_smoothed.cpp</file>
    <file>HFDBHE_smoothed.h</file>
    <file>HFDHE2_Moroni1995.cpp</file>
    <file>HFDHE2_Moroni1995.h</file>
    <file>HFDHE2Potential.h</file>
    <file>HFDHE2Potential_tail.h</file>
    <file>HFDHE2PotentialWithCorrection.cpp</file>
    <file>HFDHE2PotentialWithCorrection.h</file>
    <file>HusePot.h</file>
    <file>JelliumPotential.h</file>
    <file>LennardJones_smoothed.cpp</file>
    <file>LennardJones_smoothed.h</file>
    <file>LocalCorePolPotential.cpp</file>
    <file>LocalCorePolPotential.h</file>
    <file>LocalECPotential.cpp</file>
    <file>LocalECPotential.h</file>
    <file>LocalECPotential_CUDA.cpp</file>
    <file>LocalECPotential_CUDA.h</file>
    <file>LocalMomentEstimator.cpp</file>
    <file>LocalMomentEstimator.h</file>
    <file>LocalPPotential.cpp</file>
    <file>LocalPPotential.h</file>
    <file>ModInsKineticEnergy.h</file>
    <file>ModPosTelPot.h</file>
    <file>MomentumDistribution.cpp</file>
    <file>MomentumDistribution.h</file>
    <file>MomentumEstimator.cpp</file>
    <file>MomentumEstimator.h</file>
    <file>MPC.cpp</file>
    <file>MPC.h</file>
    <file>MPC_CUDA.cpp</file>
    <file>MPC_CUDA.h</file>
    <file>NLPP.h</file>
    <file>NonLocalECPComponent.cpp</file>
    <file>NonLocalECPComponent.h</file>
    <file>NonLocalECPotential.cpp</file>
    <file>NonLocalECPotential.h</file>
    <file>NonLocalECPotential_CUDA.cpp</file>
    <file>NonLocalECPotential_CUDA.h</file>
    <file>NonLocalTOperator.cpp</file>
    <file>NonLocalTOperator.h</file>
    <file>NumberFluctuations.h</file>
    <file>NumericalRadialPotential.cpp</file>
    <file>NumericalRadialPotential.h</file>
    <file>observable_helper.h</file>
    <file>OneBodyDensityMatrix.cpp</file>
    <file>OneBodyDensityMatrix.h</file>
    <file>OscillatoryPot.h</file>
    <file>PairCorrEstimator.cpp</file>
    <file>PairCorrEstimator.h</file>
    <file>PolarizationPotential.h</file>
    <file>Pressure.h</file>
    <file>PulayForce.cpp</file>
    <file>PulayForce.h</file>
    <file>QMCHamiltonian.cpp</file>
    <file>QMCHamiltonian.h</file>
    <file>QMCHamiltonianBase.h</file>
    <file>SkEstimator.cpp</file>
    <file>SkEstimator.h</file>
    <file>SkEstimator_CUDA.cpp</file>
    <file>SkEstimator_CUDA.h</file>
    <file>SkPot.cpp</file>
    <file>SkPot.h</file>
    <file>Spline3DPotential.h</file>
    <file>TriCubicSplinePotential.h</file>
    <file>VHXC.cpp</file>
    <file>VHXC.h</file>
    <file>Ylm.h</file>
    <file>ZeroVarianceForce.cpp</file>
    <file>ZeroVarianceForce.h</file>
  </compound>
  <compound kind="dir">
    <name>QMCTools</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCTools/</path>
    <filename>dir_2d300602fc73756e15a14c946ac2c28f.html</filename>
    <file>Any2Slater.h</file>
    <file>Assign.cpp</file>
    <file>CasinoParser.cpp</file>
    <file>CasinoParser.h</file>
    <file>convert4qmc.cpp</file>
    <file>densityplot.cpp</file>
    <file>ecp4qmc.cpp</file>
    <file>extract-eshdf-kvectors.cpp</file>
    <file>GamesAsciiParser.cpp</file>
    <file>GamesAsciiParser.h</file>
    <file>GamesXmlParser.cpp</file>
    <file>GamesXmlParser.h</file>
    <file>GaussianFCHKParser.cpp</file>
    <file>GaussianFCHKParser.h</file>
    <file>gemtest.cpp</file>
    <file>getSupercell.cpp</file>
    <file>gofr.cpp</file>
    <file>gto2grid.cpp</file>
    <file>GTO2GridBuilder.cpp</file>
    <file>GTO2GridBuilder.h</file>
    <file>gto2slater.cpp</file>
    <file>h5merge.cpp</file>
    <file>HDFWalkerMerger.cpp</file>
    <file>HDFWalkerMerger.h</file>
    <file>MolecularOrbitalBasis.h</file>
    <file>MSDgenerator.cpp</file>
    <file>observable.cpp</file>
    <file>PC.cpp</file>
    <file>PHDFWalkerMerger.cpp</file>
    <file>QMCGaussianParserBase.cpp</file>
    <file>QMCGaussianParserBase.h</file>
    <file>QMCUtilities.h</file>
    <file>RGFBuilderBase.cpp</file>
    <file>RGFBuilderBase.h</file>
    <file>spline.cpp</file>
    <file>spline3.cpp</file>
    <file>spline3_io.cpp</file>
    <file>STO2GridBuilder.cpp</file>
    <file>STO2GridBuilder.h</file>
    <file>ylmtest.cpp</file>
  </compound>
  <compound kind="dir">
    <name>QMCWaveFunctions</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>dir_84376b9f5af13ce0a0d649b39423cb98.html</filename>
    <dir>QMCWaveFunctions/AtomicOrbitals</dir>
    <dir>QMCWaveFunctions/ElectronGas</dir>
    <dir>QMCWaveFunctions/Fermion</dir>
    <dir>QMCWaveFunctions/Jastrow</dir>
    <dir>QMCWaveFunctions/MolecularOrbitals</dir>
    <dir>QMCWaveFunctions/PlaneWave</dir>
    <file>AFMSPOBuilder.cpp</file>
    <file>AFMSPOBuilder.h</file>
    <file>AFMSPOSet.cpp</file>
    <file>AFMSPOSet.h</file>
    <file>AGPDeterminant.cpp</file>
    <file>AGPDeterminant.h</file>
    <file>AGPDeterminantBuilder.cpp</file>
    <file>AGPDeterminantBuilder.h</file>
    <file>AtomicOrbital.cpp</file>
    <file>AtomicOrbital.h</file>
    <file>AtomicOrbitalCuda.h</file>
    <file>BasisSetBase.h</file>
    <file>BasisSetFactory.cpp</file>
    <file>BasisSetFactory.h</file>
    <file>BigEinsplineSetBuilder.cpp</file>
    <file>DiffOrbitalBase.cpp</file>
    <file>DiffOrbitalBase.h</file>
    <file>DistributedSPOSet.cpp</file>
    <file>DistributedSPOSet.h</file>
    <file>DummyBasisSet.h</file>
    <file>EinsplineAdoptor.h</file>
    <file>EinsplineOrb.cpp</file>
    <file>EinsplineOrb.h</file>
    <file>EinsplineSet.cpp</file>
    <file>EinsplineSet.h</file>
    <file>EinsplineSetBuilder.h</file>
    <file>EinsplineSetBuilder_createSPOs.cpp</file>
    <file>EinsplineSetBuilderCommon.cpp</file>
    <file>EinsplineSetBuilderESHDF.cpp</file>
    <file>EinsplineSetBuilderESHDF.fft.cpp</file>
    <file>EinsplineSetBuilderOld.cpp</file>
    <file>EinsplineSetBuilderReadBands_ESHDF.cpp</file>
    <file>EinsplineSetBuilderReadBands_ESHDF2.cpp</file>
    <file>EinsplineSetCuda.cpp</file>
    <file>EinsplineSetLocal.cpp</file>
    <file>EinsplineSetLocal.h</file>
    <file>EinsplineWrapper.cpp</file>
    <file>EinsplineWrapper.h</file>
    <file>FermionBase.cpp</file>
    <file>FermionBase.h</file>
    <file>GroupedOrbitalSet.h</file>
    <file>IonOrbital.cpp</file>
    <file>IonOrbital.h</file>
    <file>IonOrbitalBuilder.cpp</file>
    <file>IonOrbitalBuilder.h</file>
    <file>LCOrbitals.h</file>
    <file>LCOrbitalSet.h</file>
    <file>LocalizedBasisSet.h</file>
    <file>MixedSPOSet.h</file>
    <file>MuffinTin.cpp</file>
    <file>MuffinTin.h</file>
    <file>OptimizableSPOBuilder.cpp</file>
    <file>OptimizableSPOBuilder.h</file>
    <file>OptimizableSPOSet.cpp</file>
    <file>OptimizableSPOSet.h</file>
    <file>OrbitalBase.cpp</file>
    <file>OrbitalBase.h</file>
    <file>OrbitalBuilderBase.cpp</file>
    <file>OrbitalBuilderBase.h</file>
    <file>OrbitalConstraintsBase.cpp</file>
    <file>OrbitalConstraintsBase.h</file>
    <file>OrbitalSetTraits.h</file>
    <file>ProductOrbital.cpp</file>
    <file>ProductOrbital.h</file>
    <file>SparseLocalizedBasisSet.h</file>
    <file>SphericalBasisSet.h</file>
    <file>SphericalOrbitalSet.h</file>
    <file>SplineAdoptorReader.h</file>
    <file>SplineAdoptorReaderP.h</file>
    <file>SplineC2XAdoptor.cpp</file>
    <file>SplineC2XAdoptor.h</file>
    <file>SplineMixedAdoptor.cpp</file>
    <file>SplineMixedAdoptor.h</file>
    <file>SplineMixedAdoptorReader.h</file>
    <file>SplineMixedAdoptorReaderP.h</file>
    <file>SplineR2RAdoptor.cpp</file>
    <file>SplineR2RAdoptor.h</file>
    <file>SPOSetBase.cpp</file>
    <file>SPOSetBase.h</file>
    <file>TrialWaveFunction.cpp</file>
    <file>TrialWaveFunction.h</file>
    <file>TrialWaveFunction_CUDA.cpp</file>
    <file>WaveFunctionFactory.cpp</file>
    <file>WaveFunctionFactory.h</file>
  </compound>
  <compound kind="dir">
    <name>Estimators/ReptationEstimators</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Estimators/ReptationEstimators/</path>
    <filename>dir_73ce59ab341e736ed20f0b3d3e082ede.html</filename>
    <file>ReptileCorrelation.h</file>
    <file>ReptileEstimator.h</file>
    <file>ReptileStatistics.h</file>
  </compound>
  <compound kind="dir">
    <name>QMCDrivers/RMC</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/RMC/</path>
    <filename>dir_0dddccedad33908fea43962a59648a79.html</filename>
    <file>RMCFactory.cpp</file>
    <file>RMCFactory.h</file>
    <file>RMCSingleOMP.cpp</file>
    <file>RMCSingleOMP.h</file>
    <file>RMCUpdateAll.cpp</file>
    <file>RMCUpdateAll.h</file>
    <file>RMCUpdatePbyP.cpp</file>
    <file>RMCUpdatePbyP.h</file>
  </compound>
  <compound kind="dir">
    <name>Utilities</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/Utilities/</path>
    <filename>dir_b05a5fa85f84bfc9013183c9d87f9a36.html</filename>
    <file>BoostRandom.h</file>
    <file>Clock.h</file>
    <file>cuda_allocator.h</file>
    <file>IteratorUtility.h</file>
    <file>MersenneTwister.h</file>
    <file>NewTimer.cpp</file>
    <file>NewTimer.h</file>
    <file>OhmmsInfo.cpp</file>
    <file>OhmmsInfo.h</file>
    <file>OhmmsInform.cpp</file>
    <file>OhmmsInform.h</file>
    <file>OhmmsObject.cpp</file>
    <file>OhmmsObject.h</file>
    <file>OhmmsSpecies.cpp</file>
    <file>OhmmsSpecies.h</file>
    <file>PointerPool.h</file>
    <file>PooledData.h</file>
    <file>PrimeNumberSet.h</file>
    <file>ProgressReportEngine.cpp</file>
    <file>ProgressReportEngine.h</file>
    <file>RandomFunctors.h</file>
    <file>RandomGenerator.cpp</file>
    <file>RandomGenerator.h</file>
    <file>RandomGeneratorIO.h</file>
    <file>RandRandom.cpp</file>
    <file>RandRandom.h</file>
    <file>SimpleParser.cpp</file>
    <file>SimpleParser.h</file>
    <file>SimpleRandom.h</file>
    <file>SpeciesSet.cpp</file>
    <file>SpeciesSet.h</file>
    <file>SprngRandom.h</file>
    <file>Timer.h</file>
    <file>UtilityFunctions.h</file>
    <file>XMLTemplate.h</file>
  </compound>
  <compound kind="dir">
    <name>QMCDrivers/VMC</name>
    <path>/Users/ihk/svnwork/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>dir_c9d965939a9bbd962e5b25c08580cb31.html</filename>
    <file>dmc_advance.cpp</file>
    <file>vmc_advance.cpp</file>
    <file>VMC_CUDA.cpp</file>
    <file>VMC_CUDA.h</file>
    <file>VMCFactory.cpp</file>
    <file>VMCFactory.h</file>
    <file>VMCLinearOptOMP.cpp</file>
    <file>VMCLinearOptOMP.h</file>
    <file>VMCMultipleWarp.cpp</file>
    <file>VMCMultipleWarp.h</file>
    <file>VMCPbyPMultiple.cpp</file>
    <file>VMCPbyPMultiple.h</file>
    <file>VMCPbyPMultiWarp.cpp</file>
    <file>VMCPbyPMultiWarp.h</file>
    <file>VMCSingleOMP.cpp</file>
    <file>VMCSingleOMP.h</file>
    <file>VMCUpdateAll.cpp</file>
    <file>VMCUpdateAll.h</file>
    <file>VMCUpdatePbyP.cpp</file>
    <file>VMCUpdatePbyP.h</file>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>Overview</title>
    <filename>index</filename>
    <docanchor file="index" title="About Development">qmcpack_about</docanchor>
    <docanchor file="index" title="Acknowledgements">funding</docanchor>
    <docanchor file="index" title="Major changes">history</docanchor>
  </compound>
</tagfile>
